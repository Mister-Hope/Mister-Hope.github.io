{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Mr.Hope",
  "home_page_url": "https://mister-hope.com/",
  "feed_url": "https://mister-hope.com/feed.json",
  "description": "Where there is light, there is hope.",
  "favicon": "https://mister-hope.com/favicon.ico",
  "items": [
    {
      "title": "Cypress",
      "url": "https://mister-hope.com/note/node-js/cypress.html",
      "id": "https://mister-hope.com/note/node-js/cypress.html",
      "summary": "国内安装",
      "content_html": "<h2>国内安装</h2>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> CYPRESS_DOWNLOAD_PATH_TEMPLATE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'https://registry.npmmirror.com/-/binary/cypress/${version}/${platform}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">-${arch}/cypress.zip'</span></span></code></pre>\n</div>",
      "date_published": "2024-04-21T11:04:43.000Z",
      "date_modified": "2024-04-21T11:04:43.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "脑科学与课堂 以脑为导向的教学模式读书笔记",
      "url": "https://mister-hope.com/note/book/brain.html",
      "id": "https://mister-hope.com/note/book/brain.html",
      "summary": "教育者应该了解的神经与认知科学知识 教育领域中的神经迷思 我们中有些是左脑型人，有些是右脑型人 听莫扎特的音乐会让你的婴⼉更聪明 错过关键期，学习发展就会停滞 我们只用了 10% 的大脑 我们生而拥有所有的脑细胞，一生都不会改变 教育者需要了解的神经和认知科学中的重要话题 可塑性 就像肌肉会因为我们不断地锻炼而得到增强，大脑的网络连接也会因为我们的不断...",
      "content_html": "<h2>教育者应该了解的神经与认知科学知识</h2>\n<h3>教育领域中的神经迷思</h3>\n<ul>\n<li>我们中有些是左脑型人，有些是右脑型人</li>\n<li>听莫扎特的音乐会让你的婴⼉更聪明</li>\n<li>错过关键期，学习发展就会停滞</li>\n<li>我们只用了 10% 的大脑</li>\n<li>我们生而拥有所有的脑细胞，一生都不会改变</li>\n</ul>\n<h3>教育者需要了解的神经和认知科学中的重要话题</h3>\n<ul>\n<li>\n<p>可塑性</p>\n<p>就像肌肉会因为我们不断地锻炼而得到增强，大脑的网络连接也会因为我们的不断使用而增强。</p>\n</li>\n<li>\n<p>神经生成</p>\n<p>神经生成的发现，即特定脑区中新细胞的生成，代表着我们在理解人类大脑过程中的巨大突破。</p>\n</li>\n<li>\n<p>情绪和压力</p>\n<p>在生物学上，我们其实是‘会思考的感觉动物’</p>\n</li>\n<li>\n<p>学习中注意的作用</p>\n<p>警觉网络允许我们保持警觉状态朝向网络帮助我们注意到感觉事件执行网络在特定事件中维持注意需要意志努力的注意控制从幼年便于始发展一直持续到青少年时期。</p>\n</li>\n<li>\n<p>执行功能</p>\n<p>一组基本认知加工过程，强调对进行中的、目标导向任务的调控以及高级思维技巧的运用。</p>\n<p>执行功能在要求形成新颖连结、要求对信息进行灵活运用的学习情境中变得尤其重要。</p>\n</li>\n<li>\n<p>运动和学习的重要性</p>\n<p>运动可以产生心情愉悦的化学物质，也会影响个体认知发展。</p>\n</li>\n<li>\n<p>艺术与学习</p>\n<p>艺术可以改包括注意力在内的一系列认知能力，可以改变大脑结构。</p>\n</li>\n<li>\n<p>青少年、睡眠与学习</p>\n<ul>\n<li>青春期的大脑会发生改变。</li>\n<li>青少年的睡眠模式会发生改变。</li>\n</ul>\n</li>\n<li>\n<p>创造性</p>\n<p>高压力导致创造力普遍下降。</p>\n</li>\n</ul>\n<h2>脑的结构和功能</h2>\n<h3>关于脑的基本发现</h3>\n<p>人的脑看起来像核桃的形状，和西柚差不多大。脑的重量稍稍⼩于3磅，多数重量来自水 (大约78%)、脂肪 (大约10%) 和蛋⽩质 (大约8%)。脑的重量约占身体总重的 2.5%，它的能量消耗大约占全身能量消耗的20%，这个比例是其他身体器官的10倍。</p>\n<p>脑是人类神经系统的一部分，它负责接收、处理和存储信息，以协调人的行动。神经系统可以被划分为两个主要部分：中枢神经系统和外周神经系统。中枢神经系统包括脑和脊髓，外周神经系统由遍布全身的感觉和运动神经元组成。中枢神经系统就像一个指挥，负责存储和分析。</p>\n<p>从外周神经系统接收到的感觉信息，并且指挥运动和化学的反应。外周神经系统向中枢神经系统发送感觉信号，并且将中枢神经系统发出的运动信号传递给肌肉、腺体和器官。</p>\n<h3>脑细胞:神经元和神经校质细胞</h3>\n<p>脑由几千亿个细胞组成，其细胞分成两种类型：神经元和神经胶质细胞。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">神经元</p>\n<p>神经细胞，也称为神经元，通过电化学途径接收和传送信息到其他细胞</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">神经胶质细胞</p>\n<p>这些细胞被称作脑⽩质.</p>\n<ul>\n<li>为神经元提供结构⽀撑</li>\n<li>髓鞘的形成</li>\n</ul>\n</div>\n<h3>大脑的组织结构</h3>\n<p>脑有两半或者称两个半球。</p>\n<figure><figcaption>大脑的组织结构</figcaption></figure>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">间脑</p>\n<p>间脑由脑桥、延髓和⼩脑组成，被认为是进化中的人脑中最⽼的部分。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">脑桥和延髓</p>\n<p>脑桥和延髓控制自主功能，如呼吸，心跳节律，以及觉醒、睡眠等意识状态。它们控制感觉处理，包括听觉和视觉的感觉，控制脸、嘴、咽喉、呼吸系统和心脏的运动。脑桥和延髓位于脑的中线上，因而不是成对出现的。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">⼩脑</p>\n<p>尽管⼩脑体型较⼩，有时被称作“⼩大脑”，但它在脑和身体的⼯作中起重要作用。⼩脑只占据整个脑的体积的10%，却拥有大约110亿个细胞，负责控制重要的运动和感觉处理(Pinel，2000)。⼩脑对身体的平衡、姿态、行⾛和动作的协调具有核心作用。</p>\n</div>\n<h3>边缘系统</h3>\n<figure><figcaption>边缘系统</figcaption></figure>\n<p>边缘系统在间脑上方，由一组对情绪处理、学习和记忆起重要作用的结构组成吗，其结构包括丘脑、下丘脑、海马和杏仁核。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">丘脑</p>\n<p>在脑的核心有一个胡桃大⼩的结构，它的⻆色类似于交通警察，负责指挥来自各种感官(除了嗅觉)的信息流向脑的其他部分以进行进一步处理。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">下丘脑</p>\n<p>这个结构相当于一个中继站，它监视来自自主神经系统的信息。它调节身体的功能来维持动态平衡。例如，当身体的温度升高时，下丘脑将增加排汗，以降低身体的温度。下丘脑还调节内分泌系统和些情绪的处理。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">海马</p>\n<p>这个结构的形状就像大海中的海马。海马可以被想成是记忆系统中的驮马。它保存刚刚发生的记忆，并且将记忆固化到长时记忆系统中。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">杏仁核</p>\n<p>这个像杏仁形状的结构主要与情绪状态和情绪的处理有关侭管多种神经系统都参与了情绪信息的处理，海马被认为起了关键作用。海马尤其参与了我们对恐惧情境的响应。有趣的是，从外界环境中提取的感觉信息⾸先到达海马来进行情绪处理，然后才到达进行理性思考的大脑皮层。更具体地讲，海马早于大脑皮层 40 毫秒接收到刺激。这个发现说明对刺激的恐惧反应早于任何有意识的、经过思考的反应。</p>\n</div>\n<h3>大脑</h3>\n<p>大脑是脑中最大的区域，具有脑重量的80%以上。它分为两半，被称为大脑半球。左半球和右半球由一捆粗大的神经纤维束连接，这个结构称为胼胝体。胼胝体包含20亿个紧密压缩的神经元轴突，它们是两个大脑半球沟通的桥梁。在每个大脑半球内，大脑皮层被分为4个叶，每个都与特定的脑功能有关。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">枕叶</p>\n<p>枕叶位于脑的后部、接受和处理视觉刺激以及它们的属性， 包括颜色、亮度、视觉定向、空间定向和运动。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">颞叶</p>\n<p>颞叶位于耳朵附近并稍稍高于耳朵。这个脑叶是初步处理声音刺激的。左侧的颞叶包含维尔尼克区，它是处理口头语言的几个特异化脑区之一。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">顶叶</p>\n<p>顶叶位于每侧大脑半球的顶端和边缘，它负责处理诸如痛、身体位置、温度知觉、肢体位置和触觉等感觉信息。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">额叶</p>\n<p>额叶被认为是思维的中心，它包括前额叶和运动皮层。前额叶与执行功能有关联，如计划、执行有意识的行动和一致反应。运动皮层位于前额叶和顶叶之间，它含有一些大脑皮层中最大的神经元，这些神经元有长达数英尺的轴突伸向脊髓。</p>\n</div>\n<h3>大脑半球差异</h3>\n<ul>\n<li>两个半球都参与了多数任务，尽管两者的贡献通常不均等。</li>\n</ul>\n<h2>21世纪学校的以脑为导向的教学模式</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">以脑为导向的教学模式总览</p>\n<ul>\n<li>\n<p>脑目标1: 为学习营造情绪氛围</p>\n<p>积极的情绪也同样被证实能提升我们的学习成绩。</p>\n</li>\n<li>\n<p>脑目标2: 为学习创造良好的物理环境</p>\n<p>新异刺激能吸引学生们的注意。</p>\n</li>\n<li>\n<p>脑目标3: 设计学习体验</p>\n<p>知识是通过整体的理解和宏观的概念去组织的。</p>\n</li>\n<li>\n<p>脑目标4: 教授掌握内容、技能和概念</p>\n<p>认知科学和心理学的研究揭示了影响长时记忆的各种操作。</p>\n</li>\n<li>\n<p>脑目标5: 教授知识的扩展和应用</p>\n<p>21世纪学习的标志就是展示出创造性及创新性思维的能力。</p>\n</li>\n<li>\n<p>脑目标6: 评估学习</p>\n<p>持续性评估能增强学习和记忆。</p>\n</li>\n</ul>\n</div>\n<h2>脑-目标1 为学习营造情绪氛围</h2>\n<p>BTT模式中，教师通过两个层面来考量情绪氛围。第一、营造班级的基本氛围，从开学的第一天开始追求一种快乐的、充满创造性并且安全的学习环境。第二，有目的地在一个学习计划中设计活动，让学生与内容建立情感连结”，使这一单元与学生自身具有更多联系、更有意义。</p>\n<ul>\n<li>\n<p>构成情绪的神经系统</p>\n<p>边缘系统</p>\n</li>\n<li>\n<p>我们如何感知恐惧与威胁</p>\n</li>\n<li>\n<p>压力对学习的影响</p>\n<p>压力和学校环境：拥有高焦虑水平的学生的皮质醇水平很高。当观察到学生的行为问题时，应立即施以适当的⼲预措施。</p>\n<p>压力在行为与生理上对学习会产生影响，我们最应该优先考虑的是如何创造一种学校氛围，促发积极的学习⽓氛。教师应该认真检测“情绪量表”，测定对学生来说是什么触发了压力。</p>\n</li>\n<li>\n<p>积极情绪的影响</p>\n<p>负性情绪对学习有不利的影响，积极情绪同样也会对学习有有利的影响。</p>\n<p>在设定学习的情绪氛围时，另外一个很重要的需要考虑的因素是学习动机，这是因人而异的。</p>\n</li>\n<li>\n<p>情绪与青少年</p>\n<p>同龄人取代了成人的地位，成为青春期孩子认同的重要来源，冒险和寻求刺激的行为在青少年进⼊成年初期时开始增加。</p>\n<p>科技的便利增加了人类在晚上的社交机会，这导致生理性的改变，大家越睡越迟，青少年有睡眠被剥夺的危险。而缺乏睡眠会产生情绪、认知和生理健康的问题。</p>\n</li>\n</ul>\n<h3>脑目标1的实施: 营造学习的情绪 氛围</h3>\n<p>脑目标1包含如下的目标:</p>\n<ol>\n<li>创建和重温能提升积极情绪的活动</li>\n<li>设计活动，让学生与课程内容或者技能建立情感连结。</li>\n</ol>\n<h4>营造积极的学习氛围的策略</h4>\n<ul>\n<li>\n<p>积极语言: 表扬和含蓄的命令</p>\n<p>研究告诉我们，比起笼统性的表扬对具体行为的表扬对巩固和塑造行为更为有效。</p>\n<p>对努力的积极评价 (比如，你一定是付出了很多努力来完成这项任务)比对能力的赞美(你很聪明，完成这项⼯作没问题)更有效。</p>\n<p>应避免使用“含蓄的命令”。</p>\n</li>\n<li>\n<p>可预测性: 课堂日常规程、仪式和庆祝</p>\n</li>\n<li>\n<p>情绪事件: 投⼊与脱离</p>\n</li>\n<li>\n<p>测试情绪的温度</p>\n</li>\n<li>\n<p>学校与养育者的连结</p>\n</li>\n<li>\n<p>控制与选择</p>\n</li>\n<li>\n<p>社会性与情绪学习</p>\n</li>\n<li>\n<p>反思和正念训练</p>\n</li>\n<li>\n<p>幽默</p>\n</li>\n<li>\n<p>沉浸于艺术</p>\n</li>\n</ul>\n<h4>建立学习目标与客观事物的情感连结</h4>\n<h2>脑目标2 为学习创造良好的物理环境</h2>\n<p>环境对于学生学习的影响是显著的。</p>\n<ul>\n<li>\n<p>新异性</p>\n<p>觉醒网络使学生专注于当前的任务，定向网络使注意集中于外界的事件，而不是内在的想法，执行注意网络抑制无关的想法。其中背后的一个主要观点就是脑的注意系统会处理它接收到更有用的和更有吸引力的信息。这样当环境中发生变化，产生新异性的时候，大脑接收到的信息变得丰富了，学生的注意被吸引了，并且学生对内容的记忆能力提高了。因此基于新异性的考虑，特别花出一些时间，有目的的改变，学生身处的物理环境是值得的，这样能够抓仅学生的注意。</p>\n</li>\n</ul>\n<p>环境特征对注意和学习有显著影响。</p>\n<ul>\n<li>\n<p>教室的照明与窗外的景色。</p>\n<p>教室的照明能够使学生更加专注，这是因为如果房间缺乏照明的话，会影响松果体合成褪黑激素的活动，这样会使得学生更加疲倦。同时，其他研究也证实了充足且合理的教室照明，可以影响学生的注意和情绪而教室中的窗户能够向学生们提供一种必需的软注意。这种软注意消耗更少的认知资源。</p>\n</li>\n<li>\n<p>学习环境中的声音。</p>\n<p>现有研究证明，环境中的声音会对认知处理进行干扰，对于学校来说，这包括电灯，暖风，空调，音响，电脑噪声，楼道，其他教室以及室外。研究证实，如果这些噪声过大，那么暴露在这些典型环境，噪声中的青少年会在信息回忆和再认任务中表现显著变差。另外关于背景音乐也需要特别注意，即使是很轻松的音乐，也可能会成为一种干扰。对教师来说，可以通过播放背景音乐来使学生达到放松的目的，或者播放一些自然声音的录音，比如海浪瀑布，鸟鸣，海鸥叫声或海豚的声音。这些白噪声能够平衡学生的思绪。缓解学生的焦虑与暴躁感。</p>\n</li>\n<li>\n<p>教室中的气味。</p>\n<p>气味很特殊的原因是因为它是唯一一个绕过丘脑而直接输入到脑的边缘系统的感官信息，由于它可以直接被情绪和记忆相关的脑结构处理，因此气味通常会产生生动的记忆。现有研究已经证实了气味可以影响情绪和表现，因此我们可以在教学中试着提供一种环境要素来增强学生的注意和记忆。</p>\n</li>\n<li>\n<p>运动对注意的作用。</p>\n<p>运动根植于我们的生物基础，并且强烈影响我们的认知；运动的肌肉也会在血液中产生影响学习的蛋白质。从这点来看，保障学生的体育教育和休息时间的体育运动是重要的，同时也要加强对学生身体素质的关注。</p>\n</li>\n<li>\n<p>教室中的秩序与美。</p>\n<p>学生能够在整洁的环境中达到更好的学习效果，因为他们能够在这些环境中得到舒适感与归属感，影响他们在学习中的注意和参与感。</p>\n</li>\n</ul>\n<h2>脑目标3 设计学习体验。</h2>\n<p>当学生在学习中可以得到一个更宽广的视野或者是一个整体图的时候，他们能够更好地理解以前的知识与新知识的联系，并且能够更好地体会到学习目标之间的关系，这和大脑的习性是一致的，因为大脑总是寻求最近出现的想法与存储在记忆中信息之间的相似模式与关联。因此在教学，我们应该为学生呈现一种整体的学习图式，并且要确定我们的学习内容，学生已经拥有相关的知识基础。</p>\n<p>随着年龄的增长，现有教学的学生会更多从整体上进行识别，这被称为整体思维。因此我们首先要为学生建立所学内容的整体图景，在这个环节中组织图尤其是思维导图是一个很好的工具。并且通过设计活动使学生充分参与学习，并最终长期记忆相关内容，同时我们还要建立合理的评估环节来对学生的表现进行评估。</p>\n<h2>脑目标4 教授掌握内容、技能和概念。</h2>\n<p>掌握知识是很重要的，但学会思考也是教授的另一要点。在教授知识的同时，我们也应该培养学生利用知识解决其他问题的能力。</p>\n<h3>学习与记忆</h3>\n<p>学习是对新信息的掌握习得而既允许信息在存储一段时间后唤醒提取。一个广泛熟知的理论叫记忆加工理论。</p>\n<p>记忆并不是一个存储信息的容器，而是一个具有多功能系统和加工过程的组合。记忆大致可以分为三种，一种是感觉信息的记忆，第2种是短时记忆和工作机，第3种是长时记忆。</p>\n<p>感觉记忆的持续时间是数毫秒至数秒，指人的五官与感受器获得的信息。获得这些信息之后，大脑会过滤掉99%的信息，因为他们无关紧要。但是这些信息会有暂留现象，我们可以在一小段时间之内进行提取，比如尽管我们并没有主动聆听，但是我们通常可以重复刚刚听到的画中的最后的部分。</p>\n<p>短时记忆和工作记忆。类似，但是其概念是不同的。短时记忆指对刺激信息存储约20秒的暂时阶段，而工作记忆存在于个体的意识层面，可以通过运算或其他方式来处理信息。工作记忆有三个部分，接收信息，词汇信息与视觉空间信息。工作记忆是存在局限的，导致了人的信息加工容量是有限的。</p>\n<p>长时记忆指对记忆的存储可以达到很长时间，分为外显记忆和内隐藏记忆。外显记忆均可描述陈述性记忆，主要描绘知识。情景记忆主要包括对过去的回忆。其主要原因是。人不能像摄像机一样完整记录发生过事情的所有情况，只会记住事情的关键信息来重建体验，这会导致细节上的改变或不准确性。内隐记忆。主要指无需意识就产生学习的体验与经验。一个重要的组成部分就是程序性记忆，它使得我们不用仔细思考，就能够做事。以骑车为例，尽管我们在学习中会通过模仿他人或通过指导来了解如何进行骑车，但经过反复练习后这些骑车的动作会直接存储在我们的记忆中。我们在骑车时并不需要仔细的思考。程序性记忆在教学中是重要的。</p>\n<p>日常生活中，我们的这些不同记忆系统会交替性地进行工作。</p>\n<h3>学习与记忆的生物机理</h3>\n<p>当成群的神经元组同时活跃的产生信号时，神经元之间的连接得到增强。这种神经回路的重复激活，可以使他们以廉洁的形式连合成一起，从而形成系痕迹或印迹的创建。同时这些联结被使用的次数越多，连接越牢固，那么记忆存储的时间越长久，也更容易被提取。生理学已经证明短时记忆系统和长时记忆系统是独立的，它们涉及的脑部区域不同，同时也执行不同的功能。</p>\n<h2>脑目标5 教授知识的扩展和应用</h2>\n<p>对于学生来说，从教材中获得连续的、书面性的分析性思维模式是必要的，但是这并不是我们的唯一目标。我们应该给予其充分展现创造性的机会，并且在销售过程中要帮助他们发展和培养创新性的思维。这在各个年龄段的教学，甚至是高等教育中都是需要的。</p>\n<p>我们应该鼓励通过提升创造性和革新的思维，对知识加以延展和应用。研究证明在接触更多其他人的观点之后，一个人在头脑风暴中产生新想法的能力会提高，并且如果一个人总去考虑如何实施方案使他们也能想出更多的办法。这里有一个常见误解，也就是创造性创新思维和问题解决技能是有才华人的天赋只有高智商或天赋异禀人才能拥有，但实则并不然。对于授课方式来讲，我们应该更多着重于提供促进发散性思维的活动，因为这样能够引导学生思考并改善他们解决问题的能力，而不是使用求同思维，鼓励学生发现唯一正确的问题解决方案。</p>\n<p>另外创造力并不等于智力，创造性本质上也不是天生的，它能够通过教学传授。现有研究证明参与创造性活动，能够让大脑在认知测验中发生一系列的变化，比如改变脑容量、改善功能。</p>\n<h3>高级思维与创造力</h3>\n<p>涉及创造性思维的脑区，特别是发射性思维，主要包括前额叶皮层区域，这个区域经常与高阶认知与执行功能关联。特点是通过使用工作记忆的能力去计划、组织行动和参与问题解决及抽象思维。在认知加工中高级的创造性思维经常有别于传统的思维，因为它部分依赖于发散思维。</p>\n<p>研究表明，顿悟是一种对复杂情景很深刻的突然理解。顿悟的瞬间经常会伴随着对传统假释的突破和信息之间的一般关联，这样有助于产生新异的问题解决办法。另外其他研究证实即兴创作可以提高创新和创造性问题解决。</p>\n<h3>教师该做的</h3>\n<p>在掌握某些领域的知识之后，个体能通过不同的方式重新组合已经学过的知识内容，从而找到解决问题的新办法。教育并不是二元化的教授知识和内容或教授批判性思维技巧。没有坚实的知识和技能做基础学生也并不可能在现实生活情境中创造性的应用知识，所以应该同时培养学生具有创造性思维的能力，以及让他们掌握多学科领域的知识语思维技能。</p>\n<p>对于教师，在传授知识之外，应该更多的引导学生参与活动，引导学生思考，改变对唯一正确答案的过度寻求，不要使用一种方法解决一个问题。这些活动应该能够激发发散性思维，也就是产生新的不同方向自由流动的想法。但这种改变是困难的，因为从学生入学开始，他们就被教育，要有逻辑的思考并在考试中回答标准答案，但我们应该让学生深刻体会在世界中，绝大部分问题是没有唯一正确答案的。国家政策、教师培训和学校实践都应该支持教师设计并实施能够提升创新性和学生参与度的教学。</p>\n<h3>活动类型举例</h3>\n<ul>\n<li>引导研究和调查</li>\n<li>通过设计需要跨学科思考的任务来引导，以问题为导向的学习</li>\n<li>生成多种问题的解决方案</li>\n<li>设计实验来验证假说建立以项目为基础的学习模式</li>\n<li>分析历史人物或文学角色的观点</li>\n<li>创造项目以开发多维度的艺术性任务</li>\n<li>询问新奇的，并拥有很多答案的问题</li>\n<li>与某个问题不常见的方面连接引发某种信息的答案</li>\n<li>用隐喻和类比来解释概念</li>\n<li>讨论开放性结尾的问题，探索假设、澄清概念以及因果关系</li>\n<li>允许学生定期反思自己的学习目标</li>\n<li>从不同角度重新表述一个问题</li>\n<li>用视觉呈现的方式将解决办法图表化</li>\n<li>用故事和叙述的方式来解释概念</li>\n<li>在班级内和更广泛的学习环境中展开小组合作的学习活动</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">总结</p>\n<p>高质量的课堂教学，需要学生成为富有革新精神和创造性的思考者。脑科学的表明研究这种类型的思考需要参与加工的脑区与支持其他类型思考的脑区是不一样的；可塑性的研究告诉我们，不断重复的经历能够塑造我们的大脑。</p>\n</div>\n<h2>脑目标6 评估学习</h2>\n<h3>评估促进学习</h3>\n<p>研究证实评估提供的反馈，能够告诉和激励学生，并以独特的方式增强他们对内容的记忆。这主要基于3点，第1点是他能给学生提供有效的反馈促进学习，第2点是它能使学生主动地回复信息，第三是间隔特定时间，对相同内容进行多次有益间隔评估，能够进一步增强记忆。</p>\n<p>对于效果来说，去解释答案为什么是正确或错误的，或者是持续完成任务，直到正确时，反馈的效果是最强的。单纯提供判断正误的任务，并不能够给予任何反馈。另外在进行评估的过程中，应该提供渐进式的提示，而不是直接提供政治性的答案，这样这种反馈可以成为有效的支架。另外有效的反馈也取决于时间和学生的时间知觉。如果一个学生很快就能收到反馈，那么他会表现得比更长时间收到反馈更好。另外学生并不能够从只能获知正确率的模拟考试和标准考试中获益。因此我们应该在学生错误时保证他们关注正确答案并学习正确答案，我们要确保他们得到及时的反馈，事先告知学生，他们会获得反馈，提供渐进式的反馈，并让学生继续完成学习内容，直至他们理解学习内容。</p>\n<p>关于长期记忆的保持，主动从记忆中提取信息，比单纯的学习更有帮助。因此，我们应该鼓励学生通过在练习和自我提问中受益，并让学生理解这一点。如果我们仅把测试当成一种测量学习的方式，那么是失职的。</p>\n<p>研究也证实，在学习活动中加入间隔能够更好的完成学习任务，因此我们应该重视对学过内容的复习，具体说来是我们应该间隔一段时间之后，引导他们复习之前学过的内容，并测试这些知识。</p>\n<h3>多种形式评估</h3>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">档案袋评价</p>\n<p>档案袋是一种展示学习进步能力的有力工具，并且这种可见的进步能够给学生和教师巨大的鼓励。\n蛋蛋评价也能促进元认知，允许学生自己设定学习目标，然后追踪进展。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">学生日志</p>\n<p>学生创建反思日记记录，是为了思考他们学到的内容，以相对自由的方式探索他们与其他内容的潜在联系，并将他们应用到生活中。反思日记的写作能够促进元认知促进在学习任务中使用更复杂的认知策略。在反思日记中的一个关键是我们要促进学生进行批判性思考，而不是只对事件进行描述性记录，学生很容易陷入描述性记录并且只能从中获得很小的帮助。\n学习日记也能提供其他帮助，其目标是让学生清晰地叙述他们在教学后理解的重要知识点。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">表现性评估</p>\n<p>主要通过学生在各种活动中的表现来考察学生运用知识的能力。</p>\n</div>\n<h3>在学校和课堂中实施引导导向的教学模式</h3>\n<p>应获得来自学校领导的支持，仔细研究教案并获得以下成果</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">脑目标1——学习的情绪氛围</p>\n<ul>\n<li>成人——包括教师、后勤人员和领导—与学生之间的对话展现出相互尊重。</li>\n<li>随时表扬针对某种行为的努力。</li>\n<li>当学生进入教室时，教师在门口与他们打招呼。教师叫出每个学生的名字，与他们进行愉快的对话。</li>\n<li>课堂常规是明确且公平实施的规则，关注尊重和消除任何形式的欺凌。</li>\n<li>各类仪式都是令人愉快的，目的是激发和调动学生的参与。</li>\n<li>整个学校和每节课上随处可见称赞。</li>\n<li>每个孩子都能在校园内和课堂上得到成人的关心。</li>\n<li>校园和课堂上随处可见多元主题。</li>\n<li>每个学习单元都包括一些培养个人情感与学科内容连结的活动。</li>\n<li>学生有权选择学习活动和评估活动。</li>\n<li>为了营造一个让人放松的环境，常常在恰当的时候使用幽默。</li>\n</ul>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">脑目标2——物理环境</p>\n<ul>\n<li>学校大厅、会议室和教室整洁有序。</li>\n<li>教室陈列反映了当前的学习单元，展示的是学生们的作品而非商品。</li>\n<li>整个校园的所有教室有最佳的灯光和声音。</li>\n<li>座位安排灵活，留出活动空间。</li>\n<li>合适的时候教室里放着轻音乐，充满适意的芳香。</li>\n<li>有可安静思考的时间。</li>\n</ul>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">脑目标3——设计学习体验</p>\n<ul>\n<li>课程计划中有学科内容标准;范围是多学科的;每个年级的课程计划在重要的学科内容、技能和概念方面逐步推进。</li>\n<li>学生的学习目标明确。</li>\n<li>概念图和其他视觉图示随处可见。</li>\n<li>年级内部及年级之间的协同规划是每周的常规安排之一。</li>\n<li>有持续的专业发展、辅导和训练来支持课程和教育决策。</li>\n<li>学习目标和活动对家长和社区也是开放的，开放途径多样化，包括概念图示。</li>\n<li>教师在一个专业的图书馆分享学习单元。</li>\n</ul>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">脑目标4——教授掌握内容、技能和概念</p>\n<ul>\n<li>具体的活动提供了许多经历来强化学习。</li>\n<li>视觉艺术和行为艺术在教学活动中随处可见。</li>\n<li>活动反映出需要改进的地方，也可以从中发现出色的学生。</li>\n<li>教室内和走廊上的学生作品展示了艺术项目的成果，反映了学生对内容的掌握。</li>\n<li>标准评估和其他测试项目记录了学生对学科内容、技能和概念的掌握。</li>\n<li>学习活动建立在先验知识上。</li>\n<li>家庭作业和户外活动强化学习目标。</li>\n</ul>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">脑目标5—教授知识的扩展和应用:教育中的创造力和创新性</p>\n<p>在课堂讨论、课堂活动和项目中鼓励学生发散思维。\n课堂活动和学习项目中可见到批判性思维和问题解决的活动。\n将学科内容应用到真实世界的活动会纳入每个学习单元。\n通过新项目、作业和操作性任务，学生有各种拓展知识和展示创造性思维的机会。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">脑目标6—评估学习</p>\n<ul>\n<li>整个课程中都有对学习目标的评估。</li>\n<li>学生们常有主动提取信息的机会。</li>\n<li>及时对学生的表现给予反馈，并提前通知他们何时会有反馈。</li>\n<li>给学生们提供支架式反馈，让他们能自己获得正确答案。</li>\n<li>给学生建立档案，描述他们的学习成就。</li>\n<li>间隔进行的评估促使学生对学科内容的常规回顾。</li>\n<li>自由地使用整体性量规和分析性量规来评估学习。</li>\n</ul>\n</div>\n",
      "date_published": "2024-04-01T00:00:00.000Z",
      "date_modified": "2024-04-07T01:42:21.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Windows 开发",
      "url": "https://mister-hope.com/code/windows/developers.html",
      "id": "https://mister-hope.com/code/windows/developers.html",
      "summary": "本文主要介绍 Windows 11 系统下，与开发相关的功能。 WSL WSL 是 Windows Subsystem for Linux 的缩写，即 Windows 的 Linux 子系统。Windows 11 支持 WSL2，同时支持 wslg，即 WSL 图形化。 你可以很方便的启用 Windows For Linux 子系统，然后在 Windo...",
      "content_html": "<p>本文主要介绍 Windows 11 系统下，与开发相关的功能。</p>\n<h2>WSL</h2>\n<p>WSL 是 Windows Subsystem for Linux 的缩写，即 Windows 的 Linux 子系统。Windows 11 支持 WSL2，同时支持 wslg，即 WSL 图形化。</p>\n<p>你可以很方便的启用 Windows For Linux 子系统，然后在 Windows 11 上安装 Linux 发行版，如 Ubuntu、Debian、Kali 等，然后在 Linux 环境下进行开发，同时启用 wslg，即可在 Windows 11 上使用 Linux 图形化应用如 Firefox 等进行调试。</p>\n<h3>安装 WSL</h3>\n<p>你可以使用单个命令安装运行 WSL 所需的一切内容。 在管理员模式下打开 PowerShell 或 Windows 命令提示符，方法是右键单击并选择“以管理员身份运行”，输入 <code>wsl --install</code> 命令，然后重启计算机。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>有关 WSL 的详细内容，详见 <a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/\" target=\"_blank\" rel=\"noopener noreferrer\">WSL 官方文档</a>。</p>\n</div>\n<h2>WSA</h2>\n<p>WSA 是 Windows Subsystem for Android 的缩写，即 Windows 的 Android 子系统。Windows 11 支持 WSA，你可以在 Windows 11 上安装 Android 应用，如微信、QQ、抖音等，然后在 Windows 11 上使用。</p>\n<p>默认情况下，你只能通过 WSA 内置的 Amazon 应用商店安装应用，但是你可以打开开发者模式通过 adb 安装任意应用的 APK。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>有关 WSA 的详细内容，详见 <a href=\"https://learn.microsoft.com/zh-cn/windows/android/wsa/\" target=\"_blank\" rel=\"noopener noreferrer\">WSA 官方文档</a>。</p>\n</div>\n<h2>Windows 终端</h2>\n<p>Windows 终端是一个新式主机应用程序，它面向你喜爱的命令行 shell，如命令提示符、PowerShell 和 bash（通过适用于 Linux 的 Windows 子系统 (WSL)）。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，你还可用它来创建你自己的主题并自定义文本、颜色、背景和快捷方式。</p>\n<p>更多内容详见 <a href=\"/software/tool/terminal/\" target=\"_blank\">软件 → Windows 终端</a>。</p>\n<h2>PowerToys</h2>\n<p>Microsoft PowerToys 是一组实用工具，可帮助高级用户调整和简化其 Windows 体验，从而提高工作效率。</p>\n<p>更多内容详见 <a href=\"/software/tool/power-toys.html\" target=\"_blank\">软件 → PowerToys</a>。</p>\n",
      "date_published": "2024-01-26T00:00:00.000Z",
      "date_modified": "2024-04-07T05:21:25.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "Windows 版本",
      "url": "https://mister-hope.com/code/windows/version.html",
      "id": "https://mister-hope.com/code/windows/version.html",
      "summary": "简介 Microsoft Windows 操作系统是美国微软公司研发的一套操作系统，它问世于 1985 年，起初仅仅是 Microsoft-DOS 模拟环境，后续的系统版本由于微软不断的更新升级，不但易用，也当前应用最广泛的操作系统。 Windows 采用了图形化模式 GUI，比起从前的 DOS 需要输入指令使用的方式，更为人性化。随着计算机硬件和软件...",
      "content_html": "<h2>简介</h2>\n<p>Microsoft Windows 操作系统是美国微软公司研发的一套操作系统，它问世于 1985 年，起初仅仅是 Microsoft-DOS 模拟环境，后续的系统版本由于微软不断的更新升级，不但易用，也当前应用最广泛的操作系统。</p>\n<p>Windows 采用了图形化模式 GUI，比起从前的 DOS 需要输入指令使用的方式，更为人性化。随着计算机硬件和软件的不断升级，微软的 Windows也在不断升级，从架构的16位、32位再到64位,系统版本从最初的 Windows1.0到大家熟知的 Windows95、 Windows98、 Windows2000、 Windows XP、 Windows Vista、 Windows7、Windows8、Windows8.1、Windows10、Windows11 和 Windows Server 服务器企业级操作系统，不断持续更新.</p>\n<p>目前，最新的消费者版本是 Windows 11。</p>\n",
      "date_published": "2024-01-26T00:00:00.000Z",
      "date_modified": "2024-04-07T05:21:25.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "创建 Vue 应用",
      "url": "https://mister-hope.com/code/vue/core/app.html",
      "id": "https://mister-hope.com/code/vue/core/app.html",
      "summary": "应用实例 每个 Vue 应用都是通过 createApp 函数创建一个新的应用实例： 根组件 我们传入 createApp 的对象实际上是一个组件，每个应用都需要一个“根组件”，其他组件将作为其子组件。 如果你使用的是单文件组件，我们可以直接从另一个文件中导入根组件。 虽然许多示例只需要一个组件，但大多数真实的应用都是由一棵嵌套的、可重用的组件树组成的...",
      "content_html": "<h2>应用实例</h2>\n<p>每个 Vue 应用都是通过 <code>createApp</code> 函数创建一个新的<strong>应用实例</strong>：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"vue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> app</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /* 根组件选项 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><h2>根组件</h2>\n<p>我们传入 <code>createApp</code> 的对象实际上是一个组件，每个应用都需要一个“根组件”，其他组件将作为其子组件。</p>\n<p>如果你使用的是单文件组件，我们可以直接从另一个文件中导入根组件。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"vue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 从一个单文件组件中导入根组件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> App</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"./App.vue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> app</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">App</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>虽然许多示例只需要一个组件，但大多数真实的应用都是由一棵嵌套的、可重用的组件树组成的。例如，一个待办事项 (Todos) 应用的组件树可能是这样的：</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>App (root component)</span></span>\n<span class=\"line\"><span>├─ TodoList</span></span>\n<span class=\"line\"><span>│  └─ TodoItem</span></span>\n<span class=\"line\"><span>│     ├─ TodoDeleteButton</span></span>\n<span class=\"line\"><span>│     └─ TodoEditButton</span></span>\n<span class=\"line\"><span>└─ TodoFooter</span></span>\n<span class=\"line\"><span>   ├─ TodoClearButton</span></span>\n<span class=\"line\"><span>   └─ TodoStatistics</span></span></code></pre>\n</div><h2>挂载应用</h2>\n<p>应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"app\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">app</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#app\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>应用根组件的内容将会被渲染在容器元素里面。容器元素自己将不会被视为应用的一部分。</p>\n<p><code>.mount()</code> 方法应该始终在整个应用配置和资源注册完成后被调用。同时请注意，不同于其他资源注册方法，它的返回值是根组件实例而非应用实例。</p>\n<h3>DOM 中的根组件模板</h3>\n<p>当在未采用构建流程的情况下使用 Vue 时，我们可以在挂载容器中直接书写根组件模板：</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"app\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> @click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"count++\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;{{ count }}&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> } </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"vue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> app</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  data</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      count</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    };</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">app</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#app\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>当根组件没有设置 <code>template</code> 选项时，Vue 将自动使用容器的 <code>innerHTML</code> 作为模板。</p>\n</div>\n<h2>应用配置</h2>\n<p>应用实例会暴露一个 <code>.config</code> 对象允许我们配置一些应用级的选项，例如定义一个应用级的错误处理器，用来捕获所有子组件上的错误：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">app</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">config</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">errorHandler</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">err</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /* 处理错误 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>应用实例还提供了一些方法来注册应用范围内可用的资源，例如注册一个组件：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">app</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"TodoDeleteButton\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">TodoDeleteButton</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>这使得 <code>TodoDeleteButton</code> 在应用的任何地方都是可用的。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>确保在挂载应用实例之前完成所有应用配置！</p>\n</div>\n<h2>多个应用实例</h2>\n<p>应用实例并不只限于一个。<code>createApp</code> API 允许你在同一个页面中创建多个共存的 Vue 应用，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> app1</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /* ... */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">app1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#container-1\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> app2</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> createApp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /* ... */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">app2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">mount</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#container-2\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n</div><p>如果你正在使用 Vue 来增强服务端渲染 HTML，并且只想要 Vue 去控制一个大型页面中特殊的一小部分，应避免将一个单独的 Vue 应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p>\n",
      "date_published": "2023-02-26T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "开发环境安装",
      "url": "https://mister-hope.com/code/vue/core/install.html",
      "id": "https://mister-hope.com/code/vue/core/install.html",
      "summary": "环境准备 VS Code 安装 开发指南 使用 VS Code 打开项目文件夹。 提示 请打开 VS Code 选择菜单栏中的 “文件-打开文件夹”，或在文件夹上 “右键——使用 VS Code 打开” 或在文件夹内部空白处 “右键——使用 VS Code 打开”。 打开终端(快捷键 Ctrl + ` )。 在终端中输入相关指令即可执行相关功能。 Gi...",
      "content_html": "<h2>环境准备</h2>\n<h3>VS Code 安装</h3>\n<ul>\n<li><a href=\"/software/vscode/install.html\" target=\"_blank\">安装 VS Code</a></li>\n</ul>\n<h4>开发指南</h4>\n<ol>\n<li>\n<p>使用 VS Code 打开项目文件夹。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>请打开 VS Code 选择菜单栏中的 “文件-打开文件夹”，或在文件夹上 “右键——使用 VS Code 打开” 或在文件夹内部空白处 “右键——使用 VS Code 打开”。</p>\n</div>\n</li>\n<li>\n<p>打开终端(快捷键 <code>Ctrl + `</code> )。</p>\n</li>\n<li>\n<p>在终端中输入相关指令即可执行相关功能。</p>\n</li>\n</ol>\n<h3>Git 安装</h3>\n<ul>\n<li><a href=\"/software/git/install.html\" target=\"_blank\">安装 Git</a></li>\n</ul>\n<h3>Node.js 环境安装</h3>\n<p>请先安装 Node.js 并将 npm 与 Node.js 添加至 path。</p>\n<ul>\n<li>\n<p><a href=\"/code/node-js/install.html\" target=\"_blank\">安装 Node.js</a></p>\n</li>\n<li>\n<p><a href=\"/code/windows/env-variable.html\" target=\"_blank\">添加到 path</a></p>\n</li>\n</ul>\n<h2>开发工具安装</h2>\n<p>Vue 官方提供的浏览器插件 Vue.js devtools 可以更好的帮助开发。</p>\n<ul>\n<li>用 Chrome 通过代理打开 <a href=\"https://chrome.google.com/webstore/detail/nhdogjmejiglipccpnnnanhbledajbpd\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js devtools 网址</a>，安装 Vue.js devtools 开发工具</li>\n<li>使用 Edge 打开 <a href=\"https://microsoftedge.microsoft.com/addons/detail/vuejs-devtools/olofadcdnkkjdfgjcmjaadnlehnnihnl?hl=zh-CN\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js devtools 网址</a>，安装 Vue.js devtools 开发工具</li>\n</ul>\n",
      "date_published": "2023-02-26T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "模板语法",
      "url": "https://mister-hope.com/code/vue/core/template.html",
      "id": "https://mister-hope.com/code/vue/core/template.html",
      "summary": "Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。 在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的...",
      "content_html": "<p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>\n<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>\n<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>\n<h2>文本插值</h2>\n<p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Message: {{ msg }}&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>双大括号标签会被替换为相应组件实例中 <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p>\n<h2>原始 HTML</h2>\n<p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 <code>v-html</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Using text interpolation: {{ rawHtml }}&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Using v-html directive: &lt;span v-html=\"rawHtml\"&gt;&lt;/span&gt;&lt;/p&gt;</span></span></code></pre>\n</div><p>Using text interpolation: {{ rawHtml }}</p>\n<p>Using v-html directive: <span v-html=\"rawHtml\"></span></p>\n<p>这里我们遇到了一个新的概念。这里看到的 <code>v-html</code> attribute 被称为一个指令。指令由 <code>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code>rawHtml</code> 属性保持同步。</p>\n<p><code>span</code> 的内容将会被替换为 <code>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。</p>\n<div class=\"hint-container note\">\n<p class=\"hint-container-title\">注</p>\n<p>你不能使用 <code>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">安全警告</p>\n<p>在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 <code>v-html</code>，并且永远不要使用用户提供的 HTML 内容。</p>\n</div>\n<h2>Attribute 绑定</h2>\n<p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 <code>v-bind</code> 指令：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute 与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p>\n<h3>简写</h3>\n<p>因为 <code>v-bind</code> 非常常用，我们提供了特定的简写语法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">dynamicId</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>开头为 <code>:</code> 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。</p>\n<p>接下来的指引中，我们都将在示例中使用简写语法，因为这是在实际开发中更常见的用法。</p>\n<h3>布尔型 Attribute</h3>\n<p>布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。</p>\n<p><code>v-bind</code> 在这种场景下的行为略有不同：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">disabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">isButtonDisabled</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Button&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>当 <code>isButtonDisabled</code> 为真值或一个空字符串 (即 <code>&lt;button disabled=\"\"&gt;</code>) 时，元素会包含这个 <code>disabled</code> attribute。而当其为其他假值时 attribute 将被忽略。</p>\n<h3>动态绑定多个值</h3>\n<p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> objectOfAttrs</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  id</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"container\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  class</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"wrapper\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">objectOfAttrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><h2>使用 JavaScript 表达式</h2>\n<p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ number + 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ ok ? \"YES\" : \"NO\" }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ message.split(\"\").reverse().join(\"\") }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`list-</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">${</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">id</span><span style=\"--shiki-light:#CA1243;--shiki-dark:#C678DD\">}</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p>\n<p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p>\n<ul>\n<li>在文本插值中 (双大括号)</li>\n<li>在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</li>\n</ul>\n<h3>仅支持表达式</h3>\n<p>每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 return 后面。</p>\n<p>因此，下面的例子都是无效的：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 这是一个语句，而非表达式 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ var a = 1 }}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ if (ok) { return message } }}</span></span></code></pre>\n</div><h3>调用函数</h3>\n<p>可以在绑定的表达式中使用一个组件暴露的方法：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">toTitleDate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">date</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{{ formatDate(date) }}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。</p>\n</div>\n<h3>受限的全局访问</h3>\n<p>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 <code>Math</code> 和 <code>Date</code>。</p>\n<p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 <code>app.config.globalProperties</code> 上显式地添加它们，供所有的 Vue 表达式使用。</p>\n<h2>指令 Directives</h2>\n<p>指令是带有 <code>v-</code> 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面我们所介绍的 <code>v-bind</code> 和 <code>v-html</code>。</p>\n<p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 <code>v-for</code>、<code>v-on</code> 和 <code>v-slot</code>)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 <code>v-if</code> 为例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> v-if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">seen</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Now you see me&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 <code>&lt;p&gt;</code> 元素。</p>\n<h3>参数 Arguments</h3>\n<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 简写 --&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>这里 href 就是一个参数，它告诉 <code>v-bind</code> 指令将表达式 url 的值绑定到元素的 <code>href</code> attribute 上。在简写中，参数前的一切 (例如 <code>v-bind:</code>) 都会被缩略为一个 <code>:</code> 字符。</p>\n<p>另一个例子是 <code>v-on</code> 指令，它将监听 DOM 事件：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 简写 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">click</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>这里的参数是要监听的事件名称：<code>click</code>。<code>v-on</code> 有一个相应的缩写，即 <code>@</code> 字符。</p>\n<h3>动态参数</h3>\n<p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!--</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">注意，参数表达式有一些约束，</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">--&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-bind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 简写 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">attributeName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">url</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>这里的 <code>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 <code>attributeName</code>，其值为 <code>\"href\"</code>，那么这个绑定就等价于 <code>v-bind:href</code>。</p>\n<p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> v-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 简写 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">eventName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">doSomething</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>在此示例中，当 <code>eventName</code> 的值是 <code>\"focus\"</code> 时，<code>v-on:[eventName]</code> 就等价于 <code>v-on:focus</code>。</p>\n<h3>动态参数值的限制</h3>\n<p>动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</p>\n<h3>动态参数语法的限制</h3>\n<p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 这会触发一个编译器警告 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'foo'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> bar</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>如果你需要传入一个复杂的动态参数，我们推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。</p>\n<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> :[</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">someAttr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; ... &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>上面的例子将会在 DOM 内嵌模板中被转换为 <code>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。</p>\n<h3>修饰符 Modifiers</h3>\n<p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code>：</p>\n<div class=\"language-vue\" data-highlighter=\"shiki\" data-ext=\"vue\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> @</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">submit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">prevent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">onSubmit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;...&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">form</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div>",
      "date_published": "2023-02-26T00:00:00.000Z",
      "date_modified": "2024-07-14T07:19:43.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Update Flutter Project Deps",
      "url": "https://mister-hope.com/note/flutter/",
      "id": "https://mister-hope.com/note/flutter/",
      "summary": "Update Flutter Project Deps Gradle Versions can be found here: https://gradle.org/releases/ Kotlin Plugin Versions can be found here: https://plugins.gradle.org/plugin/org.jetbr...",
      "content_html": "\n<h2>Gradle</h2>\n<p>Versions can be found here: <a href=\"https://gradle.org/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">https://gradle.org/releases/</a></p>\n<h2>Kotlin Plugin</h2>\n<p>Versions can be found here: <a href=\"https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm\" target=\"_blank\" rel=\"noopener noreferrer\">https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm</a></p>\n<h2>Android Gradle Build Tools</h2>\n<ul>\n<li>\n<p><a href=\"https://maven.google.com/web/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Google maven repository website</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.android.google.cn/studio/releases/gradle-plugin?hl=zh-cn#updating-plugin\" target=\"_blank\" rel=\"noopener noreferrer\">Related docs</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-11-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "WSA",
      "url": "https://mister-hope.com/note/wsa/",
      "id": "https://mister-hope.com/note/wsa/",
      "content_html": "",
      "date_published": "2022-11-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "WSL",
      "url": "https://mister-hope.com/note/wsl/",
      "id": "https://mister-hope.com/note/wsl/",
      "summary": "目前使用的系统是 WSL2。 其中以下操作可能需要在新机器上进行相同操作: Windows 侧 Windows 侧可以在用户目录下创建 .wslconfig 文件，用于配置 WSL2。 WSL 侧 WSL 侧可以通过 /etc/wsl.conf 进行配置。 启用 init.d 支持 在 /etc/wsl.conf 中加入: 生成新的 RSA 密钥 使用...",
      "content_html": "<p>目前使用的系统是 WSL2。</p>\n<p>其中以下操作可能需要在新机器上进行相同操作:</p>\n<h2>Windows 侧</h2>\n<p>Windows 侧可以在用户目录下创建 <code>.wslconfig</code> 文件，用于配置 WSL2。</p>\n<div class=\"language-conf\" data-highlighter=\"shiki\" data-ext=\"conf\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">[wsl2]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># Limits VM memory in WSL 2 to 8 GB</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">memory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">8GB</span></span></code></pre>\n</div><h2>WSL 侧</h2>\n<p>WSL 侧可以通过 <code>/etc/wsl.conf</code> 进行配置。</p>\n<h3>启用 init.d 支持</h3>\n<p>在 <code>/etc/wsl.conf</code> 中加入:</p>\n<div class=\"language-conf\" data-highlighter=\"shiki\" data-ext=\"conf\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">[boot]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">systemd</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">true</span></span></code></pre>\n</div><h3>生成新的 RSA 密钥</h3>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ssh-keygen</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -t</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> rsa</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -C</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"mister-hope@outlook.com\"</span></span></code></pre>\n</div><h3>使用 Windows 代理</h3>\n<p>可以在 <code>.bashrc</code> 中加入以下内容:</p>\n<div class=\"language-bash line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># add for proxy</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> hostIP</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">$(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ip</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> route</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">grep</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> default</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">awk</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '{print $3}'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> socks5Port</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10810</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> httpPort</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10811</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> proxy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  export HTTPS_PROXY=\"socks5://${hostIP}:${socks5Port}\";</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  export HTTP_PROXY=\"socks5://${hostIP}:${socks5Port}\";</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  export ALL_PROXY=\"socks5://${hostIP}:${socks5Port}\";</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  git config --global http.proxy \"socks5://${hostIP}:${socks5Port}\";</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  git config --global https.proxy \"socks5://${hostIP}:${socks5Port}\";</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  echo -e \"Acquire::http::Proxy \\\"socks5://${hostIP}:${socks5Port}\\\"; \" | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  echo -e \"Acquire::https::Proxy \\\"socks5://${hostIP}:${socks5Port}\\\"; \" | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  if [ -e \"~/.ssh/config\"]; then</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    sed -i \"s/^ProxyCommand \\/usr\\/bin\\/corkscrew .* %h %p$/ProxyCommand \\/usr\\/bin\\/corkscrew ${hostIP} ${httpPort} %h %p/g\" ~/.ssh/config;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  else</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    echo \"Host github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  User git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Port 22</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Hostname github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  IdentityFile \"~/.ssh/id_rsa\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  TCPKeepAlive yes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  ProxyCommand /usr/bin/corkscrew ${hostIP} ${httpPort} %h %p</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Host ssh.github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  User git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Port 443</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  Hostname ssh.github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  IdentityFile \"~/.ssh/id_rsa\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  TCPKeepAlive yes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  ProxyCommand /usr/bin/corkscrew ${hostIP} ${httpPort} %h %p</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">alias</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> unproxy</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  unset HTTPS_PROXY;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  unset HTTP_PROXY;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  unset ALL_PROXY;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  git config --global --unset http.proxy;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  git config --global --unset https.proxy;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  sudo sed -i -e '</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/Acquire::http::Proxy/d</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">' /etc/apt/apt.conf.d/proxy.conf;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">  sudo sed -i -e '</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">/Acquire::https::Proxy/d</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">' /etc/apt/apt.conf.d/proxy.conf;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样就可以快速地使用 proxy 和 unproxy 命令。</p>\n<h3>安装 nvm 和 Node.js</h3>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">curl</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -o-</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> | </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">bash</span></span></code></pre>\n</div><ol>\n<li>\n<p>由于 GitHub 已经遭到封锁，可以考虑安装 V2Ray 给 WSL2 以获得推送代码的能力。</p>\n</li>\n<li>\n<p>更改 Node.js 可以使用的 Old Space 大小:</p>\n<p>在用户目录的 <code>.bashrc</code> 中加入:</p>\n<div class=\"language-conf\" data-highlighter=\"shiki\" data-ext=\"conf\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">export </span><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">NODE_OPTIONS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"--max-old-space-size=8192\"</span></span></code></pre>\n</div></li>\n</ol>\n",
      "date_published": "2022-11-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Git 代理",
      "url": "https://mister-hope.com/software/git/proxy.html",
      "id": "https://mister-hope.com/software/git/proxy.html",
      "summary": "由于目前 GitHub 已经在全国大部分范围内被主要运营商进行 DNS 封锁，所以如果需要配合 GitHub 使用 Git，需要进行代理设置。 代理设置 通常情况下，我们可以通过设置环境变量 HTTP_PROXY 和 HTTPS_PROXY 来进行代理设置。 在 Windows 下，我们可以通过设置环境变量 HTTP_PROXY 和 HTTPS_PRO...",
      "content_html": "<p>由于目前 GitHub 已经在全国大部分范围内被主要运营商进行 DNS 封锁，所以如果需要配合 GitHub 使用 Git，需要进行代理设置。</p>\n<h2>代理设置</h2>\n<p>通常情况下，我们可以通过设置环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来进行代理设置。</p>\n<p>在 Windows 下，我们可以通过设置环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来进行代理设置。</p>\n<details class=\"hint-container details\"><summary>Windows 例子</summary>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HTTP_PROXY=http://127.0.0.1:1080</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">set</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> HTTPS_PROXY=http://127.0.0.1:1080</span></span></code></pre>\n</div></details>\n<details class=\"hint-container details\"><summary>Linux 例子</summary>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> HTTP_PROXY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">http</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">://</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">127</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">1080</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">export</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> HTTPS_PROXY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">http</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">://</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">127</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">1080</span></span></code></pre>\n</div></details>\n<p>上述做法仅对当前终端有效，如果需要永久生效，可以将上述命令添加到系统环境变量 (Windows) 或 <code>~/.bashrc</code> (Linux) 中。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p><a href=\"/code/windows/env-variable.html\" target=\"_blank\">Windows 添加环境变量</a></p>\n</div>\n<h2>SSH 配置</h2>\n<p>如果你在使用 22 端口通过 SSH 使用 Git，那么你需要在用户目录下的 <code>.ssh</code> 目录新建 <code>config</code> 文件，并输入以下内容:</p>\n<div class=\"language-conf line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"conf\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">Host github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  User git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  Port 22</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  Hostname github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # 这里在 Windows 下需要替换成实际目录，如 \"C:\\Users\\mister-hope\\.ssh\\id_rsa\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  IdentityFile </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"~/.ssh/id_rsa\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  TCPKeepAlive yes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # Ubuntu 需要安装 corkscrew</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  ProxyCommand /usr/bin/corkscrew 172.31.16.1 10808 %h %p</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # Windows 可以改为 Git 安装目录下的 connect，如</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # ProxyCommand \"C:\\Program Files\\Git\\mingw64\\bin\\connect\" -S 127.0.0.1:10808 -a none %h %p</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">Host ssh.github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  User git</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  Port 443</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  Hostname ssh.github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # 这里在 Windows 下需要替换成实际目录，如 \"C:\\Users\\mister-hope\\.ssh\\id_rsa\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  IdentityFile </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"~/.ssh/id_rsa\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  TCPKeepAlive yes</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # Ubuntu 需要安装 corkscrew</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">  ProxyCommand /usr/bin/corkscrew 172.31.16.1 10808 %h %p</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # Windows 可以改为 Git 安装目录下的 connect，如</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # ProxyCommand \"C:\\Program Files\\Git\\mingw64\\bin\\connect\" -S 127.0.0.1:10808 -a none %h %p</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>如果在 WSL 使用，获取 Windows 的 IP 地址命令为 <code>ip route | grep default | awk '{print $3}'</code>。</p>\n<p>特别注意，如不进行额外配置，每次重启后主机地址都会发生变化。</p>\n</div>\n<p>你可以使用 <code>ssh -T git@github.com</code> 来测试你的代理配置是否有效。</p>\n",
      "date_published": "2022-11-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Git"
      ]
    },
    {
      "title": "高级合并",
      "url": "https://mister-hope.com/software/git/merge.html",
      "id": "https://mister-hope.com/software/git/merge.html",
      "summary": "Squash merge 通过使用 --squash 选项，你可以在合并中将多个 commit 合并为一个。 也就是对于以下的例子 git merge feature 得到的结果为: 而如果 feature 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 git merge --squash featur...",
      "content_html": "<h2>Squash merge</h2>\n<p>通过使用 <code>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>\n<p>也就是对于以下的例子</p>\n<p><code>git merge feature</code> 得到的结果为:</p>\n<p>而如果 <code>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code>git merge --squash feature</code> 得到:</p>\n<h2>Cherry pick</h2>\n<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>\n<p>在这种情况下，我们可以回到 main 分支，执行 <code>git cherry-pick &lt;commit id&gt;</code> 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。</p>\n<ul>\n<li><code>git cherry-pick &lt;commit id 1&gt; &lt;commit id 2&gt;</code> 表示挑拣 commit id 1 和 commit id 2</li>\n<li><code>git cherry-pick &lt;commit id 1&gt;...&lt;commit id 2&gt;</code> 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交</li>\n<li><code>git cherry-pick &lt;branch&gt;</code> 表示挑拣该分支最新的提交</li>\n</ul>\n",
      "date_published": "2022-08-08T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Git"
      ]
    },
    {
      "title": "启动另一个 activity",
      "url": "https://mister-hope.com/code/android/get-started/activity.html",
      "id": "https://mister-hope.com/code/android/get-started/activity.html",
      "summary": "在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。",
      "content_html": "<p>在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。</p>\n<!-- more -->\n<h2>响应“Send”按钮</h2>\n<p>您可按照以下步骤，向 MainActivity 类添加一个在用户点按 Send 按钮时调用的方法：</p>\n<ol>\n<li>\n<p>在 app &gt; java &gt; com.example.myfirstapp &gt; MainActivity 文件中，添加以下 sendMessage() 方法桩：</p>\n\n<p>您可能会看到一条错误，因为 Android Studio 无法解析用作方法参数的 View 类。若要清除错误，请点击 View 声明，将光标置于其上，然后按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Enter</code>）进行快速修复。如果出现一个菜单，请选择 Import class。</p>\n</li>\n<li>\n<p>返回到 activity_main.xml 文件，并从该按钮调用此方法:</p>\n<ol>\n<li>选择布局编辑器中的相应按钮。</li>\n<li>在 Attributes 窗口中，找到 onClick 属性，并从其下拉列表中选择 <code>sendMessage [MainActivity]</code>。</li>\n</ol>\n<p>现在，当用户点按该按钮时，系统将调用 <code>sendMessage()</code> 方法。</p>\n<p>请注意此方法中提供的详细信息。系统需要这些信息来识别此方法是否与 android:onClick 属性兼容。具体来说，此方法具有以下特性：</p>\n<ol>\n<li>公开。</li>\n<li>返回值为空，或在 Kotlin 中为隐式 Unit。</li>\n<li>View 是唯一的参数。这是您在第 1 步结束时点击的 View 对象。</li>\n</ol>\n</li>\n<li>\n<p>接下来，填写此方法，以读取文本字段的内容，并将该文本传递给另一个 activity。</p>\n</li>\n</ol>\n<h2>构建一个 intent</h2>\n<p><code>Intent</code> 是在相互独立的组件（如两个 activity）之间提供运行时绑定功能的对象。Intent 表示应用执行某项操作的意图。您可以使用 intent 执行多种任务，但在本课中，您的 intent 将用于启动另一个 activity。</p>\n<p>在 MainActivity 中，添加 EXTRA_MESSAGE 常量和 sendMessage() 代码，如下所示：</p>\n\n<p>预计 Android Studio 会再次遇到 Cannot resolve symbol 错误。如需清除这些错误，请按 Alt+Enter（在 Mac 上则按 Option+Return）。您最后应导入以下内容：</p>\n\n<p>DisplayMessageActivity 仍有错误，但没有关系。您将在下一部分中修复该错误。</p>\n<p>sendMessage() 将发生以下情况：</p>\n<ul>\n<li>\n<p>Intent 构造函数会获取两个参数：Context 和 Class。</p>\n<p>首先使用 Context 参数，因为 Activity 类是 Context 的子类。</p>\n<p>在本例中，系统将 Intent, 传递到的应用组件的 Class 参数是要启动的 activity。</p>\n</li>\n<li>\n<p>putExtra() 方法将 EditText 的值添加到 intent。Intent 能够以称为“extra”的键值对形式携带数据类型。</p>\n<p>您的键是一个公共常量 EXTRA_MESSAGE，因为下一个 activity 将使用该键检索文本值。为 intent extra 定义键时，最好使用应用的软件包名称作为前缀。这样可以确保这些键是独一无二的，这在您的应用需要与其他应用进行交互时会很重要。</p>\n</li>\n<li>\n<p>startActivity() 方法将启动一个由 Intent 指定的 DisplayMessageActivity 实例。接下来，您需要创建该类。</p>\n</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>导航架构组件允许您使用导航编辑器将一个 activity 与另一个 activity 相关联。建立这种关联后，您可以利用 API 在用户触发关联的操作（例如，用户点击某个按钮时）时启动第二个 activity。如需了解详情，请参阅导航。</p>\n</div>\n<h2>创建第二个 activity</h2>\n<p>若要创建第二个 activity，请按以下步骤操作：</p>\n<ol>\n<li>在 Project 窗口中，右键点击 app 文件夹，然后依次选择 New &gt; Activity &gt; Empty Activity。</li>\n<li>在 Configure Activity 窗口中，输入“DisplayMessageActivity”作为 Activity Name。将所有其他属性保留为默认设置，然后点击 Finish。</li>\n</ol>\n<p>Android Studio 会自动执行下列三项操作：</p>\n<ol>\n<li>创建 DisplayMessageActivity 文件。</li>\n<li>创建 DisplayMessageActivity 文件对应的布局文件 activity_display_message.xml。</li>\n<li>在 AndroidManifest.xml 中添加所需的 <code>&lt;activity&gt;</code> 元素。</li>\n</ol>\n<p>如果您运行应用并点按第一个 activity 上的按钮，将启动第二个 activity，但它为空。这是因为第二个 activity 使用模板提供的空布局。</p>\n<h2>添加文本视图</h2>\n<p>新 activity 包含一个空白布局文件。请按以下步骤操作，在显示消息的位置添加一个文本视图：</p>\n<ol>\n<li>打开 app &gt; res &gt; layout &gt; activity_display_message.xml 文件。</li>\n<li>点击工具栏中的 Enable Autoconnection to Parent 。系统将启用 Autoconnect。参见图 1。</li>\n<li>在 Palette 面板中，点击 Text，将 TextView 拖动到布局中，然后将其放置在靠近布局顶部中心的位置，使其贴靠到出现的垂直线上。Autoconnect 将添加左侧和右侧约束条件，以便将该视图放置在水平中心位置。</li>\n<li>再创建一个从文本视图顶部到布局顶部的约束条件，使该视图如图 1 中所示。</li>\n</ol>\n<p>或者，您可以对文本样式进行一些调整，方法是在 Attributes 窗口的 Common Attributes 面板中展开 textAppearance，然后更改 textSize 和 textColor 等属性。</p>\n<h2>显示消息</h2>\n<p>在此步骤中，您将修改第二个 activity 以显示第一个 activity 传递的消息。</p>\n<ol>\n<li>\n<p>在 DisplayMessageActivity 中，将以下代码添加到 <code>onCreate()</code> 方法中：</p>\n\n</li>\n<li>\n<p>按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Return</code>）导入其他所需的类：</p>\n\n</li>\n</ol>\n<h2>添加向上导航功能</h2>\n<p>在您的应用中，不是主入口点的每个屏幕（所有不是主屏幕的屏幕）都必须提供导航功能，以便将用户引导至应用层次结构中的逻辑父级屏幕。为此，请在应用栏中添加向上按钮。</p>\n<p>若要添加向上按钮，您需要在 <code>AndroidManifest.xml</code> 文件中声明哪个 activity 是逻辑父级。打开 app &gt; manifests &gt; AndroidManifest.xml 文件，找到 DisplayMessageActivity 的 <code>&lt;activity&gt;</code> 标记，然后将其替换为以下代码：</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">activity</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> android:name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".DisplayMessageActivity\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">          android:parentActivityName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".MainActivity\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    &lt;!-- The meta-data tag is required if you support API level 15 and lower --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">meta-data</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">        android:name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"android.support.PARENT_ACTIVITY\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">        android:value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".MainActivity\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">activity</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>Android 系统现在会自动向应用栏添加向上按钮。</p>\n<h2>运行应用</h2>\n<p>点击工具栏中的 Apply Changes 以运行应用。当应用打开后，在文本字段中输入一条消息，点按 Send 即会看到该消息显示在第二个 activity 中。</p>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2023-03-24T09:43:26.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "创建项目",
      "url": "https://mister-hope.com/code/android/get-started/create.html",
      "id": "https://mister-hope.com/code/android/get-started/create.html",
      "summary": "本课将介绍如何使用 Android Studio 创建新的 Android 项目，并介绍该项目中的一些文件。 如需创建新的 Android 项目，请按以下步骤操作： 安装最新版 Android Studio。 在 Welcome to Android Studio 窗口中，点击 Create New Project。 如果您已打开一个项目，请依次选择 ...",
      "content_html": "<p>本课将介绍如何使用 Android Studio 创建新的 Android 项目，并介绍该项目中的一些文件。</p>\n<p>如需创建新的 Android 项目，请按以下步骤操作：</p>\n<ol>\n<li>\n<p>安装最新版 Android Studio。</p>\n</li>\n<li>\n<p>在 Welcome to Android Studio 窗口中，点击 Create New Project。</p>\n<p>如果您已打开一个项目，请依次选择 File &gt; New &gt; New Project。</p>\n</li>\n<li>\n<p>在 Select a Project Template 窗口中，选择 Empty Activity，然后点击 Next。</p>\n</li>\n<li>\n<p>在 Configure your project 窗口中，完成以下操作：</p>\n<ul>\n<li>\n<p>在 Name 字段中输入“My First App”。</p>\n</li>\n<li>\n<p>在 Package name 字段中输入“com.example.myfirstapp”。</p>\n</li>\n<li>\n<p>如果您想将项目放在其他文件夹中，请更改其 Save 位置。</p>\n</li>\n<li>\n<p>从 Language 下拉菜单中选择 Java 或 Kotlin。</p>\n</li>\n<li>\n<p>在 Minimum SDK 字段中选择您希望应用支持的最低 Android 版本。</p>\n</li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>点击 Help me choose 链接可打开 Android Platform/API Version Distribution 对话框。此对话框会提供有关各 Android 版本在设备间的分布情况的信息。您需要权衡的主要因素是，您想支持的 Android 设备所占的百分比，以及在这些设备所搭载的各个不同版本上维护应用所需的工作量。例如，如果您选择让应用与多个不同 Android 版本兼容，那么维护最旧版本与最新版本之间的兼容性所需的工作量就会增大。</p>\n</div>\n<ul>\n<li>\n<p>如果您的应用需要旧版库支持，请选中 Use legacy android.support libraries 复选框。</p>\n</li>\n<li>\n<p>其他选项保持原样。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>点击 Finish。</p>\n</li>\n</ol>\n<p>经过一段时间的处理后，Android Studio 主窗口会出现。</p>\n<p>下面花一点时间了解一下最重要的文件。</p>\n<p>首先，确保已打开 Project 窗口（依次选择 View &gt; Tool Windows &gt; Project），并从该窗口顶部的下拉列表中选择 Android 视图。随后，您可以看到以下文件：</p>\n<ul>\n<li>\n<p>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity</p>\n<p>这是主 activity。它是应用的入口点。当您构建和运行应用时，系统会启动此 Activity 的实例并加载其布局。</p>\n</li>\n<li>\n<p>app &gt; res &gt; layout &gt; activity_main.xml</p>\n<p>此 XML 文件定义了 activity 界面 (UI) 的布局。它包含一个 TextView 元素，其中具有“Hello, World!”文本</p>\n</li>\n<li>\n<p>app &gt; manifests &gt; AndroidManifest.xml</p>\n<p>清单文件描述了应用的基本特性并定义了每个应用组件。</p>\n</li>\n<li>\n<p>Gradle Scripts &gt; build.gradle</p>\n<p>有两个使用此名称的文件：一个针对项目“Project: My First App”，另一个针对应用模块“Module: My_First_App.app”。每个模块均有自己的 build.gradle 文件，但此项目当前仅有一个模块。使用每个模块的 build.gradle 文件控制 Gradle 插件构建应用的方式。如需详细了解此文件，请参阅配置 build。</p>\n</li>\n</ul>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2023-03-24T09:43:26.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "构建简单的界面",
      "url": "https://mister-hope.com/code/android/get-started/interface.html",
      "id": "https://mister-hope.com/code/android/get-started/interface.html",
      "summary": "在本节课中，您将学习如何使用 Android Studio 布局编辑器创建包含一个文本框和一个按钮的布局。这将为下一课打下基础，下节课将学习如何在点按该按钮时让应用将文本框的内容发送到其他 activity。",
      "content_html": "<p>在本节课中，您将学习如何使用 Android Studio 布局编辑器创建包含一个文本框和一个按钮的布局。这将为下一课打下基础，下节课将学习如何在点按该按钮时让应用将文本框的内容发送到其他 activity。</p>\n<!-- more -->\n<p>Android 应用的界面 (UI) 以布局和微件的层次结构形式构建而成。布局是 ViewGroup 对象，即控制其子视图在屏幕上的放置方式的容器。微件是 View 对象，即按钮和文本框等界面组件。</p>\n<figure><figcaption>ViewGroup</figcaption></figure>\n<p>Android 提供了 ViewGroup 和 View 类的 XML 词汇表，因此界面的大部分内容都在 XML 文件中定义。不过，本节课将向您介绍如何使用 Android Studio 的布局编辑器创建布局，而不是教您编写 XML 代码。布局编辑器会在您拖放视图构建布局时为您编写 XML 代码。</p>\n<h2>打开布局编辑器</h2>\n<p>首先，请按照以下步骤设置工作区：</p>\n<ol>\n<li>在 Project 窗口中，依次打开 app &gt; res &gt; layout &gt; activity_main.xml。</li>\n<li>若要给布局编辑器留出空间，请隐藏 Project 窗口。为此，请依次选择 View &gt; Tool Windows &gt; Project，或直接点击 Android Studio 屏幕左侧的 Project。</li>\n<li>如果您的编辑器显示 XML 源代码，请点击窗口右上角的 Design 标签页。</li>\n<li>点击 (Select Design Surface)，然后选择 Blueprint。</li>\n<li>点击布局编辑器工具栏中的 (View Options)，并确保选中 Show All Constraints。</li>\n<li>确保 Autoconnect 处于关闭状态。当 Autoconnect 处于关闭状态时，工具栏中的提示会显示 (Enable Autoconnection to Parent)。</li>\n<li>点击工具栏中的 (Default Margins)，然后选择 16。如果需要，您可以稍后调整每个视图的外边距。</li>\n<li>点击工具栏中的 (Device for Preview)，然后选择 5.5, 1440 × 2560, 560 dpi (Pixel XL)。</li>\n</ol>\n<p>您的布局编辑器现在如下图所示。</p>\n<figure><figcaption>布局编辑器</figcaption></figure>\n<p>左下方的 Component Tree 面板显示布局的视图层次结构。在本例中，根视图是 ConstraintLayout，它仅包含一个 TextView 对象。</p>\n<p>ConstraintLayout 是一种布局，它根据同级视图和父布局的约束条件定义每个视图的位置。这样一来，使用扁平视图层次结构既可以创建简单布局，又可以创建复杂布局。这种布局无需嵌套布局。嵌套布局是布局内的布局（如图 2 所示），会增加绘制界面所需的时间。</p>\n<p>例如，您可以声明以下布局，如下图所示：</p>\n<ul>\n<li>视图 A 距离父布局顶部 16 dp。</li>\n<li>视图 A 距离父布局左侧 16 dp。</li>\n<li>视图 B 距离视图 A 右侧 16 dp。</li>\n<li>视图 B 与视图 A 顶部对齐。</li>\n</ul>\n<figure><figcaption>布局示例</figcaption></figure>\n<h2>添加文本框</h2>\n<p>请按照下面的步骤添加文本框：</p>\n<ol>\n<li>首先，您需要移除布局中已有的内容。在 Component Tree 面板中点击 TextView，然后按 Delete 键。</li>\n<li>在 Palette 面板中，点击 Text 以显示可用的文本控件。</li>\n<li>将 Plain Text 拖动到设计编辑器中，并将其放在靠近布局顶部的位置。这是一个接受纯文本输入的 EditText 微件。</li>\n<li>点击设计编辑器中的视图。现在，您可以在每个角上看到调整视图大小的正方形手柄，并在每个边上看到圆形约束锚点。为了更好地控制，您可能需要放大编辑器。为此，请使用布局编辑器工具栏中的 Zoom 按钮。</li>\n<li>点击并按住顶边上的锚点，将其向上拖动，直至其贴靠到布局顶部，然后将其释放。这是一个约束条件：它会将视图约束在已设置的默认外边距内。在本例中，您将其设置为距离布局顶部 16 dp。</li>\n<li>使用相同的过程创建一个从视图左侧到布局左侧的约束条件。</li>\n</ol>\n<h2>添加按钮</h2>\n<ol>\n<li>在 Palette 面板中，点击 Buttons。</li>\n<li>将 Button 微件拖到设计编辑器中，并将其放在靠近右侧的位置。</li>\n<li>创建一个从按钮左侧到文本框右侧的约束条件。</li>\n<li>如需按水平对齐约束视图，请创建一个文本基线之间的约束条件。为此，请右键点击按钮，然后选择 Show Baseline 在布局编辑器中显示基准操作。基线锚点显示在按钮内部。点击并按住此锚点，然后将其拖动到相邻文本框中显示的基线锚点上。</li>\n</ol>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>您还可以根据顶边或底边实现水平对齐。但按钮的图片周围有内边距，因此如果以这种方式对齐，那么它们看上去是没有对齐的。</p>\n</div>\n<h2>更改界面字符串</h2>\n<p>若要预览界面，请点击工具栏中的 (Select Design Surface)，然后选择 Design。请注意，文本输入和按钮标签应设置为默认值。</p>\n<p>若要更改界面字符串，请按以下步骤操作：</p>\n<ol>\n<li>\n<p>打开 Project 窗口，然后打开 app &gt; res &gt; values &gt; strings.xml。</p>\n<p>这是一个字符串资源文件，您可在此文件中指定所有界面字符串。您可以利用该文件在一个位置管理所有界面字符串，使字符串的查找、更新和本地化变得更加容易。</p>\n</li>\n<li>\n<p>点击窗口顶部的 Open editor。此时将打开 Translations Editor，它提供了一个可以添加和修改默认字符串的简单界面。它还有助于让所有已翻译的字符串井然有序。</p>\n</li>\n<li>\n<p>点击 (Add Key) 可以创建一个新字符串作为文本框的“提示文本”。此时会打开如图 7 所示的窗口。</p>\n<p>在 Add Key 对话框中，完成以下步骤：</p>\n<ul>\n<li>在 Key 字段中输入“edit_message”。</li>\n<li>在 Default Value 字段中输入“Enter a message”。</li>\n<li>点击 OK。</li>\n</ul>\n</li>\n<li>\n<p>再添加一个名为“button_send”且值为“Send”的键。</p>\n</li>\n</ol>\n<p>现在，您可以为每个视图设置这些字符串。若要返回布局文件，请点击标签页栏中的 activity_main.xml。然后，添加字符串，如下所示：</p>\n<ol>\n<li>点击布局中的文本框。如果右侧还未显示 Attributes 窗口，请点击右侧边栏上的 Attributes。</li>\n<li>找到 text 属性（当前设为“Name”）并删除相应的值。</li>\n<li>找到 hint 属性，然后点击文本框右侧的 (Pick a Resource)。在显示的对话框中，双击列表中的 edit_message。</li>\n<li>点击布局中的按钮，找到其 text 属性（当前设为“Button”）。然后点击 (Pick a Resource)，并选择 button_send。</li>\n</ol>\n<h2>让文本框大小可灵活调整</h2>\n<p>若要创建一个适应不同屏幕尺寸的布局，您需要让文本框拉伸以填充去除按钮和外边距后剩余的所有水平空间。</p>\n<p>继续操作之前，请点击工具栏中的 (Select Design Surface)，然后选择 Blueprint。</p>\n<p>若要让文本框大小可灵活调整，请按以下步骤操作：</p>\n<ol>\n<li>\n<p>选择两个视图。若要执行此操作，请点击一个视图，在按住 Shift 键的同时点击另一个视图，然后右键点击任一视图并依次选择 Chains &gt; Create Horizontal Chain。布局随即显示出来，如图 8 所示。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>链是两个或多个视图之间的双向约束条件，可让您采用一致的方式安排链接的视图。</p>\n</div>\n</li>\n<li>\n<p>选择按钮并打开 Attributes 窗口。然后使用 Constraint Widget 将右外边距设为 16 dp。\n点击文本框以查看其属性。然后，点击宽度指示器两次，确保将其设置为锯齿状线 (Match Constraints)，如图 9 中的标注 1 所示。</p>\n</li>\n<li>\n<p>“Match constraints”表示宽度将延长以符合水平约束条件和外边距的定义。因此，文本框将拉伸以填充去除按钮和所有外边距后剩余的水平空间。</p>\n</li>\n</ol>\n<h2>运行应用</h2>\n<p>如果已在上一课中将您的应用安装到设备上，只需点击工具栏中的 (Apply Changes)，即可使用新布局更新应用。或者点击 Run 'app' 以安装并运行应用。</p>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2023-03-24T09:43:26.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "基础知识",
      "url": "https://mister-hope.com/code/android/get-started/intro.html",
      "id": "https://mister-hope.com/code/android/get-started/intro.html",
      "summary": "本部分介绍如何构建简单的 Android 应用。首先，您将了解如何通过 Android Studio 创建“Hello, World!”项目并运行它。然后，您将为应用创建一个新界面，该界面会接受用户输入，并切换到应用中的一个新屏幕以显示用户输入内容。 开始之前，您需要了解有关 Android 应用的两个基本概念：它们如何提供多个入口点，以及它们如何适应...",
      "content_html": "<p>本部分介绍如何构建简单的 Android 应用。首先，您将了解如何通过 Android Studio 创建“Hello, World!”项目并运行它。然后，您将为应用创建一个新界面，该界面会接受用户输入，并切换到应用中的一个新屏幕以显示用户输入内容。</p>\n<p>开始之前，您需要了解有关 Android 应用的两个基本概念：它们如何提供多个入口点，以及它们如何适应不同的设备。</p>\n<!-- more -->\n<h2>应用提供多个入口点</h2>\n<p>Android 应用都是将各种可单独调用的组件加以组合构建而成。例如，activity 是提供界面 (UI) 的一种应用组件。</p>\n<p>“主”activity 在用户点按您的应用图标时启动。您还可以将用户从其他位置（例如，从通知中，甚至从其他应用中）引导至某个 activity。</p>\n<p>其他组件（如 WorkManager）可使应用能够在没有界面的情况下执行后台任务。</p>\n<p>构建您的首个应用后，请参阅 [应用基础知识][] 来详细了解其他应用组件。</p>\n<h2>应用可适应不同的设备</h2>\n<p>Android 允许您为不同的设备提供不同的资源。例如，您可以针对不同的屏幕尺寸创建不同的布局。系统会根据当前设备的屏幕尺寸确定要使用的布局。</p>\n<p>如果应用的任何功能需要使用特定的硬件（例如摄像头），您可以在运行时查询该设备是否具有该硬件，如果没有，则停用相应的功能。您可以指定应用需要使用特定的硬件，这样，Google Play 就不会允许在没有这些硬件的设备上安装应用。</p>\n<p>构建您的首个应用后，请参阅 [设备兼容性概览][] 来详细了解设备配置。</p>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2023-03-24T09:43:26.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "运行应用",
      "url": "https://mister-hope.com/code/android/get-started/run.html",
      "id": "https://mister-hope.com/code/android/get-started/run.html",
      "summary": "在真实设备上运行 按照以下步骤设置设备： 使用一根 USB 线将设备连接到开发机器。如果您是在 Windows 上开发的，则可能需要为设备安装合适的 USB 驱动程序。 执行以下步骤，在开发者选项窗口中启用 USB 调试： 打开设置应用。 如果您的设备使用 Android v8.0 或更高版本，请选择系统。否则，请继续执行下一步。 滚动到底部，然后选择...",
      "content_html": "<h2>在真实设备上运行</h2>\n<p>按照以下步骤设置设备：</p>\n<ol>\n<li>\n<p>使用一根 USB 线将设备连接到开发机器。如果您是在 Windows 上开发的，则可能需要为设备安装合适的 USB 驱动程序。</p>\n</li>\n<li>\n<p>执行以下步骤，在开发者选项窗口中启用 USB 调试：</p>\n<ol>\n<li>\n<p>打开设置应用。</p>\n</li>\n<li>\n<p>如果您的设备使用 Android v8.0 或更高版本，请选择系统。否则，请继续执行下一步。</p>\n</li>\n<li>\n<p>滚动到底部，然后选择关于手机。</p>\n</li>\n<li>\n<p>滚动到底部，然后点按版本号七次。</p>\n</li>\n<li>\n<p>返回上一屏幕，滚动到底部，然后点按开发者选项。</p>\n</li>\n<li>\n<p>在开发者选项窗口中，向下滚动以查找并启用 USB 调试。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>按照以下步骤操作，在设备上运行应用：</p>\n<ol>\n<li>\n<p>在 Android Studio 中，从工具栏中的运行/调试配置下拉菜单中选择您的应用。</p>\n</li>\n<li>\n<p>在工具栏中，从目标设备下拉菜单中选择要用来运行应用的设备。</p>\n</li>\n<li>\n<p>点击 Run 。</p>\n<p>Android Studio 会在已连接的设备上安装您的应用并启动它。您现在会看到设备上的应用中显示了“Hello, World!”。</p>\n</li>\n</ol>\n<h2>在模拟器上运行</h2>\n<p>按照以下步骤操作，在模拟器上运行应用：</p>\n<ol>\n<li>\n<p>在 Android Studio 中创建一个 Android 虚拟设备 (AVD)，模拟器可以使用该设备安装和运行您的应用。</p>\n</li>\n<li>\n<p>在工具栏中，从运行/调试配置下拉菜单中选择您的应用。</p>\n</li>\n<li>\n<p>从目标设备下拉菜单中，选择要用来运行应用的 AVD。</p>\n</li>\n<li>\n<p>点击 Run 图标 。</p>\n<p>Android Studio 会在 AVD 上安装应用并启动模拟器。您现在会看到应用中显示了“Hello, World!”。</p>\n</li>\n</ol>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2023-03-24T09:43:26.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "物理笔记",
      "url": "https://mister-hope.com/physics/",
      "id": "https://mister-hope.com/physics/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/physics/electromagnetism/\" target=\"_blank\">电磁学</a></p>\n</li>\n<li>\n<p><a href=\"/physics/optism/\" target=\"_blank\">光学</a></p>\n</li>\n<li>\n<p><a href=\"/physics/tsp/\" target=\"_blank\">热力学与统计物理</a></p>\n</li>\n<li>\n<p><a href=\"/physics/quatum/\" target=\"_blank\">量子力学</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-01-07T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "微分方程",
      "url": "https://mister-hope.com/math/differential-equation.html",
      "id": "https://mister-hope.com/math/differential-equation.html",
      "summary": "概念 微分方程表示未知函数，未知函数的导数与自变量之间的关系的方程。 阶: 未知函数的最高阶的导数叫阶数 一般形式: $F(x,y,y',\\dots,y^{(n)})$ 如果最高阶导数可以被解出，则有 $y^{(n)} = f(x,y,y',\\dots,y^{(n-1)})$ 解: 找到令方程变为恒等式的函数 通解: 解中含有任意常数，且常数的个数与阶...",
      "content_html": "<h2>概念</h2>\n<ul>\n<li>\n<p>微分方程表示未知函数，未知函数的导数与自变量之间的关系的方程。</p>\n</li>\n<li>\n<p>阶: 未知函数的最高阶的导数叫阶数</p>\n</li>\n<li>\n<p>一般形式: $F(x,y,y',\\dots,y^{(n)})$</p>\n<p>如果最高阶导数可以被解出，则有 $y^{(n)} = f(x,y,y',\\dots,y^{(n-1)})$</p>\n</li>\n<li>\n<p>解: 找到令方程变为恒等式的函数</p>\n</li>\n<li>\n<p>通解: 解中含有任意常数，且常数的个数与阶数相同</p>\n</li>\n<li>\n<p>初值条件: 给出特定 $x$ 下， $y,y',\\dots,y^{(n)}$ 的值，此时求出的解为该条件下的特解。</p>\n</li>\n<li>\n<p>可分离变量: 形如 $g(y)dy = f(x)dx$ 的形式</p>\n<p>如果 $f(x)$, $g(y)$ 连续，且有 $g(y)\\not =0$，则可以积分出 $G(y) = F(x) + C$</p>\n<p>令 $\\varPhi(x) = \\cfrac{F'(x)}{G'(y)}=\\cfrac{f(x)}{g(y)}$，则 $y=\\varPhi(x)$ 即为通解。</p>\n</li>\n<li>\n<p>齐次方程: 可化为</p>\n</li>\n</ul>\n",
      "date_published": "2021-04-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "概念",
      "url": "https://mister-hope.com/physics/tsp/definition.html",
      "id": "https://mister-hope.com/physics/tsp/definition.html",
      "summary": "基本概念 弛豫时间: 系统由其初始状态达到平衡状态所经历的时间。 平衡态: 系统的各种宏观性质长时间内不发生变化，这样的状态成为热力学平衡态。 开系: 与外界既有物质交换，又有能量交换的系统 闭系: 与外界没有物质交换，但有能量交换的系统 孤立系: 与其他物体既没有物质交换又没有能量交换的系统 热力学温标: 不依赖于任何具体物质特性的温标。 热力学定律...",
      "content_html": "<h2>基本概念</h2>\n<p>弛豫时间: 系统由其初始状态达到平衡状态所经历的时间。</p>\n<p>平衡态: 系统的各种宏观性质长时间内不发生变化，这样的状态成为热力学平衡态。</p>\n<ul>\n<li>开系: 与外界既有物质交换，又有能量交换的系统</li>\n<li>闭系: 与外界没有物质交换，但有能量交换的系统</li>\n<li>孤立系: 与其他物体既没有物质交换又没有能量交换的系统</li>\n</ul>\n<p>热力学温标: 不依赖于任何具体物质特性的温标。</p>\n<h2>热力学定律</h2>\n<h3>热平衡定律(热力学第零定律)</h3>\n<p>如果 $A$ 和 $B$ 同时与 $C$ 达到热平衡，则 $A$ 和 $B$ 也处于热平衡。</p>\n<h3>热力学第一定律(能量守恒定律)</h3>\n<p>自然界一切物质都具有能量，能量有各种不同的形式，可以从一种形式转化为另一种形式，从一个物体传递到另一个物体，在传递和优化中能量的数量不变。</p>\n<p>另一种表述: 第一类永动机是不可能造成的。</p>\n<blockquote>\n<p>第一类永动机: 机器不需要外界供给能量而可以不断地对外做功。</p>\n</blockquote>\n<h3>热力学第二定律</h3>\n<ul>\n<li>克氏表述: 不可能把热量从低温物体传到高温物体而不引起其他变化。</li>\n<li>开氏表述: 不可能从单一热源吸热使之完全变成有用的共而不引起其他变化。</li>\n</ul>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>开氏说法也可推出: 第二类永动机是不可能造成的。</p>\n<blockquote>\n<p>第二类永动机: 能供从单一热源吸热，使之完全变成有用的功而不引起其他变化。</p>\n</blockquote>\n</div>\n<h3>热力学第三定律(能氏定律)</h3>\n<p>凝聚系的熵在等温过程中的改变随热力学温度趋于零，即 $\\lim\\limits_{x\\to0}(\\Delta S)_T = 0$</p>\n<h2>卡诺定理</h2>\n<p>所有工作与两个一定温度之间的热机，以可逆机的效率为最高。</p>\n<p>推论: 所有工作与两个一定温度之间的可逆热机的效率相等。</p>\n<h2>等概率原理</h2>\n<p>处在平衡状态的孤立系统，系统的各个可能出现的概率是相等的。既然这些围观都满足具有确定 $N$,$E$,$V$ 的宏观条件，没有理由认为哪一个状态出现的概率应当更大一些，这些微观状态是平权的。</p>\n<h2>能量均分定理</h2>\n<p>对于处在温度为 $T$ 的平衡状态系统，粒子能量中每个平方项的平均值是 $\\cfrac{1}{2}kT^2$</p>\n",
      "date_published": "2021-04-10T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "模块",
      "url": "https://mister-hope.com/code/language/python/module/",
      "id": "https://mister-hope.com/code/language/python/module/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/module/intro.html\" target=\"_blank\">介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/module/usage.html\" target=\"_blank\">使用模块</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/module/install.html\" target=\"_blank\">安装第三方模块</a></p>\n</li>\n</ul>\n",
      "date_published": "2021-03-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "安装第三方模块",
      "url": "https://mister-hope.com/code/language/python/module/install.html",
      "id": "https://mister-hope.com/code/language/python/module/install.html",
      "summary": "在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。 如果您正在使用 Mac 或 Linux，安装 pip 本身这个步骤就可以跳过了。 如果您正在使用 Windows，请参考 一节的内容，确保安装时勾选了 pip 和 Add python.exe to Path。 在命令提示符窗口下尝试运行 pip，如果 Windows 提示未找到...",
      "content_html": "<p>在 Python 中，安装第三方模块，是通过包管理工具 pip 完成的。</p>\n<p>如果您正在使用 Mac 或 Linux，安装 pip 本身这个步骤就可以跳过了。</p>\n<p>如果您正在使用 Windows，请参考 <a href=\"/code/language/python/intro/install.html\" target=\"_blank\">安装 Python</a> 一节的内容，确保安装时勾选了 <code>pip</code> 和 <code>Add python.exe to Path</code>。</p>\n<p>在命令提示符窗口下尝试运行 pip，如果 Windows 提示未找到命令，可以重新运行安装程序添加 pip。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>Mac 或 Linux 上有可能并存 Python 3.x 和 Python 2.x，因此对应的 pip 命令是 pip3。</p>\n</div>\n<p>例如，我们要安装一个第三方库——Python Imaging Library，这是 Python 下非常强大的处理图像的工具库。不过，PIL 目前只支持到 Python 2.7，并且有年头没有更新了，因此，基于 PIL 的 Pillow 项目开发非常活跃，并且支持最新的 Python 3。</p>\n<p>一般来说，第三方库都会在 Python 官方的 &lt;pypi.python.org&gt; 网站注册，要安装一个第三方库，必须先知道该库的名称，可以在官网或者 pypi 上搜索，比如 Pillow 的名称叫 <a href=\"https://pypi.python.org/pypi/Pillow/\" target=\"_blank\" rel=\"noopener noreferrer\">Pillow</a>，因此，安装 Pillow 的命令就是:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">pip</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Pillow</span></span></code></pre>\n</div><p>耐心等待下载并安装后，就可以使用 Pillow 了。</p>\n<h2>安装常用模块</h2>\n<p>在使用 Python 时，我们经常需要用到很多第三方库，例如，上面提到的 Pillow，以及 MySQL 驱动程序，Web 框架 Flask，科学计算 Numpy 等。用 pip 一个一个安装费时费力，还需要考虑兼容性。我们推荐直接使用 <a href=\"https://www.anaconda.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Anaconda</a>，这是一个基于 Python 的数据处理和科学计算平台，它已经内置了许多非常有用的第三方库，我们装上 Anaconda，就相当于把数十个第三方模块自动安装好了，非常简单易用。</p>\n<p>可以从 <a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener noreferrer\">Anaconda 官网</a> 下载 GUI 安装包，安装包有 500~600M，所以需要耐心等待下载。下载后直接安装，Anaconda 会把系统 Path 中的 python 指向自己自带的 Python，并且，Anaconda 安装的第三方模块会安装在 Anaconda 自己的路径下，不影响系统已安装的 Python 目录。</p>\n<p>安装好 Anaconda 后，重新打开命令行窗口，输入 python，可以看到 Anaconda 的信息:</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>┌────────────────────────────────────────────────────────┐</span></span>\n<span class=\"line\"><span>│Command Prompt - python                           - □ x │</span></span>\n<span class=\"line\"><span>├────────────────────────────────────────────────────────┤</span></span>\n<span class=\"line\"><span>│Microsoft Windows [Version 10.0.0]                      │</span></span>\n<span class=\"line\"><span>│(c) 2015 Microsoft Corporation. All rights reserved.    │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│C:\\&gt; python                                             │</span></span>\n<span class=\"line\"><span>│Python 3.9.2 |Anaconda, Inc.| ... on win32              │</span></span>\n<span class=\"line\"><span>│Type \"help\", ... for more information.                  │</span></span>\n<span class=\"line\"><span>│&gt;&gt;&gt; import numpy                                        │</span></span>\n<span class=\"line\"><span>│&gt;&gt;&gt; _                                                   │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>│                                                        │</span></span>\n<span class=\"line\"><span>└────────────────────────────────────────────────────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可以尝试直接 <code>import numpy</code> 等已安装的第三方模块。</p>\n<h2>模块搜索路径</h2>\n<p>当我们试图加载一个模块时，Python 会在指定的路径下搜索对应的.py 文件，如果找不到，就会报错:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">import</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> mymodule</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">recent</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> call</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> last</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  File</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"&lt;stdin&gt;\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> line</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 1,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &lt;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">modul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">ImportError:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> No</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> module</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> named</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> mymodule</span></span></code></pre>\n</div><p>默认情况下，Python 解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在 sys 模块的 path 变量中:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">import</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> sys</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sys.path</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">''</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'/Library/Frameworks/Python.framework/Versions/3.9/lib/python36.zip'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, ..., </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>如果我们要添加自己的搜索目录，有两种方法:</p>\n<p>一是直接修改 <code>sys.path</code>，添加要搜索的目录:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">import</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> sys</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sys.path.append(</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">'/Users/michael/my_py_scripts'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>这种方法是在运行时修改，运行结束后失效。</p>\n<p>第二种方法是设置环境变量 <code>PYTHONPATH</code>，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与 <a href=\"/code/windows/env-variable.html\" target=\"_blank\">设置境变量</a> 类似。注意只需要添加您自己的搜索路径，Python 自己本身的搜索路径不受影响。</p>\n",
      "date_published": "2021-03-27T00:00:00.000Z",
      "date_modified": "2022-12-06T14:18:22.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "模块",
      "url": "https://mister-hope.com/code/language/python/module/intro.html",
      "id": "https://mister-hope.com/code/language/python/module/intro.html",
      "summary": "在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 .py 文件就称之为一个模块 (Module) 。",
      "content_html": "<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Python 中，一个 <code>.py</code> 文件就称之为一个模块 (Module) 。</p>\n<!-- more -->\n<h2>优点</h2>\n<ol>\n<li>\n<p>使用模块大大提高了代码的可维护性。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Python 内置的模块和来自第三方的模块。</p>\n</li>\n<li>\n<p>使用模块可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突。</p>\n</li>\n</ol>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p><a href=\"http://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener noreferrer\">Python 的所有内置函数</a></p>\n</div>\n<h2>包</h2>\n<p>为了避免模块名冲突，Python 引入了按目录来组织模块的方法，称为包 (Package) 。</p>\n<p>举个例子，一个 <code>abc.py</code> 的文件就是一个名字叫 abc 的模块，一个 <code>xyz.py</code> 的文件就是一个名字叫 xyz 的模块。</p>\n<p>现在，假设我们的 abc 和 xyz 这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如 hopestudio，按照如下目录存放:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span>├─ __init__.py</span></span>\n<span class=\"line\"><span>├─ abc.py</span></span>\n<span class=\"line\"><span>└─ xyz.py</span></span></code></pre>\n</div><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code>abc.py</code> 模块的名字就变成了 <code>hopestudio.abc</code>，类似的，<code>xyz.py</code> 的模块名变成了 <code>hopestudio.xyz</code>。</p>\n<p>请注意，每一个包目录下面都会有一个 <code>__init__.py</code> 的文件，这个文件是必须存在的，否则，Python 就把这个目录当成普通目录，而不是一个包。<code>__init__.py</code>可以是空文件，也可以有 Python 代码，因为 <code>__init__.py</code> 本身就是一个模块，而它的模块名就是 hopestudio。</p>\n<p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>hopestudio</span></span>\n<span class=\"line\"><span> ├─ web</span></span>\n<span class=\"line\"><span> │  ├─ __init__.py</span></span>\n<span class=\"line\"><span> │  ├─ utils.py</span></span>\n<span class=\"line\"><span> │  └─ www.py</span></span>\n<span class=\"line\"><span> ├─ __init__.py</span></span>\n<span class=\"line\"><span> ├─ abc.py</span></span>\n<span class=\"line\"><span> └─ utils.py</span></span></code></pre>\n</div><p>文件 <code>www.py</code> 的模块名就是 <code>hopestudio.web.www</code>，两个文件 <code>utils.py</code> 的模块名分别是 <code>hopestudio.utils</code> 和 <code>hopestudio.web.utils</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>自己创建模块时要注意命名，不能和 Python 自带的模块名称冲突。例如，系统自带了 sys 模块，自己的模块就不可命名为 <code>sys.py</code>，否则将无法导入系统自带的 sys 模块。</p>\n</div>\n<h2>总结</h2>\n<ul>\n<li>\n<p>模块是一组 Python 代码的集合，可以使用其他模块，也可以被其他模块使用。</p>\n</li>\n<li>\n<p>创建自己的模块时，要注意:</p>\n<ol>\n<li>模块名要遵循 Python 变量命名规范，不要使用中文、特殊字符；</li>\n<li>模块名不要和系统模块名冲突，最好先查看系统是否已存在该模块，检查方法是在 Python 交互环境执行 <code>import abc</code>，若成功则说明系统存在此模块。</li>\n</ol>\n</li>\n</ul>\n",
      "date_published": "2021-03-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "使用模块",
      "url": "https://mister-hope.com/code/language/python/module/usage.html",
      "id": "https://mister-hope.com/code/language/python/module/usage.html",
      "summary": "Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。",
      "content_html": "<p>Python 本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p>\n<!-- more -->\n<p>我们以内建的 sys 模块为例，编写一个 hello 的模块:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#!/usr/bin/env python3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">' a test module '</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">__author__ </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Mr.Hope'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> sys</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    args </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> sys.argv</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(args)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello, world!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    elif</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(args)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> args[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Too many arguments!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> __name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__main__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">    test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>第 1 行和第 2 行是标准注释，第 1 行注释可以让这个 <code>hello.py</code> 文件直接在 <code>Unix/Linux/Mac</code> 上运行，第 2 行注释表示 <code>.py</code> 文件本身使用标准 UTF-8 编码；</p>\n<p>第 4 行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p>\n<p>第 6 行使用 <code>__author__</code> 变量把作者写进去，这样当您公开源代码后别人就可以瞻仰您的大名；</p>\n<p>以上就是 Python 模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</p>\n<p>后面开始就是真正的代码部分。</p>\n<p>您可能注意到了，使用 <code>sys</code> 模块的第一步，就是导入该模块:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> sys</span></span></code></pre>\n</div><p>导入 sys 模块后，我们就有了变量 sys 指向该模块，利用 sys 这个变量，就可以访问 sys 模块的所有功能。</p>\n<p>sys 模块有一个 <code>argv</code> 变量，用 list 存储了命令行的所有参数。<code>argv</code> 至少有一个元素，因为第一个参数永远是该.py 文件的名称，例如:</p>\n<p>运行 <code>python3 hello.py</code> 获得的 <code>sys.argv</code> 就是 <code>['hello.py']</code>；</p>\n<p>运行 <code>python3 hello.py Mr.Hope</code> 获得的 <code>sys.argv</code> 就是 <code>['hello.py', 'Mr.Hope']</code>。</p>\n<p>最后，注意到这两行代码:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> __name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__main__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">    test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>当我们在命令行运行 hello 模块文件时，Python 解释器把一个特殊变量 <code>__name__</code> 置为 <code>__main__</code>，而如果在其他地方导入该 hello 模块时，if 判断将失败，因此，这种 if 测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p>\n<p>我们可以用命令行运行 hello.py 看看效果:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> python3</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.py</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> python</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello.py</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Michael</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Michael!</span></span></code></pre>\n</div><p>如果启动 Python 交互环境，再导入 hello 模块:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">$</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> python3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Python</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3.4.3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (v3.4.3:9b73f1c3e601, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Feb</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 23</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 2015,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 02:52:03</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[GCC </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4.2.1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">Apple</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> Inc</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">. </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">build</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5666</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dot</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)] on darwin</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Type</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"help\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"copyright\",</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"credits\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> or</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"license\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> for</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> more</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> information.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">import</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> hello</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt;</span></span></code></pre>\n</div><p>导入时，没有打印 <code>Hello, word!</code>，因为没有执行 <code>test()</code> 函数。</p>\n<p>调用 <code>hello.test()</code> 时，才能打印出 <code>Hello, word!</code> :</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">hello.test</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Hello,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> world!</span></span></code></pre>\n</div><h2>作用域</h2>\n<p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在 Python 中，是通过_前缀来实现的。</p>\n<p>正常的函数和变量名是公开的 (public) ，可以被直接引用，比如: <code>abc</code>，<code>x123</code>，<code>PI</code> 等；</p>\n<p>类似 <code>__xxx__</code> 这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的 <code>__author__</code>，<code>__name__</code> 就是特殊变量，hello 模块定义的文档注释也可以用特殊变量 <code>__doc__</code> 访问，我们自己的变量一般不要用这种变量名；</p>\n<p>类似 <code>_xxx</code> 和 <code>__xxx</code> 这样的函数或变量就是非公开的 (private) ，不应该被直接引用，比如 <code>_abc</code>，<code>__abc</code> 等；</p>\n<p>之所以我们说，private 函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为 Python 并没有一种方法可以完全限制访问 private 函数或变量，但是，从编程习惯上不应该引用 private 函数或变量。</p>\n<p>private 函数或变量不应该被别人引用，那它们有什么用呢？请看例子:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> _private_1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hello, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> _private_2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Hi, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> greeting</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> _private_1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> _private_2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>我们在模块里公开 <code>greeting()</code> 函数，而把内部逻辑用 private 函数隐藏起来了，这样，调用 <code>greeting()</code> 函数不用关心内部的 private 函数细节，这也是一种非常有用的代码封装和抽象的方法，即:</p>\n<p>外部不需要引用的函数全部定义成 private，只有外部需要引用的函数才定义为 public。</p>\n",
      "date_published": "2021-03-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "面向对象编程",
      "url": "https://mister-hope.com/code/language/python/oop/",
      "id": "https://mister-hope.com/code/language/python/oop/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/oop/intro.html\" target=\"_blank\">介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/oop/instance.html\" target=\"_blank\">类和实例</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/oop/extend.html\" target=\"_blank\">继承和多态</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/oop/property.html\" target=\"_blank\">属性</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/oop/info.html\" target=\"_blank\">获取对象信息</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/oop/customize.html\" target=\"_blank\">定制类</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/oop/special.html\" target=\"_blank\">特殊的 class</a></p>\n</li>\n</ul>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "定制类",
      "url": "https://mister-hope.com/code/language/python/oop/customize.html",
      "id": "https://mister-hope.com/code/language/python/oop/customize.html",
      "summary": "看到类似 __slots__ 这种形如 __xxx__ 的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。 __slots__ 我们已经知道怎么用了，__len__() 方法我们也知道是为了能让 class 作用于 len() 函数。 除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。 __st...",
      "content_html": "<p>看到类似 <code>__slots__</code> 这种形如 <code>__xxx__</code> 的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。</p>\n<p><code>__slots__</code> 我们已经知道怎么用了，<code>__len__()</code> 方法我们也知道是为了能让 class 作用于 <code>len()</code> 函数。</p>\n<p>除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p>\n<h2><code>__str__</code></h2>\n<p>我们先定义一个 Student 类，打印一个实例:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">         self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">__main__.Student </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> at </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">0x</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">109afb190</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n</div><p>打印出一堆 <code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p>\n<p>怎么才能打印得好看呢？只需要定义好 <code>__str__()</code> 方法，返回一个好看的字符串就可以了:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">         self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __str__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">         return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Student object (name: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">)'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Student </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (name: Michael)</span></span></code></pre>\n</div><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p>\n<p>但是细心的朋友会发现直接敲变量不用 <code>print</code>，打印出来的实例还是不好看:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">__main__.Student </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> at </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">0x</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">109afb310</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n</div><p>这是因为直接显示变量调用的不是 <code>__str__()</code>，而是 <code>__repr__()</code>，两者的区别是 <code>__str__()</code> 返回用户看到的字符串，而 <code>__repr__()</code> 返回程序开发者看到的字符串，也就是说，<code>__repr__()</code> 是为调试服务的。</p>\n<p>解决办法是再定义一个 <code>__repr__()</code>。但是通常 <code>__str__()</code> 和 <code>__repr__()</code> 代码都是一样的，所以，有个偷懒的写法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __str__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Student object (name=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">)'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    __repr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __str__</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__iter__</span></span></code></pre>\n</div><p>如果一个类想被用于 <code>for ... in</code> 循环，类似 list 或 tuple 那样，就必须实现一个 <code>__iter__()</code> 方法，该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的 <code>__next__()</code> 方法拿到循环的下一个值，直到遇到 <code>StopIteration</code> 错误时退出循环。</p>\n<p>我们以斐波那契数列为例，写一个 <code>Fib</code> 类，可以作用于 for 循环:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fib</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.a, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 初始化两个计数器a，b</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __iter__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 实例本身就是迭代对象，故返回自己</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __next__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.a, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.b, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.b </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 计算下一个值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100000</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 退出循环的条件</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> StopIteration</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.a </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 返回下一个值</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，试试把 <code>Fib</code> 实例作用于 for 循环:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> n </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Fib</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">     print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(n)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">46368</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">75025</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__getitem__</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>Fib</code> 实例虽然能作用于 for 循环，看起来和 <code>list</code> 有点像，但是，把它当成 <code>list</code> 来使用还是不行，比如，取第 5 个元素:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Fib</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">TypeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Fib'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> does </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">not</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> support indexing</span></span></code></pre>\n</div><p>要表现得像 list 那样按照下标取出元素，需要实现 <code>__getitem__()</code> 方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fib</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getitem__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        a, b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> range</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(n):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            a, b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b, a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> a</span></span></code></pre>\n</div><p>现在，就可以按下标访问数列的任意一项了:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Fib</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">89</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">573147844013817084101</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是 <code>list</code> 有个神奇的切片方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">range</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>对于 Fib 却报错。原因是 <code>__getitem__()</code> 传入的参数可能是一个 <code>int</code>，也可能是一个切片对象 <code>slice</code>，所以要做判断:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Fib</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getitem__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> n</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(n, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">): </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># n是索引</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            a, b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> range</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(n):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                a, b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b, a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(n, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">slice</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">): </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># n是切片</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            start </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> n.start</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            stop </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> n.stop</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> start </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">is</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> None</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                start </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            a, b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            L </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> range</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(stop):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> start:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                    L.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(a)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                a, b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b, a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> L</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在试试 <code>Fib</code> 的切片:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Fib</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">13</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">21</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">34</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">55</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>但是没有对 step 参数作处理:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f[:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">13</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">21</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">34</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">55</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">89</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>也没有对负数作处理，所以，要正确实现一个 <code>__getitem__()</code> 还是有很多工作要做的。</p>\n<p>此外，如果把对象看成 dict，<code>__getitem__()</code> 的参数也可能是一个可以作 <code>key</code> 的 <code>object</code>，例如 <code>str</code>。</p>\n<p>与之对应的是 <code>__setitem__()</code> 方法，把对象视作 <code>list</code> 或 <code>dict</code> 来对集合赋值。最后，还有一个 <code>__delitem__()</code> 方法，用于删除某个元素。</p>\n<p>总之，通过上面的方法，我们自己定义的类表现得和 Python 自带的 <code>list</code>、<code>tuple</code>、<code>dict</code> 没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p>\n<h2><code>__getattr__</code></h2>\n<p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义 <code>Student</code> 类:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Michael'</span></span></code></pre>\n</div><p>调用 <code>name</code> 属性，没问题，但是，调用不存在的 <code>score</code> 属性，就有问题了:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s.name)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Michael</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s.score)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">  ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Student'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score'</span></span></code></pre>\n</div><p>错误信息很清楚地告诉我们，没有找到 <code>score</code> 这个 <code>attribute</code>。</p>\n<p>要避免这个错误，除了可以加上一个 <code>score</code> 属性外，Python 还有另一个机制，那就是写一个 <code>__getattr__()</code> 方法，动态返回一个属性。修改如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Michael'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getattr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 99</span></span></code></pre>\n</div><p>当调用不存在的属性时，比如 <code>score</code>，Python 解释器会试图调用 <code>__getattr__(self, 'score')</code> 来尝试获得属性，这样，我们就有机会返回 <code>score</code> 的值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span></span></code></pre>\n</div><p>返回函数也是完全可以的:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getattr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'age'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> lambda</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span></span></code></pre>\n</div><p>只是调用方式要变为:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span></span></code></pre>\n</div><p>注意，只有在没有找到属性的情况下，才调用 <code>__getattr__</code>，已有的属性，比如 <code>name</code>，不会在 <code>__getattr__</code> 中查找。</p>\n<p>此外，注意到任意调用如 <code>s.abc</code> 都会返回 <code>None</code>，这是因为我们定义的 <code>__getattr__</code> 默认返回就是 <code>None</code>。要让 class 只响应特定的几个属性，我们就要按照约定，抛出 <code>AttributeError</code> 的错误:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getattr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> attr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'age'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> lambda</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Student</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> object has no attribute </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\'</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> attr)</span></span></code></pre>\n</div><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p>\n<p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p>\n<p>举个例子:</p>\n<p>现在很多网站都搞 REST API，比如新浪微博、豆瓣啥的，调用 API 的 URL 类似:</p>\n<ul>\n<li><code>http://api.server/user/friends</code></li>\n<li><code>http://api.server/user/timeline/list</code></li>\n</ul>\n<p>如果要写 SDK，给每个 URL 对应的 API 都写一个方法，那得累死，而且，API 一旦改动，SDK 也要改。</p>\n<p>利用完全动态的 <code>__getattr__</code>，我们可以写出一个链式调用:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Chain</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">''</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._path </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> path</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getattr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Chain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">/</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._path, path))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __str__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._path</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    __repr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __str__</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>试试:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Chain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().status.user.timeline.list</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'/status/user/timeline/list'</span></span></code></pre>\n</div><p>这样，无论 API 怎么变，SDK 都可以根据 URL 实现完全动态的调用，而且，不随 API 的增加而改变!</p>\n<p>还有些 REST API 会把参数放到 URL 中，比如 GitHub 的 API:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">GET</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> /</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">users</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:user</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">repos</span></span></code></pre>\n</div><p>调用时，需要把 <code>:user</code> 替换为实际用户名。如果我们能写出这样的链式调用:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Chain</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">users</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).repos</span></span></code></pre>\n</div><p>就可以非常方便地调用 API 了。有兴趣的童鞋可以试试写出来。</p>\n<h2><code>__call__</code></h2>\n<p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用 <code>instance.method()</code> 来调用。能不能直接在实例本身上调用呢？在 Python 中，答案是肯定的。</p>\n<p>任何类，只需要定义一个 <code>__call__()</code> 方法，就可以直接对实例进行调用。请看示例:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __call__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'My name is </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">.'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name)</span></span></code></pre>\n</div><p>调用方式如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># self参数不要传入</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">My name </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">is</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Michael.</span></span></code></pre>\n</div><p><code>__call__()</code> 还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以您完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p>\n<p>如果您把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p>\n<p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个 Callable 对象，比如函数和我们上面定义的带有 <code>__call__()</code> 的类实例:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> callable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> callable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> callable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">([</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> callable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">None</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> callable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'str'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>通过 <code>callable()</code> 函数，我们就可以判断一个对象是否是“可调用”对象。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>更多可定制的方法，请参考 <a href=\"http://docs.python.org/3/reference/datamodel.html#special-method-names\" target=\"_blank\" rel=\"noopener noreferrer\">Python 的官方文档</a>。</p>\n</div>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "继承和多态",
      "url": "https://mister-hope.com/code/language/python/oop/extend.html",
      "id": "https://mister-hope.com/code/language/python/oop/extend.html",
      "summary": "在 OOP 程序设计中，当我们定义一个 class 的时候，可以从某个现有的 class 继承，新的 class 称为子类 (Subclass) ，而被继承的 class 称为基类、父类或超类 (Base class、Super class) 。 比如，我们已经编写了一个名为 Animal 的 class，有一个 run() 方法可以直接打印: 当我们...",
      "content_html": "<p>在 OOP 程序设计中，当我们定义一个 class 的时候，可以从某个现有的 class 继承，新的 class 称为子类 (Subclass) ，而被继承的 class 称为基类、父类或超类 (Base class、Super class) 。</p>\n<p>比如，我们已经编写了一个名为 Animal 的 class，有一个 <code>run()</code> 方法可以直接打印:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Animal is running...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>当我们需要编写 Dog 和 Cat 类时，就可以直接从 Animal 类继承:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Cat</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>对于 Dog 来说，Animal 就是它的父类，对于 Animal 来说，Dog 就是它的子类。Cat 和 Dog 类似。</p>\n<p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于 Animial 实现了 <code>run()</code> 方法，因此，Dog 和 Cat 作为它的子类，什么事也没干，就自动拥有了 <code>run()</code> 方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">dog </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Dog</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">dog.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">cat </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Cat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">cat.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>运行结果如下:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>Animal is running...</span></span>\n<span class=\"line\"><span>Animal is running...</span></span></code></pre>\n</div><p>当然，也可以对子类增加一些方法，比如 Dog 类:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Dog is running...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> eat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Eating meat...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>继承的第二个好处需要我们对代码做一点改进。您看到了，无论是 Dog 还是 Cat，它们 <code>run()</code> 的时候，显示的都是 <code>Animal is running...</code>，符合逻辑的做法是分别显示 <code>Dog is running...</code> 和 <code>Cat is running...</code>，因此，对 Dog 和 Cat 类改进如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Dog is running...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Cat</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Cat is running...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>再次运行，结果如下:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>Dog is running...</span></span>\n<span class=\"line\"><span>Cat is running...</span></span></code></pre>\n</div><p>当子类和父类都存在相同的 <code>run()</code> 方法时，我们说，子类的 <code>run()</code> 覆盖了父类的 <code>run()</code>，在代码运行的时候，总是会调用子类的 <code>run()</code>。这样，我们就获得了继承的另一个好处: 多态。</p>\n<p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个 class 的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和 Python 自带的数据类型，比如 <code>str</code>、<code>list</code>、<code>dict</code> 没什么两样:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># a是list类型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># b是Animal类型</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">c </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Dog</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># c是Dog类型</span></span></code></pre>\n</div><p>判断一个变量是否是某个类型可以用 <code>isinstance()</code> 判断:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(a, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b, Animal)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(c, Dog)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p>看来 a、b、c 确实对应着 <code>list</code>、<code>Animal</code>、<code>Dog</code> 这 3 种类型。</p>\n<p>但是等等，试试:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(c, Animal)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p>看来 c 不仅仅是 <code>Dog</code>，c 还是 <code>Animal</code>!</p>\n<p>不过仔细想想，这是有道理的，因为 Dog 是从 Animal 继承下来的，当我们创建了一个 Dog 的实例 c 时，我们认为 c 的数据类型是 Dog 没错，但 c 同时也是 Animal 也没错，Dog 本来就是 Animal 的一种!</p>\n<p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> b </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(b, Dog)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span></code></pre>\n</div><p>Dog 可以看成 Animal，但 Animal 不可以看成 Dog。</p>\n<p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个 Animal 类型的变量:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run_twice</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    animal.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    animal.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>当我们传入 Animal 的实例时，<code>run_twice()</code> 就打印出:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">run_twice(Animal(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Animal</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Animal</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running...</span></span></code></pre>\n</div><p>当我们传入 Dog 的实例时，<code>run_twice()</code> 就打印出:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">run_twice(Dog(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Dog</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Dog</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running...</span></span></code></pre>\n</div><p>当我们传入 Cat 的实例时，<code>run_twice()</code> 就打印出:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">run_twice(Cat(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Cat</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Cat</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running...</span></span></code></pre>\n</div><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个 <code>Tortoise</code> 类型，也从 <code>Animal</code> 派生:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Tortoise</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Tortoise is running slowly...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>当我们调用 <code>run_twice()</code> 时，传入 <code>Tortoise</code> 的实例:</p>\n<div class=\"language-sh\" data-highlighter=\"shiki\" data-ext=\"sh\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&gt;&gt; </span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">run_twice(Tortoise(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Tortoise</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> slowly...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Tortoise</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> is</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> running</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> slowly...</span></span></code></pre>\n</div><p>您会发现，新增一个 Animal 的子类，不必对 <code>run_twice()</code> 做任何修改，实际上，任何依赖 Animal 作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p>\n<p>多态的好处就是，当我们需要传入 Dog、Cat、Tortoise……时，我们只需要接收 Animal 类型就可以了，因为 Dog、Cat、Tortoise……都是 Animal 类型，然后，按照 Animal 类型进行操作即可。由于 Animal 类型有 <code>run()</code> 方法，因此，传入的任意类型，只要是 Animal 类或者子类，就会自动调用实际类型的 <code>run()</code> 方法，这就是多态的意思:</p>\n<p>对于一个变量，我们只需要知道它是 Animal 类型，无需确切地知道它的子类型，就可以放心地调用 <code>run()</code> 方法，而具体调用的 <code>run()</code> 方法是作用在 Animal、Dog、Cat 还是 Tortoise 对象上，由运行时该对象的确切类型决定，这就是多态真正的威力: 调用方只管调用，不管细节，而当我们新增一种 Animal 的子类时，只要确保 <code>run()</code> 方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则:</p>\n<p>对扩展开放: 允许新增 Animal 子类；</p>\n<p>对修改封闭: 不需要修改依赖 Animal 类型的 <code>run_twice()</code> 等函数。</p>\n<p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类 object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树:</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>                ┌───────────────┐</span></span>\n<span class=\"line\"><span>                │    object     │</span></span>\n<span class=\"line\"><span>                └───────────────┘</span></span>\n<span class=\"line\"><span>                        │</span></span>\n<span class=\"line\"><span>           ┌────────────┴────────────┐</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>           ▼                         ▼</span></span>\n<span class=\"line\"><span>    ┌─────────────┐           ┌─────────────┐</span></span>\n<span class=\"line\"><span>    │   Animal    │           │    Plant    │</span></span>\n<span class=\"line\"><span>    └─────────────┘           └─────────────┘</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>     ┌─────┴──────┐            ┌─────┴──────┐</span></span>\n<span class=\"line\"><span>     │            │            │            │</span></span>\n<span class=\"line\"><span>     ▼            ▼            ▼            ▼</span></span>\n<span class=\"line\"><span>┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span></span>\n<span class=\"line\"><span>│   Dog   │  │   Cat   │  │  Tree   │  │ Flower  │</span></span>\n<span class=\"line\"><span>└─────────┘  └─────────┘  └─────────┘  └─────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>静态语言 vs 动态语言</h2>\n<p>对于静态语言 (例如 Java) 来说，如果需要传入 Animal 类型，则传入的对象必须是 Animal 类型或者它的子类，否则，将无法调用 <code>run()</code> 方法。</p>\n<p>对于 Python 这样的动态语言来说，则不一定需要传入 Animal 类型。我们只需要保证传入的对象有一个 <code>run()</code> 方法就可以了:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Timer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Start...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>\n<p>Python 的 “file-like object“ 就是一种鸭子类型。对真正的文件对象，它有一个 <code>read()</code> 方法，返回其内容。但是，许多对象，只要有 <code>read()</code> 方法，都被视为 “file-like object“。许多函数接收的参数就是 “file-like object“，您不一定要传入真正的文件对象，完全可以传入任何实现了 <code>read()</code> 方法的对象。</p>\n<h2>多重继承</h2>\n<p>继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。</p>\n<p>回忆一下 <code>Animal</code> 类层次的设计，假设我们要实现以下 4 种动物:</p>\n<ul>\n<li>Dog - 狗狗；</li>\n<li>Bat - 蝙蝠；</li>\n<li>Parrot - 鹦鹉；</li>\n<li>Ostrich - 鸵鸟。</li>\n</ul>\n<p>如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次:</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>                ┌───────────────┐</span></span>\n<span class=\"line\"><span>                │    Animal     │</span></span>\n<span class=\"line\"><span>                └───────────────┘</span></span>\n<span class=\"line\"><span>                        │</span></span>\n<span class=\"line\"><span>           ┌────────────┴────────────┐</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>           ▼                         ▼</span></span>\n<span class=\"line\"><span>    ┌─────────────┐           ┌─────────────┐</span></span>\n<span class=\"line\"><span>    │   Mammal    │           │    Bird     │</span></span>\n<span class=\"line\"><span>    └─────────────┘           └─────────────┘</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>     ┌─────┴──────┐            ┌─────┴──────┐</span></span>\n<span class=\"line\"><span>     │            │            │            │</span></span>\n<span class=\"line\"><span>     ▼            ▼            ▼            ▼</span></span>\n<span class=\"line\"><span>┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span></span>\n<span class=\"line\"><span>│   Dog   │  │   Bat   │  │ Parrot  │  │ Ostrich │</span></span>\n<span class=\"line\"><span>└─────────┘  └─────────┘  └─────────┘  └─────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>但是如果按照“能跑”和“能飞”来归类，我们就应该设计出这样的类的层次:</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>                ┌───────────────┐</span></span>\n<span class=\"line\"><span>                │    Animal     │</span></span>\n<span class=\"line\"><span>                └───────────────┘</span></span>\n<span class=\"line\"><span>                        │</span></span>\n<span class=\"line\"><span>           ┌────────────┴────────────┐</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>           ▼                         ▼</span></span>\n<span class=\"line\"><span>    ┌─────────────┐           ┌─────────────┐</span></span>\n<span class=\"line\"><span>    │  Runnable   │           │   Flyable   │</span></span>\n<span class=\"line\"><span>    └─────────────┘           └─────────────┘</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>     ┌─────┴──────┐            ┌─────┴──────┐</span></span>\n<span class=\"line\"><span>     │            │            │            │</span></span>\n<span class=\"line\"><span>     ▼            ▼            ▼            ▼</span></span>\n<span class=\"line\"><span>┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span></span>\n<span class=\"line\"><span>│   Dog   │  │ Ostrich │  │ Parrot  │  │   Bat   │</span></span>\n<span class=\"line\"><span>└─────────┘  └─────────┘  └─────────┘  └─────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果要把上面的两种分类都包含进来，我们就得设计更多的层次:</p>\n<ul>\n<li>哺乳类: 能跑的哺乳类，能飞的哺乳类；</li>\n<li>鸟类: 能跑的鸟类，能飞的鸟类。</li>\n</ul>\n<p>这么一来，类的层次就复杂了:</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>                ┌───────────────┐</span></span>\n<span class=\"line\"><span>                │    Animal     │</span></span>\n<span class=\"line\"><span>                └───────────────┘</span></span>\n<span class=\"line\"><span>                        │</span></span>\n<span class=\"line\"><span>           ┌────────────┴────────────┐</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>           ▼                         ▼</span></span>\n<span class=\"line\"><span>    ┌─────────────┐           ┌─────────────┐</span></span>\n<span class=\"line\"><span>    │   Mammal    │           │    Bird     │</span></span>\n<span class=\"line\"><span>    └─────────────┘           └─────────────┘</span></span>\n<span class=\"line\"><span>           │                         │</span></span>\n<span class=\"line\"><span>     ┌─────┴──────┐            ┌─────┴──────┐</span></span>\n<span class=\"line\"><span>     │            │            │            │</span></span>\n<span class=\"line\"><span>     ▼            ▼            ▼            ▼</span></span>\n<span class=\"line\"><span>┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span></span>\n<span class=\"line\"><span>│  MRun   │  │  MFly   │  │  BRun   │  │  BFly   │</span></span>\n<span class=\"line\"><span>└─────────┘  └─────────┘  └─────────┘  └─────────┘</span></span>\n<span class=\"line\"><span>     │            │            │            │</span></span>\n<span class=\"line\"><span>     │            │            │            │</span></span>\n<span class=\"line\"><span>     ▼            ▼            ▼            ▼</span></span>\n<span class=\"line\"><span>┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span></span>\n<span class=\"line\"><span>│   Dog   │  │   Bat   │  │ Ostrich │  │ Parrot  │</span></span>\n<span class=\"line\"><span>└─────────┘  └─────────┘  └─────────┘  └─────────┘</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果要再增加“宠物类”和“非宠物类”，这么搞下去，类的数量会呈指数增长，很明显这样设计是不行的。</p>\n<p>正确的做法是采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 大类:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Mammal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Bird</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Animal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 各种动物:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Mammal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Bat</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Mammal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Parrot</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Bird</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Ostrich</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Bird</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，我们要给动物再加上 <code>Runnable</code> 和 <code>Flyable</code> 的功能，只需要先定义好 <code>Runnable</code> 和 <code>Flyable</code> 的类:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Runnable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Running...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Flyable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fly</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Flying...'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>对于需要 <code>Runnable</code> 功能的动物，就多继承一个 <code>Runnable</code>，例如 <code>Dog</code>:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Mammal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Runnable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>对于需要 <code>Flyable</code> 功能的动物，就多继承一个 <code>Flyable</code>，例如 <code>Bat</code>:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Bat</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Mammal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Flyable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p>\n<h2>MixIn</h2>\n<p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code> 继承自 <code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让 <code>Ostrich</code> 除了继承自 <code>Bird</code> 外，再同时继承 <code>Runnable</code>。这种设计通常称之为 MixIn。</p>\n<p>为了更好地看出继承关系，我们把 <code>Runnable</code> 和 <code>Flyable</code> 改为 <code>RunnableMixIn</code> 和 <code>FlyableMixIn</code>。类似的，您还可以定义出肉食动物<code>CarnivorousMixIn</code> 和植食动物 <code>HerbivoresMixIn</code>，让某个动物同时拥有好几个 MixIn:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Mammal</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">RunnableMixIn</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">CarnivorousMixIn</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>MixIn 的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个 MixIn 的功能，而不是设计多层次的复杂的继承关系。</p>\n<p>Python 自带的很多库也使用了 MixIn。举个例子，Python 自带了 TCPServer 和 UDPServer 这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由 ForkingMixIn 和 ThreadingMixIn 提供。通过组合，我们就可以创造出合适的服务来。</p>\n<p>比如，编写一个多进程模式的 TCP 服务，定义如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyTCPServer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TCPServer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ForkingMixIn</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>编写一个多线程模式的 UDP 服务，定义如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyUDPServer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">UDPServer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ThreadingMixIn</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>如果您打算搞一个更先进的协程模型，可以编写一个 CoroutineMixIn:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyTCPServer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">TCPServer</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">CoroutineMixIn</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p>\n<h2>小结</h2>\n<p>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</p>\n<p>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</p>\n<p>由于 Python 允许使用多重继承，因此，MixIn 就是一种常见的设计。</p>\n<p>只允许单一继承的语言 (如 Java) 不能使用 MixIn 的设计。</p>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "获取对象信息",
      "url": "https://mister-hope.com/code/language/python/oop/info.html",
      "id": "https://mister-hope.com/code/language/python/oop/info.html",
      "summary": "当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？ 使用 type() 首先，我们来判断对象类型，使用 type() 函数: 基本类型都可以用 type() 判断: 如果一个变量指向函数或者类，也可以用 type() 判断: 但是 type() 函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在 if 语句中判断，...",
      "content_html": "<p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p>\n<h2>使用 <code>type()</code></h2>\n<p>首先，我们来判断对象类型，使用 <code>type()</code> 函数:</p>\n<p>基本类型都可以用 <code>type()</code> 判断:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'int'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'str'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'str'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">None</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">None</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'NoneType'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n</div><p>如果一个变量指向函数或者类，也可以用 <code>type()</code> 判断:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'builtin_function_or_method'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(a)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '__main__.Animal'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n</div><p>但是 <code>type()</code> 函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在 if 语句中判断，就需要比较两个变量的 type 类型是否相同:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">456</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'abc'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'123'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'abc'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">str</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'abc'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>判断基本数据类型可以直接写 <code>int</code>，<code>str</code> 等，但如果要判断一个对象是否是函数怎么办？可以使用 <code>types</code> 模块中定义的常量:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> types</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     pass</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(fn)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">types.FunctionType</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">types.BuiltinFunctionType</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">lambda</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: x)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">types.LambdaType</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((x </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> range</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)))</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">types.GeneratorType</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>使用 <code>isinstance()</code></h2>\n<p>对于 class 的继承关系来说，使用 <code>type()</code> 就很不方便。我们要判断 class 的类型，可以使用 <code>isinstance()</code> 函数。</p>\n<p>我们回顾上次的例子，如果继承关系是:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>object -&gt; Animal -&gt; Dog -&gt; Husky</span></span></code></pre>\n</div><p>那么，<code>isinstance()</code> 就可以告诉我们，一个对象是否是某种类型。先创建 3 种类型的对象:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> a </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> d </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Dog</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> h </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Husky</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>然后，判断:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(h, Husky)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p>没有问题，因为 <code>h</code> 变量指向的就是 <code>Husky</code> 对象。</p>\n<p>再判断:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(h, Dog)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p><code>h</code> 虽然自身是 <code>Husky</code> 类型，但由于 <code>Husky</code> 是从 <code>Dog</code> 继承下来的，所以，<code>h</code> 也还是 <code>Dog</code> 类型。换句话说，<code>isinstance()</code> 判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p>\n<p>因此，我们可以确信，<code>h</code> 还是 <code>Animal</code> 类型:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(h, Animal)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p>同理，实际类型是 <code>Dog</code> 的 <code>d</code> 也是 <code>Animal</code> 类型:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(d, Dog) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">and</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(d, Animal)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p>但是，<code>d</code> 不是 <code>Husky</code> 类型:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(d, Husky)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span></code></pre>\n</div><p>能用 <code>type()</code> 判断的基本类型也可以用 <code>isinstance()</code> 判断:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'a'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">123</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">b</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'a'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">bytes</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是 <code>list</code> 或者 <code>tuple</code>:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">([</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">], (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">tuple</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">), (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">tuple</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>总是优先使用 <code>isinstance()</code> 判断类型，可以将指定类型及其子类“一网打尽”。</p>\n</div>\n<h2>使用 <code>dir()</code></h2>\n<p>如果要获得一个对象的所有属性和方法，可以使用 <code>dir()</code> 函数，它返回一个包含字符串的 <code>list</code>，比如，获得一个 <code>str</code> 对象的所有属性和方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> dir</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'ABC'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__add__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__class__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__subclasshook__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'capitalize'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'casefold'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'zfill'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>类似 <code>__xxx__</code> 的属性和方法在 Python 中都是有特殊用途的，比如 <code>__len__</code> 方法返回长度。在 Python 中，如果您调用 <code>len()</code> 函数试图获取一个对象的长度，实际上，在 len()函数内部，它自动去调用该对象的 <code>__len__()</code> 方法，所以，下面的代码是等价的:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'ABC'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'ABC'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__len__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span></span></code></pre>\n</div><p>我们自己写的类，如果也想用 <code>len(myObj)</code> 的话，就自己写一个 <code>__len__()</code> 方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyDog</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __len__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">         return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dog </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> MyDog</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> len</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(dog)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span></span></code></pre>\n</div><p>剩下的都是普通属性或方法，比如 <code>lower()</code> 返回小写的字符串:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'ABC'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">lower</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'abc'</span></span></code></pre>\n</div><p>仅仅把属性和方法列出来是不够的，配合 <code>getattr()</code>、<code>setattr()</code> 以及 <code>hasattr()</code>，我们可以直接操作一个对象的状态:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyObject</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">         self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 9</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> power</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">         return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> obj </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> MyObject</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>紧接着，可以测试该对象的属性:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> hasattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'x'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 有属性'x'吗？</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> obj.x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> hasattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'y'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 有属性'y'吗？</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> setattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'y'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">19</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 设置一个属性'y'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> hasattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'y'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 有属性'y'吗？</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'y'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取属性'y'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">19</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> obj.y </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取属性'y'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">19</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果试图获取不存在的属性，会抛出 <code>AttributeError</code> 的错误:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'z'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取属性'z'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'MyObject'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'z'</span></span></code></pre>\n</div><p>可以传入一个 <code>default</code> 参数，如果属性不存在，就返回默认值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'z'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">404</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取属性'z'，如果不存在，返回默认值404</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">404</span></span></code></pre>\n</div><p>也可以获得对象的方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> hasattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'power'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 有属性'power'吗？</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'power'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取属性'power'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">bound method MyObject.power of </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">__main__.MyObject </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> at </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">0x</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10077a6a0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> fn </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'power'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 获取属性'power'并赋值到变量fn</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> fn </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># fn指向obj.power</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">bound method MyObject.power of </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">__main__.MyObject </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> at </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">0x</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10077a6a0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 调用fn()与调用obj.power()是一样的</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">81</span></span></code></pre>\n</div><h2>小结</h2>\n<p>通过内置的一系列函数，我们可以对任意一个 Python 对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> obj.x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> obj.y</span></span></code></pre>\n</div><p>就不要写:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">sum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'x'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(obj, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'y'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>一个正确的用法的例子如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> readImage</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">fp</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> hasattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(fp, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'read'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> readData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(fp)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> None</span></span></code></pre>\n</div><p>假设我们希望从文件流 <code>fp</code> 中读取图像，我们首先要判断该 <code>fp</code> 对象是否存在 <code>read</code> 方法，如果存在，则该对象是一个流，如果不存在，则无法读取。<code>hasattr()</code> 就派上了用场。</p>\n<p>请注意，在 Python 这类动态语言中，根据鸭子类型，有 <code>read()</code> 方法，不代表该 fp 对象就是一个文件流，它也可能是网络流，也可能是内存中的一个字节流，但只要 <code>read()</code> 方法返回的是有效的图像数据，就不影响读取图像的功能。</p>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "类和实例",
      "url": "https://mister-hope.com/code/language/python/oop/instance.html",
      "id": "https://mister-hope.com/code/language/python/oop/instance.html",
      "summary": "面向对象最重要的概念就是类 (Class) 和实例 (Instance) ，必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。",
      "content_html": "<p>面向对象最重要的概念就是类 (Class) 和实例 (Instance) ，必须牢记类是抽象的模板，比如 <code>Student</code> 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\n<!-- more -->\n<p>仍以 <code>Student</code> 类为例，在 Python 中，定义类是通过 class 关键字:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>class 后面紧接着是类名，即 <code>Student</code>，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用 object 类，这是所有类最终都会继承的类。</p>\n<p>定义好了 <code>Student</code> 类，就可以根据 <code>Student</code> 类创建出 <code>Student</code> 的实例，创建实例是通过 <code>className()</code> 实现的:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">__main__.Student </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> at </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">0x</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10a67a590</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Student</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '__main__.Student'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n</div><p>可以看到，变量 <code>bart</code> 指向的就是一个 Student 的实例，后面的 <code>0x10a67a590</code> 是内存地址，每个 object 的地址都不一样，而 <code>Student</code> 本身则是一个类。</p>\n<p>可以自由地给一个实例变量绑定属性，比如，给实例 <code>bart</code> 绑定一个 <code>name</code> 属性:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Bart Simpson'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span></span></code></pre>\n</div><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的 <strong>init</strong> 方法，在创建实例的时候，就把 <code>name</code>，<code>score</code> 等属性绑上去:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>特殊方法 <code>__init__</code> 前后分别有两个下划线!!!</p>\n</div>\n<p>由于 <strong>init</strong> 方法的第一个参数永远是 <code>self</code>，表示创建的实例本身，因此，在 <strong>init</strong> 方法内部，就可以把各种属性绑定到 <code>self</code>，因为 <code>self</code> 就指向创建的实例本身。</p>\n<p>有了 <strong>init</strong> 方法，在创建实例的时候，就不能传入空的参数了，必须传入与 <strong>init</strong> 方法匹配的参数，但 self 不需要传，Python 解释器自己会把实例变量传进去:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span></span></code></pre>\n</div><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量 self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，您仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>\n<h2>数据封装</h2>\n<p>面向对象编程的一个重要特点就是数据封装。在上面的 Student 类中，每个实例就拥有各自的 name 和 score 这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">std</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">     print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (std.name, std.score))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(bart)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Bart Simpson: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span></span></code></pre>\n</div><p>但是，既然 Student 实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在 Student 类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和 Student 类本身是关联起来的，我们称之为类的方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score))</span></span></code></pre>\n</div><p>要定义一个方法，除了第一个参数是 self 外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了 self 不用传递，其他参数正常传入:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Bart Simpson: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span></span></code></pre>\n</div><p>这样一来，我们从外部看 Student 类，就只需要知道，创建实例需要给出 name 和 score，而如何打印，都是在 Student 类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p>\n<p>封装的另一个好处是可以给 Student 类增加新的方法，比如 get_grade:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> get_grade</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 90</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'A'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        elif</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'B'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'C'</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>同样的，get_grade 方法可以直接在实例变量上调用，不需要知道内部实现细节:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># -*- coding: utf-8 -*-</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> get_grade</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 90</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'A'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        elif</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'B'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'C'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">lisa </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Lisa'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(lisa.name, lisa.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">get_grade</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># Lisa A</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(bart.name, bart.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">get_grade</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">())</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># Bart C</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>实例属性和类属性</h2>\n<p>由于 Python 是动态语言，根据类创建的实例可以任意绑定属性。</p>\n<p>给实例绑定属性的方法是通过实例变量，或者通过 <code>self</code> 变量:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bob'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">s.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 90</span></span></code></pre>\n</div><p>但是，如果 <code>Student</code> 类本身需要绑定一个属性呢？可以直接在 class 中定义属性，这种属性是类属性，归 <code>Student</code> 类所有:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Student'</span></span></code></pre>\n</div><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">     name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Student'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 创建实例s</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s.name) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Student</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Student.name) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 打印类的name属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Student</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Michael'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 给实例绑定name属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s.name) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Michael</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Student.name) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 但是类属性并未消失，用Student.name仍然可以访问</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Student</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> del</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.name </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 如果删除实例的name属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s.name) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Student</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>从上面的例子可以看出，在编写程序的时候，千万<strong>不要对实例属性和类属性使用相同的名字</strong>，因为相同名称的实例属性将屏蔽掉类属性，但是当您删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>\n<h2>小结</h2>\n<ul>\n<li>\n<p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>\n</li>\n<li>\n<p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>\n</li>\n<li>\n<p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p>\n</li>\n<li>\n<p>和静态语言不同，Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> lisa </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Lisa Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">87</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.age</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> lisa.age</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Student'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'age'</span></span></code></pre>\n</div></li>\n<li>\n<p>实例属性属于各个实例所有，互不干扰；</p>\n</li>\n<li>\n<p>类属性属于类所有，所有实例共享一个属性；</p>\n</li>\n<li>\n<p>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</p>\n</li>\n</ul>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2024-07-14T07:19:43.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "面向对象编程",
      "url": "https://mister-hope.com/code/language/python/oop/intro.html",
      "id": "https://mister-hope.com/code/language/python/oop/intro.html",
      "summary": "面向对象编程——Object Oriented Programming，简称 OOP，是一种程序设计思想。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。 面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。 ...",
      "content_html": "<p>面向对象编程——Object Oriented Programming，简称 OOP，是一种程序设计思想。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p>\n<p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p>\n<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p>\n<p>在 Python 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类 (Class) 的概念。</p>\n<p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p>\n<p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个 dict 表示:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">std1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'name'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">98</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">std2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'name'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bob'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">81</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span></code></pre>\n</div><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">std</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (std[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'name'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">], std[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]))</span></span></code></pre>\n</div><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是 <code>Student</code> 这种数据类型应该被视为一个对象，这个对象拥有 <code>name</code> 和 <code>score</code> 这两个属性 (Property) 。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个 <code>print_score</code> 消息，让对象自己把自己的数据打印出来。</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score))</span></span></code></pre>\n</div><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法 (Method) 。面向对象的程序写出来就像这样:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">lisa </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Lisa Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">87</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">bart.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">lisa.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类 (Class) 和实例 (Instance) 的概念是很自然的。Class 是一种抽象概念，比如我们定义的 Class——Student，是指学生这个概念，而实例 (Instance) 则是一个个具体的 Student，比如，<code>Bart Simpson</code> 和 <code>Lisa Simpson</code> 是两个具体的 Student。</p>\n<p>所以，面向对象的设计思想是抽象出 Class，根据 Class 创建 Instance。</p>\n<p>面向对象的抽象程度又比函数要高，因为一个 Class 既包含数据，又包含操作数据的方法。</p>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "属性",
      "url": "https://mister-hope.com/code/language/python/oop/property.html",
      "id": "https://mister-hope.com/code/language/python/oop/property.html",
      "summary": "私有属性 在 Class 内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。 但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的 name、score 属性: 如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线 __，在 Python 中，实例的变量名如果...",
      "content_html": "<h2>私有属性</h2>\n<p>在 Class 内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p>\n<p>但是，从前面 Student 类的定义来看，外部代码还是可以自由地修改一个实例的 <code>name</code>、<code>score</code> 属性:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 99</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span></span></code></pre>\n</div><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线 <code>__</code>，在 Python 中，实例的变量名如果以 <code>__</code> 开头，就变成了一个私有变量 (private) ，只有内部可以访问，外部不能访问，所以，我们把 <code>Student</code> 类改一改:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__name, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__score))</span></span></code></pre>\n</div><p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问实例变量. <code>__name</code> 和实例变量 <code>__score</code> 了:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.__name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Student'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__name'</span></span></code></pre>\n</div><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p>\n<p>但是如果外部代码要获取 <code>name</code> 和 <code>score</code> 怎么办？可以给 Student 类增加 <code>get_name</code> 和 <code>get_score</code> 这样的方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> get_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__name</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> get_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__score</span></span></code></pre>\n</div><p>如果又要允许外部代码修改 score 怎么办？可以再给 Student 类增加 <code>set_score</code> 方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span></code></pre>\n</div><p>您也许会问，原先那种直接通过 bart.score = 99 也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'bad score'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>需要注意的是，在 Python 中，变量名类似 <code>__xxx__</code> 的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是 private 变量，所以，不能用 <code>__name__</code>、<code>__score__</code> 这样的变量名。</p>\n<p>有些时候，您会看到以一个下划线开头的实例变量名，比如 <code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当您看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p>\n<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问 <code>__name</code> 是因为 Python 解释器对外把 <code>__name</code> 变量改成了 <code>_Student__name</code>，所以，仍然可以通过 <code>_Student__name</code> 来访问 <code>__name</code> 变量:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart._Student__name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span></span></code></pre>\n</div><p>但是强烈建议您不要这么干，因为不同版本的 Python 解释器可能会把 <code>__name</code> 改成不同的变量名。</p>\n<p>总的来说就是，Python 本身没有任何机制阻止您干坏事，一切全靠自觉。</p>\n<div class=\"hint-container caution\">\n<p class=\"hint-container-title\">错误写法</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">59</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">get_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.__name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'New Name'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 设置__name变量!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.__name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'New Name'</span></span></code></pre>\n</div><p>表面上看，外部代码“成功”地设置了 <code>__name</code> 变量，但实际上这个 <code>__name</code> 变量和 class 内部的 <code>__name</code> 变量不是一个变量! 内部的 <code>__name</code> 变量已经被 Python 解释器自动改成了 <code>_Student__name</code>，而外部代码给 bart 新增了一个 <code>__name</code> 变量。</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> bart.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">get_name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># get_name()内部返回self.__name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Bart Simpson'</span></span></code></pre>\n</div></div>\n<h2><code>__slots__</code></h2>\n<p>Python 允许在定义 class 的时候，定义一个特殊的 <code>__slots__</code> 变量，来限制该 class 实例能添加的属性。</p>\n<h3>不受限制的属性</h3>\n<p>正常情况下，当我们定义了一个 class，创建了一个 class 的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性。先定义 class:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>然后，尝试给实例绑定一个属性:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Michael'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 动态给实例绑定一个属性</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(s.name)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Michael</span></span></code></pre>\n</div><p>还可以尝试给实例绑定一个方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> set_age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">): </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 定义一个函数作为实例方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">     self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> age</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> types </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> MethodType</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.set_age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> MethodType</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(set_age, s) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 给实例绑定一个方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">set_age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 调用实例方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.age </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 测试结果</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span></span></code></pre>\n</div><p>但是，给一个实例绑定的方法，对另一个实例是不起作用的:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 创建新的实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s2.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">set_age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 尝试调用方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Student'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'set_age'</span></span></code></pre>\n</div><p>为了给所有实例都绑定方法，可以给 class 绑定方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">     self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Student.set_score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> set_score</span></span></code></pre>\n</div><p>给 class 绑定方法后，所有实例均可调用:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s2.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s2.score</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">99</span></span></code></pre>\n</div><p>通常情况下，上面的 <code>set_score</code> 方法可以直接定义在 class 中，但动态绑定允许我们在程序运行的过程中动态给 class 加上功能，这在静态语言中很难实现。</p>\n<h3>使用 <code>__slots__</code></h3>\n<p>想要限制实例的属性，比如只允许对 <code>Student</code> 实例添加 <code>name</code> 和 <code>age</code> 属性，就要使用 <code>__slots__</code>。Python 允许在定义 class 的时候，定义一个特殊的 <code>__slots__</code> 变量，来限制该 class 实例能添加的属性:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    __slots__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'name'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'age'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 用tuple定义允许绑定的属性名称</span></span></code></pre>\n</div><p>然后，我们试试:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 创建新的实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'Michael'</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 绑定属性'name'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.age </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 绑定属性'age'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 99</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # 绑定属性'score'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Student'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score'</span></span></code></pre>\n</div><p>由于 <code>'score'</code> 没有被放到 <code>__slots__</code> 中，所以不能绑定 score 属性，试图绑定 score 将得到 <code>AttributeError</code> 的错误。</p>\n<p>使用 <code>__slots__</code> 要注意，<code>__slots__</code> 定义的属性仅对当前类实例起作用，对继承的子类是不起作用的:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> GraduateStudent</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">     pass</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> g </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> GraduateStudent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> g.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 9999</span></span></code></pre>\n</div><p>除非在子类中也定义 <code>__slots__</code>，这样，子类实例允许定义的属性就是自身的 <code>__slots__</code> 加上父类的 <code>__slots__</code>。</p>\n<h2>@property</h2>\n<p><code>@property</code> 广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p>\n<p>在绑定属性时，若直接暴露属性，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">s.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 9999</span></span></code></pre>\n</div><p>这显然不合逻辑。为了限制 <code>score</code> 的范围，可以通过一个 <code>set_score()</code> 方法来设置成绩，再通过一个 <code>get_score()</code> 来获取成绩，这样，在 <code>set_score()</code> 方法里，就可以检查参数:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> get_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">         return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._score</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> not</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score must be an integer!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> or</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score must between 0 ~ 100!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>现在，对任意的 <code>Student</code> 实例进行操作，就不能随心所欲地设置 <code>score</code> 了:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># ok!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">get_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">set_score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9999</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">  ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: score must between </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ~</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">!</span></span></code></pre>\n</div><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p>\n<p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的 Python 程序员来说，这是必须要做到的!</p>\n<p>还记得装饰器 (decorator) 可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python 内置的 <code>@property</code> 装饰器就是负责把一个方法变成属性调用的:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    @</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">property</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._score</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    @score</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setter</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> score</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> not</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score must be an integer!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> or</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'score must between 0 ~ 100!'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>@property</code> 的实现比较复杂，我们先考察如何使用。把一个 <code>getter</code> 方法变成属性，只需要加上 <code>@property</code> 就可以了，此时，<code>@property</code> 本身又创建了另一个装饰器 <code>@score.setter</code>，负责把一个 <code>setter</code> 方法变成属性赋值，于是，我们就拥有一个可控的属性操作:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Student</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 60</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # OK，实际转化为s.set_score(60)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.score </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># OK，实际转化为s.get_score()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">60</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> s.score </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 9999</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">  ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: score must between </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ~</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">!</span></span></code></pre>\n</div><p>注意到这个神奇的 <code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过 <code>getter</code> 和 <code>setter</code> 方法来实现的。</p>\n<p>还可以定义只读属性，只定义 <code>getter</code> 方法，不定义 <code>setter</code> 方法就是一个只读属性:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Student</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    @</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">property</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> birth</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._birth</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    @birth</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setter</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> birth</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._birth </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    @</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">property</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2015</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">._birth</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>上面的 <code>birth</code> 是可读写属性，而 <code>age</code> 就是一个只读属性，因为 <code>age</code> 可以根据 <code>birth</code> 和当前时间计算出来。</p>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "特殊的 class",
      "url": "https://mister-hope.com/code/language/python/oop/special.html",
      "id": "https://mister-hope.com/code/language/python/oop/special.html",
      "summary": "type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。 比方说我们要定义一个 Hello 的 class，就写一个 hello.py 模块: 当 Python 解释器载入 hello 模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个 Hello 的 class 对象，测试如下: type...",
      "content_html": "<h2><code>type()</code></h2>\n<p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。</p>\n<p>比方说我们要定义一个 <code>Hello</code> 的 class，就写一个 <code>hello.py</code> 模块:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Hello</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> hello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'world'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">.'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name)</span></span></code></pre>\n</div><p>当 Python 解释器载入 <code>hello</code> 模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个 <code>Hello</code> 的 class 对象，测试如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> hello </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Hello</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> h </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Hello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> h.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">hello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Hello, world.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Hello))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'type'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(h))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'hello.Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n</div><p><code>type()</code> 函数可以查看一个类型或变量的类型，<code>Hello</code> 是一个 class，它的类型就是 type，而 <code>h</code> 是一个实例，它的类型就是 <code>class Hello</code>。</p>\n<p>我们说 class 的定义是运行时动态创建的，而创建 class 的方法就是使用 <code>type()</code> 函数。</p>\n<p><code>type()</code> 函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过 <code>type()</code> 函数创建出 Hello 类，而无需通过 <code>class Hello(object)...</code> 的定义:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fn</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'world'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">): </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 先定义函数</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">     print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">.'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Hello </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,), </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">dict</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">hello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">fn)) </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 创建Hello class</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> h </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Hello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> h.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">hello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Hello, world.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Hello))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'type'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(h))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '__main__.Hello'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>要创建一个 class 对象，<code>type()</code> 函数依次传入 3 个参数:</p>\n<ol>\n<li>class 的名称；</li>\n<li>继承的父类集合，注意 Python 支持多重继承，如果只有一个父类，别忘了 <code>tuple</code> 的单元素写法；</li>\n<li>class 的方法名称与函数绑定，这里我们把函数 <code>fn</code> 绑定到方法名 <code>hello</code> 上。</li>\n</ol>\n<p>通过 <code>type()</code> 函数创建的类和直接写 class 是完全一样的，因为 Python 解释器遇到 class 定义时，仅仅是扫描一下 class 定义的语法，然后调用 <code>type()</code> 函数创建出 class。</p>\n<p>正常情况下，我们都用 <code>class Xxx...</code> 来定义类，但是，<code>type()</code> 函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。</p>\n<h2>Enum</h2>\n<p><code>Enum</code> 可以把一组相关常量定义在一个 class 中，且 class 不可变，而且成员可以直接比较。</p>\n<p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份:</p>\n<div class=\"language-\" data-highlighter=\"shiki\" data-ext=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>JAN = 1</span></span>\n<span class=\"line\"><span>FEB = 2</span></span>\n<span class=\"line\"><span>MAR = 3</span></span>\n<span class=\"line\"><span>...</span></span>\n<span class=\"line\"><span>NOV = 11</span></span>\n<span class=\"line\"><span>DEC = 12</span></span></code></pre>\n</div><p>好处是简单，缺点是类型是 <code>int</code>，并且仍然是变量。</p>\n<p>更好的方法是为这样的枚举类型定义一个 class 类型，然后，每个常量都是 class 的一个唯一实例。Python 提供了 <code>Enum</code> 类来实现这个功能:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> enum </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Enum</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Month </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Enum</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Month'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, (</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Jan'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Feb'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Mar'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Apr'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'May'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Jun'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Jul'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Aug'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Sep'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Oct'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Nov'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Dec'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span></code></pre>\n</div><p>这样我们就获得了 <code>Month</code> 类型的枚举类，可以直接使用 <code>Month.Jan</code> 来引用一个常量，或者枚举它的所有成员:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name, member </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Month.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__members__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">items</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'=&gt;'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, member, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">','</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, member.value)</span></span></code></pre>\n</div><p><code>value</code> 属性则是自动赋给成员的 <code>int</code> 常量，默认从 <code>1</code> 开始计数。</p>\n<p>如果需要更精确地控制枚举类型，可以从 <code>Enum</code> 派生出自定义类:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">from</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> enum </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Enum, unique</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">@unique</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Weekday</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Enum</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Sun </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # Sun的value被设定为0</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Mon </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Tue </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Wed </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Thu </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Fri </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 5</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    Sat </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 6</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>@unique</code> 装饰器可以帮助我们检查保证没有重复值。</p>\n<p>访问这些枚举类型可以有若干种方法:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> day1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Mon</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(day1)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Weekday.Mon</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Weekday.Tue)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Weekday.Tue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Weekday[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Tue'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Weekday.Tue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Weekday.Tue.value)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(day1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Mon)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(day1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Tue)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">False</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Weekday</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Weekday.Mon</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(day1 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Weekday</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">True</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> Weekday</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">  ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">ValueError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> is</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> not</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> a valid Weekday</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name, member </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__members__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">items</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">     print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'=&gt;'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, member)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Sun </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Sun</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Mon </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Mon</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Tue </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Tue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Wed </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Wed</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Thu </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Thu</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Fri </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Fri</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Sat </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> Weekday.Sat</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>可见，既可以用成员名称引用枚举常量，又可以直接根据 <code>value</code> 的值获得枚举常量。</p>\n<h2>metaclass</h2>\n<p>除了使用 <code>type()</code> 动态创建类以外，要控制类的创建行为，还可以使用 metaclass。</p>\n<p>metaclass 是 Python 中非常具有魔术性的对象，它可以改变类创建时的行为。这种强大的功能使用起来务必小心。</p>\n<p>metaclass，直译为元类，简单的解释就是: 当我们定义了类以后，就可以根据这个类创建出实例，所以先定义类，然后创建实例。</p>\n<p>但是如果我们想创建出类呢？那就必须根据 metaclass 创建出类，所以: 先定义 metaclass，然后创建类。</p>\n<p>连接起来就是: 先定义 metaclass，就可以创建类，最后创建实例。</p>\n<p>所以，metaclass 允许您创建类或者修改类。换句话说，您可以把类看成是 metaclass 创建出来的“实例”。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>metaclass 是 Python 面向对象里最难理解，也是最难使用的魔术代码。正常情况下，您不会碰到需要使用 metaclass 的情况，所以，以下内容看不懂也没关系，因为基本上您不会用到。</p>\n</div>\n<p>我们先看一个简单的例子，这个 metaclass 可以给我们自定义的 <code>MyList</code> 增加一个 <code>add</code> 方法:</p>\n<p>定义 <code>ListMetaclass</code>，按照默认习惯，metaclass 的类名总是以 <code>Metaclass</code> 结尾，以便清楚地表示这是一个 metaclass:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># metaclass是类的模板，所以必须从`type`类型派生:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ListMetaclass</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __new__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">cls</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> bases</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> attrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        attrs[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'add'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> lambda</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(value)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__new__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">cls</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, name, bases, attrs)</span></span></code></pre>\n</div><p>有了 <code>ListMetaclass</code>，我们在定义类的时候还要指示使用 <code>ListMetaclass</code> 来定制类，传入关键字参数 metaclass:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyList</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">list</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">metaclass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ListMetaclass</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>当我们传入关键字参数 metaclass 时，魔术就生效了，它指示 Python 解释器在创建 MyList 时，要通过 <code>ListMetaclass.__new__()</code> 来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p>\n<p><code>__new__()</code> 方法接收到的参数依次是:</p>\n<ol>\n<li>当前准备创建的类的对象</li>\n<li>类的名字</li>\n<li>类继承的父类集合</li>\n<li>类的方法集合</li>\n</ol>\n<p>测试一下 <code>MyList</code> 是否可以调用 <code>add()</code> 方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> L </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> MyList</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> L.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> L</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>而普通的 list 没有 <code>add()</code> 方法:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> L2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> L2.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">add</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">Traceback</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (most recent call last):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  File </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"&lt;stdin&gt;\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, line </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">module</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'list'</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> object</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no attribute </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'add'</span></span></code></pre>\n</div><p>动态修改有什么意义？直接在 <code>MyList</code> 定义中写上 <code>add()</code> 方法不是更简单吗？正常情况下，确实应该直接写，通过 metaclass 修改纯属变态。</p>\n<p>但是，总会遇到需要通过 metaclass 修改类定义的。ORM 就是一个典型的例子。</p>\n<p>ORM 全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作 SQL 语句。</p>\n<p>要编写一个 ORM 框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p>\n<p>让我们来尝试编写一个 ORM 框架。</p>\n<p>编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个 ORM 框架，想定义一个 <code>User</code> 类来操作对应的数据库表 <code>User</code>，我们期待他写出这样的代码:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> User</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Model</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    # 定义类的属性到列的映射:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> IntegerField</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'id'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> StringField</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'username'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    email </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> StringField</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'email'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    password </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> StringField</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'password'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 创建一个实例:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">u </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> User</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">12345</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">email</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'test@orm.org'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">password</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'my-pwd'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 保存到数据库:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">u.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">save</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中，父类 <code>Model</code> 和属性类型 <code>StringField</code>、<code>IntegerField</code> 是由 ORM 框架提供的，剩下的魔术方法比如 <code>save()</code> 全部由 metaclass 自动完成。虽然 metaclass 的编写会比较复杂，但 ORM 的使用者用起来却异常简单。</p>\n<p>现在，我们就按上面的接口来实现该 ORM。</p>\n<p>首先来定义 <code>Field</code> 类，它负责保存数据库表的字段名和字段类型:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Field</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">object</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> column_type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.column_type </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> column_type</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __str__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> '&lt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">&gt;'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__class__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.name)</span></span></code></pre>\n</div><p>在 <code>Field</code> 的基础上，进一步定义各种类型的 <code>Field</code>，比如 <code>StringField</code>，<code>IntegerField</code> 等等:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> StringField</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Field</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        super</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(StringField, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'varchar(100)'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> IntegerField</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Field</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        super</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(IntegerField, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(name, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'bigint'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>下一步，就是编写最复杂的 <code>ModelMetaclass</code> 了:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ModelMetaclass</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">type</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __new__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">cls</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> bases</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> attrs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Model'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__new__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">cls</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, name, bases, attrs)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Found model: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        mappings </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> dict</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> k, v </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> attrs.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">items</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            if</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> isinstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(v, Field):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">                print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Found mapping: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ==&gt; </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (k, v))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">                mappings[k] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> v</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> k </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> mappings.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">keys</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            attrs.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">pop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(k)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        attrs[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__mappings__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> mappings </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 保存属性和列的映射关系</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        attrs[</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'__table__'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 假设表名和类名一致</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> type</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__new__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">cls</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, name, bases, attrs)</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以及基类 <code>Model</code>:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Model</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">dict</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">metaclass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">ModelMetaclass</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> **</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">kw</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        super</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(Model, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">__init__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(**kw)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __getattr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> key</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        try</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[key]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        except</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> KeyError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            raise</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\"> AttributeError</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">r</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#E06C75\">\"'Model' object has no attribute '%s'\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> key)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> __setattr__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> key</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[key] </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> value</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> save</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        fields </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        params </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        args </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> []</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        for</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> k, v </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">in</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__mappings__.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">items</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            fields.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(v.name)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            params.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'?'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            args.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">append</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">getattr</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, k, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">None</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        sql </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> 'insert into </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> (</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">) values (</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">)'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">self</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.__table__, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">','</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">join</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(fields), </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">','</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">join</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(params))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'SQL: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> sql)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'ARGS: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> str</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(args))</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>当用户定义一个 <code>class User(Model)</code> 时，Python 解释器首先在当前类 <code>User</code> 的定义中查找 metaclass，如果没有找到，就继续在父类 <code>Model</code> 中查找 metaclass，找到了，就使用 <code>Model</code> 中定义的 metaclass 的 <code>ModelMetaclass</code> 来创建 <code>User</code> 类，也就是说，metaclass 可以隐式地继承到子类，但子类自己却感觉不到。</p>\n<p>在 <code>ModelMetaclass</code> 中，一共做了几件事情:</p>\n<ol>\n<li>排除掉对 <code>Model</code> 类的修改；</li>\n<li>在当前类 (比如 User) 中查找定义的类的所有属性，如果找到一个 <code>Field</code> 属性，就把它保存到一个 <code>__mappings__</code> 的 dict 中，同时从类属性中删除该 <code>Field</code> 属性，否则，容易造成运行时错误 (实例的属性会遮盖类的同名属性) ；</li>\n<li>把表名保存到 <code>__table__</code> 中，这里简化为表名默认为类名。</li>\n</ol>\n<p>在 <code>Model</code> 类中，就可以定义各种操作数据库的方法，比如 <code>save()</code>，<code>delete()</code>，<code>find()</code>，<code>update()</code> 等等。</p>\n<p>我们实现了 <code>save()</code> 方法，把一个实例保存到数据库中。因为有表名，属性到字段的映射和属性值的集合，就可以构造出 <code>INSERT</code> 语句。</p>\n<p>编写代码试试:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">u </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> User</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">12345</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">email</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'test@orm.org'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">password</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'my-pwd'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">u.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">save</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span></code></pre>\n</div><p>输出如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Found model: User</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Found mapping: email </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">StringField:email</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Found mapping: password </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">StringField:password</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Found mapping: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> ==&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">IntegerField:uid</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Found mapping: name </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">==&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> &lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">StringField:username</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">SQL</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: insert into </span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">User</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (password,email,username,</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">values</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:white;--shiki-dark:#FFFFFF\">?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:white;--shiki-dark:#FFFFFF\">?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:white;--shiki-dark:#FFFFFF\">?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:white;--shiki-dark:#FFFFFF\">?</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">ARGS</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'my-pwd'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'test@orm.org'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Michael'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">12345</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>可以看到，<code>save()</code> 方法已经打印出了可执行的 SQL 语句，以及参数列表，只需要真正连接到数据库，执行该 SQL 语句，就可以完成真正的功能。</p>\n<p>不到 100 行代码，我们就通过 metaclass 实现了一个精简的 ORM 框架，是不是非常简单？</p>\n",
      "date_published": "2021-03-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Markdown 块元素",
      "url": "https://mister-hope.com/code/language/markdown/block.html",
      "id": "https://mister-hope.com/code/language/markdown/block.html",
      "summary": "段落和换行 一个段落由一个及以上相连接的行句组成。 一个即以上的空行则会切分出不同的段落，一般的段落不需要用空白或断行缩进。 空行 空行的定义是显示上看起来像是空行，便会被视为空行。 也就是若某一行只包含空白和 tab，则该行也会被视为空行。 「一个及以上相连接的行句组成」这句话其实暗示了 Markdown 允许段落内的强迫断行，其它的格式会把每个断行...",
      "content_html": "<h2>段落和换行</h2>\n<p>一个段落由一个及以上相连接的行句组成。</p>\n<p>一个即以上的空行则会切分出不同的段落，一般的段落不需要用空白或断行缩进。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">空行</p>\n<p>空行的定义是显示上看起来像是空行，便会被视为空行。</p>\n<p>也就是若某一行只包含空白和 tab，则该行也会被视为空行。</p>\n</div>\n<p>「一个及以上相连接的行句组成」这句话其实暗示了 Markdown 允许段落内的强迫断行，其它的格式会把每个断行都转成 <code>&lt;br /&gt;</code> 标签。</p>\n<p>如果您<strong>真的想要</strong>插入 <code>&lt;br /&gt;</code> 标签的话，在行尾加上两个以上的空白，然后按下回车:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">这是一句话，它可以在这里  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">强制换行</span></span></code></pre>\n</div><h2>标题</h2>\n<p>标题能显示出文章的结构。</p>\n<p>Atx (<strong>推荐</strong>)形式是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如:</p>\n<ul>\n<li>H1: <code># Header 1</code></li>\n<li>H2: <code>## Header 2</code></li>\n<li>H3: <code>### Header 3</code></li>\n<li>H4: <code>#### Header 4</code></li>\n<li>H5: <code>##### Header 5</code></li>\n<li>H6: <code>###### Header 6</code></li>\n</ul>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">最佳实践</p>\n<p>为了使内容可读性更强，Markdown 最佳实践要求标题应使用 Atx 写法，并且每个标题应被空行隔开。 (第一行的大标题不需要向上空行)</p>\n</div>\n<p>Setext<sup class=\"footnote-ref\"><a href=\"#footnote1\">[1]</a><a class=\"footnote-anchor\" id=\"footnote-ref1\"></a></sup> 格式不推荐使用。</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"footnote1\" class=\"footnote-item\"><p>Setext 格式</p>\n<p>Setext 形式是用底线的形式，利用 <code>=</code> (最高阶标题) 和 <code>-</code> (第二阶标题) ，例如:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">This is an H1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">=============</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">This is an H2</span></span></code></pre>\n</div> <a href=\"#footnote-ref1\" class=\"footnote-backref\">↩︎</a></li>\n</ol>\n</section>\n",
      "date_published": "2021-02-21T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown 扩展",
      "url": "https://mister-hope.com/code/language/markdown/extend.html",
      "id": "https://mister-hope.com/code/language/markdown/extend.html",
      "summary": "其他特性 自动链接 Markdown 支持比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如: Markdown 会转为: 自动的邮件链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以...",
      "content_html": "<h2>其他特性</h2>\n<h3>自动链接</h3>\n<p>Markdown 支持比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>Markdown 会转为:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"http://example.com/\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;http://example.com/&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>自动的邮件链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以混淆一些不好的信箱地址收集机器人，例如:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">address@example.com</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>Markdown 会转成:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">  href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x6D;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x61;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">i</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x6C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x74;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x6F;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x61;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x64;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x64;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x72;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x65;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#115;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#115;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#64;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#101;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#120;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x61;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#109;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x70;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x6C;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">e</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#x2E;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#99;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#111;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#E06C75\">&amp;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">#109;</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">e</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>在浏览器里面，这段字串会变成一个可以点击的 「address@example.com」 链接。</p>\n<p>(这种作法虽然可以混淆不少的机器人，但并无法全部挡下来，不过这样也比什么都不做好些。无论如何，公开您的信箱终究会引来广告信件的。)</p>\n<h3>转义字符</h3>\n<p>Markdown 可以利用反斜线来插入一些在语法中有其它意义的符号，例如: 如果您想要用星号加在文字旁边的方式来做出强调效果 (但不用 <code>&lt;em&gt;</code> 标签) ，您可以在星号的前面加上反斜线:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">literal asterisks</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\*</span></span></code></pre>\n</div><p>Markdown 支持在下面这些符号前面加上反斜线来帮助插入普通的符号:</p>\n<ul>\n<li><code>\\</code> 反斜线</li>\n<li><code>`</code> 反引号</li>\n<li><code>*</code> 星号</li>\n<li><code>_</code> 底线</li>\n<li><code>{}</code> 大括号</li>\n<li><code>[]</code> 方括号</li>\n<li><code>()</code> 括号</li>\n<li><code>#</code> 井字号</li>\n<li><code>+</code> 加号</li>\n<li><code>-</code> 减号</li>\n<li><code>.</code> 英文句点</li>\n<li><code>!</code> 惊叹号</li>\n</ul>\n<h2>大部分编辑器通用快捷键</h2>\n<p>| 输出后的效果  | Markdown   | 快捷键         |\n|</p>\n",
      "date_published": "2021-02-21T00:00:00.000Z",
      "date_modified": "2024-01-25T18:01:12.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown 行内元素",
      "url": "https://mister-hope.com/code/language/markdown/inline.html",
      "id": "https://mister-hope.com/code/language/markdown/inline.html",
      "summary": "链接 Markdown 支持两种形式的链接语法: 行内和参考。 不管是哪一种，链接的文字都是用 [方括号] 来标记。 行内链接 要建立一个行内形式的链接，只要在方块括号后输入圆括号并插入网址链接即可，如果您还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。 例子 输入: 渲染结果: 输出: This is an...",
      "content_html": "<h2>链接</h2>\n<p>Markdown 支持两种形式的链接语法: <em>行内</em>和<em>参考</em>。</p>\n<p>不管是哪一种，链接的文字都是用 <code>[方括号]</code> 来标记。</p>\n<h3>行内链接</h3>\n<p>要建立一个行内形式的链接，只要在方块括号后输入圆括号并插入网址链接即可，如果您还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">This is </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">an example</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> inline link.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">This link</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.net/</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> has no title attribute.</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  This is &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"http://example.com/\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Title\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; an example&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; inline</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  link.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"http://example.net/\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;This link&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; has no title attribute.&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>This is <a href=\"http://example.com/\" title=\"Title\" target=\"_blank\" rel=\"noopener noreferrer\">an example</a> inline link.</p>\n<p><a href=\"http://example.net/\" target=\"_blank\" rel=\"noopener noreferrer\">This link</a> has no title attribute.</p>\n</details>\n<p>如果您是要链接到同样主机的资源，您可以使用绝对路径或相对路径:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">See my </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">About</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">/about.html</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> page for details.</span></span></code></pre>\n</div><h3>参考链接</h3>\n<p>参考形式的链接使用另外一个方括号接在链接文字的括号后面，而在第二个方括号里面要填入标识链接的标签:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">This is </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">an example</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[id]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> reference-style link.</span></span></code></pre>\n</div><p>之后在文件的任意地方，您都可以把这个标签的链接内容定义出来:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[id]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional Title Here</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span></code></pre>\n</div><p>链接定义的形式为:</p>\n<ul>\n<li>方括号，输入链接的标识 ID</li>\n<li>冒号</li>\n<li>一个以上的空白或 tab</li>\n<li>链接的网址</li>\n<li>选择性地添加 title 内容，可以用单引号、双引号或是括号包括</li>\n</ul>\n<p>下面这三种链接的定义相同:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[foo]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional Title Here</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[foo]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional Title Here</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[foo]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional Title Here</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span></code></pre>\n</div><p>链接网址也可以用方括号包起来:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[id]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">[http://example.com/]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional Title Here</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span></code></pre>\n</div><p>您也可以把 title 属性放到下一行，也可以加一些缩进，网址太长的话，这样会比较好看:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[id]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://example.com/longish/path/to/resource/here</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    \"Optional Title Here\"</span></span></code></pre>\n</div><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>\n<p>链接辨识标签可以有字母、数字、空白和标点符号，但是并<strong>不</strong>区分大小写，因此下面两个链接是一样的:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">link text</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[a]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">link text</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[A]</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">最佳实践</p>\n<p>由于不区分大小写的原因，Markdown 最佳实践推荐标识标签均使用小写。</p>\n</div>\n<h4>简写</h4>\n<p>您可以通过简写写法省略指定链接标签，这种情形下，链接标签和链接文字会视为相同，要用预设链接标签只要在链接文字后面加上一个空的方括号，如果您要让 \"Google\" 链接到 google.com，您可以简化成:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Google</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[]</span></span></code></pre>\n</div><p>然后定义链接内容:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[google]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://google.com/</span></span></code></pre>\n</div><p>由于链接文字可能包含空白，所以这种简化的标签内也可以包含多个文字:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Visit </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Daring Fireball</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> for more information.</span></span></code></pre>\n</div><p>然后定义链接:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[daring fireball]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://daringfireball.net/</span></span></code></pre>\n</div><p>链接的定义可以放在文件中的任何一个地方，建议放在链接出现段落的后面或文件最后面，就像是注解一样。</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">I get 10 times more traffic from </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Google</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> than from</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Yahoo</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[2]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> or </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">MSN</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[3]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[1]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://google.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Google</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[2]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://search.yahoo.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Yahoo Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[3]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://search.msn.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">MSN Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span></code></pre>\n</div><p><strong>等同于</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">I get 10 times more traffic from </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Google</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> than from</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Yahoo</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> or </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">MSN</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[google]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://google.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Google</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[yahoo]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://search.yahoo.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Yahoo Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[msn]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://search.msn.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">MSN Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  I get 10 times more traffic from</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"http://google.com/\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Google\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Google&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; than from</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"http://search.yahoo.com/\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Yahoo Search\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Yahoo&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  or &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"http://search.msn.com/\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"MSN Search\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;MSN&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;.</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\" target=\"_blank\" rel=\"noopener noreferrer\">Google</a> than from\n<a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\" target=\"_blank\" rel=\"noopener noreferrer\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\" target=\"_blank\" rel=\"noopener noreferrer\">MSN</a>.</p>\n<p><strong>同样的行内模式写法</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">I get 10 times more traffic from </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Google</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://google.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Google</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">than from </span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Yahoo</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://search.yahoo.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Yahoo Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> or</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">MSN</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">http://search.msn.com/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">MSN Search</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span></span></code></pre>\n</div></details>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">优势</p>\n<p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的链接却会增加到 176 个字符，如果是用纯 HTML 格式来写，会有 234 个字符，在 HTML 格式中，标签比文字还要多。</p>\n<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让您可以把一些标记相关的资讯移到段落文字之外，您就可以增加链接而不让文章的阅读感觉被打断。</p>\n</div>\n<h2>强调</h2>\n<p>Markdown 使用星号 (<code>*</code>) 和底线 (<code>_</code>) 作为标记强调字词的符号。</p>\n<p>被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>。</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit\">**double asterisks**</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (建议)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">_single underscores_</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (建议)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit\">__double underscores__</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">*single asterisks*</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">strong</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;double asterisks&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">strong</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;single underscores&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">strong</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;double underscores&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">strong</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;single asterisks&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<p>但是如果您的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">These two _, _ and *, * will be treated as normal characters.</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>These two _, _ and *, * will be treated as normal characters.</p>\n</details>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">最佳实践</p>\n<p>为了将两者进行区分，Markdown 最佳实践要求在所有地方尽可能使用 <code>**</code> 和 <code>_</code>。但是这里有一个例外:</p>\n<p>由于使用代码或者是其他情况，人们很容易创造出带有下划线的单词 (如 <code>last_updated_time</code>)，在这种情况下，updated 就不会识别为斜体。只有在这种情况下，使用 <code>*</code> 而不是 <code>_</code>。</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">A varibale like last_updated_time won’t be </span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">_transformed_</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> like last</span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">*updated*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">time.</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>A varibale like last_updated_time won’t be <em>transformed</em> like last<em>updated</em>time.</p>\n</details>\n</div>\n<p>强调也可以直接插在文字中间:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">un</span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">*frigging*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">believable</span></span></code></pre>\n</div><h3>转义</h3>\n<details class=\"hint-container details\"><summary>如果要在文字前后直接插入普通的星号或底线，您可以用 \\</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">this text is surrounded by literal asterisks</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\*</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\_</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">this text is surrounded by literal underscores</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">\\_</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>*this text is surrounded by literal asterisks*</p>\n<p>_this text is surrounded by literal underscores_</p>\n</details>\n<h2>代码</h2>\n<p>如果要标记一小段行内代码，您可以用反引号 (<code>`</code>) 把它包起来。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">反引号</p>\n<p>反引号在键盘的左上角，ESC 键的下方</p>\n</div>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Use the </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">printf()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> function.</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>Use the <code>printf()</code> function.</p>\n</details>\n<h3>转义</h3>\n<p>如果要在代码内插入反引号，您可以用多个反引号来开启和结束行内代码</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">``</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\"> There is a literal backtick (`) here. </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">``</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;There is a literal backtick (`) here.&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p><code>There is a literal backtick (`) here.</code></p>\n</details>\n<p>代码码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样您就可以在区段的一开始就插入反引号。</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">A single backtick in a code span: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">``</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\"> ` </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">``</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">A backtick-delimited string in a code span: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">``</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\"> `foo` </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">``</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;A single backtick in a code span: &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;`&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;A backtick-delimited string in a code span: &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;`foo`&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>A single backtick in a code span: <code>`</code></p>\n<p>A backtick-delimited string in a code span: <code>`foo`</code></p>\n</details>\n<p>在代码码区段内，<code>&amp;</code> 和方括号都会被转成 HTML 实体，这样会比较容易插入 HTML 原始码.</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p><strong>输入</strong>:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">Please don’t use any </span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">&lt;blink&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> tags.</span></span></code></pre>\n</div><p><strong>渲染结果</strong>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Please don’t use any &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">&amp;lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">blink</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">&amp;gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">code</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; tags.&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p><strong>输出</strong>:</p>\n<p>Please don’t use any <code>&lt;blink&gt;</code> tags.</p>\n</details>\n<h2>图片</h2>\n<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>\n<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式: <em>行内</em> 和 <em>参考</em>。</p>\n<ul>\n<li>\n<p>行内图片的语法如下:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">![</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Alt text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">/path/to/img.jpg</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">![</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Alt text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">/path/to/img.jpg</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span></span></code></pre>\n</div><p>详细叙述如下:</p>\n<ul>\n<li>一个惊叹号 <code>!</code></li>\n<li>一个方括号，里面放上图片的替代文字</li>\n<li>一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上\n选择性的 title 文字。</li>\n</ul>\n</li>\n<li>\n<p>参考式的图片语法如下:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">![</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Alt text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">]</span></span></code></pre>\n</div><p><code>id</code> 是图片参考的名称，图片参考的定义方式则和链接参考一样:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">[id]</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">url/to/image</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> \"</span><span style=\"--shiki-light:#E45649;--shiki-dark:#98C379\">Optional title attribute</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">\"</span></span></code></pre>\n</div></li>\n</ul>\n<p>它们的优劣与链接相同。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>Markdown 无法指定图片的宽高，如果您需要的话，您可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>\n</div>\n",
      "image": "https://mister-hope.com/path/to/img.jpg",
      "date_published": "2021-02-21T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown 介绍",
      "url": "https://mister-hope.com/code/language/markdown/intro.html",
      "id": "https://mister-hope.com/code/language/markdown/intro.html",
      "summary": "Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown 的目标是实现「易读易写」。它的扩展名为 .md。",
      "content_html": "<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n<p>Markdown 的目标是实现「易读易写」。它的扩展名为 <code>.md</code>。</p>\n<!-- more -->\n<h2>设计理念</h2>\n<p>Markdown 最需要强调的便是它的可读性。一份使用 Markdown 格式撰写的文件应该可以直接以纯文字发布，并且看起来不会像是由许多标签或是格式指令所构成。</p>\n<p>其语法在设计时受到一些既有 text-to-HTML 格式的影响，包括 <a href=\"http://docutils.sourceforge.net/mirror/setext.html\" target=\"_blank\" rel=\"noopener noreferrer\">Setext</a>、<a href=\"http://www.aaronsw.com/2002/atx/\" target=\"_blank\" rel=\"noopener noreferrer\">atx</a>、<a href=\"http://textism.com/tools/textile/\" target=\"_blank\" rel=\"noopener noreferrer\">Textile</a>、<a href=\"http://docutils.sourceforge.net/rst.html\" target=\"_blank\" rel=\"noopener noreferrer\">reStructuredText</a>、<a href=\"http://www.triptico.com/software/grutatxt.html\" target=\"_blank\" rel=\"noopener noreferrer\">Grutatext</a> 和 <a href=\"http://ettext.taint.org/doc/\" target=\"_blank\" rel=\"noopener noreferrer\">EtText</a>，然而最大灵感来源其实是纯文字的电子邮件格式。因此 Markdown 的语法全由标点符号所组成，并经过严谨慎选，是为了让它们看起来就像所要表达的意思。像是在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。假如您有使用过电子邮件，引言写法看起来就真的像是引用一段文字。</p>\n<p>Markdown 具有一系列衍生版本，用于扩展 Markdown 的功能 (如表格、脚注、内嵌 HTML 等等) ，这些功能并不在最初的设计中，但它们能让 Markdown 转换成更多的格式，例如 LaTeX，Docbook。Markdown 增强版中比较有名的有 Markdown Extra、MultiMarkdown、 Maruku 等。这些衍生版本要么基于工具，如 Pandoc；要么基于网站，如 GitHub 和 Wikipedia，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p>\n<h2>用途</h2>\n<p>Markdown 的语法有个主要的目的: 用来作为一种网络内容的<strong>写作用语言</strong>。Markdown 的重点在于，它能让文件<strong>更容易阅读、编写</strong>。因此，Markdown 的格式语法只涵盖纯文字可以涵盖的范围。</p>\n<p>Markdown 的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台 WordPress 能很好的支持 Markdown。</p>\n<p>用于编写说明文档，并且以 “README.md” 的文件名保存在软件的目录下面。</p>\n<p>除此之外，我们还可以快速将 Markdown 转化为演讲 PPT、Word 产品文档、LaTex 论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown 已经广泛使用，极大地推进了动态可重复性研究的历史进程。</p>\n<h2>特点</h2>\n<h3>行内 HTML</h3>\n<p>不在 Markdown 涵盖范围之外的标签，都可以直接在文件里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>\n<p>只有块元素 ── 比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行，以利与内容区隔。而且这些 (元素) 的开始与结尾标签，不可以用 tab 或是空白来缩进。Markdown 的解析器有智慧型判断，可以避免在块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p>\n<p>举例来说，在 Markdown 文件里加上一段 HTML 表格:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">This is a regular paragraph.</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;table&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;tr&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        &lt;td&gt;Foo&lt;/td&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;/tr&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/table&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">This is another regular paragraph.</span></span></code></pre>\n</div><div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>Markdown 语法在 HTML 块标签中将不会被进行处理。</p>\n<p>例如，您无法在 HTML 块内使用 Markdown 形式的 <code>*强调*</code>。</p>\n</div>\n<h3>特殊字符自动转换</h3>\n<p>简单来说，在 Markdown 中，您无需考虑 HTML 本应考虑的特殊字符转义的问题。</p>\n<p>比如对于 <code>AT&amp;T</code>，Markdown 就会将它转为 <code>AT&amp;amp;T</code>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">HTML 中的特殊字符</p>\n<p>在 HTML 文件中，有两个字符需要特殊处理: <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果您只是想要使用这些符号，您必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>\n<p>使用 HTML 时，<code>&amp;</code> 符号其实很容易让写作网络文件的人感到困扰。</p>\n<p>如果您要打 「AT&amp;T」 ，您必须要写成 <code>「AT&amp;amp;T」</code>。</p>\n<p>同时您还得转换网址内的 <code>&amp;</code> 符号，如果您要链接到 <code>http://images.google.com/images?num=30&amp;q=larry+bird</code>，您必须要把网址转成 <code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code>，才能放到链接标签的 <code>href</code> 属性里。</p>\n<p>不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。</p>\n</div>\n<p>Markdown 即允许您直接使用这些符号。也允许您使用转义符号。</p>\n<p>比如您如果要在文件中插入一个著作权的符号，但是您又不想费力地输入这个不常见的特殊符号，您可以直接在 Markdown 中输入 <code>&amp;copy;</code>，Markdown 会推测出它是转移符号，并把它输出为 ©。</p>\n<p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支持 <a href=\"#%E8%A1%8C%E5%86%85-HTML\">行内 HTML</a> ，如果您是使用 <code>&lt;</code> 符号作为 HTML 标签使用，那 Markdown 也不会对它做任何转换，但是如果您是写:</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">4 &lt; 5</span></span></code></pre>\n</div><p>Markdown 将会把它转换为:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">4 </span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">&amp;lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 5</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>需要注意的是，code 范围内，不论是行内还是块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让您可以很容易地用 Markdown 写 HTML code (和 HTML 相对而言， HTML 语法中，您要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。)</p>\n</div>\n<h2>编写</h2>\n<p>Markdown 就是一个扩展名为 <code>.md</code> 的文本文件。</p>\n<p>理论上您可以使用任何编辑器 (如 <a href=\"/software/vscode/\" target=\"_blank\">VS Code</a>)编辑 Markdown，也可以使用专门的 Markdown 编辑器 (如 <a href=\"https://typora.io\" target=\"_blank\" rel=\"noopener noreferrer\">Typora</a>) 进行编写。</p>\n",
      "date_published": "2021-02-21T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown",
      "url": "https://mister-hope.com/code/language/markdown/",
      "id": "https://mister-hope.com/code/language/markdown/",
      "summary": "Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Markdown 的目标是实现「易读易写」。 Markdown 的主要目的是用来作为一种网络内容的写作用语言。",
      "content_html": "<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n<p>Markdown 的目标是实现「易读易写」。</p>\n<p>Markdown 的主要目的是用来作为一种网络内容的<strong>写作用语言</strong>。</p>\n<!-- more -->\n<h2>目录</h2>\n<ul>\n<li><a href=\"/code/language/markdown/intro.html\" target=\"_blank\">简介</a></li>\n<li><a href=\"/code/language/markdown/block.html\" target=\"_blank\">块元素</a></li>\n<li><a href=\"/code/language/markdown/inline.html\" target=\"_blank\">行内元素</a></li>\n<li><a href=\"/code/language/markdown/extend.html\" target=\"_blank\">扩展与其他内容</a></li>\n</ul>\n<h2>Markdown 效果演示</h2>\n<ul>\n<li><a href=\"/code/language/markdown/demo.html\" target=\"_blank\">查看详情</a></li>\n</ul>\n",
      "date_published": "2022-01-07T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Markdown示例",
      "url": "https://mister-hope.com/code/language/markdown/demo.html",
      "id": "https://mister-hope.com/code/language/markdown/demo.html",
      "summary": "一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 Text 这句话里拥有加粗、倾斜和 段落 这是一个段落。 这是另一个段落。 换行 这是一句话不过我要在这里 换行 提示 上方的代码中 这里 后面有两个空格 引用 引用也可以连用 可以添加额外的大于号制造更深的引用 列表 无序列表 无序列表项 无序列表项 列表中的列表项 更多的列表项 更多的列表...",
      "content_html": "<!-- markdownlint-disable -->\n<h1>一级标题</h1>\n<!-- markdownlint-restore -->\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"># 一级标题</span></span></code></pre>\n</div><h2>二级标题</h2>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">## 二级标题</span></span></code></pre>\n</div><h3>三级标题</h3>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">### 三级标题</span></span></code></pre>\n</div><h4>四级标题</h4>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">#### 四级标题</span></span></code></pre>\n</div><h5>五级标题</h5>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">##### 五级标题</span></span></code></pre>\n</div><h6>六级标题</h6>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">###### 六级标题</span></span></code></pre>\n</div><h2>Text</h2>\n<p>这句话里拥有<strong>加粗</strong>、<em>倾斜</em>和<s>删除</s></p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">这句话里拥有</span><span style=\"--shiki-light:#986801;--shiki-light-font-weight:bold;--shiki-dark:#D19A66;--shiki-dark-font-weight:inherit\">**加粗**</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">、</span><span style=\"--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic\">*倾斜*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">和~~删除~~</span></span></code></pre>\n</div><h2>段落</h2>\n<p>这是一个段落。</p>\n<p>这是另一个段落。</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">这是一个段落</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">这是另一个段落。</span></span></code></pre>\n</div><h2>换行</h2>\n<p>这是一句话不过我要在这里<br>\n换行</p>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">这是一句话不过我要在这里  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">换行</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>上方的代码中 <code>这里</code> 后面有两个空格</p>\n</div>\n<h2>引用</h2>\n<blockquote>\n<p>引用也可以连用</p>\n<blockquote>\n<p>可以添加额外的大于号制造更深的引用</p>\n</blockquote>\n</blockquote>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#5C6370;--shiki-dark-font-style:inherit\">&gt; 引用也可以连用</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#5C6370;--shiki-dark-font-style:inherit\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#5C6370;--shiki-dark-font-style:inherit\">&gt; &gt; 可以添加额外的大于号制造更深的引用</span></span></code></pre>\n</div><h2>列表</h2>\n<h3>无序列表</h3>\n<ul>\n<li>\n<p>无序列表项</p>\n</li>\n<li>\n<p>无序列表项</p>\n<ul>\n<li>\n<p>列表中的列表项</p>\n<ul>\n<li>更多的列表项</li>\n<li>更多的列表项</li>\n<li>更多的列表项</li>\n</ul>\n</li>\n<li>\n<p>列表中的长列表项，这个列表项很长。</p>\n<p>而且由很多个段落构成。</p>\n<p>甚至最后一个段落还包含了<a href=\"#%E9%93%BE%E6%8E%A5\">链接</a>。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>无序列表项</p>\n</li>\n</ul>\n<div class=\"language-md line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 无序列表项</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 无序列表项</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 列表中的列表项</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 更多的列表项</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 更多的列表项</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 更多的列表项</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 列表中的长列表项，这个列表项很长。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    而且由很多个段落构成。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    甚至最后一个段落还包含了</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">链接</span><span style=\"--shiki-light:#986801;--shiki-dark:#ABB2BF\">]</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-light-text-decoration:inherit;--shiki-dark:#C678DD;--shiki-dark-text-decoration:underline\">#链接</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">。</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">-</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 无序列表项</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3>有序列表</h3>\n<ol>\n<li>有序列表第一项</li>\n<li>有序列表第二项<br>\n第二项的需要换行<br>\n再次换行</li>\n<li>有序列表第三项</li>\n</ol>\n<div class=\"language-md\" data-highlighter=\"shiki\" data-ext=\"md\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">1.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 有序列表第一项</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">1.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 有序列表第二项  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">   第二项的需要换行  </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">   再次换行</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">1.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> 有序列表第三项</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>上方的代码中<code>换行</code>后面有也两个空格</p>\n</div>\n<h2>分割线</h2>\n",
      "image": "https://mister-hope.com/logo.svg",
      "date_published": "2021-02-16T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Emoji 列表",
      "url": "https://mister-hope.com/code/language/markdown/emoji/",
      "id": "https://mister-hope.com/code/language/markdown/emoji/",
      "summary": "人物 自然 对象 地点 符号",
      "content_html": "<h2>人物</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/people.html\" target=\"_blank\">点击前往</a></li>\n</ul>\n<h2>自然</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/nature.html\" target=\"_blank\">点击前往</a></li>\n</ul>\n<h2>对象</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/object.html\" target=\"_blank\">点击前往</a></li>\n</ul>\n<h2>地点</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/place.html\" target=\"_blank\">点击前往</a></li>\n</ul>\n<h2>符号</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/symbol.html\" target=\"_blank\">点击前往</a></li>\n</ul>\n",
      "date_published": "2022-01-07T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "自然",
      "url": "https://mister-hope.com/code/language/markdown/emoji/nature.html",
      "id": "https://mister-hope.com/code/language/markdown/emoji/nature.html",
      "summary": "☀️ :sunny: ☔ :umbrella: ☁️ :cloud: ❄️ :snowflake: ⛄ :snowman: ⚡ :zap: 🌀 :cyclone: 🌁 :foggy: 🌊 :ocean: 🐱 :cat: 🐶 :dog: 🐭 :mouse: 🐹 :hamster: 🐰 :rabbit: 🐺 :wolf: 🐸 :frog...",
      "content_html": "<ul>\n<li>☀️ <code>:sunny:</code></li>\n<li>☔ <code>:umbrella:</code></li>\n<li>☁️ <code>:cloud:</code></li>\n<li>❄️ <code>:snowflake:</code></li>\n<li>⛄ <code>:snowman:</code></li>\n<li>⚡ <code>:zap:</code></li>\n<li>🌀 <code>:cyclone:</code></li>\n<li>🌁 <code>:foggy:</code></li>\n<li>🌊 <code>:ocean:</code></li>\n<li>🐱 <code>:cat:</code></li>\n<li>🐶 <code>:dog:</code></li>\n<li>🐭 <code>:mouse:</code></li>\n<li>🐹 <code>:hamster:</code></li>\n<li>🐰 <code>:rabbit:</code></li>\n<li>🐺 <code>:wolf:</code></li>\n<li>🐸 <code>:frog:</code></li>\n<li>🐯 <code>:tiger:</code></li>\n<li>🐨 <code>:koala:</code></li>\n<li>🐻 <code>:bear:</code></li>\n<li>🐷 <code>:pig:</code></li>\n<li>🐽 <code>:pig_nose:</code></li>\n<li>🐮 <code>:cow:</code></li>\n<li>🐗 <code>:boar:</code></li>\n<li>🐵 <code>:monkey_face:</code></li>\n<li>🐒 <code>:monkey:</code></li>\n<li>🐴 <code>:horse:</code></li>\n<li>🐎 <code>:racehorse:</code></li>\n<li>🐫 <code>:camel:</code></li>\n<li>🐑 <code>:sheep:</code></li>\n<li>🐘 <code>:elephant:</code></li>\n<li>🐼 <code>:panda_face:</code></li>\n<li>🐍 <code>:snake:</code></li>\n<li>🐦 <code>:bird:</code></li>\n<li>🐤 <code>:baby_chick:</code></li>\n<li>🐥 <code>:hatched_chick:</code></li>\n<li>🐣 <code>:hatching_chick:</code></li>\n<li>🐔 <code>:chicken:</code></li>\n<li>🐧 <code>:penguin:</code></li>\n<li>🐢 <code>:turtle:</code></li>\n<li>🐛 <code>:bug:</code></li>\n<li>🐝 <code>:honeybee:</code></li>\n<li>🐜 <code>:ant:</code></li>\n<li>🪲 <code>:beetle:</code></li>\n<li>🐌 <code>:snail:</code></li>\n<li>🐙 <code>:octopus:</code></li>\n<li>🐠 <code>:tropical_fish:</code></li>\n<li>🐟 <code>:fish:</code></li>\n<li>🐳 <code>:whale:</code></li>\n<li>🐋 <code>:whale2:</code></li>\n<li>🐬 <code>:dolphin:</code></li>\n<li>🐄 <code>:cow2:</code></li>\n<li>🐏 <code>:ram:</code></li>\n<li>🐀 <code>:rat:</code></li>\n<li>🐃 <code>:water_buffalo:</code></li>\n<li>🐅 <code>:tiger2:</code></li>\n<li>🐇 <code>:rabbit2:</code></li>\n<li>🐉 <code>:dragon:</code></li>\n<li>🐐 <code>:goat:</code></li>\n<li>🐓 <code>:rooster:</code></li>\n<li>🐕 <code>:dog2:</code></li>\n<li>🐖 <code>:pig2:</code></li>\n<li>🐁 <code>:mouse2:</code></li>\n<li>🐂 <code>:ox:</code></li>\n<li>🐲 <code>:dragon_face:</code></li>\n<li>🐡 <code>:blowfish:</code></li>\n<li>🐊 <code>:crocodile:</code></li>\n<li>🐪 <code>:dromedary_camel:</code></li>\n<li>🐆 <code>:leopard:</code></li>\n<li>🐈 <code>:cat2:</code></li>\n<li>🐩 <code>:poodle:</code></li>\n<li>🐾 <code>:paw_prints:</code></li>\n<li>💐 <code>:bouquet:</code></li>\n<li>🌸 <code>:cherry_blossom:</code></li>\n<li>🌷 <code>:tulip:</code></li>\n<li>🍀 <code>:four_leaf_clover:</code></li>\n<li>🌹 <code>:rose:</code></li>\n<li>🌻 <code>:sunflower:</code></li>\n<li>🌺 <code>:hibiscus:</code></li>\n<li>🍁 <code>:maple_leaf:</code></li>\n<li>🍃 <code>:leaves:</code></li>\n<li>🍂 <code>:fallen_leaf:</code></li>\n<li>🌿 <code>:herb:</code></li>\n<li>🍄 <code>:mushroom:</code></li>\n<li>🌵 <code>:cactus:</code></li>\n<li>🌴 <code>:palm_tree:</code></li>\n<li>🌲 <code>:evergreen_tree:</code></li>\n<li>🌳 <code>:deciduous_tree:</code></li>\n<li>🌰 <code>:chestnut:</code></li>\n<li>🌱 <code>:seedling:</code></li>\n<li>🌼 <code>:blossom:</code></li>\n<li>🌾 <code>:ear_of_rice:</code></li>\n<li>🐚 <code>:shell:</code></li>\n<li>🌐 <code>:globe_with_meridians:</code></li>\n<li>🌞 <code>:sun_with_face:</code></li>\n<li>🌝 <code>:full_moon_with_face:</code></li>\n<li>🌚 <code>:new_moon_with_face:</code></li>\n<li>🌑 <code>:new_moon:</code></li>\n<li>🌒 <code>:waxing_crescent_moon:</code></li>\n<li>🌓 <code>:first_quarter_moon:</code></li>\n<li>🌔 <code>:waxing_gibbous_moon:</code></li>\n<li>🌕 <code>:full_moon:</code></li>\n<li>🌖 <code>:waning_gibbous_moon:</code></li>\n<li>🌗 <code>:last_quarter_moon:</code></li>\n<li>🌘 <code>:waning_crescent_moon:</code></li>\n<li>🌜 <code>:last_quarter_moon_with_face:</code></li>\n<li>🌛 <code>:first_quarter_moon_with_face:</code></li>\n<li>🌙 <code>:crescent_moon:</code></li>\n<li>🌍 <code>:earth_africa:</code></li>\n<li>🌎 <code>:earth_americas:</code></li>\n<li>🌏 <code>:earth_asia:</code></li>\n<li>🌋 <code>:volcano:</code></li>\n<li>🌌 <code>:milky_way:</code></li>\n<li>⛅ <code>:partly_sunny:</code></li>\n</ul>\n",
      "date_published": "2021-02-16T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "对象",
      "url": "https://mister-hope.com/code/language/markdown/emoji/object.html",
      "id": "https://mister-hope.com/code/language/markdown/emoji/object.html",
      "summary": "🎍 :bamboo: 💝 :gift_heart: 🎎 :dolls: 🎒 :school_satchel: 🎓 :mortar_board: 🎏 :flags: 🎆 :fireworks: 🎇 :sparkler: 🎐 :wind_chime: 🎑 :rice_scene: 🎃 :jack_o_lantern: 👻 :ghos...",
      "content_html": "<ul>\n<li>🎍 <code>:bamboo:</code></li>\n<li>💝 <code>:gift_heart:</code></li>\n<li>🎎 <code>:dolls:</code></li>\n<li>🎒 <code>:school_satchel:</code></li>\n<li>🎓 <code>:mortar_board:</code></li>\n<li>🎏 <code>:flags:</code></li>\n<li>🎆 <code>:fireworks:</code></li>\n<li>🎇 <code>:sparkler:</code></li>\n<li>🎐 <code>:wind_chime:</code></li>\n<li>🎑 <code>:rice_scene:</code></li>\n<li>🎃 <code>:jack_o_lantern:</code></li>\n<li>👻 <code>:ghost:</code></li>\n<li>🎅 <code>:santa:</code></li>\n<li>🎄 <code>:christmas_tree:</code></li>\n<li>🎁 <code>:gift:</code></li>\n<li>🔔 <code>:bell:</code></li>\n<li>🔕 <code>:no_bell:</code></li>\n<li>🎋 <code>:tanabata_tree:</code></li>\n<li>🎉 <code>:tada:</code></li>\n<li>🎊 <code>:confetti_ball:</code></li>\n<li>🎈 <code>:balloon:</code></li>\n<li>🔮 <code>:crystal_ball:</code></li>\n<li>💿 <code>:cd:</code></li>\n<li>📀 <code>:dvd:</code></li>\n<li>💾 <code>:floppy_disk:</code></li>\n<li>📷 <code>:camera:</code></li>\n<li>📹 <code>:video_camera:</code></li>\n<li>🎥 <code>:movie_camera:</code></li>\n<li>💻 <code>:computer:</code></li>\n<li>📺 <code>:tv:</code></li>\n<li>📱 <code>:iphone:</code></li>\n<li>☎️ <code>:phone:</code></li>\n<li>☎️ <code>:telephone:</code></li>\n<li>📞 <code>:telephone_receiver:</code></li>\n<li>📟 <code>:pager:</code></li>\n<li>📠 <code>:fax:</code></li>\n<li>💽 <code>:minidisc:</code></li>\n<li>📼 <code>:vhs:</code></li>\n<li>🔉 <code>:sound:</code></li>\n<li>🔈 <code>:speaker:</code></li>\n<li>🔇 <code>:mute:</code></li>\n<li>📢 <code>:loudspeaker:</code></li>\n<li>📣 <code>:mega:</code></li>\n<li>⌛ <code>:hourglass:</code></li>\n<li>⏳ <code>:hourglass_flowing_sand:</code></li>\n<li>⏰ <code>:alarm_clock:</code></li>\n<li>⌚ <code>:watch:</code></li>\n<li>📻 <code>:radio:</code></li>\n<li>📡 <code>:satellite:</code></li>\n<li>➿ <code>:loop:</code></li>\n<li>🔍 <code>:mag:</code></li>\n<li>🔎 <code>:mag_right:</code></li>\n<li>🔓 <code>:unlock:</code></li>\n<li>🔒 <code>:lock:</code></li>\n<li>🔏 <code>:lock_with_ink_pen:</code></li>\n<li>🔐 <code>:closed_lock_with_key:</code></li>\n<li>🔑 <code>:key:</code></li>\n<li>💡 <code>:bulb:</code></li>\n<li>🔦 <code>:flashlight:</code></li>\n<li>🔆 <code>:high_brightness:</code></li>\n<li>🔅 <code>:low_brightness:</code></li>\n<li>🔌 <code>:electric_plug:</code></li>\n<li>🔋 <code>:battery:</code></li>\n<li>📲 <code>:calling:</code></li>\n<li>📧 <code>:email:</code></li>\n<li>📫 <code>:mailbox:</code></li>\n<li>📮 <code>:postbox:</code></li>\n<li>🛀 <code>:bath:</code></li>\n<li>🛁 <code>:bathtub:</code></li>\n<li>🚿 <code>:shower:</code></li>\n<li>🚽 <code>:toilet:</code></li>\n<li>🔧 <code>:wrench:</code></li>\n<li>🔩 <code>:nut_and_bolt:</code></li>\n<li>🔨 <code>:hammer:</code></li>\n<li>💺 <code>:seat:</code></li>\n<li>💰 <code>:moneybag:</code></li>\n<li>💴 <code>:yen:</code></li>\n<li>💵 <code>:dollar:</code></li>\n<li>💷 <code>:pound:</code></li>\n<li>💶 <code>:euro:</code></li>\n<li>💳 <code>:credit_card:</code></li>\n<li>💸 <code>:money_with_wings:</code></li>\n<li>📧 <code>:e-mail:</code></li>\n<li>📥 <code>:inbox_tray:</code></li>\n<li>📤 <code>:outbox_tray:</code></li>\n<li>✉️ <code>:envelope:</code></li>\n<li>📨 <code>:incoming_envelope:</code></li>\n<li>📯 <code>:postal_horn:</code></li>\n<li>📪 <code>:mailbox_closed:</code></li>\n<li>📬 <code>:mailbox_with_mail:</code></li>\n<li>📭 <code>:mailbox_with_no_mail:</code></li>\n<li>📦 <code>:package:</code></li>\n<li>🚪 <code>:door:</code></li>\n<li>🚬 <code>:smoking:</code></li>\n<li>💣 <code>:bomb:</code></li>\n<li>🔫 <code>:gun:</code></li>\n<li>🔪 <code>:hocho:</code></li>\n<li>💊 <code>:pill:</code></li>\n<li>💉 <code>:syringe:</code></li>\n<li>📄 <code>:page_facing_up:</code></li>\n<li>📃 <code>:page_with_curl:</code></li>\n<li>📑 <code>:bookmark_tabs:</code></li>\n<li>📊 <code>:bar_chart:</code></li>\n<li>📈 <code>:chart_with_upwards_trend:</code></li>\n<li>📉 <code>:chart_with_downwards_trend:</code></li>\n<li>📜 <code>:scroll:</code></li>\n<li>📋 <code>:clipboard:</code></li>\n<li>📆 <code>:calendar:</code></li>\n<li>📅 <code>:date:</code></li>\n<li>📇 <code>:card_index:</code></li>\n<li>📁 <code>:file_folder:</code></li>\n<li>📂 <code>:open_file_folder:</code></li>\n<li>✂️ <code>:scissors:</code></li>\n<li>📌 <code>:pushpin:</code></li>\n<li>📎 <code>:paperclip:</code></li>\n<li>✒️ <code>:black_nib:</code></li>\n<li>✏️ <code>:pencil2:</code></li>\n<li>📏 <code>:straight_ruler:</code></li>\n<li>📐 <code>:triangular_ruler:</code></li>\n<li>📕 <code>:closed_book:</code></li>\n<li>📗 <code>:green_book:</code></li>\n<li>📘 <code>:blue_book:</code></li>\n<li>📙 <code>:orange_book:</code></li>\n<li>📓 <code>:notebook:</code></li>\n<li>📔 <code>:notebook_with_decorative_cover:</code></li>\n<li>📒 <code>:ledger:</code></li>\n<li>📚 <code>:books:</code></li>\n<li>🔖 <code>:bookmark:</code></li>\n<li>📛 <code>:name_badge:</code></li>\n<li>🔬 <code>:microscope:</code></li>\n<li>🔭 <code>:telescope:</code></li>\n<li>📰 <code>:newspaper:</code></li>\n<li>🏈 <code>:football:</code></li>\n<li>🏀 <code>:basketball:</code></li>\n<li>⚽ <code>:soccer:</code></li>\n<li>⚾ <code>:baseball:</code></li>\n<li>🎾 <code>:tennis:</code></li>\n<li>🎱 <code>:8ball:</code></li>\n<li>🏉 <code>:rugby_football:</code></li>\n<li>🎳 <code>:bowling:</code></li>\n<li>⛳ <code>:golf:</code></li>\n<li>🚵 <code>:mountain_bicyclist:</code></li>\n<li>🚴 <code>:bicyclist:</code></li>\n<li>🏇 <code>:horse_racing:</code></li>\n<li>🏂 <code>:snowboarder:</code></li>\n<li>🏊 <code>:swimmer:</code></li>\n<li>🏄 <code>:surfer:</code></li>\n<li>🎿 <code>:ski:</code></li>\n<li>♠️ <code>:spades:</code></li>\n<li>♥️ <code>:hearts:</code></li>\n<li>♣️ <code>:clubs:</code></li>\n<li>♦️ <code>:diamonds:</code></li>\n<li>💎 <code>:gem:</code></li>\n<li>💍 <code>:ring:</code></li>\n<li>🏆 <code>:trophy:</code></li>\n<li>🎼 <code>:musical_score:</code></li>\n<li>🎹 <code>:musical_keyboard:</code></li>\n<li>🎻 <code>:violin:</code></li>\n<li>👾 <code>:space_invader:</code></li>\n<li>🎮 <code>:video_game:</code></li>\n<li>🃏 <code>:black_joker:</code></li>\n<li>🎴 <code>:flower_playing_cards:</code></li>\n<li>🎲 <code>:game_die:</code></li>\n<li>🎯 <code>:dart:</code></li>\n<li>🀄 <code>:mahjong:</code></li>\n<li>🎬 <code>:clapper:</code></li>\n<li>📝 <code>:memo:</code></li>\n<li>📝 <code>:pencil:</code></li>\n<li>📖 <code>:book:</code></li>\n<li>🎨 <code>:art:</code></li>\n<li>🎤 <code>:microphone:</code></li>\n<li>🎧 <code>:headphones:</code></li>\n<li>🎺 <code>:trumpet:</code></li>\n<li>🎷 <code>:saxophone:</code></li>\n<li>🎸 <code>:guitar:</code></li>\n<li>👞 <code>:shoe:</code></li>\n<li>👡 <code>:sandal:</code></li>\n<li>👠 <code>:high_heel:</code></li>\n<li>💄 <code>:lipstick:</code></li>\n<li>👢 <code>:boot:</code></li>\n<li>👕 <code>:shirt:</code></li>\n<li>👕 <code>:tshirt:</code></li>\n<li>👔 <code>:necktie:</code></li>\n<li>👚 <code>:womans_clothes:</code></li>\n<li>👗 <code>:dress:</code></li>\n<li>🎽 <code>:running_shirt_with_sash:</code></li>\n<li>👖 <code>:jeans:</code></li>\n<li>👘 <code>:kimono:</code></li>\n<li>👙 <code>:bikini:</code></li>\n<li>🎀 <code>:ribbon:</code></li>\n<li>🎩 <code>:tophat:</code></li>\n<li>👑 <code>:crown:</code></li>\n<li>👒 <code>:womans_hat:</code></li>\n<li>👞 <code>:mans_shoe:</code></li>\n<li>🌂 <code>:closed_umbrella:</code></li>\n<li>💼 <code>:briefcase:</code></li>\n<li>👜 <code>:handbag:</code></li>\n<li>👝 <code>:pouch:</code></li>\n<li>👛 <code>:purse:</code></li>\n<li>👓 <code>:eyeglasses:</code></li>\n<li>🎣 <code>:fishing_pole_and_fish:</code></li>\n<li>☕ <code>:coffee:</code></li>\n<li>🍵 <code>:tea:</code></li>\n<li>🍶 <code>:sake:</code></li>\n<li>🍼 <code>:baby_bottle:</code></li>\n<li>🍺 <code>:beer:</code></li>\n<li>🍻 <code>:beers:</code></li>\n<li>🍸 <code>:cocktail:</code></li>\n<li>🍹 <code>:tropical_drink:</code></li>\n<li>🍷 <code>:wine_glass:</code></li>\n<li>🍴 <code>:fork_and_knife:</code></li>\n<li>🍕 <code>:pizza:</code></li>\n<li>🍔 <code>:hamburger:</code></li>\n<li>🍟 <code>:fries:</code></li>\n<li>🍗 <code>:poultry_leg:</code></li>\n<li>🍖 <code>:meat_on_bone:</code></li>\n<li>🍝 <code>:spaghetti:</code></li>\n<li>🍛 <code>:curry:</code></li>\n<li>🍤 <code>:fried_shrimp:</code></li>\n<li>🍱 <code>:bento:</code></li>\n<li>🍣 <code>:sushi:</code></li>\n<li>🍥 <code>:fish_cake:</code></li>\n<li>🍙 <code>:rice_ball:</code></li>\n<li>🍘 <code>:rice_cracker:</code></li>\n<li>🍚 <code>:rice:</code></li>\n<li>🍜 <code>:ramen:</code></li>\n<li>🍲 <code>:stew:</code></li>\n<li>🍢 <code>:oden:</code></li>\n<li>🍡 <code>:dango:</code></li>\n<li>🥚 <code>:egg:</code></li>\n<li>🍞 <code>:bread:</code></li>\n<li>🍩 <code>:doughnut:</code></li>\n<li>🍮 <code>:custard:</code></li>\n<li>🍦 <code>:icecream:</code></li>\n<li>🍨 <code>:ice_cream:</code></li>\n<li>🍧 <code>:shaved_ice:</code></li>\n<li>🎂 <code>:birthday:</code></li>\n<li>🍰 <code>:cake:</code></li>\n<li>🍪 <code>:cookie:</code></li>\n<li>🍫 <code>:chocolate_bar:</code></li>\n<li>🍬 <code>:candy:</code></li>\n<li>🍭 <code>:lollipop:</code></li>\n<li>🍯 <code>:honey_pot:</code></li>\n<li>🍎 <code>:apple:</code></li>\n<li>🍏 <code>:green_apple:</code></li>\n<li>🍊 <code>:tangerine:</code></li>\n<li>🍋 <code>:lemon:</code></li>\n<li>🍒 <code>:cherries:</code></li>\n<li>🍇 <code>:grapes:</code></li>\n<li>🍉 <code>:watermelon:</code></li>\n<li>🍓 <code>:strawberry:</code></li>\n<li>🍑 <code>:peach:</code></li>\n<li>🍈 <code>:melon:</code></li>\n<li>🍌 <code>:banana:</code></li>\n<li>🍐 <code>:pear:</code></li>\n<li>🍍 <code>:pineapple:</code></li>\n<li>🍠 <code>:sweet_potato:</code></li>\n<li>🍆 <code>:eggplant:</code></li>\n<li>🍅 <code>:tomato:</code></li>\n<li>🌽 <code>:corn:</code></li>\n</ul>\n",
      "date_published": "2021-02-16T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "人物",
      "url": "https://mister-hope.com/code/language/markdown/emoji/people.html",
      "id": "https://mister-hope.com/code/language/markdown/emoji/people.html",
      "summary": "😄 :smile: 😆 :laughing: 😊 :blush: 😃 :smiley: 😏 :smirk: 😍 :heart_eyes: 😘 :kissing_heart: 😚 :kissing_closed_eyes: 😳 :flushed: 😌 :relieved: 😆 :satisfied: 😁 :grin: 😉 :wi...",
      "content_html": "<ul>\n<li>😄 <code>:smile:</code></li>\n<li>😆 <code>:laughing:</code></li>\n<li>😊 <code>:blush:</code></li>\n<li>😃 <code>:smiley:</code></li>\n<li>😏 <code>:smirk:</code></li>\n<li>😍 <code>:heart_eyes:</code></li>\n<li>😘 <code>:kissing_heart:</code></li>\n<li>😚 <code>:kissing_closed_eyes:</code></li>\n<li>😳 <code>:flushed:</code></li>\n<li>😌 <code>:relieved:</code></li>\n<li>😆 <code>:satisfied:</code></li>\n<li>😁 <code>:grin:</code></li>\n<li>😉 <code>:wink:</code></li>\n<li>😜 <code>:stuck_out_tongue_winking_eye:</code></li>\n<li>😝 <code>:stuck_out_tongue_closed_eyes:</code></li>\n<li>😀 <code>:grinning:</code></li>\n<li>😗 <code>:kissing:</code></li>\n<li>😙 <code>:kissing_smiling_eyes:</code></li>\n<li>😛 <code>:stuck_out_tongue:</code></li>\n<li>😴 <code>:sleeping:</code></li>\n<li>😟 <code>:worried:</code></li>\n<li>😦 <code>:frowning:</code></li>\n<li>😧 <code>:anguished:</code></li>\n<li>😮 <code>:open_mouth:</code></li>\n<li>😬 <code>:grimacing:</code></li>\n<li>😕 <code>:confused:</code></li>\n<li>😯 <code>:hushed:</code></li>\n<li>😑 <code>:expressionless:</code></li>\n<li>😒 <code>:unamused:</code></li>\n<li>😅 <code>:sweat_smile:</code></li>\n<li>😓 <code>:sweat:</code></li>\n<li>😥 <code>:disappointed_relieved:</code></li>\n<li>😩 <code>:weary:</code></li>\n<li>😔 <code>:pensive:</code></li>\n<li>😞 <code>:disappointed:</code></li>\n<li>😖 <code>:confounded:</code></li>\n<li>😨 <code>:fearful:</code></li>\n<li>😰 <code>:cold_sweat:</code></li>\n<li>😣 <code>:persevere:</code></li>\n<li>😢 <code>:cry:</code></li>\n<li>😭 <code>:sob:</code></li>\n<li>😂 <code>:joy:</code></li>\n<li>😲 <code>:astonished:</code></li>\n<li>😱 <code>:scream:</code></li>\n<li>😫 <code>:tired_face:</code></li>\n<li>😠 <code>:angry:</code></li>\n<li>😡 <code>:rage:</code></li>\n<li>😤 <code>:triumph:</code></li>\n<li>😪 <code>:sleepy:</code></li>\n<li>😋 <code>:yum:</code></li>\n<li>😷 <code>:mask:</code></li>\n<li>😎 <code>:sunglasses:</code></li>\n<li>😵 <code>:dizzy_face:</code></li>\n<li>👿 <code>:imp:</code></li>\n<li>😈 <code>:smiling_imp:</code></li>\n<li>😐 <code>:neutral_face:</code></li>\n<li>😶 <code>:no_mouth:</code></li>\n<li>😇 <code>:innocent:</code></li>\n<li>👽 <code>:alien:</code></li>\n<li>💛 <code>:yellow_heart:</code></li>\n<li>💙 <code>:blue_heart:</code></li>\n<li>💜 <code>:purple_heart:</code></li>\n<li>❤️ <code>:heart:</code></li>\n<li>💚 <code>:green_heart:</code></li>\n<li>💔 <code>:broken_heart:</code></li>\n<li>💓 <code>:heartbeat:</code></li>\n<li>💗 <code>:heartpulse:</code></li>\n<li>💕 <code>:two_hearts:</code></li>\n<li>💞 <code>:revolving_hearts:</code></li>\n<li>💘 <code>:cupid:</code></li>\n<li>💖 <code>:sparkling_heart:</code></li>\n<li>✨ <code>:sparkles:</code></li>\n<li>⭐ <code>:star:</code></li>\n<li>🌟 <code>:star2:</code></li>\n<li>💫 <code>:dizzy:</code></li>\n<li>💥 <code>:boom:</code></li>\n<li>💥 <code>:collision:</code></li>\n<li>💢 <code>:anger:</code></li>\n<li>❗ <code>:exclamation:</code></li>\n<li>❓ <code>:question:</code></li>\n<li>❕ <code>:grey_exclamation:</code></li>\n<li>❔ <code>:grey_question:</code></li>\n<li>💤 <code>:zzz:</code></li>\n<li>💨 <code>:dash:</code></li>\n<li>💦 <code>:sweat_drops:</code></li>\n<li>🎶 <code>:notes:</code></li>\n<li>🎵 <code>:musical_note:</code></li>\n<li>🔥 <code>:fire:</code></li>\n<li>💩 <code>:hankey:</code></li>\n<li>💩 <code>:poop:</code></li>\n<li>💩 <code>:shit:</code></li>\n<li>👍 <code>:+1:</code></li>\n<li>👍 <code>:thumbsup:</code></li>\n<li>👎 <code>:-1:</code></li>\n<li>👎 <code>:thumbsdown:</code></li>\n<li>👌 <code>:ok_hand:</code></li>\n<li>👊 <code>:punch:</code></li>\n<li>👊 <code>:facepunch:</code></li>\n<li>✊ <code>:fist:</code></li>\n<li>✌️ <code>:v:</code></li>\n<li>👋 <code>:wave:</code></li>\n<li>✋ <code>:hand:</code></li>\n<li>✋ <code>:raised_hand:</code></li>\n<li>👐 <code>:open_hands:</code></li>\n<li>☝️ <code>:point_up:</code></li>\n<li>👇 <code>:point_down:</code></li>\n<li>👈 <code>:point_left:</code></li>\n<li>👉 <code>:point_right:</code></li>\n<li>🙌 <code>:raised_hands:</code></li>\n<li>🙏 <code>:pray:</code></li>\n<li>👆 <code>:point_up_2:</code></li>\n<li>👏 <code>:clap:</code></li>\n<li>💪 <code>:muscle:</code></li>\n<li>🤘 <code>:metal:</code></li>\n<li>🖕 <code>:fu:</code></li>\n<li>🏃 <code>:runner:</code></li>\n<li>🏃 <code>:running:</code></li>\n<li>👫 <code>:couple:</code></li>\n<li>👪 <code>:family:</code></li>\n<li>👬 <code>:two_men_holding_hands:</code></li>\n<li>👭 <code>:two_women_holding_hands:</code></li>\n<li>💃 <code>:dancer:</code></li>\n<li>👯 <code>:dancers:</code></li>\n<li>🙆‍♀️ <code>:ok_woman:</code></li>\n<li>🙅 <code>:no_good:</code></li>\n<li>💁 <code>:information_desk_person:</code></li>\n<li>🙋 <code>:raising_hand:</code></li>\n<li>👰‍♀️ <code>:bride_with_veil:</code></li>\n<li>:person_with_pouting_face: <code>:person_with_pouting_face:</code></li>\n<li>:person_frowning: <code>:person_frowning:</code></li>\n<li>🙇 <code>:bow:</code></li>\n<li>💑 <code>:couple_with_heart:</code></li>\n<li>💆 <code>:massage:</code></li>\n<li>💇 <code>:haircut:</code></li>\n<li>💅 <code>:nail_care:</code></li>\n<li>👦 <code>:boy:</code></li>\n<li>👧 <code>:girl:</code></li>\n<li>👩 <code>:woman:</code></li>\n<li>👨 <code>:man:</code></li>\n<li>👶 <code>:baby:</code></li>\n<li>👵 <code>:older_woman:</code></li>\n<li>👴 <code>:older_man:</code></li>\n<li>:person_with_blond_hair: <code>:person_with_blond_hair:</code></li>\n<li>👲 <code>:man_with_gua_pi_mao:</code></li>\n<li>👳‍♂️ <code>:man_with_turban:</code></li>\n<li>👷 <code>:construction_worker:</code></li>\n<li>👮 <code>:cop:</code></li>\n<li>👼 <code>:angel:</code></li>\n<li>👸 <code>:princess:</code></li>\n<li>😺 <code>:smiley_cat:</code></li>\n<li>😸 <code>:smile_cat:</code></li>\n<li>😻 <code>:heart_eyes_cat:</code></li>\n<li>😽 <code>:kissing_cat:</code></li>\n<li>😼 <code>:smirk_cat:</code></li>\n<li>🙀 <code>:scream_cat:</code></li>\n<li>😿 <code>:crying_cat_face:</code></li>\n<li>😹 <code>:joy_cat:</code></li>\n<li>😾 <code>:pouting_cat:</code></li>\n<li>👹 <code>:japanese_ogre:</code></li>\n<li>👺 <code>:japanese_goblin:</code></li>\n<li>🙈 <code>:see_no_evil:</code></li>\n<li>🙉 <code>:hear_no_evil:</code></li>\n<li>🙊 <code>:speak_no_evil:</code></li>\n<li>💂‍♂️ <code>:guardsman:</code></li>\n<li>💀 <code>:skull:</code></li>\n<li>🐾 <code>:feet:</code></li>\n<li>👄 <code>:lips:</code></li>\n<li>💋 <code>:kiss:</code></li>\n<li>💧 <code>:droplet:</code></li>\n<li>👂 <code>:ear:</code></li>\n<li>👀 <code>:eyes:</code></li>\n<li>👃 <code>:nose:</code></li>\n<li>👅 <code>:tongue:</code></li>\n<li>💌 <code>:love_letter:</code></li>\n<li>👤 <code>:bust_in_silhouette:</code></li>\n<li>👥 <code>:busts_in_silhouette:</code></li>\n<li>💬 <code>:speech_balloon:</code></li>\n<li>💭 <code>:thought_balloon:</code></li>\n</ul>\n",
      "date_published": "2021-02-16T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "地点",
      "url": "https://mister-hope.com/code/language/markdown/emoji/place.html",
      "id": "https://mister-hope.com/code/language/markdown/emoji/place.html",
      "summary": "🏠 :house: 🏡 :house_with_garden: 🏫 :school: 🏢 :office: 🏣 :post_office: 🏥 :hospital: 🏦 :bank: 🏪 :convenience_store: 🏩 :love_hotel: 🏨 :hotel: 💒 :wedding: ⛪ :church: 🏬 :...",
      "content_html": "<ul>\n<li>🏠 <code>:house:</code></li>\n<li>🏡 <code>:house_with_garden:</code></li>\n<li>🏫 <code>:school:</code></li>\n<li>🏢 <code>:office:</code></li>\n<li>🏣 <code>:post_office:</code></li>\n<li>🏥 <code>:hospital:</code></li>\n<li>🏦 <code>:bank:</code></li>\n<li>🏪 <code>:convenience_store:</code></li>\n<li>🏩 <code>:love_hotel:</code></li>\n<li>🏨 <code>:hotel:</code></li>\n<li>💒 <code>:wedding:</code></li>\n<li>⛪ <code>:church:</code></li>\n<li>🏬 <code>:department_store:</code></li>\n<li>🏤 <code>:european_post_office:</code></li>\n<li>🌇 <code>:city_sunrise:</code></li>\n<li>🌆 <code>:city_sunset:</code></li>\n<li>🏯 <code>:japanese_castle:</code></li>\n<li>🏰 <code>:european_castle:</code></li>\n<li>⛺ <code>:tent:</code></li>\n<li>🏭 <code>:factory:</code></li>\n<li>🗼 <code>:tokyo_tower:</code></li>\n<li>🗾 <code>:japan:</code></li>\n<li>🗻 <code>:mount_fuji:</code></li>\n<li>🌄 <code>:sunrise_over_mountains:</code></li>\n<li>🌅 <code>:sunrise:</code></li>\n<li>🌠 <code>:stars:</code></li>\n<li>🗽 <code>:statue_of_liberty:</code></li>\n<li>🌉 <code>:bridge_at_night:</code></li>\n<li>🎠 <code>:carousel_horse:</code></li>\n<li>🌈 <code>:rainbow:</code></li>\n<li>🎡 <code>:ferris_wheel:</code></li>\n<li>⛲ <code>:fountain:</code></li>\n<li>🎢 <code>:roller_coaster:</code></li>\n<li>🚢 <code>:ship:</code></li>\n<li>🚤 <code>:speedboat:</code></li>\n<li>⛵ <code>:boat:</code></li>\n<li>⛵ <code>:sailboat:</code></li>\n<li>🚣 <code>:rowboat:</code></li>\n<li>⚓ <code>:anchor:</code></li>\n<li>🚀 <code>:rocket:</code></li>\n<li>✈️ <code>:airplane:</code></li>\n<li>🚁 <code>:helicopter:</code></li>\n<li>🚂 <code>:steam_locomotive:</code></li>\n<li>🚊 <code>:tram:</code></li>\n<li>🚞 <code>:mountain_railway:</code></li>\n<li>🚲 <code>:bike:</code></li>\n<li>🚡 <code>:aerial_tramway:</code></li>\n<li>🚟 <code>:suspension_railway:</code></li>\n<li>🚠 <code>:mountain_cableway:</code></li>\n<li>🚜 <code>:tractor:</code></li>\n<li>🚙 <code>:blue_car:</code></li>\n<li>🚘 <code>:oncoming_automobile:</code></li>\n<li>🚗 <code>:car:</code></li>\n<li>🚗 <code>:red_car:</code></li>\n<li>🚕 <code>:taxi:</code></li>\n<li>🚖 <code>:oncoming_taxi:</code></li>\n<li>🚛 <code>:articulated_lorry:</code></li>\n<li>🚌 <code>:bus:</code></li>\n<li>🚍 <code>:oncoming_bus:</code></li>\n<li>🚨 <code>:rotating_light:</code></li>\n<li>🚓 <code>:police_car:</code></li>\n<li>🚔 <code>:oncoming_police_car:</code></li>\n<li>🚒 <code>:fire_engine:</code></li>\n<li>🚑 <code>:ambulance:</code></li>\n<li>🚐 <code>:minibus:</code></li>\n<li>🚚 <code>:truck:</code></li>\n<li>🚋 <code>:train:</code></li>\n<li>🚉 <code>:station:</code></li>\n<li>🚆 <code>:train2:</code></li>\n<li>🚅 <code>:bullettrain_front:</code></li>\n<li>🚄 <code>:bullettrain_side:</code></li>\n<li>🚈 <code>:light_rail:</code></li>\n<li>🚝 <code>:monorail:</code></li>\n<li>🚃 <code>:railway_car:</code></li>\n<li>🚎 <code>:trolleybus:</code></li>\n<li>🎫 <code>:ticket:</code></li>\n<li>⛽ <code>:fuelpump:</code></li>\n<li>🚦 <code>:vertical_traffic_light:</code></li>\n<li>🚥 <code>:traffic_light:</code></li>\n<li>⚠️ <code>:warning:</code></li>\n<li>🚧 <code>:construction:</code></li>\n<li>🔰 <code>:beginner:</code></li>\n<li>🏧 <code>:atm:</code></li>\n<li>🎰 <code>:slot_machine:</code></li>\n<li>🚏 <code>:busstop:</code></li>\n<li>💈 <code>:barber:</code></li>\n<li>♨️ <code>:hotsprings:</code></li>\n<li>🏁 <code>:checkered_flag:</code></li>\n<li>🎌 <code>:crossed_flags:</code></li>\n<li>🏮 <code>:izakaya_lantern:</code></li>\n<li>🗿 <code>:moyai:</code></li>\n<li>🎪 <code>:circus_tent:</code></li>\n<li>🎭 <code>:performing_arts:</code></li>\n<li>📍 <code>:round_pushpin:</code></li>\n<li>🚩 <code>:triangular_flag_on_post:</code></li>\n</ul>\n",
      "date_published": "2021-02-16T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "符号",
      "url": "https://mister-hope.com/code/language/markdown/emoji/symbol.html",
      "id": "https://mister-hope.com/code/language/markdown/emoji/symbol.html",
      "summary": "1️⃣ :one: 2️⃣ :two: 3️⃣ :three: 4️⃣ :four: 5️⃣ :five: 6️⃣ :six: 7️⃣ :seven: 8️⃣ :eight: 9️⃣ :nine: 🔟 :keycap_ten: 🔢 :1234: 0️⃣ :zero: #️⃣ :hash: 🔣 :symbols: ◀️ :arrow_backwar...",
      "content_html": "<ul>\n<li>1️⃣ <code>:one:</code></li>\n<li>2️⃣ <code>:two:</code></li>\n<li>3️⃣ <code>:three:</code></li>\n<li>4️⃣ <code>:four:</code></li>\n<li>5️⃣ <code>:five:</code></li>\n<li>6️⃣ <code>:six:</code></li>\n<li>7️⃣ <code>:seven:</code></li>\n<li>8️⃣ <code>:eight:</code></li>\n<li>9️⃣ <code>:nine:</code></li>\n<li>🔟 <code>:keycap_ten:</code></li>\n<li>🔢 <code>:1234:</code></li>\n<li>0️⃣ <code>:zero:</code></li>\n<li>#️⃣ <code>:hash:</code></li>\n<li>🔣 <code>:symbols:</code></li>\n<li>◀️ <code>:arrow_backward:</code></li>\n<li>⬇️ <code>:arrow_down:</code></li>\n<li>▶️ <code>:arrow_forward:</code></li>\n<li>⬅️ <code>:arrow_left:</code></li>\n<li>🔠 <code>:capital_abcd:</code></li>\n<li>🔡 <code>:abcd:</code></li>\n<li>🔤 <code>:abc:</code></li>\n<li>↙️ <code>:arrow_lower_left:</code></li>\n<li>↘️ <code>:arrow_lower_right:</code></li>\n<li>➡️ <code>:arrow_right:</code></li>\n<li>⬆️ <code>:arrow_up:</code></li>\n<li>↖️ <code>:arrow_upper_left:</code></li>\n<li>↗️ <code>:arrow_upper_right:</code></li>\n<li>⏬ <code>:arrow_double_down:</code></li>\n<li>⏫ <code>:arrow_double_up:</code></li>\n<li>🔽 <code>:arrow_down_small:</code></li>\n<li>⤵️ <code>:arrow_heading_down:</code></li>\n<li>⤴️ <code>:arrow_heading_up:</code></li>\n<li>↩️ <code>:leftwards_arrow_with_hook:</code></li>\n<li>↪️ <code>:arrow_right_hook:</code></li>\n<li>↔️ <code>:left_right_arrow:</code></li>\n<li>↕️ <code>:arrow_up_down:</code></li>\n<li>🔼 <code>:arrow_up_small:</code></li>\n<li>🔃 <code>:arrows_clockwise:</code></li>\n<li>🔄 <code>:arrows_counterclockwise:</code></li>\n<li>⏪ <code>:rewind:</code></li>\n<li>⏩ <code>:fast_forward:</code></li>\n<li>ℹ️ <code>:information_source:</code></li>\n<li>🆗 <code>:ok:</code></li>\n<li>🔀 <code>:twisted_rightwards_arrows:</code></li>\n<li>🔁 <code>:repeat:</code></li>\n<li>🔂 <code>:repeat_one:</code></li>\n<li>🆕 <code>:new:</code></li>\n<li>🔝 <code>:top:</code></li>\n<li>🆙 <code>:up:</code></li>\n<li>🆒 <code>:cool:</code></li>\n<li>🆓 <code>:free:</code></li>\n<li>🆖 <code>:ng:</code></li>\n<li>🎦 <code>:cinema:</code></li>\n<li>🈁 <code>:koko:</code></li>\n<li>📶 <code>:signal_strength:</code></li>\n<li>🈂️ <code>:sa:</code></li>\n<li>🚻 <code>:restroom:</code></li>\n<li>🚹 <code>:mens:</code></li>\n<li>🚺 <code>:womens:</code></li>\n<li>🚼 <code>:baby_symbol:</code></li>\n<li>🚭 <code>:no_smoking:</code></li>\n<li>🅿️ <code>:parking:</code></li>\n<li>♿ <code>:wheelchair:</code></li>\n<li>🚇 <code>:metro:</code></li>\n<li>🛄 <code>:baggage_claim:</code></li>\n<li>🉑 <code>:accept:</code></li>\n<li>🚾 <code>:wc:</code></li>\n<li>🚰 <code>:potable_water:</code></li>\n<li>🚮 <code>:put_litter_in_its_place:</code></li>\n<li>㊙️ <code>:secret:</code></li>\n<li>㊗️ <code>:congratulations:</code></li>\n<li>Ⓜ️ <code>:m:</code></li>\n<li>🛂 <code>:passport_control:</code></li>\n<li>🛅 <code>:left_luggage:</code></li>\n<li>🛃 <code>:customs:</code></li>\n<li>🉐 <code>:ideograph_advantage:</code></li>\n<li>🆑 <code>:cl:</code></li>\n<li>🆘 <code>:sos:</code></li>\n<li>🆔 <code>:id:</code></li>\n<li>🚫 <code>:no_entry_sign:</code></li>\n<li>🔞 <code>:underage:</code></li>\n<li>📵 <code>:no_mobile_phones:</code></li>\n<li>🚯 <code>:do_not_litter:</code></li>\n<li>🚱 <code>:non-potable_water:</code></li>\n<li>🚳 <code>:no_bicycles:</code></li>\n<li>🚷 <code>:no_pedestrians:</code></li>\n<li>🚸 <code>:children_crossing:</code></li>\n<li>⛔ <code>:no_entry:</code></li>\n<li>✳️ <code>:eight_spoked_asterisk:</code></li>\n<li>❇️ <code>:sparkle:</code></li>\n<li>✴️ <code>:eight_pointed_black_star:</code></li>\n<li>💟 <code>:heart_decoration:</code></li>\n<li>🆚 <code>:vs:</code></li>\n<li>📳 <code>:vibration_mode:</code></li>\n<li>📴 <code>:mobile_phone_off:</code></li>\n<li>💹 <code>:chart:</code></li>\n<li>💱 <code>:currency_exchange:</code></li>\n<li>♈ <code>:aries:</code></li>\n<li>♉ <code>:taurus:</code></li>\n<li>♊ <code>:gemini:</code></li>\n<li>♋ <code>:cancer:</code></li>\n<li>♌ <code>:leo:</code></li>\n<li>♍ <code>:virgo:</code></li>\n<li>♎ <code>:libra:</code></li>\n<li>♏ <code>:scorpius:</code></li>\n<li>♐ <code>:sagittarius:</code></li>\n<li>♑ <code>:capricorn:</code></li>\n<li>♒ <code>:aquarius:</code></li>\n<li>♓ <code>:pisces:</code></li>\n<li>⛎ <code>:ophiuchus:</code></li>\n<li>🔯 <code>:six_pointed_star:</code></li>\n<li>❎ <code>:negative_squared_cross_mark:</code></li>\n<li>🅰️ <code>:a:</code></li>\n<li>🅱️ <code>:b:</code></li>\n<li>🆎 <code>:ab:</code></li>\n<li>🅾️ <code>:o2:</code></li>\n<li>💠 <code>:diamond_shape_with_a_dot_inside:</code></li>\n<li>♻️ <code>:recycle:</code></li>\n<li>🔚 <code>:end:</code></li>\n<li>🔙 <code>:back:</code></li>\n<li>🔛 <code>:on:</code></li>\n<li>🔜 <code>:soon:</code></li>\n<li>🕐 <code>:clock1:</code></li>\n<li>🕜 <code>:clock130:</code></li>\n<li>🕙 <code>:clock10:</code></li>\n<li>🕥 <code>:clock1030:</code></li>\n<li>🕚 <code>:clock11:</code></li>\n<li>🕦 <code>:clock1130:</code></li>\n<li>🕛 <code>:clock12:</code></li>\n<li>🕧 <code>:clock1230:</code></li>\n<li>🕑 <code>:clock2:</code></li>\n<li>🕝 <code>:clock230:</code></li>\n<li>🕒 <code>:clock3:</code></li>\n<li>🕞 <code>:clock330:</code></li>\n<li>🕓 <code>:clock4:</code></li>\n<li>🕟 <code>:clock430:</code></li>\n<li>🕔 <code>:clock5:</code></li>\n<li>🕠 <code>:clock530:</code></li>\n<li>🕕 <code>:clock6:</code></li>\n<li>🕡 <code>:clock630:</code></li>\n<li>🕖 <code>:clock7:</code></li>\n<li>🕢 <code>:clock730:</code></li>\n<li>🕗 <code>:clock8:</code></li>\n<li>🕣 <code>:clock830:</code></li>\n<li>🕘 <code>:clock9:</code></li>\n<li>🕤 <code>:clock930:</code></li>\n<li>💲 <code>:heavy_dollar_sign:</code></li>\n<li>©️ <code>:copyright:</code></li>\n<li>®️ <code>:registered:</code></li>\n<li>™️ <code>:tm:</code></li>\n<li>❌ <code>:x:</code></li>\n<li>❗ <code>:heavy_exclamation_mark:</code></li>\n<li>‼️ <code>:bangbang:</code></li>\n<li>⁉️ <code>:interrobang:</code></li>\n<li>⭕ <code>:o:</code></li>\n<li>✖️ <code>:heavy_multiplication_x:</code></li>\n<li>➕ <code>:heavy_plus_sign:</code></li>\n<li>➖ <code>:heavy_minus_sign:</code></li>\n<li>➗ <code>:heavy_division_sign:</code></li>\n<li>💮 <code>:white_flower:</code></li>\n<li>💯 <code>:100:</code></li>\n<li>✔️ <code>:heavy_check_mark:</code></li>\n<li>☑️ <code>:ballot_box_with_check:</code></li>\n<li>🔘 <code>:radio_button:</code></li>\n<li>🔗 <code>:link:</code></li>\n<li>➰ <code>:curly_loop:</code></li>\n<li>〰️ <code>:wavy_dash:</code></li>\n<li>〽️ <code>:part_alternation_mark:</code></li>\n<li>🔱 <code>:trident:</code></li>\n<li>▪️ <code>:black_small_square:</code></li>\n<li>▫️ <code>:white_small_square:</code></li>\n<li>◾ <code>:black_medium_small_square:</code></li>\n<li>◽ <code>:white_medium_small_square:</code></li>\n<li>◼️ <code>:black_medium_square:</code></li>\n<li>◻️ <code>:white_medium_square:</code></li>\n<li>⬛ <code>:black_large_square:</code></li>\n<li>⬜ <code>:white_large_square:</code></li>\n<li>✅ <code>:white_check_mark:</code></li>\n<li>🔲 <code>:black_square_button:</code></li>\n<li>🔳 <code>:white_square_button:</code></li>\n<li>⚫ <code>:black_circle:</code></li>\n<li>⚪ <code>:white_circle:</code></li>\n<li>🔴 <code>:red_circle:</code></li>\n<li>🔵 <code>:large_blue_circle:</code></li>\n<li>🔷 <code>:large_blue_diamond:</code></li>\n<li>🔶 <code>:large_orange_diamond:</code></li>\n<li>🔹 <code>:small_blue_diamond:</code></li>\n<li>🔸 <code>:small_orange_diamond:</code></li>\n<li>🔺 <code>:small_red_triangle:</code></li>\n<li>🔻 <code>:small_red_triangle_down:</code></li>\n</ul>\n",
      "date_published": "2021-02-16T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "介绍",
      "url": "https://mister-hope.com/code/language/python/intro/",
      "id": "https://mister-hope.com/code/language/python/intro/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/intro/intro.html\" target=\"_blank\">Python 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/intro/install.html\" target=\"_blank\">Python 安装</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/intro/interpreter.html\" target=\"_blank\">解释器</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-25T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "Python 简介",
      "url": "https://mister-hope.com/code/language/python/intro/intro.html",
      "id": "https://mister-hope.com/code/language/python/intro/intro.html",
      "summary": "本节将简单介绍 Python 的历史。",
      "content_html": "<p>本节将简单介绍 Python 的历史。</p>\n<!-- more -->\n<h2>特点</h2>\n<p>Python 是 Guido van Rossum(“龟叔”) 在 1989 年圣诞节期间，为了打发无聊的圣诞节而编写的一个编程语言。</p>\n<p>龟叔给 Python 的定位是“优雅”、“明确”、“简单”，所以 Python 程序看上去总是简单易懂，初学者学 Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">Python 的优势 —— 内置电池</p>\n<p>总的来说，编程语言各有千秋。</p>\n<p>以最常见的 C 语言为例，它是可以用来编写操作系统的贴近硬件的语言，所以，C 语言适合开发那些追求运行速度、充分发挥硬件性能的程序。</p>\n<p>而 Python 是用来编写应用程序的高级编程语言。当您用一种语言开始作真正的软件开发时，您除了编写代码外，还需要很多基本的已经写好的现成的东西，来帮助您加快开发进度。比如说，要编写一个电子邮件客户端，如果先从最底层开始编写网络协议相关的代码，那估计一年半载也开发不出来。高级编程语言通常都会提供一个比较完善的基础代码库，让您能直接调用，比如，针对电子邮件协议的 SMTP 库，针对桌面环境的 GUI 库，在这些已有的代码库的基础上开发，一个电子邮件客户端几天就能开发出来。</p>\n<p>Python 就为我们提供了非常完善的基础代码库，覆盖了网络、文件、GUI、数据库、文本等大量内容，被形象地称作“内置电池(batteries included)”。用 Python 开发，许多功能不必从零编写，直接使用现成的即可。</p>\n<p>除了内置的库外，Python 还有大量的第三方库，也就是别人开发的，供您直接使用的东西。当然，如果您开发的代码通过很好的封装，也可以作为第三方库给别人使用。</p>\n<p>许多大型网站就是用 Python 开发的，例如 YouTube、Instagram，还有国内的豆瓣。很多大公司，包括 Google、Yahoo 等，甚至 NASA(美国航空航天局)都大量地使用 Python。</p>\n</div>\n<p>总的来说，Python 的哲学就是简单优雅，尽量写容易看明白的代码，尽量写少的代码。如果一个资深程序员向您炫耀他写的晦涩难懂、动不动就几万行的代码，您可以尽情地嘲笑他。</p>\n<h2>应用领域</h2>\n<p>Python 适合开发哪些类型的应用:</p>\n<ul>\n<li>\n<p>首选是网络应用，包括网站、后台服务等等；</p>\n</li>\n<li>\n<p>其次是许多日常需要的小工具，包括系统管理员需要的脚本任务等等；</p>\n</li>\n<li>\n<p>另外就是把其他语言开发的程序再包装起来，方便使用。</p>\n</li>\n</ul>\n<h2>缺点</h2>\n<h3>运行速度慢</h3>\n<p>Python 和 C 程序相比非常慢，因为 Python 是解释型语言，您的代码在执行时会一行一行地翻译成 CPU 能理解的机器码，这个翻译过程非常耗时，所以很慢。而 C 程序是运行前直接编译成 CPU 能执行的机器码，所以非常快。</p>\n<p>但是大量的应用程序不需要这么快的运行速度，因为用户根本感觉不出来。例如开发一个下载 MP3 的网络应用程序，C 程序的运行时间需要 0.001 秒，而 Python 程序的运行时间需要 0.1 秒，慢了 100 倍，但由于网络更慢，需要等待 1 秒，您想，用户能感觉到 1.001 秒和 1.1 秒的区别吗? 这就好比 F1 赛车和普通的出租车在北京三环路上行驶的道理一样，虽然 F1 赛车理论时速高达 400 公里，但由于三环路堵车的时速只有 20 公里，因此，作为乘客，您感觉的时速永远是 20 公里。</p>\n<h3>代码不能加密</h3>\n<p>Python 语言是个脚本语言，这点跟前端广泛使用的 JS 相同。如果要发布您的 Python 程序，实际上就是发布源代码。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">解释器与编译器</p>\n<ul>\n<li>\n<p>Python 运行时采用解释器，也就是使用解释器直接解释源码。</p>\n</li>\n<li>\n<p>C 语言不同，C 语言不用发布源代码，只需要把通过编译器编译后的机器码(也就是您在 Windows 上常见的 xxx.exe 文件)发布出去。要从机器码反推出 C 代码是不可能的。</p>\n</li>\n</ul>\n</div>\n<p>所以任何编译型的语言，都没有这个问题，而解释型的语言，则必须把源码发布出去。</p>\n<p>这个缺点仅限于您要编写的软件需要卖给别人挣钱的时候。好消息是目前的互联网时代，靠卖软件授权的商业模式越来越少了，靠网站和移动应用卖服务的模式越来越多了，后一种模式不需要把源码给别人。</p>\n",
      "date_published": "2020-05-18T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "匿名函数",
      "url": "https://mister-hope.com/code/language/python/functional-programming/anonymous-function.html",
      "id": "https://mister-hope.com/code/language/python/functional-programming/anonymous-function.html",
      "summary": "当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。 在 Python 中，对匿名函数提供了有限支持。还是以 map() 函数为例，计算 $f(x)=x^2$ 时，除了定义一个 $f(x)$ 的函数外，还可以直接传入匿名函数: 通过对比可以看出，匿名函数 lambda x: x* x 实际上就是: 关键字 lambda 表示匿名...",
      "content_html": "<p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p>\n<p>在 Python 中，对匿名函数提供了有限支持。还是以 <code>map()</code> 函数为例，计算 $f(x)=x^2$ 时，除了定义一个 $f(x)$ 的函数外，还可以直接传入匿名函数:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> list</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">map</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">lambda</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x, [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">36</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">49</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">64</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">81</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>通过对比可以看出，匿名函数 <code>lambda x: x* x</code> 实际上就是:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span></code></pre>\n</div><p>关键字 <code>lambda</code> 表示匿名函数，冒号前面的 <code>x</code> 表示函数参数。</p>\n<p>匿名函数有个限制，就是只能有一个表达式，不用写 <code>return</code>，返回值就是该表达式的结果。</p>\n<p>用匿名函数有个好处，因为函数没有名字，不必担心函数名冲突。此外，匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> lambda</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> x</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">function </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">lambda</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; at 0x101c6ef28&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">25</span></span></code></pre>\n</div><p>同样，也可以把匿名函数作为返回值返回，比如:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> build</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> lambda</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">x </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">+</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> y</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> y</span></span></code></pre>\n</div><h2>小结</h2>\n<p>Python 对匿名函数的支持有限，只有一些简单的情况下可以使用匿名函数。</p>\n",
      "date_published": "2021-03-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "装饰器",
      "url": "https://mister-hope.com/code/language/python/functional-programming/decorator.html",
      "id": "https://mister-hope.com/code/language/python/functional-programming/decorator.html",
      "summary": "由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。 函数对象有一个 __name__ 属性，可以拿到函数的名字: 现在，假设我们要增强 now() 函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改 now() 函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器” (Decorator) 。 本质...",
      "content_html": "<p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">     print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'2021-3-15'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> now</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2021</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">15</span></span></code></pre>\n</div><p>函数对象有一个 <code>__name__</code> 属性，可以拿到函数的名字:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> now.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'now'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> f.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'now'</span></span></code></pre>\n</div><p>现在，假设我们要增强 <code>now()</code> 函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改 <code>now()</code> 函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器” (Decorator) 。</p>\n<p>本质上，decorator 就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的 decorator，可以定义如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wrapper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> **</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">kw</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'call </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">():'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> func.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*args,**kw)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> wrapper</span></span></code></pre>\n</div><p>观察上面的 <code>log</code>，因为它是一个 decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助 Python 的 <code>@</code> 语法，把 decorator 置于函数的定义处:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">@log</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'2021-3-15'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>调用 <code>now()</code> 函数，不仅会运行 <code>now()</code> 函数本身，还会在运行 <code>now()</code> 函数前打印一行日志:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">call </span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2021</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">15</span></span></code></pre>\n</div><p>把 <code>@log</code> 放到 <code>now()</code> 函数的定义处，相当于执行了语句:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">now </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(now)</span></span></code></pre>\n</div><p>由于 <code>log()</code> 是一个 decorator，返回一个函数，所以，原来的 <code>now()</code> 函数仍然存在，只是现在同名的 <code>now</code> 变量指向了新的函数，于是调用 <code>now()</code> 将执行新函数，即在 <code>log()</code> 函数中返回的 <code>wrapper()</code> 函数。</p>\n<p><code>wrapper()</code> 函数的参数定义是 <code>(*args, **kw)</code>，因此，<code>wrapper()</code> 函数可以接受任意参数的调用。在 <code>wrapper()</code> 函数内，首先打印日志，再紧接着调用原始函数。</p>\n<p>如果 decorator 本身需要传入参数，那就需要编写一个返回 decorator 的高阶函数，写出来会更复杂。比如，要自定义 <code>log</code> 的文本:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> decorator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wrapper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> **</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">kw</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">            print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> %s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">():'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (text, func.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*args,**kw)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> wrapper</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> decorator</span></span></code></pre>\n</div><p>这个 3 层嵌套的 decorator 用法如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">@log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'execute'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">    print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'2021-3-15'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>执行结果如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">execute </span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">now</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2021</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">15</span></span></code></pre>\n</div><p>和两层嵌套的 decorator 相比，3 层嵌套的效果是这样的:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> now </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'execute'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)(now)</span></span></code></pre>\n</div><p>我们来剖析上面的语句，首先执行 <code>log('execute')</code>，返回的是 decorator 函数，再调用返回的函数，参数是 <code>now</code> 函数，返回值最终是 <code>wrapper</code> 函数。</p>\n<p>以上两种 decorator 的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有 <code>__name__</code>等属性，但您去看经过 decorator 装饰之后的函数，它们的 <code>__name__</code> 已经从原来的 <code>'now'</code> 变成了 <code>'wrapper'</code>:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> now.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'wrapper'</span></span></code></pre>\n</div><p>因为返回的那个 <code>wrapper()</code> 函数名字就是 <code>'wrapper'</code>，所以，需要把原始函数的 <code>__name__</code> 等属性复制到 <code>wrapper()</code> 函数中，否则，有些依赖函数签名的代码执行就会出错。</p>\n<p>不需要编写 <code>wrapper.__name__ = func.__name__</code> 这样的代码，Python 内置的 <code>functools.wraps</code> 就是干这个事的，所以，一个完整的 decorator 的写法如下:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> functools</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    @functools</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">wraps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wrapper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> **</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">kw</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">        print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'call </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">():'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> func.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*args,**kw)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> wrapper</span></span></code></pre>\n</div><p>或者针对带参数的 decorator:</p>\n<div class=\"language-py line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> functools</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> decorator</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">        @functools</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">wraps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wrapper</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> **</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">kw</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">            print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">%s</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> %s</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">():'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> %</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (text, func.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">__name__</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> func</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*args,**kw)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> wrapper</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> decorator</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p><code>import functools</code> 是导入 <code>functools</code> 模块。模块的概念稍候讲解。现在，只需记住在定义 <code>wrapper()</code> 的前面加上 <code>@functools.wraps(func)</code> 即可。</p>\n<h2>小结</h2>\n<p>在面向对象 (OOP) 的设计模式中，decorator 被称为装饰模式。OOP 的装饰模式需要通过继承和组合来实现，而 Python 除了能支持 OOP 的 decorator 外，直接从语法层次支持 decorator。Python 的 decorator 可以用函数实现，也可以用类实现。</p>\n<p>decorator 可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</p>\n<p>请编写一个 decorator，能在函数调用的前后打印出 <code>'begin call'</code> 和 <code>'end call'</code> 的日志。</p>\n<p>再思考一下能否写出一个 <code>@log</code> 的 decorator，使它既支持:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">@log</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div><p>又支持:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">@log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'execute'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    pass</span></span></code></pre>\n</div>",
      "date_published": "2021-03-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "偏函数",
      "url": "https://mister-hope.com/code/language/python/functional-programming/parital-function.html",
      "id": "https://mister-hope.com/code/language/python/functional-programming/parital-function.html",
      "summary": "Python 的 functools 模块提供了很多有用的功能，其中一个就是偏函数 (Partial function) 。 提示 要注意，这里的偏函数和数学意义上的偏函数不一样。 在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下: int() 函数可以把字符串转换为整数，当仅传入字符串时...",
      "content_html": "<p>Python 的 <code>functools</code> 模块提供了很多有用的功能，其中一个就是偏函数 (Partial function) 。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>要注意，这里的偏函数和数学意义上的偏函数不一样。</p>\n</div>\n<p>在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下:</p>\n<p><code>int()</code> 函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code> 函数默认按十进制转换:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'12345'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">12345</span></span></code></pre>\n</div><p>但 <code>int()</code> 函数还提供额外的 <code>base</code> 参数，默认值为 <code>10</code>。如果传入 <code>base</code> 参数，就可以做 N 进制的转换:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'12345'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">8</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5349</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'12345'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">16</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">74565</span></span></code></pre>\n</div><p>假设要转换大量的二进制字符串，每次都传入 <code>int(x, base=2)</code> 非常麻烦，于是，我们想到，可以定义一个 <code>int2()</code> 的函数，默认把 <code>base=2</code> 传进去:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">def</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\"> base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    return</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(x, base)</span></span></code></pre>\n</div><p>这样，我们转换二进制就非常方便了:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1000000'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">64</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1010101'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">85</span></span></code></pre>\n</div><p><code>functools.partial</code> 就是帮助我们创建一个偏函数的，不需要我们自己定义 <code>int2()</code>，可以直接使用下面的代码创建一个新的函数 <code>int2</code>:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> import</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> functools</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> int2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> functools.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">partial</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1000000'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">64</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1010101'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">85</span></span></code></pre>\n</div><p>所以，简单总结 <code>functools.partial</code> 的作用就是，把一个函数的某些参数给固定住 (也就是设置默认值) ，返回一个新的函数，调用这个新函数会更简单。</p>\n<p>注意到上面的新的 <code>int2</code> 函数，仅仅是把 <code>base</code> 参数重新设定默认值为 <code>2</code>，但也可以在函数调用时传入其他值:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;&gt;&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\"> int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'1000000'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1000000</span></span></code></pre>\n</div><p>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code> 和 <code>**kw</code> 这 3 个参数，当传入:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">int2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> functools.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">partial</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">base</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>实际上固定了 <code>int()</code> 函数的关键字参数 <code>base</code>，也就是:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">int2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'10010'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">相当于:</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">kw </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'base'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">int</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'10010'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, **kw)</span></span></code></pre>\n</div><p>当传入:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">max2 </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> functools.</span><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">partial</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>实际上会把 10 作为 <code>*args</code> 的一部分自动加到左边，也就是:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#61AFEF\">max2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span></code></pre>\n</div><p>相当于:</p>\n<div class=\"language-py\" data-highlighter=\"shiki\" data-ext=\"py\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">args </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">6</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">7</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">max</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(*args)</span></span></code></pre>\n</div><p>结果为 <code>10</code>。</p>\n<h2>小结</h2>\n<p>当函数的参数个数太多，需要简化时，使用 <code>functools.partial</code> 可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>\n",
      "date_published": "2021-03-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "GitHub Pages",
      "url": "https://mister-hope.com/code/github/pages.html",
      "id": "https://mister-hope.com/code/github/pages.html",
      "summary": "GitHub Pages 是静态站点托管服务，可直接从 GitHub 上的存储库中获取 HTML，CSS 和 JavaScript 文件，还可以选择在构建过程中运行这些文件并发布网站。 您可以将站点托管在 GitHub 的 github.io 域名或您自己的自定义域名上。",
      "content_html": "<p>GitHub Pages 是静态站点托管服务，可直接从 GitHub 上的存储库中获取 HTML，CSS 和 JavaScript 文件，还可以选择在构建过程中运行这些文件并发布网站。</p>\n<p>您可以将站点托管在 GitHub 的 <code>github.io</code> 域名或您自己的自定义域名上。</p>\n<!-- more -->\n<h2>简介</h2>\n<p>GitHub Pages 站点共有三种类型: 项目，用户和组织。</p>\n<p>项目站点连接到 GitHub 上托管的特定项目，而用户和组织站点已连接到特定的 GitHub 帐户。</p>\n<ul>\n<li>要发布用户站点，您必须创建一个名为的用户帐户拥有的存储库 <code>&lt;username&gt;.github.io</code>。</li>\n<li>要发布组织站点，您必须创建一个名为的组织所拥有的存储库 <code>&lt;organization&gt;.github.io</code>。</li>\n</ul>\n<p>除非您使用自定义域名，否则用户站点和组织站点均位于 <code>http(s)://&lt;username&gt;.github.io</code> 或 <code>http(s)://&lt;organization&gt;.github.io</code>。</p>\n<p>项目站点的源文件与其项目存储在同一存储库中。除非您使用自定义域，否则项目站点可在 <code>http(s)://&lt;username&gt;.github.io/&lt;repository&gt;</code> 或 <code>http(s)://&lt;organization&gt;.github.io/&lt;repository&gt;</code> 访问。</p>\n<p>虽然您只能在 GitHub 上为每个帐户创建一个用户或组织站点。但无论是组织还是用户帐户拥有的项目站点都是无限的。</p>\n<h2>发布源文件到 GitHub Pages</h2>\n<div class=\"hint-container caution\">\n<p class=\"hint-container-title\">警告</p>\n<p>GitHub Pages 站点 默认在互联网上公开，即使站点的仓库是私有的。</p>\n</div>\n<p>如果您的存储库中存在默认发布源，则 GitHub Pages 将自动从该源发布网站。用户和组织站点的默认发布源是存储库的默认分支的根目录。项目站点的默认发布源是 gh-pages 分支的根目录。</p>\n<p>您需要跳转到 Settings (设置) 选项卡，下来找到 GitHub Pages 的配置部分。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>您只能在根目录 (<code>/</code>) 和 文档目录 (<code>/docs</code>) 之间进行选择，而不能将仓库内的任意文件夹作为发布源。</p>\n</div>\n<h3>静态站点</h3>\n<p>GitHub Pages 发布您推送到存储库的所有静态文件，这意味它不支持服务器端语言，例如 PHP，Ruby 或 Python。也就是您只能通过 GitHub Pages 发布 “无后端” 的纯静态站点。</p>\n<h3>限制</h3>\n<ul>\n<li>\n<p>GitHub Pages 网站不得超过 1 GB。</p>\n</li>\n<li>\n<p>GitHub Pages 站点的带宽限制为每月 100GB。</p>\n</li>\n<li>\n<p>GitHub Pages 站点限制为每小时最多构建 10 次。</p>\n</li>\n</ul>\n<h3>子模块</h3>\n<p>如果 GitHub Pages 站点的仓库包含子模块，则在构建站点时会自动拉取其内容。</p>\n<p>只能使用指向公共仓库的子模块，因为 GitHub Pages 服务器无法访问私有仓库。</p>\n<p>对子模块 (包括嵌套子模块) 使用 <code>https://</code> 只读 URL。 您可以在 .gitmodules 文件中进行此更改。</p>\n<h2>取消发布</h2>\n<h3>取消发布项目站点</h3>\n<ol>\n<li>在 GitHub 上，导航到仓库的主页面。</li>\n<li>如果仓库中存在 gh-pages 分支，请删除 gh-pages 分支。</li>\n<li>在仓库名称下，单击 Settings (设置) 。</li>\n<li>在“ GitHub Pages”下，使用 Source (源) 下拉菜单并选择 None (无) 。</li>\n</ol>\n<h3>取消发布用户或组织站点</h3>\n<ol>\n<li>在 GitHub 上，导航到仓库的主页面。</li>\n<li>删除用作发布源的分支，或删除整个仓库。</li>\n</ol>\n<h2>自定义域名</h2>\n<p>您可以在对应仓库的 Settings (设置) 选项卡设置自定义域名，同时您需要将自定义域名的 CNAME 记录指向 <code>&lt;用户名&gt;.github.io</code>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>自定义域名的控制是由发布源文件夹下的 CNAME 文件控制的，您可以直接创建这个文件写入链接。</p>\n<p>同时，GitHub Pages 要求这个文件一直存在，否则自定义域名会失效。</p>\n</div>\n",
      "date_published": "2021-02-20T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "cache",
      "url": "https://mister-hope.com/code/github/actions/cache.html",
      "id": "https://mister-hope.com/code/github/actions/cache.html",
      "summary": "这个 Action 允许您缓存依赖项和构建输出内容以缩短 Workflow 执行时间。 日常最多使用的就是缓存依赖项，在每个工作流程中，将安装后的依赖通过安装后生成的依赖版本文件的哈希值进行缓存。 当前工作流程的版本文件哈希值与历史缓存中的某一项完全相同时，直接载入这些依赖项缓存，这样就可以免去安装步骤。 缓存依赖 关于缓存依赖的文档，详见 缓存依赖项...",
      "content_html": "<p>这个 Action 允许您缓存依赖项和构建输出内容以缩短 Workflow 执行时间。</p>\n<p>日常最多使用的就是缓存依赖项，在每个工作流程中，将安装后的依赖通过安装后生成的依赖版本文件的哈希值进行缓存。</p>\n<p>当前工作流程的版本文件哈希值与历史缓存中的某一项完全相同时，直接载入这些依赖项缓存，这样就可以免去安装步骤。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">缓存依赖</p>\n<p>关于缓存依赖的文档，详见 <a href=\"https://docs.github.com/cn/actions/guides/caching-dependencies-to-speed-up-workflows\" target=\"_blank\" rel=\"noopener noreferrer\">缓存依赖项以加快工作流程</a>。</p>\n</div>\n<!-- more -->\n<h2>配置项</h2>\n<h3>path</h3>\n<p>要缓存和还原的文件，目录和通配符模式的列表。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>支持的 glob 模式，请参见 <a href=\"https://github.com/actions/toolkit/tree/main/packages/glob\" target=\"_blank\" rel=\"noopener noreferrer\">@actions/glob</a>。</p>\n</div>\n<h3>key</h3>\n<p>用于保存缓存与还原缓存的的密钥</p>\n<h3>restore-keys</h3>\n<p>当 key 没有命中缓存是用于恢复缓存键值的有序列表</p>\n<h2>输出</h2>\n<p><code>cache-hit</code>: 一个布尔值，表明是否找到与该键完全匹配的值</p>\n<h2>缓存范围</h2>\n<p>缓存的作用域为特定的键和分支。默认分支缓存可用于其他分支。</p>\n<h2>案例</h2>\n<p>Yarn:</p>\n<div class=\"language-yml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/cache@v3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # 使用此 id 获得 `cache-hit`</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  # (`steps.yarn-cache.outputs.cache-hit != 'true'`)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">yarn-cache</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">node_modules/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    key</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    restore-keys</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">|</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      ${{ runner.os }}-yarn-</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Install Dependencies</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">steps.yarn-cache.outputs.cache-hit != 'true'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">yarn install</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>创建一个缓存键</h2>\n<p>缓存键可以包括 GitHub Actions 支持的任何上下文，函数，文字和运算符。</p>\n<p>例如，使用 <code>hashFiles</code> 功能可让您在依存关系更改时创建新的缓存。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/cache@v3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">yarn-cache</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">|</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">      node_modules/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    key</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}</span></span></code></pre>\n</div><p>利用 cache-hit 输出，当对应键命中特定缓存后，可以跳过后续步骤 (例如，安装或构建) 。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Install Dependencies</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">steps.yarn-cache.outputs.cache-hit != 'true'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">yarn install</span></span></code></pre>\n</div><h2>缓存限制</h2>\n<p>一个存储库最多可以有 5GB 的缓存。达到 5GB 限制后，将根据上次访问缓存的时间驱逐较早的缓存。过去未访问的缓存也将被自动删除。</p>\n<h2>仓库</h2>\n<p><a href=\"https://github.com/actions/cache\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/actions/cache</a></p>\n",
      "date_published": "2021-02-20T00:00:00.000Z",
      "date_modified": "2022-03-31T03:20:18.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "github-pages-deploy",
      "url": "https://mister-hope.com/code/github/actions/gh-pages-deploy.html",
      "id": "https://mister-hope.com/code/github/actions/gh-pages-deploy.html",
      "summary": "github-pages-deploy-action 用于自动将网站内容部署到 GitHub Pages。 您可以使用这个 Action 将代码推送到您想要的任何分支中，包括 gh-pages 和 docs, 甚至可以处理跨存储库部署。",
      "content_html": "<p>github-pages-deploy-action 用于自动将网站内容部署到 GitHub Pages。</p>\n<p>您可以使用这个 Action 将代码推送到您想要的任何分支中，包括 gh-pages 和 docs, 甚至可以处理跨存储库部署。</p>\n<!-- more -->\n<h2>重要配置</h2>\n<h3>branch</h3>\n<p>此项必填，填入您希望部署到的分支，例如 gh-pages 或 docs</p>\n<h3>folder</h3>\n<p>此项必填，填入存储库中要部署的文件夹。此项自动识别为相对路径。</p>\n<ul>\n<li>\n<p>如您的构建输出到 dist 目录，可以直接设置 <code>dist</code></p>\n</li>\n<li>\n<p>如果您希望部署根目录，请设置 <code>.</code></p>\n</li>\n<li>\n<p>如果您希望使用绝对路径访问 workflow 所在的 server，请在路径前添加 <code>~</code></p>\n</li>\n</ul>\n<h2>可选配置</h2>\n<h3>token</h3>\n<p>此选项默认为可访问存储库的 Token。</p>\n<p>如果您需要更多权限 (例如，部署到另一个存储库) ，可以通过此选项设置个人访问令牌 (PAT) 。</p>\n<p>本选项的值应该存储在 secrets 中。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>建议在生成新的 PAT 时选择所需的最少权限范围</p>\n</div>\n<h3>ssh-key</h3>\n<p>此选项可以填入部署用的 SSH 专用密钥，(本选项的值应该存储在 secrets 中)，也可以将其设置为 <code>true</code> 使用现有的 SSH 客户端配置，使用 SSH 部署。</p>\n<h3>repository-name</h3>\n<p>允许您指定其他存储库路径，只要您有权将其推送。格式应为: <code>用户名/存储库名称</code>。您需要设置 token 为 PAT，此配置选项才能正常运行。</p>\n<h3>target-folder</h3>\n<p>如果要将部署文件夹的内容推送到部署分支上的特定目录中，可以在此处指定。</p>\n<h3>commit-message</h3>\n<p>定制提交信息</p>\n<h3>clean</h3>\n<p>如果您的项目在构建时生成哈希文件，则可以使用此选项在每次部署时从部署分支的目标文件夹中自动将其删除。</p>\n<p>此选项默认情况下处于启用状态，可以通过将其设置为来关闭 <code>false</code>。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>也就是每次部署默认是全新的，不会保留任何上一次部署的文件。您需要保证部署时您已经拥有了所有需要的文件。</p>\n</div>\n<h3>clean-exclude</h3>\n<p>如果您需要使用 <code>clean</code> 但想保留某些文件或文件夹，则可以使用此选项。这应该在多行字符串中将每个模式包含为一行。</p>\n<h3>single-commit</h3>\n<p>如果您希望在部署分支只有一次最新的提交，而不是维护完整的历史记录，则可以将此选项切换为 <code>true</code>。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>使用此选项还将导致从部署分支中移除所有现有历史记录。</p>\n</div>\n<h2>案例</h2>\n<p>当构建完整网站后，请添加下列步骤:</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Deploy 🚀</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">JamesIves/github-pages-deploy-action@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    # 需要部署到的分支</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    branch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">gh-pages</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    # 需要部署的文件夹</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    folder</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">dist</span></span></code></pre>\n</div><h2>仓库</h2>\n<p><a href=\"https://github.com/JamesIves/github-pages-deploy-action\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/JamesIves/github-pages-deploy-action</a></p>\n",
      "date_published": "2021-02-20T00:00:00.000Z",
      "date_modified": "2022-03-31T03:20:18.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "MySQL",
      "url": "https://mister-hope.com/software/mysql/",
      "id": "https://mister-hope.com/software/mysql/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li><a href=\"/software/mysql/intro.html\" target=\"_blank\">介绍</a></li>\n<li><a href=\"/software/mysql/compare.html\" target=\"_blank\">5.7 版本与 8 的比较</a></li>\n</ul>\n",
      "date_published": "2022-01-12T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [
        {
          "name": "李欣桐"
        }
      ],
      "tags": []
    },
    {
      "title": "5.7 与 8",
      "url": "https://mister-hope.com/software/mysql/compare.html",
      "id": "https://mister-hope.com/software/mysql/compare.html",
      "summary": "MySql 5.7 和 MySql 8 的区别 NoSql 存储 Mysql 从 5.7 版本提供了 NoSQL 的存储功能,在 8.0 中这部分得到一些修改。 关系型数据库 (SQL) 通过外键关联来建立表与表之间的关系 非关系型数据库 (NOSQL) 通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定 隐藏索引 隐藏...",
      "content_html": "<h2>MySql 5.7 和 MySql 8 的区别</h2>\n<ol>\n<li>\n<p>NoSql 存储</p>\n<p>Mysql 从 5.7 版本提供了 NoSQL 的存储功能,在 8.0 中这部分得到一些修改。</p>\n<ul>\n<li>\n<p>关系型数据库 (SQL)\n通过外键关联来建立表与表之间的关系</p>\n</li>\n<li>\n<p>非关系型数据库 (NOSQL)\n通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</p>\n</li>\n</ul>\n</li>\n<li>\n<p>隐藏索引</p>\n<p>隐藏索引的特性对于性能调试非常有用,在 8.0 中,索引可以被隐藏和显示,当一个索引隐藏时,他不会被查询优化器所使用</p>\n<p>也就是说可以隐藏一个索引,然后观察对数据库的影响.如果性能下降,就说明这个索引是有效的,于是将其”恢复显示”即可;如果数据库性能看不出变化,说明这个索引是多于的,可以删掉了</p>\n</li>\n<li>\n<p>设置持久化</p>\n<p>MySQL 的设置可以在运行时通过 <code>SET GLOBAL</code> 命令来更改，但是这种更改只会临时生效，到下次启动时数据库又会从配置文件中读取。</p>\n<p>MySQL 8.0 新增了 <code>SET PERSIST</code> 命令，\n例如: <code>SET PERSIST max_connections = 500;</code>\nMySQL 会将该命令的配置保存到数据目录下的 <code>mysqld-auto.cnf</code> 文件中，下次启动时会读取该文件，用其中的配置来覆盖缺省的配置文件。</p>\n</li>\n<li>\n<p>UTF-8 编码</p>\n<p>从 MySQL 8.0 开始，数据库的缺省编码将改为 utf8mb4，这个编码包含了所有 emoji 字符。\n多少年来我们使用 MySQL 都要在编码方面小心翼翼，生怕忘了将缺省的 latin 改掉而出现乱码问题。从此以后就不用担心了。</p>\n</li>\n<li>\n<p>通用表表达式 (Common Table Expressions)</p>\n<p>看上去层次和区域都更加分明，改起来也更清晰的知道要改哪一部分。</p>\n</li>\n<li>\n<p>窗口函数 (Window Functions)</p>\n<p>从 8.0 开始，MySQL 新增了一个叫窗口函数的概念，它可以用来实现若干新的查询方式。</p>\n<p>窗口函数有点像是 <code>SUM()</code>、<code>COUNT()</code> 那样的集合函数，但它并不会将多行查询结果合并为一行，而是将结果放回多行当中。也就是说，窗口函数是不需要 <code>GROUP BY</code> 的。</p>\n</li>\n<li>\n<p>新的系统字典表</p>\n<p>整合了存储有关数据库对象信息的事务数据字典，所有的元数据都用 <code>InnoDB</code> 引擎进行存储</p>\n</li>\n<li>\n<p>安全和用户管理</p>\n<p>新增 <code>caching_sha2_password</code> 认证插件，并且是默认的身份认证插件。性能和安全方面加强</p>\n<p>权限支持 role</p>\n<p>新增密码历史记录功能，限制重复使用以前的密码</p>\n</li>\n<li>\n<p>innodb 增强</p>\n<p>新增 <code>INFORMATION_SCHEMA.INNODB_CACHED_INDEXES</code>，查看每个索引缓存在 <code>InnoDB</code> 缓冲池中的索引页数</p>\n<p>新增 <code>INFORMATION_SCHEMA.INNODB_TABLESPACES_BRIEF</code> 视图</p>\n<p>新增了动态配置项 <code>innodb_deadlock_detect</code>，用来禁用死锁检查，因为在高并发系统中，当大量线程等待同一个锁时，死锁检查会大大拖慢数据库</p>\n<p>支持使用 <code>innodb_directories</code> 选项在服务器脱机时将表空间文件移动或恢复到新位置</p>\n<p>新增 <code>innodb_dedicated_server</code>，让 <code>InnoDB</code> 根据服务器上检测到的内存量自动配置 <code>innodb_buffer_pool_size</code>, <code>innodb_log_file_size，innodb_flush_method</code>。</p>\n<p><code>innodb_dedicated_server</code>: 自动配置缓冲池大小</p>\n</li>\n<li>\n<p>直方图</p>\n<p>MySQL 8.0 版本开始支持期待已久直方图。优化器会利用 <code>column_statistics</code> 的数据，判断字段的值的分布，得到更准确的执行计划。</p>\n<p>可以使用 <code>ANALYZE TABLE table_name [UPDATE HISTOGRAM on col_name with N BUCKETS |DROP HISTOGRAM ON clo_name]</code> 来收集或者删除直方图信息</p>\n<p>支持会话级别 <code>SET_VAR</code> 动态调整部分参数，有利于提升语句性能。</p>\n</li>\n<li>\n<p>InnoDB 性能提升</p>\n<p>废除 <code>buffer pool mutex</code>, 将原来一个 <code>mutex</code> 拆分成多个，提高并发拆分 <code>LOCK_thd_list</code> 和 <code>LOCK_thd_remove</code> 这两个 <code>mutex</code>，大约可提高线程链接效率 5%。</p>\n<ol>\n<li>\n<p>行缓存</p>\n<p>MySQL 8.0 的优化器可以估算将要读取的行数，因此可以提供给存储引擎一个合适大小的 <code>row buffer</code> 来存储需要的数据。大批量的连续数据扫描的性能将受益于更大的 <code>record buffer</code>。</p>\n</li>\n<li>\n<p>改进扫描性能</p>\n<p>改进 <code>InnoDB</code> 范围查询的性能，可提升全表查询和范围查询 5-20%的性能。</p>\n</li>\n<li>\n<p>成本模型</p>\n<p><code>InnoDB</code> 缓冲区可以估算缓存区中的有多少表和索引，这可以让优化器选择访问方式时知道数据是否可以存储在内存中还是必须存储到磁盘上。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2>MySql 5.7 和 8 的选择</h2>\n<p>MySQL 8 会使用更多内存。</p>\n<p>对运行相同轻量级工作负载的 MySQL 8 和 MySQL 5.7 (实际上它们是 Percona Server 版本) 的 1GB VM 进行基本测试。</p>\n<p>MySQL 8 使用了大约 200MB 的 <code>swap</code> 分区，并且使用更少的系统缓存，被分配更多内存。</p>\n<p>如果我们查看 <code>top</code> 命令的输出，我们会看到 MySQL 8 使用的更多常驻内存和虚拟内存。特别是“可怕的”虚拟内存，因为它远远超过这些 VM 上可用的 1GB 物理内存。当然，虚拟内存使用 (VSZ) 是现代应用程序实际内存需求的一个很差的指标，但它确实证实了更高的内存需求这个事。</p>\n<p>实际上，正如我们从 <code>vmstat</code> 输出中所知道的那样，即使没有太多的“空间”，MySQL 8 和 MySQL 5.7 都不会在低负载下使用 <code>swap</code> 分区。</p>\n<p>如果您有多个连接或希望在同一个 VM 上运行某些应用程序，则可以使用 <code>swap</code> (如果未启用交换，则可能导致 OOM)。这是一个有趣的实验，能看看我有多少可以驱动 MySQL 5.7 和 MySQL 8 的内存消耗。</p>\n<p>总结在开发环境中迁移到 MySQL 8 时，请记住，使用相同的设置需要比 MySQL 5.7 配置更多的内存。</p>\n",
      "date_published": "2021-01-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [
        {
          "name": "李欣桐"
        }
      ],
      "tags": []
    },
    {
      "title": "简介",
      "url": "https://mister-hope.com/software/mysql/intro.html",
      "id": "https://mister-hope.com/software/mysql/intro.html",
      "summary": "MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，属于 Oracle 旗下产品。 它是最流行的关系型数据库管理系统之一，是最好的 RDBMS 关系数据库管理系统应用软件之一 MySQL 使用 SQL 语言，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站都选择 MySQL 作为网...",
      "content_html": "<p>MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，属于 Oracle 旗下产品。</p>\n<p>它是最流行的关系型数据库管理系统之一，是最好的 RDBMS 关系数据库管理系统应用软件之一</p>\n<p>MySQL 使用 SQL 语言，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站都选择 MySQL 作为网站数据库。</p>\n<h2>安装</h2>\n<p>下载地址: <a href=\"https://dev.mysql.com/downloads/\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.mysql.com/downloads/</a></p>\n<p>在这个下载界面会有几个版本的选择,</p>\n<ol>\n<li>\n<p>MySQL Community Server 社区版本，开源免费，但不提供官方技术支持。</p>\n</li>\n<li>\n<p>MySQL Enterprise Edition 企业版本，需付费，可以试用 30 天。</p>\n</li>\n<li>\n<p>MySQL Cluster 集群版，开源免费。可将几个 MySQL Server 封装成一个 Server。</p>\n</li>\n<li>\n<p>MySQL Cluster CGE 高级集群版，需付费。</p>\n</li>\n<li>\n<p>MySQL Workbench ( GUITOOL )一款专为 MySQL 设计的 ER/数据库建模工具。它是著名的数据库设计工具 DBDesigner4 的继任者。</p>\n<p>MySQL Workbench 又分为两个版本，分别是社区版( MySQL Workbench OSS )、商用版( MySQL WorkbenchSE )。</p>\n</li>\n</ol>\n<p>MySQL Community Server 是开源免费的，这也是我们通常用的 MySQL 的版本。</p>\n<ol>\n<li>\n<p>下载后得到 <code>.zip</code> 压缩包.</p>\n</li>\n<li>\n<p>解压到自己想要安装到的目录</p>\n</li>\n<li>\n<p>添加环境变量: 我的电脑 → 属性 → 高级 → 环境变量</p>\n<p>选择 PATH，在其后面添加: mysql 安装文件下面的 bin 文件夹</p>\n</li>\n<li>\n<p>新建 mysql 配置文件</p>\n<p>在 mysql 文件夹中新建 <code>my.ini</code> 文件,编辑 <code>my.ini</code> 文件,注意替换路径位置</p>\n<div class=\"language-ini\" data-highlighter=\"shiki\" data-ext=\"ini\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">[mysqld]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">basedir</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">D:\\Program Files\\mysql-5.7\\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">datadir</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">D:\\Program Files\\mysql-5.7\\data\\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">port</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">3306</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">skip-grant-tables</span></span></code></pre>\n</div></li>\n<li>\n<p>启动管理员模式下的 CMD，输入 <code>cd /d bin目录路径</code> 将路径切换至 mysql 下的 bin 目录，然后输入 <code>mysqld –install</code> (安装 mysql )</p>\n</li>\n<li>\n<p>再输入 <code>mysqld --initialize-insecure --user=mysql</code> 初始化数据文件</p>\n</li>\n<li>\n<p>然后输入 <code>net start mysql</code> 再次启动 mysql,然后用命令 <code>mysql –u root –p</code> 进入 mysql 管理界面 (密码可为空)</p>\n</li>\n<li>\n<p>进入界面后更改 root 密码</p>\n<p><code>update mysql.user set authentication_string=password('123456') where user='root' and Host = 'localhost';</code></p>\n</li>\n<li>\n<p>刷新权限 <code>flush privileges;</code></p>\n</li>\n</ol>\n<figure><figcaption>flush privileges</figcaption></figure>\n<ol>\n<li>\n<p>修改 <code>my.ini</code> 文件删除最后一句 <code>skip-grant-tables</code></p>\n<div class=\"language-ini\" data-highlighter=\"shiki\" data-ext=\"ini\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">[mysqld]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">basedir</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">D:\\work\\mysql-5.7.19\\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">datadir</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">D:\\work\\mysql-5.7.19\\data\\</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#C678DD\">port</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#98C379\">3306</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">#skip-grant-tables</span></span></code></pre>\n</div></li>\n<li>\n<p>重启 mysql 即可正常使用</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">net </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">stop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> mysql</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">net </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> mysql</span></span></code></pre>\n</div></li>\n<li>\n<p>连接上测试出现以下结果就安装好了\n</p>\n</li>\n</ol>\n<h2>连接数据库</h2>\n<ol>\n<li>\n<p>打开 MySQL 命令窗口</p>\n<ul>\n<li>在 DOS 命令行窗口进入 安装目录 <code>\\mysql\\bin</code></li>\n<li>可设置环境变量，设置了环境变量，可以在任意目录打开</li>\n</ul>\n</li>\n<li>\n<p>输入连接数据库语句:\n<code>mysql -h 服务器主机地址 -u 用户名 -p 用户密码</code></p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code>-p</code> 后面不能多加空格，否则会被当做密码的内容，导致登录失败。</p>\n</div>\n</li>\n</ol>\n<h2>几个基本的数据库操作命令</h2>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">mysql -h 服务器主机地址 -u 用户名 -p 用户密码 连接数据库</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">update</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> user </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">set</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> password</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">password</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'123456'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> user</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'root'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; 修改密码</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">flush privileges; 刷新数据库</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">show databases; 显示所有数据库</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">use</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> dbname；打开某个数据库</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">show tables; 显示数据库 mysql 中所有的表</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">describe user; 显示表 mysql 数据库中 user 表的列信息</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">create</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> database</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; 创建数据库</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">use</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> databasename; 选择数据库</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">exit; 退出 Mysql</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">? 命令关键词 : 寻求帮助</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">-- 表示注释</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>数据库基本操作</h2>\n<h3>操作数据库</h3>\n<ol>\n<li>\n<p>创建数据库</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DATABASE</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div></li>\n<li>\n<p>显示数据库</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">show databases;</span></span></code></pre>\n</div><p>注意: 为了不再显示的时候乱码，要修改数据库默认编码。以下以 <code>GBK</code> 编码页面为例进行说明:</p>\n<ol>\n<li>\n<p>修改 MYSQL 的配置文件: <code>my.ini</code> 里面修改 <code>default-character-set=gbk</code></p>\n</li>\n<li>\n<p>代码运行时修改:</p>\n<ol>\n<li>Java 代码: <code>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=gbk</code></li>\n<li>PHP 代码: <code>header(\"Content-Type:text/html;charset=gb2312\");</code></li>\n<li>C 语言代码: <code>int mysql_set_character_set( MYSQL * mysql, char * csname)；</code>\n该函数用于为当前连接设置默认的字符集。字符串 <code>csname</code> 指定了 1 个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与 <code>SET NAMES</code> 语句类似，但它还能设置 mysql → charset 的值，从而影响了由 <code>mysql_real_escape_string()</code> 设置的字符集。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>删除数据库</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">drop</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> database</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><ul>\n<li>删除一个已经确定存在的数据库</li>\n</ul>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">drop</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> database</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><ul>\n<li>删除一个不确定存在的数据库</li>\n</ul>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">drop</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> database</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> exists</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div></li>\n<li>\n<p>选择数据库</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">use</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n</div><p>use 语句可以通过 MySQL 把 name 数据库作为默认 (当前) 数据库使用，用于后续语句。该数据库保持为默认数据库，直到语段的结尾，或者直到发布一个不同的 USE 语句</p>\n<p>使用 use 语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。下面的例子可以从 db1 数据库访问作者表，并从 db2 数据库访问编辑表</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">mysql</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> USE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> db1;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">mysql</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> SELECT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> author_name,editor_name </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">FROM</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> author,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">db2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">editor</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        WHERE</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> author</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">editor_id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> db2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">editor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.editor_id;</span></span></code></pre>\n</div><p>USE 语句被设立出来，用于与 Sybase 相兼容。</p>\n<p>use 数据库后，使用 <code>show databases</code> 就能查询所有数据库，如果想跳到其他数据库，用 use 其他数据库名字就可以了。</p>\n</li>\n<li>\n<p>当前选择的数据库</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">select</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> database</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n</div><p>MySQL 中 <code>SELECT</code> 命令类似于其他编程语言里的 <code>print</code> 或者 <code>write</code>，您可以用它来显示一个字符串、数字、数学表达式的结果等等,</p>\n<ol>\n<li>\n<p>显示 MYSQL 的版本</p>\n<div class=\"language-sql\" data-highlighter=\"shiki\" data-ext=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">mysql</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> select</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> version</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">+</span></span></code></pre>\n</div></li>\n</ol>\n</li>\n</ol>\n",
      "date_published": "2021-01-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [
        {
          "name": "李欣桐"
        }
      ],
      "tags": []
    },
    {
      "title": "GitHub Token",
      "url": "https://mister-hope.com/code/github/token.html",
      "id": "https://mister-hope.com/code/github/token.html",
      "summary": "Personal Access Token (PAT)，又称个人访问令牌，是一种代替密码进行 GitHub 身份认证的方式。 通常情况下，你可能需要在 GitHub Workflow 中使用 PAT，以便在 GitHub Actions 中使用需要授权的 GitHub API。",
      "content_html": "<p>Personal Access Token (PAT)，又称个人访问令牌，是一种代替密码进行 GitHub 身份认证的方式。</p>\n<p>通常情况下，你可能需要在 GitHub Workflow 中使用 PAT，以便在 GitHub Actions 中使用需要授权的 GitHub API。</p>\n<!-- more -->\n<h2>创建个人访问令牌</h2>\n<ol>\n<li>\n<p>访问 <a href=\"https://github.com/settings/tokens/new\" target=\"_blank\" rel=\"noopener noreferrer\">新建 Token 页面</a> (当然您需要先登陆 GitHub)</p>\n<blockquote>\n<p>或者可以点击头像 → Settings → Developer settings → Personal access tokens → Generate new Token</p>\n</blockquote>\n</li>\n<li>\n<p>输入一个备注，选择您需要授权 Token 访问的内容，之后点击页面底部的 \"Generate Token\"</p>\n</li>\n<li>\n<p>妥善保存该 Token (因为您无法再次查看它)</p>\n</li>\n</ol>\n<p>详见 <a href=\"https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token\" target=\"_blank\" rel=\"noopener noreferrer\">创建个人访问令牌</a></p>\n",
      "date_published": "2021-01-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "GitHub Actions",
      "url": "https://mister-hope.com/code/github/actions/",
      "id": "https://mister-hope.com/code/github/actions/",
      "summary": "目录 常用 GitHub Action 官方文档 文档地址 Workflow 触发事件 Workflow 配置",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/github/actions/intro.html\" target=\"_blank\">GitHub Actions 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/actions/config.html\" target=\"_blank\">Workflow 配置</a></p>\n</li>\n</ul>\n<h2>常用 GitHub Action</h2>\n<ul>\n<li>\n<p><a href=\"/code/github/actions/checkout.html\" target=\"_blank\">checkout</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/actions/cache.html\" target=\"_blank\">cache</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/actions/gh-pages-deploy.html\" target=\"_blank\">GitHub Pages 部署</a></p>\n</li>\n</ul>\n<h2>官方文档</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.github.com/cn/actions\" target=\"_blank\" rel=\"noopener noreferrer\">文档地址</a></p>\n</li>\n<li>\n<p><a href=\"https://help.github.com/en/actions/reference/events-that-trigger-workflows\" target=\"_blank\" rel=\"noopener noreferrer\">Workflow 触发事件</a></p>\n</li>\n<li>\n<p><a href=\"https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noopener noreferrer\">Workflow 配置</a></p>\n</li>\n</ul>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2023-03-12T09:46:14.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "checkout",
      "url": "https://mister-hope.com/code/github/actions/checkout.html",
      "id": "https://mister-hope.com/code/github/actions/checkout.html",
      "summary": "该操作将检出您的存储库 $GITHUB_WORKSPACE，使您的工作流可以访问它。",
      "content_html": "<p>该操作将检出您的存储库 <code>$GITHUB_WORKSPACE</code>，使您的工作流可以访问它。</p>\n<!-- more -->\n<p>默认情况下，对于触发工作流的 ref / SHA，为了速度仅提取一次提交。如需获取所有分支和标签的所有历史记录，需要设置设置 <code>fetch-depth: 0</code>。</p>\n<p>身份验证令牌保留在本地 Git 配置中。这使您的脚本可以运行经过身份验证的 Git 命令。在工作后清理期间将删除令牌。</p>\n<p>设置 <code>persist-credentials: false</code> 取消保留。</p>\n<h2>常用参数</h2>\n<h3>ref</h3>\n<p>需要检出的 ref，即可以填入特定分支、commitID 或 tag。默认为触发当前工作流的 ref。</p>\n<h3>token</h3>\n<p>个人访问令牌，又称 Personal access token (PAT)，用于配置机器 Git 配置，以运行需要身份验证的 Git 命令，详见 <a href=\"/code/github/token.html\" target=\"_blank\">GitHub Token</a>。</p>\n<div v-pre=\"\">\n<p>默认为工作流提供的 <code>${{ github.token }}</code></p>\n</div>\n<h3>fetch-depth</h3>\n<p>要获取的提交数。 <code>0</code> 表示所有分支和标签的所有历史记录。</p>\n<p>默认为 <code>1</code></p>\n<h3>submodules</h3>\n<p>是否检出子模块。<code>true</code> 检出子模块 <code>recursive</code> 会递归检出子模块。</p>\n<p>默认为 <code>false</code></p>\n<h2>其他参数</h2>\n<h3>repository</h3>\n<p>带有作者的仓库名，如 <code>Hope-Studio/innenu-app</code>，默认为当前仓库。</p>\n<h3>persist-credentials</h3>\n<p>是否将 token 等信息用于本地的 Git 配置，以便后续 Git 命令可以访问。</p>\n<h3>path</h3>\n<p><code>$GITHUB_WORKSPACE</code> 下用于放置存储库的相对路径</p>\n<p>默认为 <code>./</code></p>\n<h3>ssh-key</h3>\n<p>用于获取仓库的 SSH 私钥，用于配置机器 Git 配置，以运行需要身份验证的 Git 命令。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>默认的 token 有权限拉取工作流所在的仓库。</p>\n<p>如果仓库包含了存放于其他代码托管商或私有的 submodules，或是的仓库，可能需要设置上述两选项之一，才能拉取对应 submodule。</p>\n</div>\n<h3>ssh-known-hosts</h3>\n<p>除了用户和全局主机密钥数据库外的已知主机。可以使用 <code>ssh-keyscan</code> 获得主机的公共 SSH 密钥。 例如，<code>ssh-keyscan github.com</code>。 github.com 的公钥总是隐式添加的。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>当您需要获取其他代码托管商的仓库时，需要设置此选项</p>\n</div>\n<h3>ssh-strict</h3>\n<p>是否进行严格的 ssh 校验，默认为 <code>true</code>，即不检查 IP，而是检查 Host 给出的密钥指纹是否匹配。</p>\n<h3>clean</h3>\n<p>是否在拉取代码前执行 <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code>。</p>\n<p>默认为 <code>true</code></p>\n<h3>lfs</h3>\n<p>是否下载 Git-LFS 文件。</p>\n<p>默认为 <code>false</code></p>\n<h2>例子</h2>\n<ul>\n<li>\n<p>获取所有标签与历史:</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    fetch-depth</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span></span></code></pre>\n</div></li>\n<li>\n<p>检出特定分支</p>\n</li>\n</ul>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    ref</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-branch</span></span></code></pre>\n</div><ul>\n<li>\n<p>检出 <code>HEAD^</code></p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    fetch-depth</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">git checkout HEAD^</span></span></code></pre>\n</div></li>\n<li>\n<p>并列检出多个 repo</p>\n<div class=\"language-yml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Checkout</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Checkout tools repo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    repository</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-org/my-tools</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-tools</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n<li>\n<p>嵌套检出多个 repo</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Checkout</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Checkout tools repo</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    repository</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-org/my-tools</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-tools</span></span></code></pre>\n</div></li>\n<li>\n<p>检出多个私有 repo</p>\n<div class=\"language-yml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Checkout</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Checkout private tools</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    repository</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-org/my-private-tools</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    token</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">${{ secrets.GitHub_PAT }}</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> # `GitHub_PAT` is a secret that contains your PAT</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    path</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">my-tools</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<div v-pre=\"\">\n<p><code>${{ github.token }}</code> 仅限于当前存储库，因此，如果要签出其他私有存储库，则需要提供自己的 PAT。</p>\n</div>\n</div>\n<ul>\n<li>\n<p>检出 PR HEAD commit 而不是 merge commit</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">- </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  with</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    ref</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">${{ github.event.pull_request.head.sha }}</span></span></code></pre>\n</div></li>\n<li>\n<p>当关闭 PR 时将其检出</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  pull_request</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    branches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    types</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">opened</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">synchronize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">closed</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">jobs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  build</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    runs-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    steps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      - </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span></code></pre>\n</div></li>\n<li>\n<p>使用内置 token 进行提交</p>\n<div class=\"language-yml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">push</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">jobs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  build</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    runs-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    steps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      - </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">uses</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      - </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">|</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          date &gt; generated.txt</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          git config user.name github-actions</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          git config user.email github-actions@github.com</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          git add .</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          git commit -m \"generated\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          git push</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></li>\n</ul>\n<h2>地址</h2>\n<p>地址: <a href=\"https://github.com/actions/checkout\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/actions/checkout</a></p>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "Action 配置",
      "url": "https://mister-hope.com/code/github/actions/config.html",
      "id": "https://mister-hope.com/code/github/actions/config.html",
      "summary": "GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的 .github/workflows 目录。 workflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为 .yml，比如foo.yml。 一个库可以有多个 workflow 文件。GitHub 只要发现 .github/workflows 目录里面...",
      "content_html": "<p>GitHub Actions 的配置文件叫做 <code>workflow</code> 文件，存放在代码仓库的 <code>.github/workflows</code> 目录。</p>\n<p><code>workflow</code> 文件采用 <code>YAML</code> 格式，文件名可以任意取，但是后缀名统一为 <code>.yml</code>，比如<code>foo.yml</code>。</p>\n<p>一个库可以有多个 <code>workflow</code> 文件。GitHub 只要发现 <code>.github/workflows</code> 目录里面有 <code>.yml</code> 文件，就会自动运行该文件。</p>\n<!-- more -->\n<h2>常见字段</h2>\n<p><code>workflow</code> 文件的配置字段非常多。下面是一些基本字段。</p>\n<h3>name</h3>\n<p><code>name</code> 字段是 <code>workflow</code> 的名称。如果省略该字段，默认为当前 <code>workflow</code> 的文件名。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">GitHub Actions Demo</span></span></code></pre>\n</div><h3>on</h3>\n<p><code>on</code> 字段指定触发 <code>workflow</code> 的时机，通常是某些事件。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 指定 push 事件触发 workflow。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">push</span></span></code></pre>\n</div><p><code>on</code> 字段也可以是事件的数组。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 指定 push 事件或 pull_request 事件都可以触发 workflow。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">pull_request</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><p>完整的事件列表，请查看官方文档。\n除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p>\n<h4>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</h4>\n<p>指定触发事件时，可以限定分支或标签。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 指定只有 main 分支发生 push 事件时，才会触发 workflow。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  push</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    branches</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      - </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">main</span></span></code></pre>\n</div><h3>jobs</h3>\n<p><code>workflow</code> 文件的主体是 <code>jobs</code> 字段，表示要执行的一项或多项任务。</p>\n<p><code>jobs</code> 字段里面，需要写出每一项任务的 <code>job_id</code>，具体名称自定义。</p>\n<h4>jobs.&lt;job_id&gt;.name</h4>\n<p><code>job_id</code> 里面的 <code>name</code> 字段是任务的说明(可填可不填)。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">jobs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  my_first_job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">My first job</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  my_second_job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">My second job</span></span></code></pre>\n</div><p>上面代码的 <code>jobs</code> 字段包含两项任务，<code>job_id</code> 分别是 <code>my_first_job</code> 和 <code>my_second_job</code>。</p>\n<h4>jobs.&lt;job_id&gt;.needs</h4>\n<p><code>needs</code> 字段指定当前任务的依赖关系，即运行顺序。</p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 这个 workflow 的运行顺序依次为: job1、job2、job3。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">jobs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  job1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  job2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    needs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">job1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  job3</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    needs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">job1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">job2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">]</span></span></code></pre>\n</div><h4>jobs.&lt;job_id&gt;.runs-on</h4>\n<p><code>runs-on</code> 字段指定运行所需要的虚拟机环境。\n它是<strong>必填字段</strong>。目前可用的虚拟机如下。</p>\n<p><code>ubuntu-latest</code>，<code>ubuntu-18.04</code> 或 <code>ubuntu-16.04</code></p>\n<p><code>windows-latest</code>，<code>windows-2019</code> 或 <code>windows-2016</code></p>\n<p><code>macOS-latest</code> 或 <code>macOS-10.14</code></p>\n<div class=\"language-yml\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># 代码指定虚拟机环境为 ubuntu-18.04。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">runs-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">ubuntu-18.04</span></span></code></pre>\n</div><h4>jobs.&lt;job_id&gt;.steps</h4>\n<p><code>steps</code> 字段指定每个 <code>Job</code> 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p>\n<ul>\n<li><code>jobs.&lt;job_id&gt;.steps.name</code>: 步骤名称。</li>\n<li><code>jobs.&lt;job_id&gt;.steps.run</code>: 该步骤运行的命令或者 action。</li>\n<li><code>jobs.&lt;job_id&gt;.steps.env</code>: 该步骤所需的环境变量。</li>\n</ul>\n<p>下面是一个完整的 <code>workflow</code> 文件的范例。</p>\n<div class=\"language-yml line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"yml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Greeting from Mona</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">push</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">jobs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  my-job</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">My Job</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    runs-on</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    steps</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"># steps 字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      - </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Print a greeting</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">        env</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          MY_VAR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Hi there! My name is</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          FIRST_NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Mona</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          MIDDLE_NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">The</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">          LAST_NAME</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">Octocat</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">        run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">|</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">          echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2>官方文档</h2>\n<p>关于完整的工作流程语法，详见 <a href=\"https://docs.github.com/cn/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 操作的工作流程语法</a></p>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2023-03-12T09:46:14.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "Actions 介绍",
      "url": "https://mister-hope.com/code/github/actions/intro.html",
      "id": "https://mister-hope.com/code/github/actions/intro.html",
      "summary": "在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业 (包括 CI/CD) ，并将操作合并到完全自定义的工作流程中。",
      "content_html": "<p>在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。</p>\n<p>您可以发现、创建和共享操作以执行您喜欢的任何作业 (包括 CI/CD) ，并将操作合并到完全自定义的工作流程中。</p>\n<!-- more -->\n<h2>特点</h2>\n<ul>\n<li>\n<p>GitHub 把组成持续集成的操作称为 actions。</p>\n</li>\n<li>\n<p>GitHub 允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p>\n</li>\n<li>\n<p>如果您需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p>\n</li>\n<li>\n<p>GitHub 做了一个官方市场，可以搜索到他人提交的 actions。另外， <a href=\"https://github.com/sdras/awesome-actions\" target=\"_blank\" rel=\"noopener noreferrer\">awesome actions</a> 仓库收集了很多有用的 actions。</p>\n</li>\n</ul>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">持续集成</p>\n<p>关于持续集成 (CI) 的概念与介绍，详见 <a href=\"/code/basic/ci.html\" target=\"_blank\">基础 → 持续集成</a></p>\n</div>\n<h2>简介</h2>\n<p>GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。</p>\n<h2>组件</h2>\n<p>下面是一起运行作业的多个 GitHub Actions 组件列表。 您可以查看这些组件如何相互作用。</p>\n<h3>workflow</h3>\n<p>工作流程 (workflow) 是您添加到仓库的自动化过程。 工作流程由一项或多项作业组成，可以计划或由事件触发。 工作流程可用于在 GitHub 上构建、测试、打包、发布或部署项目。</p>\n<p>持续集成一次运行的过程，就是一个 workflow。</p>\n<h3>event</h3>\n<p>事件 (event) 是触发工作流程的特定活动。 例如，当有推送提交到仓库或者创建议题或拉取请求时，GitHub 就可能产生活动。</p>\n<p>您还可以使用仓库的 web hook 在发生外部事件时触发工作流程。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>事件是 workflow 执行的判定。可以通过配置工作流程，来决定在哪些事件被触发执行。</p>\n<p>同时工作流也可以读取触发事件的相关信息，以在不同情况下执行不同的任务。</p>\n</div>\n<h3>Jobs</h3>\n<p>作业 (job) 是在同一运行服务器上执行的一组步骤。</p>\n<p>默认情况下，包含多个作业的工作流程将同时运行这些作业。</p>\n<p>您也可以配置工作流程按顺序运行作业。例如，工作流程可以有两个连续的任务来构建和测试代码，其中测试作业取决于构建作业的状态。如果构建作业失败，测试作业将不会运行。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>作业是工作流程中一个完整任务的封装。</p>\n<p>一个 workflow 由一个或多个 jobs 构成，一次持续集成的运行，可以完成多个作业，对应多个任务。</p>\n</div>\n<h3>Steps</h3>\n<p>步骤 (step) 是可以在作业中运行命令的单个任务。步骤可以是操作或 shell 命令。</p>\n<p>作业中的每个步骤在同一运行器上执行，可让该作业中的操作互相共享数据。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>每个 job 由多个 step 构成，一步步完成。</p>\n</div>\n<h3>Action</h3>\n<p>操作 (Action) 是独立命令，它们组合到步骤以创建作业。</p>\n<p>操作是工作流程最小的便携式构建块。 您可以创建自己的操作，也可以使用 GitHub 社区创建的操作。要在工作流程中使用操作，必须将其作为一个步骤。</p>\n<h3>Server</h3>\n<p>运行器 (Server) 是安装了 GitHub Actions 运行器应用程序的服务器。</p>\n<p>您可以使用 GitHub 托管的运行器或托管您自己的运行器。运行器将侦听可用的作业，每次运行一个作业，并将进度、日志和结果报告回 GitHub。</p>\n<p>对于 GitHub 托管的运行器，工作流程中的每项作业都会在一个新的虚拟环境中运行。</p>\n<p>GitHub 托管的运行器基于 Ubuntu Linux、Microsoft Windows 和 macOS。</p>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2023-03-12T09:46:14.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "持续集成",
      "url": "https://mister-hope.com/code/basic/ci.html",
      "id": "https://mister-hope.com/code/basic/ci.html",
      "summary": "持续集成 (Continuous Integration) 指的是，频繁地 (一天多次) 将代码集成到主干，每次集成都通过自动化的构建 (包括编译，发布，自动化测试) 来验证，从而尽早地发现集成错误。 持续集成的目的让产品可以快速迭代，同时还能保持高质量。就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整，使得问题不会放大到其他部分和后...",
      "content_html": "<p>持续集成 (Continuous Integration) 指的是，频繁地 (一天多次) 将代码集成到主干，每次集成都通过自动化的构建 (包括编译，发布，自动化测试) 来验证，从而尽早地发现集成错误。</p>\n<p>持续集成的目的让产品可以快速迭代，同时还能保持高质量。就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整，使得问题不会放大到其他部分和后面的环节。</p>\n<!-- more -->\n<h2>介绍</h2>\n<p>持续集成 (CI) 是一种需要频繁提交代码到共享仓库的软件实践。频繁提交代码能较早检测到错误，减少在查找错误来源时开发者需要调试的代码量。 频繁的代码更新也更便于从软件开发团队的不同成员合并更改。 这对开发者非常有益，他们可以将更多时间用于编写代码，而减少在调试错误或解决合并冲突上所花的时间。</p>\n<p>提交代码到仓库时，可以持续创建并测试代码，以确保提交未引入错误。 您的测试可以包括代码语法检查 (检查样式格式) 、安全性检查、代码覆盖率、功能测试及其他自定义检查。</p>\n<p>创建和测试代码需要服务器。 您可以在推送代码到仓库之前在本地创建并测试更新，也可以使用 CI 服务器检查仓库中的新代码提交。</p>\n<h3>要点</h3>\n<p>它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p>\n<h3>优点</h3>\n<ol>\n<li>\n<p>提高开发效率</p>\n</li>\n<li>\n<p>快速发现并定位 Bugs</p>\n</li>\n<li>\n<p>更快速发布更新</p>\n</li>\n</ol>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "Glob",
      "url": "https://mister-hope.com/code/basic/glob.html",
      "id": "https://mister-hope.com/code/basic/glob.html",
      "summary": "本文介绍 Glob 匹配。",
      "content_html": "<p>本文介绍 Glob 匹配。</p>\n<!-- more -->\n<h2>简介</h2>\n<p>Glob 是当您要进行路径匹配时键入的模式。</p>\n<p>在解析一条匹配模式前，Glob 首先将 <code>{}</code> 部分展开为一组匹配模式。<code>{}</code> 内的模式之间使用逗号分隔。</p>\n<p>如 <code>a{/b/c,bcd}</code> 将扩展为 <code>a/b/c</code> 和 <code>abcd</code></p>\n<p><code>{}</code> 可以嵌套，可与其他模式联用。</p>\n<p>Glob 的魔术字符如下:</p>\n<ul>\n<li>\n<p><code>*</code>: 匹配路径部分中的 0 个或多个字符</p>\n</li>\n<li>\n<p><code>?</code>: 匹配单个字符</p>\n</li>\n<li>\n<p><code>[...]</code>: 匹配字符范围。<code>[^...]</code>和 <code>[!...]</code> 表示匹配不在范围内的字符</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<ul>\n<li><code>[xyz].js</code> 只能匹配 <code>x.js</code>, <code>y.js</code>, <code>z.js</code>，但不会匹配 <code>xy.js</code>, <code>xyz.js</code> 等，因为整个中括号只代表一个字符。其等价于 <code>[x-z].js</code></li>\n<li><code>[!xyz].js</code> 能匹配 <code>a.js</code>, <code>b.js</code>, <code>u.js</code>，但不会匹配 <code>x.js</code>, <code>y.js</code> <code>z.js</code>，<code>ab.js</code> 等。其等价于 <code>[^xyz].js</code> 和 <code>[!x-z].js</code>。</li>\n</ul>\n</details>\n</li>\n<li>\n<p><code>!(pattern|pattern|pattern)</code>: 匹配与提供的任何模式都不匹配的任何内容。</p>\n</li>\n<li>\n<p><code>?(pattern|pattern|pattern)</code>: 匹配 0 或一个内部模式。</p>\n</li>\n<li>\n<p><code>+(pattern|pattern|pattern)</code> 匹配一个或多个内部模式。</p>\n</li>\n<li>\n<p><code>*(a|b|c)</code>: 匹配 0 或多个内部模式。</p>\n</li>\n<li>\n<p><code>@(pattern|pat*|pat?erN)</code>: 匹配恰好一个内部模式。</p>\n</li>\n<li>\n<p><code>**</code>: 如果其在路径部分中单独出现，则匹配路径中的 0 个或多个目录与子目录。请注意它不对 symlinked 目录 (符号链接目录) 进行爬取。</p>\n<details class=\"hint-container details\"><summary>例子</summary>\n<ul>\n<li><code>**</code> 能匹配匹配所有的目录和文件。</li>\n<li><code>**/*.js</code> 能匹配所有的 js 文件。</li>\n<li><code>a/**/b.txt</code> 能匹配目录里任何一个 a 文件夹内的所有 b.txt 文件。</li>\n</ul>\n</details>\n</li>\n</ul>\n<h2><code>.</code> 开头的文件与文件夹</h2>\n<p>由于以 <code>.</code> 开头的文件或文件夹在 Unix 中视为隐藏文件或文件夹，故 Glob 不会匹配任何以 <code>.</code> 开头的路径部分，如 <code>.github/dependabot.yml</code> 或 <code>.eslintrc.js</code>。</p>\n<p>如果的确想要匹配 <code>.</code> 开头的文件或文件夹，可以显示标注出来，如 <code>.*.js</code> 可以匹配 <code>.eslintrc.js</code>。</p>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2023-03-12T09:46:14.000Z",
      "authors": [
        {
          "name": "陈慧玲"
        }
      ],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "加速 GitHub 克隆",
      "url": "https://mister-hope.com/code/github/speedup.html",
      "id": "https://mister-hope.com/code/github/speedup.html",
      "summary": "由于 GFW 的存在，GitHub 的访问速度在大部分国内地区都很慢，甚至不稳定。如果需要克隆体积比较大的项目，可能需要很长时间，也很大概率会在中途因为网络波动、终端问题导致克隆失败。 本文介绍如何使用 Gitee 加快 GitHub 项目克隆。 Gitee Gitee 又称码云，是一个国内的代码托管商，国内访问 Gitee 的速度是十分 Amazin...",
      "content_html": "<p>由于 GFW 的存在，GitHub 的访问速度在大部分国内地区都很慢，甚至不稳定。如果需要克隆体积比较大的项目，可能需要很长时间，也很大概率会在中途因为网络波动、终端问题导致克隆失败。</p>\n<p>本文介绍如何使用 Gitee 加快 GitHub 项目克隆。</p>\n<h2>Gitee</h2>\n<p>Gitee 又称码云，是一个国内的代码托管商，国内访问 Gitee 的速度是十分 Amazing 的。</p>\n<h3>注册</h3>\n<p>Gitee 账户可以很方便的通过 GitHub 账户 + 绑定手机号注册。</p>\n<h3>添加公钥</h3>\n<p>完成注册后，您需要上传本地公钥，以保证可以从 Gitee 上拉取或克隆，其步骤与 GitHub 大致相同。</p>\n<h3>导入 GitHub 仓库</h3>\n<p>码云的企业专线访问 GitHub 的速度很快，而码云在新建仓库的时候提供了导入选项，这就给我们的加速提供了方式。</p>\n<p>我们只需要在码云上新建仓库，选择导入，然后输入自己想要克隆的 GitHub 仓库地址，交给码云完成导入即可。</p>\n<p>稍等片刻后，码云即会将 GitHub 的仓库同步到自己的服务器上，此时我们只需要克隆码云上的这个仓库地址，就可以高速克隆这个项目。</p>\n<h3>远程库地址修改</h3>\n<p>在克隆完毕后，本地的 origin 远程库会默认为 Gitee 的仓库，此时我们需要使用 <code>git remote rename origin gitee</code> 命令，将码云的远程仓库重命名为 <code>gitee</code>，并使用 <code>git remote add origin &lt;github url&gt;</code> 命令重新添加 GitHub 的远程仓库为 origin。</p>\n<p>这样我们稍后在做出本地提交后，即可直接推送到 GitHub 仓库。</p>\n<h3>同步仓库</h3>\n<p>如果以导入的形式创建码云仓库。则可以随时点击仓库页面上的同步图标，让码云随时拉取最新的 gitee 代码，以便在本地通过 <code>git fetch gitee</code>，通过码云服务器高速拉取最新代码。</p>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "函数",
      "url": "https://mister-hope.com/code/language/js/guide/function.html",
      "id": "https://mister-hope.com/code/language/js/guide/function.html",
      "summary": "函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。 基本上所有的高级语言都支持函数，JavaScript 也不例外。JavaScript 的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。",
      "content_html": "<p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。</p>\n<p>基本上所有的高级语言都支持函数，JavaScript 也不例外。JavaScript 的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。</p>\n<!-- more -->\n<h2>声明函数</h2>\n<p><code>function</code> 命令声明的代码区块，就是一个函数。<code>function</code> 命令后面是函数名，函数名后面是一对圆括号，里面是传入函数的参数。函数体放在大括号里面。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> return</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>上述 <code>abs()</code> 函数的定义如下:</p>\n<p><code>function</code> 指出这是一个函数定义；</p>\n<p><code>abs</code> 是函数的名称；</p>\n<p><code>(x)</code> 括号内列出函数的参数，多个参数以,分隔；</p>\n<p><code>{ ... }</code> 之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</p>\n<p>由于 JavaScript 的函数也是一个对象，上述定义的 <code>abs()</code> 函数实际上是一个函数对象，而函数名 <code>abs</code> 可以视为指向该函数的变量。这叫做函数的声明(Function Declaration)。</p>\n<p>除了用 <code>function</code> 命令声明函数，还可以采用变量赋值的写法。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">s</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n</div><p>在这种方式下，<code>function (x) { ... }</code> 是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量 <code>print</code>，所以，通过变量 <code>print</code> 就可以调用该函数。</p>\n<p>这种写法将一个匿名函数赋值给变量。这时，这个匿名函数又称函数表达式(Function Expression)，因为赋值语句的等号右侧只能放表达式。</p>\n<p>采用函数表达式声明函数时，<code>function</code> 命令后面不带有函数名。如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> print</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// ReferenceError: x is not defined</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">print</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// function</span></span></code></pre>\n</div><p>上面代码在函数表达式中，加入了函数名 <code>x</code>。这个 <code>x</code> 只在函数体内部可用，指代函数表达式本身，其他地方都不可用。这种写法的用处有两个，一是可以在函数体内部调用自身，二是方便除错(除错工具显示函数调用栈时，将显示函数名，而不再显示这里是一个匿名函数)。因此，下面的形式声明函数也非常常见。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {};</span></span></code></pre>\n</div><p>需要注意的是，函数的表达式需要在语句的结尾加上分号，表示语句结束。而函数的声明在结尾的大括号后面不用加分号。总的来说，这两种声明函数的方式，除了变量提升以外，可以近似认为是等价的。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">函数名的提升</p>\n<p>JavaScript 引擎将函数名视同变量名，所以采用 <code>function</code> 命令声明函数时，整个函数会像变量声明一样，被提升到代码头部。所以，下面的代码不会报错。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> f</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {}</span></span></code></pre>\n</div></div>\n<h2>调用函数</h2>\n<p>调用函数时，要使用圆括号运算符。圆括号之中，可以加入函数的参数。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回 9</span></span></code></pre>\n</div><p>由于 JavaScript 允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"blablabla\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回 10</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\">-</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">9</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"haha\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"hehe\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回 9</span></span></code></pre>\n</div><p>传入的参数比定义的少也没有问题:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回 NaN</span></span></code></pre>\n</div><p>此时 <code>abs(x)</code> 函数的参数 x 将收到 <code>undefined</code>，计算结果为 <code>NaN</code>。</p>\n<p>要避免收到 <code>undefined</code>，可以对参数进行检查:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> abs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#C678DD\">typeof</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> !==</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"number\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">throw</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"Not a number\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> &gt;=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> return</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> -</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">x</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div>",
      "date_published": "2019-09-17T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "Windows PowerShell",
      "url": "https://mister-hope.com/software/tool/powershell.html",
      "id": "https://mister-hope.com/software/tool/powershell.html",
      "summary": "Powershell (Windows Powershell)是 Microsoft 为 Windows 设计的新的命令行程序，这个 Windows 内置的命令行 shell 包括交互式提示和脚本环境，它们可以独立使用也可以交互使用。",
      "content_html": "<p>Powershell (Windows Powershell)是 Microsoft 为 Windows 设计的新的命令行程序，这个 Windows 内置的命令行 shell 包括交互式提示和脚本环境，它们可以独立使用也可以交互使用。</p>\n<!-- more -->\n<p>我们平时所见的大多数的脚本(bat,perl,bash,sh)，接受(输入)和返回(输出)的都是文本。Powershell 是在 .Net 公共语言运行时(CLR-Common Language Runtime)和.Net Framework 的基础上构建的，所以 Powershell 可以接受和返回.Net 对象。也就是说，Powershell 是面向对象的脚本语言。</p>\n<p>举个例子，如果其它的脚本语言是 C 语言(低级)，那么 Powershell 就是 Java 或是 C#(高级)。面向对象的能力使 Powershell 相比其它脚本语言有更高的开发效率，脚本更容易维护，更容易实现模块化和复用。</p>\n<p>PowerShell 引入了 cmdlet 的概念(cmdlet 读作“command-let”,一看就是 cmd 的超集，事实也是如此，所有 cmd 命令都可以在 Powershell 中执行)，这是内置到 shell 中的一个简单的单一功能命令行工具。相比其它 shell，PowerShell 除了可以对计算机上文件系统的访问。还可以访问其他数据存储，如注册表和数字签名证书存储，就像访问文件系统一样容易。</p>\n<h2>特点</h2>\n<p>Powershell 提供了丰富的内置命令，相比其它 shell 尤其独特的优势: 您不必抛弃自己惯用的工具、命令，在 Powershell 中可以使用所有的 cmd 命令。</p>\n<p>Powershell 不处理文本(不把文本当做文本处理，当做.Net 对象处理)，相反，它处理基于 .Net Framework 平台的对象。</p>\n<p>Powershell 附带了具有一致格式(动词-名词)的大量内置命令。</p>\n<p>所有的 Powershell 命令都使用同一命令分析程序，而不是每个工具(命令)使用不同的分析程序，可以同时学习大量的命令。</p>\n<h2>官方教程</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/powershell/scripting/learn/ps101/01-getting-started?view=powershell-7.1\" target=\"_blank\" rel=\"noopener noreferrer\">官方教程</a></li>\n</ul>\n",
      "date_published": "2020-12-27T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [
        {
          "name": "沈启民"
        }
      ],
      "tags": []
    },
    {
      "title": "Windows Terminal",
      "url": "https://mister-hope.com/software/tool/terminal/",
      "id": "https://mister-hope.com/software/tool/terminal/",
      "summary": "Windows Terminal 是一个面向命令行工具和 shell(如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL))用户的新式终端应用程序。",
      "content_html": "<p>Windows Terminal 是一个面向命令行工具和 shell(如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL))用户的新式终端应用程序。</p>\n<!-- more -->\n<figure><figcaption>Windows Terminal</figcaption></figure>\n<h2>特点</h2>\n<ul>\n<li>\n<p>多选项卡与窗格</p>\n<p>可以同时运行多个终端并自由布局与切换</p>\n</li>\n<li>\n<p>自定义方案和配置</p>\n<p>可在 Windows Terminal 中使用多种自定义命令，获得更加自然的体验。 如果不喜欢特定的键盘快捷方式，可以将其更改为您喜欢的方式。</p>\n</li>\n<li>\n<p>强大的可配置主题</p>\n<p>可以自由配置 Windows Terminal 的配色方案</p>\n<p>可以在 Windows Terminal 窗口中显示背景图像和 GIF</p>\n</li>\n<li>\n<p>扩展性，支持连接众多平台</p>\n<p>任何具有命令行接口的应用程序都可以在 Windows Terminal 中运行。 这包括从 PowerShell 和命令提示符到 Azure Cloud Shell 和任何 WSL 分发 (如 Ubuntu 或 Oh-My-Zsh) 的所有应用程序。</p>\n</li>\n<li>\n<p>Unicode 和 UTF-8 字符支持</p>\n<p>Windows Terminal 可以显示 Unicode 和 UTF-8 字符，如各种语言的表情符号和字符。</p>\n</li>\n<li>\n<p>GPU 加速文本呈现引擎</p>\n<p>Windows Terminal 使用 GPU 来呈现其文本，从而提供比默认 Windows 命令行体验更好的性能。</p>\n</li>\n<li>\n<p>开源</p>\n</li>\n</ul>\n<h2>教程</h2>\n<ul>\n<li><a href=\"/software/tool/terminal/get-started.html\" target=\"_blank\">快速上手</a></li>\n<li><a href=\"/software/tool/terminal/settings.html\" target=\"_blank\">自定义设置</a></li>\n</ul>\n<h2>官方文档</h2>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>有关 Windows 终端的详细内容，详见 <a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/\" target=\"_blank\" rel=\"noopener noreferrer\">Windows 终端官方文档</a>。</p>\n</div>\n",
      "date_published": "2021-01-27T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "快速上手",
      "url": "https://mister-hope.com/software/tool/terminal/get-started.html",
      "id": "https://mister-hope.com/software/tool/terminal/get-started.html",
      "summary": "安装 您可以通过 Microsoft Store 进行安装，同样您可以访问 GitHub release 下载任意版本可执行文件。 注意 从 GitHub 安装，终端将不会自动更新为新版本。 使用 打开终端时，Windows Terminal 会在打开的选项卡中通过 PowerShell 作为默认配置文件启动。 如果已安装 WSL(Windows Su...",
      "content_html": "<h2>安装</h2>\n<p>您可以通过 <a href=\"https://aka.ms/terminal\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft Store</a> 进行安装，同样您可以访问 <a href=\"https://github.com/microsoft/terminal/releases/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub release</a> 下载任意版本可执行文件。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>从 GitHub 安装，终端将不会自动更新为新版本。</p>\n</div>\n<h2>使用</h2>\n<p>打开终端时，Windows Terminal 会在打开的选项卡中通过 PowerShell 作为默认配置文件启动。</p>\n<p>如果已安装 WSL(Windows Subsystem for Linux) 发行版或多个版本的 PowerShell，终端将自动为您创建配置文件。</p>\n<h3>打开新选项卡</h3>\n<p>您可以使用 <code>Ctrl + Shift + T</code> 快捷键或选择 + (加号)按钮，打开默认配置文件的新选项卡。</p>\n<p>若要打开其他配置文件，请选择 + 按钮旁的 ˅(箭头)打开下拉菜单，从中选择要打开的配置文件。</p>\n<figure><figcaption>下拉菜单</figcaption></figure>\n<h3>打开新窗格</h3>\n<p>可以使用窗格并行运行多个 shell。 若要打开窗格，可以使用 <code>Alt + Shift + D</code>。 此键绑定将打开焦点配置文件的重复窗格。</p>\n<h3>配置</h3>\n<p>若要自定义 Windows Terminal 的设置，请在下拉菜单中选择“设置”。 这会在默认文本编辑器中打开 settings.json 文件。</p>\n<p>终端支持自定义影响整个应用程序的全局属性、影响每个配置文件的设置的配置文件属性以及允许您使用键盘与终端交互的键绑定。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">命令行参数</p>\n<p>可以使用命令行参数在特定配置中启动终端。 这些参数允许通过自定义配置文件设置打开具有特定选项卡和窗格的终端。</p>\n</div>\n<p>详情请见 <a href=\"/software/tool/terminal/settings.html\" target=\"_blank\">自定义设置</a>。</p>\n<h2>命令行</h2>\n<p>可以使用 <code>wt.exe</code> 从命令行打开 Windows 终端的新实例。 还可以改为使用执行别名 <code>wt</code>。</p>\n<h3>语法</h3>\n<p><code>wt</code> 命令行接受两种类型的值: “选项”和“命令” 。 “选项”是一系列标志和其他参数，可以将 <code>wt</code> 命令行的行为作为一个整体来控制。 “命令”提供应该实现的操作或操作列表(以分号分隔)。 如果未指定命令，则默认情况下会将命令指定为 <code>new-tab</code>。</p>\n<div class=\"language-bash\" data-highlighter=\"shiki\" data-ext=\"bash\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">wt</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [options] [command ; ]</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>若要显示列出可用命令行参数的帮助消息，请输入 <code>wt -h</code></p>\n</div>\n<h3>选项和命令</h3>\n<p>下面是 wt 命令行支持的命令和选项的完整列表。</p>\n<p>| 选项                       | 说明                   |\n|</p>\n",
      "date_published": "2021-01-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "自定义设置",
      "url": "https://mister-hope.com/software/tool/terminal/settings.html",
      "id": "https://mister-hope.com/software/tool/terminal/settings.html",
      "summary": "配置文件代表着您可以在 Windows Terminal 中配置的不同的命令行环境。默认情况下，每个配置文件使用不同的命令行可执行程序，但是您可以根据自己的喜好，创建任意数量的使用同一可执行程序的配置文件。每个配置文件可以有自己的定制项以帮助您区分它们，并可以自由定制。 可以使用快捷键 Ctrl + Shift + * 来打开对应的配置文件，可使用 C...",
      "content_html": "<p>配置文件代表着您可以在 Windows Terminal 中配置的不同的命令行环境。默认情况下，每个配置文件使用不同的命令行可执行程序，但是您可以根据自己的喜好，创建任意数量的使用同一可执行程序的配置文件。每个配置文件可以有自己的定制项以帮助您区分它们，并可以自由定制。</p>\n<p>可以使用快捷键 <code>Ctrl + Shift + *</code> 来打开对应的配置文件，可使用 <code>Ctrl + ,</code> 打开 settings.json 文件，来进行个性化调整和默认设置更改等设置。</p>\n<!-- more -->\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">默认设置</p>\n<p>您可以通过按住 Alt 键并点击下拉菜单中的 Settings 按钮打开 defaults.json。该文件由 Terminal 自动生成，展示了 Windows Terminal 所有默认设置及其值。更改此文件是无效的。</p>\n</div>\n<p>settings.json 文件分为四个主要部分:</p>\n<ol>\n<li>全局设置对象，它位于 JSON 文件的顶部。全局设置将影响整个应用程序。</li>\n<li>配置文件设置，由 <code>profiles</code> 对象控制。负责控制每个配置文件。</li>\n<li>配色方案，由 <code>schemes</code> 数组控制。</li>\n<li>自定义操作，由 <code>actions</code> 数组控制</li>\n</ol>\n<h2>全局设置</h2>\n<p>全局设置会将影响整个终端窗口。</p>\n<p>关于详细的配置项，请见 <a href=\"https://aka.ms/terminal-global-settings\" target=\"_blank\" rel=\"noopener noreferrer\">全局设置</a>。</p>\n<figure><figcaption>全局设置</figcaption></figure>\n<h3>默认配置文件</h3>\n<p>默认配置文件为 Windows PowerShell。您可以通过在 settings.json 文件中将 <code>defaultProfile</code> 设置为首选配置文件的名称或 GUID 来更改默认配置文件。</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"defaultProfile\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"PowerShell\"</span></span></code></pre>\n</div><h2>配置文件设置</h2>\n<p><code>profiles</code> 对象描述配置文件。它分为两个部分: <code>defaults</code> 和 <code>list</code>。</p>\n<ul>\n<li>\n<p><code>defaults</code> 对象中的配置文件会应用于列表中的所有项目。</p>\n</li>\n<li>\n<p><code>list</code> 包含代表配置文件的每个配置文件对象，这些是出现在 Windows Terminal 下拉菜单中的项目。应用于 <code>list</code> 中各个配置文件的设置会覆盖 <code>defaults</code> 部分中应用的设置。</p>\n</li>\n</ul>\n<p>关于详细的配置项，请见 <a href=\"https://aka.ms/terminal-profile-settings\" target=\"_blank\" rel=\"noopener noreferrer\">配置文件设置</a>。</p>\n<figure><figcaption>配置文件设置</figcaption></figure>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>\n<p>您可以在 <code>defaults</code> 中设置 <code>fontFace</code> 控制终端的字体。</p>\n</li>\n<li>\n<p>您可以在 Powershell 配置文件中添加 <code>commandline</code> 为 <code>&lt;PowerShell 地址&gt; -nologo</code> 来去除 powershell 启动时的 logo 显示。(默认地址为: <code>C:/Program Files/PowerShell/7/pwsh.exe</code>)</p>\n</li>\n<li>\n<p>您可以通过设置 <code>backgroundImage</code> 自定义背景图片，通过 <code>backgroundImageOpacity</code> 自定义背景透明度，通过 <code>useAcrylic</code> 开启或关闭毛玻璃效果。</p>\n</li>\n</ul>\n</div>\n<h3>新增配置文件</h3>\n<p>Windows Terminal 会自动为 PowerShell 和 WSL 分发版创建配置文件。</p>\n<p>您也可以手动添加新的配置文件: 只需生成一个新的 <code>guid</code>，提供一个 <code>name</code>，并为 <code>commandline</code> 属性提供可执行程序。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">WSL</p>\n<p>您可以通过 <a href=\"https://www.microsoft.com/zh-cn/p/ubuntu-2004-lts/9n6svws3rx71#activetab=pivot:overviewtab\" target=\"_blank\" rel=\"noopener noreferrer\">Microsoft 应用商店</a> 安装 Ubuntu。之后便可以在 terminal 上运行 Ubuntu WSL 环境。</p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>您不能从动态生成的配置文件中复制 <code>source</code> 属性，否则 Windows Terminal 会忽略此配置文件。您必须使用 <code>commandline</code> 替换 <code>source</code> 并提供可执行程序，以便复制一个动态生成的配置文件。</p>\n</div>\n<h2>配色方案</h2>\n<p>您可以在 <code>schemes</code> 数组中配置自定义配色方案。它们是使用以下格式写入的:</p>\n<div class=\"language-json line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Campbell\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"cursorColor\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#FFFFFF\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"selectionBackground\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#FFFFFF\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"background\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#0C0C0C\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"foreground\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#CCCCCC\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"black\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#0C0C0C\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"blue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#0037DA\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"cyan\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#3A96DD\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"green\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#13A10E\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"purple\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#881798\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"red\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#C50F1F\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"white\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#CCCCCC\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"yellow\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#C19C00\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightBlack\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#767676\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightBlue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#3B78FF\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightCyan\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#61D6D6\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightGreen\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#16C60C\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightPurple\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#B4009E\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightRed\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#E74856\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightWhite\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#F2F2F2\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"brightYellow\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#F9F1A5\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>关于详细的配置项，请见 <a href=\"https://aka.ms/terminal-color-schemes\" target=\"_blank\" rel=\"noopener noreferrer\">配置文件设置</a>。</p>\n<h3>自带的配色方案</h3>\n<p>Windows Terminal 在 defaults.json 文件中包含了一些配色方案。如果要在一个命令行配置文件中设置配色方案，请添加 <code>colorScheme</code> 属性，并将配色方案的 <code>name</code> 作为值。</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"colorScheme\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"COLOR SCHEME NAME\"</span></span></code></pre>\n</div><p>查看各配色方案效果，请见 <a href=\"https://aka.ms/terminal-color-schemes#included-color-schemes\" target=\"_blank\" rel=\"noopener noreferrer\">包含的配色方案</a>。</p>\n<h3>自定义配色方案</h3>\n<p>下面提供几个主题色工具:</p>\n<ul>\n<li><a href=\"https://terminal.sexy/\" target=\"_blank\" rel=\"noopener noreferrer\">terminal.sexy</a></li>\n<li><a href=\"https://windowsterminalthemes.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">Windows Terminal Themes</a></li>\n<li><a href=\"https://terminalsplash.com/\" target=\"_blank\" rel=\"noopener noreferrer\">TerminalSplash</a>，</li>\n</ul>\n<h2>自定义操作</h2>\n<p>您可以在 Windows 终端中创建自定义操作，以控制与终端的交互方式。这些操作将自动添加到命令面板。</p>\n<p>关于详细的配置项，请见 <a href=\"https://aka.ms/terminal-keybindings\" target=\"_blank\" rel=\"noopener noreferrer\">自定义操作设置</a>。</p>\n<figure><figcaption>自定义操作</figcaption></figure>\n<p>自定义操作可以设置为以下格式:</p>\n<ul>\n<li>\n<p>无参数命令</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{ </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"command\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"命令名称\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"keys\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"快捷键\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span></code></pre>\n</div><details class=\"hint-container details\"><summary>例子</summary>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{ </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"command\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"closeWindow\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"keys\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"alt+f4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span></code></pre>\n</div></details>\n</li>\n<li>\n<p>有参数命令</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"command\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"action\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"commandName\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"argument\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"value\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"keys\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"modifiers+key\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><details class=\"hint-container details\"><summary>例子</summary>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{ </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"command\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: { </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"action\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"newTab\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"index\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }, </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">\"keys\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"ctrl+shift+1\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span></code></pre>\n</div></details>\n</li>\n</ul>\n",
      "date_published": "2021-01-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "自定义组件",
      "url": "https://mister-hope.com/code/mini-app/guide/custom-component/",
      "id": "https://mister-hope.com/code/mini-app/guide/custom-component/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/custom-component/intro.html\" target=\"_blank\">自定义组件介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/custom-component/component.html\" target=\"_blank\">构造器</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/custom-component/style.html\" target=\"_blank\">组件模板和样式</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/custom-component/behavior.html\" target=\"_blank\">Behavior</a> </p>\n</li>\n</ul>\n",
      "date_published": "2022-01-07T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "自定义组件",
      "url": "https://mister-hope.com/code/mini-app/guide/custom-component/intro.html",
      "id": "https://mister-hope.com/code/mini-app/guide/custom-component/intro.html",
      "summary": "用途 将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用 将复杂的页面拆分成多个低耦合的模块，有助于代码维护。 创建自定义组件 类似于页面，一个自定义组件由 json wxml wxss js 4 个文件组成。 要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明(将 component 字段设为 true 可将这一组文件设...",
      "content_html": "<h2>用途</h2>\n<ul>\n<li>将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用</li>\n<li>将复杂的页面拆分成多个低耦合的模块，有助于代码维护。</li>\n</ul>\n<h2>创建自定义组件</h2>\n<p>类似于页面，一个自定义组件由 <code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4 个文件组成。</p>\n<p>要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明(将 <code>component</code> 字段设为 <code>true</code> 可将这一组文件设为自定义组件):</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"component\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>同时，还要在 <code>wxml</code> 文件中编写组件模板，在 <code>wxss</code> 文件中加入组件样式，它们的写法与页面的写法类似。具体细节和注意事项参见 <a href=\"/code/mini-app/guide/custom-component/style.html\" target=\"_blank\">组件模板和样式</a> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 这是自定义组件的内部WXML结构 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"inner\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  {{innerText}}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*这里的样式只应用于这个自定义组件*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.inner</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在组件 <code>wxss</code> 中不应使用 ID 选择器、属性选择器和标签名选择器。</p>\n</div>\n<p>在自定义组件的 js 文件中，需要使用 <code>Component()</code> 来注册组件，并提供组件的属性定义、内部数据和自定义方法。</p>\n<p>组件的属性值和内部数据将被用于组件 <code>wxml</code> 的渲染，其中，属性值是可由组件外部传入的。更多细节参见 <a href=\"/code/mini-app/guide/custom-component/component.html\" target=\"_blank\">Component 构造器</a> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里定义了innerText属性，属性值可以在组件使用时指定</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    innerText</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      value</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"default value\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一些组件内部数据</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    someData</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 这里是一个自定义方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    customMethod</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2>使用自定义组件</h2>\n<p>自定义组件在使用时与基础组件非常相似。</p>\n<p>使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"usingComponents\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"component-tag-name\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"path/to/the/custom/component\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这样，在页面的 <code>wxml</code> 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>在 app.json 中也可以声明 <code>usingComponents</code> 字段，在此处声明的自定义组件视为全局自定义组件，在小程序内的页面或自定义组件中可以直接使用而无需再声明。</p>\n</div>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/OMfVAKmZ6KZT\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  &lt;!-- 以下是对一个自定义组件的引用 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> inner-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Some text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<p>自定义组件的 <code>wxml</code> 节点结构在与数据结合之后，将被插入到引用位置内。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<ul>\n<li>因为 WXML 节点标签名只能是小写字母、中划线和下划线的组合，所以自定义组件的标签名也只能包含这些字符。</li>\n<li>自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式(使用 <code>usingComponents</code> 字段)。</li>\n<li>自定义组件和页面所在项目根目录名不能以 <code>wx-</code> 为前缀，否则会报错。</li>\n</ul>\n</div>\n<p>注意，是否在页面文件中使用 <code>usingComponents</code> 会使得页面的 <code>this</code> 对象的原型稍有差异，包括:</p>\n<ul>\n<li>使用 <code>usingComponents</code> 页面的原型与不使用时不一致，即 <code>Object.getPrototypeOf(this)</code> 结果不同。</li>\n<li>使用 <code>usingComponents</code> 时会多一些方法，如 <code>selectComponent</code> 。</li>\n<li>出于性能考虑，使用 <code>usingComponents</code> 时， <code>setData</code> 内容不会被直接深复制，即 <code>this.setData({ field: obj })</code> 后 <code>this.data.field === obj</code>。(深复制会在这个值被组件间传递时发生。)</li>\n</ul>\n<p>如果页面比较复杂，新增或删除 <code>usingComponents</code> 定义段时建议重新测试一下。</p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "组件模板和样式",
      "url": "https://mister-hope.com/code/mini-app/guide/custom-component/style.html",
      "id": "https://mister-hope.com/code/mini-app/guide/custom-component/style.html",
      "summary": "类似于页面，自定义组件拥有自己的 wxml 模板和 wxss 样式。 组件模板 组件模板的写法与页面模板相同。组件模板与组件数据结合后生成的节点树，将被插入到组件的引用位置上。 在组件模板中可以提供一个 <slot> 节点，用于承载组件引用时提供的子节点。 代码示例 在开发者工具中预览效果 注意 在模板中引用到的自定义组件及其对应的节点名需要在 jso...",
      "content_html": "<p>类似于页面，自定义组件拥有自己的 wxml 模板和 wxss 样式。</p>\n<h2>组件模板</h2>\n<p>组件模板的写法与页面模板相同。组件模板与组件数据结合后生成的节点树，将被插入到组件的引用位置上。</p>\n<p>在组件模板中可以提供一个 <code>&lt;slot&gt;</code> 节点，用于承载组件引用时提供的子节点。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/1udXLnmi6KY2\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 组件模板 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"wrapper\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这里是组件的内部节点&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 引用组件的页面模板 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    &lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这里是插入到组件slot中的内容&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在模板中引用到的自定义组件及其对应的节点名需要在 json 文件中显式定义，否则会被当作一个无意义的节点。除此以外，节点名也可以被声明为抽象节点。</p>\n</div>\n<h2>模板数据绑定</h2>\n<p>与普通的 WXML 模板类似，可以使用数据绑定，这样就可以向子组件的属性传递动态数据。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p>在开发者工具中预览效果</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 引用组件的页面模板 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> prop-a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{dataFieldA}}\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> prop-b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{dataFieldB}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    &lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这里是插入到组件slot中的内容&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>在以上例子中，组件的属性 <code>propA</code> 和 <code>propB</code> 将收到页面传递的数据。页面可以通过 <code>setData</code> 来改变绑定的数据字段。</p>\n</details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>这样的数据绑定只能传递 JSON 兼容数据或函数(但这些函数不能在 WXML 中直接调用，只能传递给子组件)。</p>\n</div>\n<h2>组件 wxml 的 slot</h2>\n<p>在组件的 wxml 中可以包含 <code>slot</code> 节点，用于承载组件使用者提供的 wxml 结构。</p>\n<p>默认情况下，一个组件的 wxml 中只能有一个 <code>slot</code> 。需要使用多 <code>slot</code> 时，可以在组件 js 中声明启用。</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*...*/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> { </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*...*/</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">  options</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    multipleSlots</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\"> // 在组件定义时的选项中启用多 slot 支持</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">})</span></span></code></pre>\n</div><p>此时，可以在这个组件的 wxml 中使用多个 slot ，以不同的 name 来区分。</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 组件模板 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"wrapper\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"before\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这里是组件的内部细节&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"after\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>使用时，用 <code>slot</code> 属性来将节点插入到不同的 slot 上。</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 引用组件的页面模板 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    &lt;!-- 这部分内容将被放置在组件 &lt;slot name=\"before\"&gt; 的位置上 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"before\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这里是插入到组件slot name=\"before\"中的内容&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    &lt;!-- 这部分内容将被放置在组件 &lt;slot name=\"after\"&gt; 的位置上 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"after\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这里是插入到组件slot name=\"after\"中的内容&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">component-tag-name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><h2>组件样式</h2>\n<p>组件对应 wxss 文件的样式，只对组件 wxml 内的节点生效。编写组件样式时，需要注意以下几点:</p>\n<ul>\n<li>组件和引用组件的页面不能使用 id 选择器(<code>#a</code>)、属性选择器(<code>[a]</code>)和标签名选择器，请改用 class 选择器。</li>\n<li>组件和引用组件的页面中使用后代选择器(<code>.a .b</code>)在一些极端情况下会有非预期的表现，如遇，请避免使用。</li>\n<li>子元素选择器(<code>.a&gt;.b</code>)只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。</li>\n<li>继承样式，如 <code>font</code> 、 <code>color</code> ，会从组件外继承到组件内。</li>\n<li>除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效(除非更改组件样式隔离选项)。</li>\n</ul>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* 在组件中不能使用 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"># </span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* 在组件中不能使用 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">[</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">a</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">]</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* 在组件中不能使用 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* 除非 .a 是 view 组件节点，否则不一定会生效 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &gt;</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> .b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>除此以外，组件可以指定它所在节点的默认样式，使用 <code>:host</code> 选择器。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/jAgvwKm16bZD\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#56B6C2\">:host</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">yellow</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 页面的 WXML --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这段文本是黄色的&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h2>组件样式隔离</h2>\n<p>默认情况下，自定义组件的样式只受到自定义组件 wxss 的影响。除非以下两种情况:</p>\n<ul>\n<li>app.wxss 或页面的 wxss 中使用了标签名选择器(或一些其他特殊选择器)来直接指定样式，这些选择器会影响到页面和全部组件。通常情况下这是不推荐的做法。</li>\n<li>指定特殊的样式隔离选项 <code>styleIsolation</code>。</li>\n</ul>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  options</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    styleIsolation</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"isolated\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><blockquote>\n<p><a href=\"https://developers.weixin.qq.com/s/xPQhJcm37e7h\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n</blockquote>\n<h3>styleIsolation</h3>\n<p><code>styleIsolation</code> 选项从基础库版本 2.6.5 开始支持。它支持以下取值:</p>\n<ul>\n<li><code>isolated</code> 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响(一般情况下的默认值)；</li>\n<li><code>apply-shared</code> 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面；</li>\n<li><code>shared</code> 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件。(这个选项在插件中不可用。)</li>\n</ul>\n<p>使用后两者时，请务必注意组件间样式的相互影响。</p>\n<p>如果这个 Component 构造器用于构造页面 ，则默认值为 <code>shared</code> ，且还有以下几个额外的样式隔离选项可用:</p>\n<ul>\n<li><code>page-isolated</code> 表示在这个页面禁用 app.wxss ，同时，页面的 wxss 不会影响到其他自定义组件；</li>\n<li><code>page-apply-shared</code> 表示在这个页面禁用 app.wxss ，同时，页面 wxss 样式不会影响到其他自定义组件，但设为 <code>shared</code> 的自定义组件会影响到页面；</li>\n<li><code>page-shared</code> 表示在这个页面禁用 app.wxss ，同时，页面 wxss 样式会影响到其他设为 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件，也会受到设为 <code>shared</code> 的自定义组件的影响。</li>\n</ul>\n<p>从小程序基础库版本 2.10.1 开始，也可以在页面或自定义组件的 json 文件中配置 <code>styleIsolation</code> (这样就不需在 js 文件的 <code>options</code> 中再配置)。例如:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"styleIsolation\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"isolated\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><div class=\"hint-container tip\">\n<p class=\"hint-container-title\">历史方式</p>\n<p>小程序基础库版本 2.2.3 以上支持 <code>addGlobalClass</code> 选项，即在 Component 的 <code>options</code> 中设置 <code>addGlobalClass: true</code>。 这个选项等价于设置 <code>styleIsolation: apply-shared</code> ，但设置了 <code>styleIsolation</code> 选项后这个选项会失效。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p><a href=\"https://developers.weixin.qq.com/s/VkTd7Fm37ggl\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  options</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    addGlobalClass</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">text</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"red-text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这段文本的颜色由 `app.wxss` 和页面 `wxss` 中的样式定义来决定&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*app.wxss*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.red-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div></details>\n</div>\n<h2>外部样式类 </h2>\n<p>有时，组件希望接受外部传入的样式类。此时可以在 Component 中用 <code>externalClasses</code> 定义段定义若干个外部样式类。</p>\n<p>这个特性可以用于实现类似于 view 组件的 hover-class 属性: 页面可以提供一个样式类，赋予 view 的 hover-class ，这个样式类本身写在页面中而非 view 组件的实现中。</p>\n<p>注意: 在同一个节点上使用普通样式类和外部样式类时，两个类的优先级是未定义的，因此最好避免这种情况。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/*组件 custom-component.js*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  externalClasses</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"my-class\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 组件 custom-component.wxml --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"my-class\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;这段文本的颜色由组件外的 class 决定&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<p>这样，组件的使用者可以指定这个样式类对应的 class ，就像使用普通属性一样。在 2.7.1 之后，可以指定多个对应的 class 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p>在开发者工具中预览效果</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 页面的 WXML --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> my-class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"red-text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> my-class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"large-text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 以下写法需要基础库版本 2.7.1 以上 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> my-class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"red-text large-text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.red-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.large-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  font-size: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1.5</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div></details>\n<h2>引用页面或父组件的样式 </h2>\n<blockquote>\n<p>基础库 2.9.2 开始支持</p>\n</blockquote>\n<p>即使启用了样式隔离 <code>isolated</code> ，组件仍然可以在局部引用组件所在页面的样式或父组件的样式。</p>\n<p>例如，如果在页面 wxss 中定义了:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.blue-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">blue</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>在这个组件中可以使用 <code>~</code> 来引用这个类的样式:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"~blue-text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; 这段文本是蓝色的 &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>如果在一个组件的父组件 wxss 中定义了:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.red-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>在这个组件中可以使用 <code>^</code> 来引用这个类的样式:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"^red-text\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; 这段文本是红色的 &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>也可以连续使用多个 <code>^</code> 来引用祖先组件中的样式。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>如果组件是比较独立、通用的组件，请优先使用外部样式类的方式，而非直接引用父组件或页面的样式。</p>\n</div>\n<h2>虚拟化组件节点 </h2>\n<blockquote>\n<p>基础库 2.11.2 开始支持</p>\n</blockquote>\n<p>默认情况下，自定义组件本身的那个节点是一个“普通”的节点，使用时可以在这个节点上设置 class style 、动画、 flex 布局等，就如同普通的 view 组件节点一样。</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 页面的 WXML --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> style</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"display: flex\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  &lt;!-- 默认情况下，这是一个普通的节点 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> style</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"color: blue; flex: 1\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;蓝色、满宽的&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>但有些时候，自定义组件并不希望这个节点本身可以设置样式、响应 flex 布局等，而是希望自定义组件内部的第一层节点能够响应 flex 布局或者样式由自定义组件本身完全决定。</p>\n<p>这种情况下，可以将这个自定义组件设置为“虚拟的”:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    style</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 定义 style 属性可以拿到 style 属性上设置的值</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      type</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  options</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    virtualHost</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  externalClasses</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"class\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">], </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 可以将 class 设为 externalClasses</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>这样，可以将 flex 放入自定义组件内:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- 页面的 WXML --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> style</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"display: flex\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  &lt;!-- 如果设置了 virtualHost ，节点上的样式将失效 --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> style</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"color: blue\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;不是蓝色的&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- custom-component.wxml --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> style</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"flex: 1\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  满宽的</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">slot</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>需要注意的是，自定义组件节点上的 class style 和动画将不再生效，但仍可以:</p>\n<ul>\n<li>将 style 定义成 <code>properties</code> 属性来获取 style 上设置的值；</li>\n<li>将 class 定义成 <code>externalClasses</code> 外部样式类使得自定义组件 wxml 可以使用 class 值。</li>\n</ul>\n<p>代码示例: <a href=\"https://developers.weixin.qq.com/s/AlV9fEmF7Dh8\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "小程序的运行环境",
      "url": "https://mister-hope.com/code/mini-app/guide/frame/env.html",
      "id": "https://mister-hope.com/code/mini-app/guide/frame/env.html",
      "summary": "微信小程序运行在多种平台上: iOS(iPhone/iPad)微信客户端、Android 微信客户端、PC 微信客户端、Mac 微信客户端和用于调试的微信开发者工具。 各平台脚本执行环境以及用于渲染非原生组件的环境是各不相同的: 在 iOS 上，小程序逻辑层的 JavaScript 代码运行在 JavaScriptCore 中，视图层是由 WKWebV...",
      "content_html": "<p>微信小程序运行在多种平台上: iOS(iPhone/iPad)微信客户端、Android 微信客户端、PC 微信客户端、Mac 微信客户端和用于调试的微信开发者工具。</p>\n<p>各平台脚本执行环境以及用于渲染非原生组件的环境是各不相同的:</p>\n<ul>\n<li>\n<p>在 iOS 上，小程序逻辑层的 JavaScript 代码运行在 JavaScriptCore 中，视图层是由 WKWebView 来渲染的，环境有 iOS 12、iOS 13 等；</p>\n</li>\n<li>\n<p>在 Android 上，小程序逻辑层的 JavaScript 代码运行在 V8 中，视图层是由自研 XWeb 引擎基于 Mobile Chrome 内核来渲染的；</p>\n</li>\n<li>\n<p>在 开发工具上，小程序逻辑层的 JavaScript 代码是运行在 NW.js 中，视图层是由 Chromium Webview 来渲染的。</p>\n</li>\n<li>\n<p>在 PC 上，小程序逻辑层 JavaScript 和视图层 JavaScript 都是用 Chrome 内核</p>\n</li>\n<li>\n<p>在 Mac 上，小程序逻辑层的 JavaScript 代码运行在 JavaScriptCore 中，视图层是由 WKWebView 来渲染的，与 iOS 一致</p>\n</li>\n</ul>\n<h2>平台差异</h2>\n<p>尽管各运行环境是十分相似的，但是还是有些许区别:</p>\n<ul>\n<li>\n<p>JavaScript 语法和 API 支持不一致: 语法上开发者可以通过开启 ES6 转 ES5 的功能来规避 (<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/codecompile.html#es6-%E8%BD%AC-es5\" target=\"_blank\" rel=\"noopener noreferrer\">详情</a>)；此外，小程序基础库内置了必要的 Polyfill，来弥补 API 的差异 (<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/js-support.html\" target=\"_blank\" rel=\"noopener noreferrer\">详情</a>)。</p>\n</li>\n<li>\n<p>WXSS 渲染表现不一致: 尽管可以通过开启 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/codecompile.html#%E6%A0%B7%E5%BC%8F%E8%A1%A5%E5%85%A8\" target=\"_blank\" rel=\"noopener noreferrer\">样式补全</a> 来规避大部分的问题，还是建议开发者需要在 iOS 和 Android 上分别检查小程序的真实表现。</p>\n</li>\n<li>\n<p>开发者工具仅供调试使用，最终的表现以客户端为准。</p>\n</li>\n</ul>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "JavaScript 支持情况",
      "url": "https://mister-hope.com/code/mini-app/guide/frame/js-support.html",
      "id": "https://mister-hope.com/code/mini-app/guide/frame/js-support.html",
      "summary": "运行限制 基于安全考虑，小程序中不支持动态执行 JS 代码，即: 不支持使用 eval 执行 JS 代码 不支持使用 new Function 创建函数 客户端 ES6 API 支持情况 微信小程序已经支持了绝大部分的 ES6 API，已支持的 API 如下(部分 API 依赖系统版本):",
      "content_html": "<h2>运行限制</h2>\n<p>基于安全考虑，小程序中不支持动态执行 JS 代码，即:</p>\n<ul>\n<li>不支持使用 <code>eval</code> 执行 JS 代码</li>\n<li>不支持使用 <code>new Function</code> 创建函数</li>\n</ul>\n<h2>客户端 ES6 API 支持情况</h2>\n<p>微信小程序已经支持了绝大部分的 ES6 API，已支持的 API 如下(部分 API 依赖系统版本):</p>\n<p>| String               | iOS10+ | Android |\n|</p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "小程序运行机制",
      "url": "https://mister-hope.com/code/mini-app/guide/frame/mechanism.html",
      "id": "https://mister-hope.com/code/mini-app/guide/frame/mechanism.html",
      "summary": "前台/后台状态 小程序启动后，界面被展示给用户，此时小程序处于前台状态。 当用户点击右上角胶囊按钮关闭小程序，或者按了设备 Home 键离开微信时，小程序并没有完全终止运行，而是进入了后台状态，小程序还可以运行一小段时间。 当用户再次进入微信或再次打开小程序，小程序又会从后台进入前台。但如果用户很久没有再进入小程序，或者系统资源紧张，小程序可能被销毁，...",
      "content_html": "<h2>前台/后台状态</h2>\n<p>小程序启动后，界面被展示给用户，此时小程序处于前台状态。</p>\n<p>当用户点击右上角胶囊按钮关闭小程序，或者按了设备 Home 键离开微信时，小程序并没有完全终止运行，而是进入了后台状态，小程序还可以运行一小段时间。</p>\n<p>当用户再次进入微信或再次打开小程序，小程序又会从后台进入前台。但如果用户很久没有再进入小程序，或者系统资源紧张，小程序可能被销毁，即完全终止运行。</p>\n<h2>小程序启动</h2>\n<p>这样，小程序启动可以分为两种情况，一种是冷启动，一种是热启动。</p>\n<ul>\n<li>冷启动: 如果用户首次打开，或小程序销毁后被用户再次打开，此时小程序需要重新加载启动，即冷启动。</li>\n<li>热启动: 如果用户已经打开过某小程序，然后在一定时间内再次打开该小程序，此时小程序并未被销毁，只是从后台状态进入前台状态，这个过程就是热启动。</li>\n</ul>\n<h2>小程序销毁时机</h2>\n<p>通常，只有当小程序进入后台一定时间，或者系统资源占用过高，才会被销毁。具体而言包括以下几种情形:</p>\n<ul>\n<li>当小程序进入后台，可以维持一小段时间的运行状态，如果这段时间内都未进入前台，小程序会被销毁。</li>\n<li>当小程序占用系统资源过高，可能会被系统销毁或被微信客户端主动回收。\n<ul>\n<li>在 iOS 上，当微信客户端在一定时间间隔内连续收到系统内存告警时，会根据一定的策略，主动销毁小程序，并提示用户 「运行内存不足，请重新打开该小程序」。具体策略会持续进行调整优化。</li>\n<li>建议小程序在必要时使用 wx.onMemoryWarning 监听内存告警事件，进行必要的内存清理。</li>\n</ul>\n</li>\n</ul>\n<h2>启动场景分类</h2>\n<p>用户打开小程序时，场景可分为以下 A、B 两类:</p>\n<p>A. 保留上次的浏览状态。场景值有以下几项:</p>\n<p>| 场景值 ID | 说明                                                                                                   |\n|</p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "小程序更新机制",
      "url": "https://mister-hope.com/code/mini-app/guide/frame/update.html",
      "id": "https://mister-hope.com/code/mini-app/guide/frame/update.html",
      "summary": "未启动时更新 开发者在管理后台发布新版本的小程序之后，如果某个用户本地有小程序的历史版本，此时打开的可能还是旧版本。微信客户端会有若干个时机去检查本地缓存的小程序有没有更新版本，如果有则会静默更新到新版本。总的来说，开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户。用户下次打开时会先...",
      "content_html": "<h2>未启动时更新</h2>\n<p>开发者在管理后台发布新版本的小程序之后，如果某个用户本地有小程序的历史版本，此时打开的可能还是旧版本。微信客户端会有若干个时机去检查本地缓存的小程序有没有更新版本，如果有则会静默更新到新版本。总的来说，开发者在后台发布新版本之后，无法立刻影响到所有现网用户，但最差情况下，也在发布之后 24 小时之内下发新版本信息到用户。用户下次打开时会先更新最新版本再打开。</p>\n<h2>启动时更新</h2>\n<p>小程序每次冷启动时，都会检查是否有更新版本，如果发现有新版本，将会异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。</p>\n<p>如果需要马上应用最新版本，可以使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/base/update/wx.getUpdateManager.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>wx.getUpdateManager</code></a> API 进行处理。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> updateManager</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> wx</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getUpdateManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">updateManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onCheckForUpdate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">((</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 请求完新版本信息的回调</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  console</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">log</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">hasUpdate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">updateManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onUpdateReady</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(() </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  wx</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">showModal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    title</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"更新提示\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    content</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"新版本已经准备好，是否重启应用？\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    success</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">      if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">confirm</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">        // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        updateManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">applyUpdate</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">updateManager</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">onUpdateFailed</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(() </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // 新版本下载失败</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "初始渲染缓存",
      "url": "https://mister-hope.com/code/mini-app/guide/view/rendering-cache.html",
      "id": "https://mister-hope.com/code/mini-app/guide/view/rendering-cache.html",
      "summary": "基础库 2.11.1 开始支持 提示 此部分在初步学习小程序的时候直接略过即可。 初始渲染缓存工作原理 小程序页面的初始化分为两个部分。 逻辑层初始化: 载入必需的小程序代码、初始化页面 this 对象(也包括它涉及到的所有自定义组件的 this 对象)、将相关数据发送给视图层。 视图层初始化: 载入必需的小程序代码，然后等待逻辑层初始化完毕并接收逻辑...",
      "content_html": "<blockquote>\n<p>基础库 2.11.1 开始支持</p>\n</blockquote>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2>初始渲染缓存工作原理</h2>\n<p>小程序页面的初始化分为两个部分。</p>\n<ul>\n<li>逻辑层初始化: 载入必需的小程序代码、初始化页面 <code>this</code> 对象(也包括它涉及到的所有自定义组件的 this 对象)、将相关数据发送给视图层。</li>\n<li>视图层初始化: 载入必需的小程序代码，然后等待逻辑层初始化完毕并接收逻辑层发送的数据，最后渲染页面。</li>\n</ul>\n<p>在启动页面时，尤其是小程序冷启动、进入第一个页面时，逻辑层初始化的时间较长。在页面初始化过程中，用户将看到小程序的标准载入画面(冷启动时)或可能看到轻微的白屏现象(页面跳转过程中)。</p>\n<p>启用初始渲染缓存，可以使视图层不需要等待逻辑层初始化完毕，而直接提前将页面初始 data 的渲染结果展示给用户，这可以使得页面对用户可见的时间大大提前。它的工作原理如下:</p>\n<ul>\n<li>在小程序页面第一次被打开后，将页面初始数据渲染结果记录下来，写入一个持久化的缓存区域(缓存可长时间保留，但可能因为小程序更新、基础库更新、储存空间回收等原因被清除)；</li>\n<li>在这个页面被第二次打开时，检查缓存中是否还存有这个页面上一次初始数据的渲染结果，如果有，就直接将渲染结果展示出来；</li>\n<li>如果展示了缓存中的渲染结果，这个页面暂时还不能响应用户事件，等到逻辑层初始化完毕后才能响应用户事件。</li>\n</ul>\n<p>利用初始渲染缓存，可以:</p>\n<ul>\n<li>快速展示出页面中永远不会变的部分，如导航栏；</li>\n<li>预先展示一个骨架页，提升用户体验；</li>\n<li>展示自定义的加载提示；</li>\n<li>提前展示广告，等等。</li>\n</ul>\n<h2>支持的组件</h2>\n<p>在初始渲染缓存阶段中，复杂组件不能被展示或不能响应交互。</p>\n<p>目前支持的内置组件:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">button</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">image</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">scroll-view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">rich-text</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>自定义组件本身可以被展示(但它们里面用到的内置组件也遵循上述限制)。</p>\n<h2>静态初始渲染缓存</h2>\n<p>若想启用初始渲染缓存，最简单的方法是在页面的 json 文件中添加配置项 <code>\"initialRenderingCache\": \"static\"</code>。</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"initialRenderingCache\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"static\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>如果想要对所有页面启用，可以在 app.json 的 <code>window</code> 配置段中添加这个配置:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"window\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    \"initialRenderingCache\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"static\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>添加这个配置项之后，在手机中预览小程序首页，然后杀死小程序再次进入，就会通过初始渲染缓存来渲染首页。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>这种情况下，初始渲染缓存记录的是页面 data 应用在页面 WXML 上的结果，不包含任何 setData 的结果。</p>\n<p>换而言之，这种做法只包含页面 data 的渲染结果，即页面的纯静态成分。</p>\n</div>\n<details class=\"hint-container details\"><summary>例子</summary>\n<p>例如，如果想要在页面中展示出“正在加载”几个字，这几个字受到 loading 数据字段控制:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> wx:if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{loading}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;正在加载&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>这种情况下， <code>loading</code> 应当在 <code>data</code> 中指定为 <code>true</code> ，如</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 正确的做法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Page</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    loading</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><p>而不能通过 <code>setData</code> 将 <code>loading</code> 置为 <code>true</code>:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 错误的做法! 不要这么做!</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Page</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {},</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  onLoad</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      loading</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div></details>\n<h2>在初始渲染缓存中添加动态内容</h2>\n<p>有些场景中，只是页面 data 的渲染结果会比较局限。有时会想要额外展示一些可变的内容，如展示的广告图片 URL 等。</p>\n<p>这种情况下可以使用“动态”初始渲染缓存的方式。首先，配置 <code>\"initialRenderingCache\": \"dynamic\"</code>:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"initialRenderingCache\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"dynamic\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>此时，初始渲染缓存不会被自动启用，还需要在页面中调用 <code>this.setInitialRenderingCache(dynamicData)</code> 才能启用。其中， <code>dynamicData</code> 是一组数据，与 data 一起参与页面 WXML 渲染。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Page</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  data</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    loading</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> true</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  onReady</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">    this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setInitialRenderingCache</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      loadingHint</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"正在加载\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 这一部分数据将被应用于界面上，相当于在初始 data 基础上额外进行一次 setData</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> wx:if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{loading}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;{{loadingHint}}&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">view</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>从原理上说，在动态生成初始渲染缓存的方式下，页面会在后台使用动态数据重新渲染一次，因而开销相对较大。因而要尽量避免频繁调用 <code>this.setInitialRenderingCache</code>，如果在一个页面内多次调用，仅最后一次调用生效。</p>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p><code>this.setInitialRenderingCache</code> 调用时机不能早于 Page 的 <code>onReady</code> 或 Component 的 <code>ready</code> 生命周期，否则可能对性能有负面影响。\n如果想禁用初始渲染缓存，调用 <code>this.setInitialRenderingCache(null)</code>。</p>\n</div>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "响应显示区域变化",
      "url": "https://mister-hope.com/code/mini-app/guide/view/resizable.html",
      "id": "https://mister-hope.com/code/mini-app/guide/view/resizable.html",
      "summary": "显示区域尺寸 显示区域指小程序界面中可以自由布局展示的区域。在默认情况下，小程序显示区域的尺寸自页面初始化起就不会发生变化。但以下两种方式都可以改变这一默认行为。 在手机上启用屏幕旋转支持 从小程序基础库版本 2.4.0 开始，小程序在手机上支持屏幕旋转。使小程序中的页面支持屏幕旋转的方法是: 在 app.json 的 window 段中设置 \"pag...",
      "content_html": "<h2>显示区域尺寸</h2>\n<p>显示区域指小程序界面中可以自由布局展示的区域。在默认情况下，小程序显示区域的尺寸自页面初始化起就不会发生变化。但以下两种方式都可以改变这一默认行为。</p>\n<h3>在手机上启用屏幕旋转支持</h3>\n<p>从小程序基础库版本 2.4.0 开始，小程序在手机上支持屏幕旋转。使小程序中的页面支持屏幕旋转的方法是: 在 app.json 的 window 段中设置 <code>\"pageOrientation\": \"auto\"</code> ，或在页面 json 文件中配置 <code>\"pageOrientation\": \"auto\"</code>。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p>以下是在单个页面 json 文件中启用屏幕旋转的示例。</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"pageOrientation\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"auto\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>如果页面添加了上述声明，则在屏幕旋转时，这个页面将随之旋转，显示区域尺寸也会随着屏幕旋转而变化。</p>\n</details>\n<p>从小程序基础库版本 2.5.0 开始， <code>pageOrientation</code> 还可以被设置为 <code>landscape</code> ，表示固定为横屏显示。</p>\n<h3>在 iPad 上启用屏幕旋转支持</h3>\n<p>从小程序基础库版本 2.3.0 开始，在 iPad 上运行的小程序可以支持屏幕旋转。使小程序支持 iPad 屏幕旋转的方法是: 在 app.json 中添加 <code>\"resizable\": true</code> 。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"resizable\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#0184BC;--shiki-dark:#D19A66\">true</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>如果小程序添加了上述声明，则在屏幕旋转时，小程序将随之旋转，显示区域尺寸也会随着屏幕旋转而变化。</p>\n</details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>在 iPad 上不能单独配置某个页面是否支持屏幕旋转。</p>\n</div>\n<h2>Media Query</h2>\n<p>有时，对于不同尺寸的显示区域，页面的布局会有所差异。此时可以使用 media query 来解决大多数问题。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-css line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.my-class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  width: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">40</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">@media</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (min-width: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">480</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  /*仅在 480px 或更宽的屏幕上生效的样式规则*/</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">  .my-class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    width: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">200</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<p>在 WXML 中，可以使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/match-media.html\" target=\"_blank\" rel=\"noopener noreferrer\">match-media</a> 组件来根据 media query 匹配状态展示、隐藏节点。</p>\n<p>此外，可以在页面或者自定义组件 JS 中使用 <code>this.createMediaQueryObserver()</code> 方法来创建一个 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/MediaQueryObserver.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>MediaQueryObserver</code></a> 对象，用于监听指定的 media query 的匹配状态。</p>\n<blockquote>\n<p><a href=\"https://developers.weixin.qq.com/s/TtFaFjmb7aiy\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n</blockquote>\n<h2>屏幕旋转事件</h2>\n<p>有时，仅仅使用 media query 无法控制一些精细的布局变化。此时可以使用 js 作为辅助。</p>\n<ul>\n<li>\n<p>在 js 中读取页面的显示区域尺寸，可以使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.selectViewport.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>selectorQuery.selectViewport</code></a> 。</p>\n</li>\n<li>\n<p>页面尺寸发生改变的事件，可以使用页面的 <code>onResize</code> 来监听。</p>\n</li>\n<li>\n<p>对于自定义组件，可以使用 <code>resize</code> 生命周期来监听。回调函数中将返回显示区域的尺寸信息。(从基础库版本 2.4.0 开始支持。)</p>\n</li>\n</ul>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Page</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  onResize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">windowWidth</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 新的显示区域宽度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">windowHeight</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 新的显示区域高度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  pageLifetimes</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    resize</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">      res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">windowWidth</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 新的显示区域宽度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">      res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">size</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">windowHeight</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 新的显示区域高度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div></details>\n<p>此外，还可以使用 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/ui/window/wx.onWindowResize.html\" target=\"_blank\" rel=\"noopener noreferrer\"><code>wx.onWindowResize</code></a> 来监听(但这不是推荐的方式)。</p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "获取界面上的节点信息",
      "url": "https://mister-hope.com/code/mini-app/guide/view/selector.html",
      "id": "https://mister-hope.com/code/mini-app/guide/view/selector.html",
      "summary": "提示 此部分在初步学习小程序的时候直接略过即可。 WXML 节点信息 节点信息查询 API 可以用于获取节点属性、样式、在界面上的位置等信息。 最常见的用法是使用这个接口来查询某个节点的当前位置，以及界面的滚动位置。 代码示例 上述示例中， #the-id 是一个节点选择器，与 CSS 的选择器相近但略有区别，请参见 SelectorQuery.sel...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2>WXML 节点信息</h2>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createSelectorQuery.html\" target=\"_blank\" rel=\"noopener noreferrer\">节点信息查询 API</a> 可以用于获取节点属性、样式、在界面上的位置等信息。</p>\n<p>最常见的用法是使用这个接口来查询某个节点的当前位置，以及界面的滚动位置。</p>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">const</span><span style=\"--shiki-light:#986801;--shiki-dark:#E5C07B\"> query</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> wx</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">createSelectorQuery</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">query</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">select</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"#the-id\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">).</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">boundingClientRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">top</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// #the-id 节点的上边界坐标(相对于显示区域)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">query</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">selectViewport</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">().</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">scrollOffset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">scrollTop</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 显示区域的竖直滚动位置</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">query</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">exec</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n</div><p>上述示例中， <code>#the-id</code> 是一个节点选择器，与 CSS 的选择器相近但略有区别，请参见 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/SelectorQuery.select.html\" target=\"_blank\" rel=\"noopener noreferrer\">SelectorQuery.select</a> 的相关说明。</p>\n</details>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>在自定义组件或包含自定义组件的页面中，推荐使用 <code>this.createSelectorQuery</code> 来代替 <code>wx.createSelectorQuery</code> ，这样可以确保在正确的范围内选择节点。</p>\n</div>\n<h2>WXML 节点布局相交状态</h2>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/wxml/wx.createIntersectionObserver.html\" target=\"_blank\" rel=\"noopener noreferrer\">节点布局相交状态 API</a> 可用于监听两个或多个组件节点在布局位置上的相交状态。这一组 API 常常可以用于推断某些节点是否可以被用户看见、有多大比例可以被用户看见。</p>\n<p>这一组 API 涉及的主要概念如下。</p>\n<ul>\n<li>参照节点: 监听的参照节点，取它的布局区域作为参照区域。如果有多个参照节点，则会取它们布局区域的 <strong>交集</strong> 作为参照区域。页面显示区域也可作为参照区域之一。</li>\n<li>目标节点: 监听的目标，默认只能是一个节点(使用 selectAll 选项时，可以同时监听多个节点)。</li>\n<li>相交区域: 目标节点的布局区域与参照区域的相交区域。</li>\n<li>相交比例: 相交区域占参照区域的比例。</li>\n<li>阈值: 相交比例如果达到阈值，则会触发监听器的回调函数。阈值可以有多个。</li>\n</ul>\n<details class=\"hint-container details\"><summary>代码示例</summary>\n<p>以下示例代码可以在目标节点(用选择器 <code>.target-class</code> 指定)每次进入或离开页面显示区域时，触发回调函数。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Page</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  onLoad</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    wx</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">createIntersectionObserver</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">relativeToViewport</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">observe</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".target-class\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 目标节点 id</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">dataset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 目标节点 dataset</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">intersectionRatio</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域占目标节点的布局区域的比例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的左边界坐标</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">top</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的上边界坐标</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">width</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的宽度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">height</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的高度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>以下示例代码可以在目标节点(用选择器 <code>.target-class</code> 指定)与参照节点(用选择器 <code>.relative-class</code> 指定)在页面显示区域内相交或相离，且相交或相离程度达到目标节点布局区域的 20%和 50%时，触发回调函数。</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Page</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">  onLoad</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">    wx</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">createIntersectionObserver</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">      thresholds</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0.2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">0.5</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    })</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">relativeTo</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".relative-class\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">relativeToViewport</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      .</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">observe</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".target-class\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">=&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">intersectionRatio</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域占目标节点的布局区域的比例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">left</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的左边界坐标</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">top</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的上边界坐标</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">width</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的宽度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">        res</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">intersectionRect</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">height</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 相交区域的高度</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>与页面显示区域的相交区域并不准确代表用户可见的区域，因为参与计算的区域是“布局区域”，布局区域可能会在绘制时被其他节点裁剪隐藏(如遇祖先节点中 overflow 样式为 <code>hidden</code> 的节点)或遮盖(如遇 <code>fixed</code> 定位的节点)。</p>\n</div>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>在自定义组件或包含自定义组件的页面中，推荐使用 <code>this.createIntersectionObserver</code> 来代替 <code>wx.createIntersectionObserver</code> ，这样可以确保在正确的范围内选择节点。</p>\n</div>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "Behavior",
      "url": "https://mister-hope.com/code/mini-app/guide/custom-component/behavior.html",
      "id": "https://mister-hope.com/code/mini-app/guide/custom-component/behavior.html",
      "summary": "Behavior 注册一个 behavior，接受一个 Object 类型的参数。 参数 代码示例",
      "content_html": "<p><code>Behavior</code> 注册一个 behavior，接受一个 Object 类型的参数。</p>\n<h2>参数</h2>\n<p>| 定义段     | 类型         | 是否必填 | 描述                |\n|</p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T18:01:12.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "框架接口",
      "url": "https://mister-hope.com/code/mini-app/guide/custom-component/component.html",
      "id": "https://mister-hope.com/code/mini-app/guide/custom-component/component.html",
      "summary": "Component 构造器用于创建自定义组件，接受一个 Object 类型的参数。",
      "content_html": "<p><code>Component</code> 构造器用于创建自定义组件，接受一个 Object 类型的参数。</p>\n<!-- more -->\n<h2>参数</h2>\n<p>| 定义段           | 类型         | 是否必填 | 描述                                                                                          | 最低版本 |\n|</p>\n",
      "date_published": "2020-12-19T00:00:00.000Z",
      "date_modified": "2024-01-25T18:01:12.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "简易双向绑定",
      "url": "https://mister-hope.com/code/mini-app/guide/view/model.html",
      "id": "https://mister-hope.com/code/mini-app/guide/view/model.html",
      "summary": "基础库 2.9.3 开始支持 提示 此部分在初步学习小程序的时候直接略过即可。 语法 在 WXML 中，普通的属性的绑定是单向的。例如: 如果使用 this.setData({ value: 'leaf' }) 来更新 value ，this.data.value 和输入框的中显示的值都会被更新为 leaf ；但如果用户修改了输入框里的值，却不会同时改...",
      "content_html": "<blockquote>\n<p>基础库 2.9.3 开始支持</p>\n</blockquote>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2>语法</h2>\n<p>在 WXML 中，普通的属性的绑定是单向的。例如:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{value}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>如果使用 <code>this.setData({ value: 'leaf' })</code> 来更新 value ，<code>this.data.value</code> 和输入框的中显示的值都会被更新为 <code>leaf</code> ；但如果用户修改了输入框里的值，却不会同时改变 <code>this.data.value</code> 。</p>\n<p>如果需要在用户输入的同时改变 <code>this.data.value</code> ，需要借助简易双向绑定机制。此时，可以在对应项目之前加入 <code>model:</code> 前缀:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{value}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>这样，如果输入框的值被改变了， <code>this.data.value</code> 也会同时改变。同时， WXML 中所有绑定了 value 的位置也会被一同更新， 数据监听器 也会被正常触发。</p>\n<blockquote>\n<p><a href=\"https://developers.weixin.qq.com/s/8jXvobmV7vcj\" target=\"_blank\" rel=\"noopener noreferrer\">在开发者工具中预览效果</a></p>\n</blockquote>\n<h2>限制</h2>\n<p>用于双向绑定的表达式有如下限制:</p>\n<ol>\n<li>\n<p>只能是一个单一字段的绑定，如</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"值为 {{value}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{ a + b }}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>都是非法的；</p>\n</li>\n<li>\n<p>目前，尚不能 <code>data</code> 路径，如</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{ a.b }}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>这样的表达式目前暂不支持。</p>\n</li>\n</ol>\n<h2>在自定义组件中使用</h2>\n<h3>传递双向绑定</h3>\n<p>双向绑定同样可以使用在自定义组件上。</p>\n<p>如下的自定义组件:</p>\n<div class=\"language-js\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// custom-component.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myValue</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n</div><div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- custom-component.wxml --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">input</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{myValue}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>这个自定义组件将自身的 <code>myValue</code> 属性双向绑定到了组件内输入框的 <code>value</code> 属性上。这样，如果页面这样使用这个组件:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:my-value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{pageValue}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>当输入框的值变更时，自定义组件的 <code>myValue</code> 属性会同时变更，这样，页面的 <code>this.data.pageValue</code> 也会同时变更，页面 WXML 中所有绑定了 <code>pageValue</code> 的位置也会被一同更新。</p>\n<h3>触发双向绑定更新</h3>\n<p>自定义组件还可以自己触发双向绑定更新，做法就是: 使用 <code>setData</code> 设置自身的属性。例如:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// custom-component.js</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">Component</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  properties</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">    myValue</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  methods</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">    update</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">      // 更新 myValue</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">      this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setData</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">        myValue</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"leaf\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  },</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">});</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>如果页面这样使用这个组件:</p>\n<div class=\"language-xml\" data-highlighter=\"shiki\" data-ext=\"xml\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">custom-component</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> model:my-value</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"{{pageValue}}\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> /&gt;</span></span></code></pre>\n</div><p>当组件使用 <code>setData</code> 更新 <code>myValue</code> 时，页面的 <code>this.data.pageValue</code> 也会同时变更，页面 WXML 中所有绑定了 <code>pageValue</code> 的位置也会被一同更新。</p>\n",
      "date_published": "2020-12-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "WXS 事件",
      "url": "https://mister-hope.com/code/mini-app/guide/view/wxs-event.html",
      "id": "https://mister-hope.com/code/mini-app/guide/view/wxs-event.html",
      "summary": "提示 此部分在初步学习小程序的时候直接略过即可。 背景 有频繁用户交互的效果在小程序上表现是比较卡顿的，例如页面有 2 个元素 A 和 B，用户在 A 上做 touchmove 手势，要求 B 也跟随移动，movable-view 就是一个典型的例子。一次 touchmove 事件的响应过程为: touchmove 事件从视图层(Webview)抛到逻...",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>此部分在初步学习小程序的时候直接略过即可。</p>\n</div>\n<h2>背景</h2>\n<p>有频繁用户交互的效果在小程序上表现是比较卡顿的，例如页面有 2 个元素 A 和 B，用户在 A 上做 <code>touchmove</code> 手势，要求 B 也跟随移动，<a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/movable-view.html\" target=\"_blank\" rel=\"noopener noreferrer\">movable-view</a> 就是一个典型的例子。一次 <code>touchmove</code> 事件的响应过程为:</p>\n<ol>\n<li>\n<p>touchmove 事件从视图层(Webview)抛到逻辑层(App Service)</p>\n</li>\n<li>\n<p>逻辑层(App Service)处理 touchmove 事件，再通过 setData 来改变 B 的位置</p>\n</li>\n</ol>\n<p>一次 touchmove 的响应需要经过 2 次的逻辑层和渲染层的通信以及一次渲染，通信的耗时比较大。此外 <code>setData</code> 渲染也会阻塞其它脚本执行，导致了整个用户交互的动画过程会有延迟。</p>\n<h2>实现方案</h2>\n<p>本方案基本的思路是减少通信的次数，让事件在视图层(Webview)响应。小程序的框架分为视图层(Webview)和逻辑层(App Service)，这样分层的目的是管控，开发者的代码只能运行在逻辑层(App Service)，而这个思路就必须要让开发者的代码运行在视图层(Webview)，如下图所示的流程:</p>\n<figure><figcaption>流程演示</figcaption></figure>\n<p>使用 WXS 函数用来响应小程序事件，目前只能响应内置组件的事件，不支持自定义组件事件。WXS 函数的除了纯逻辑的运算，还可以通过封装好的 <code>ComponentDescriptor</code> 实例来访问以及设置组件的 class 和样式，对于交互动画，设置 style 和 class 足够了。</p>\n<p>WXS 函数的例子如下:</p>\n<div class=\"language-js line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"js\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">var</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> wxsFunction</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> function</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">event</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  var</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> instance</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\"> ownerInstance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">selectComponent</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\".classSelector\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">); </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 返回组件的实例</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setStyle</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">({</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">    \"font-size\"</span><span style=\"--shiki-light:#0184BC;--shiki-dark:#ABB2BF\">:</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> \"14px\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 支持 rpx</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  });</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">getDataset</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E5C07B\">  instance</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">setClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">className</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">  // ...</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">  return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> false</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">; </span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">// 不往上冒泡，相当于调用了同时调用了 stopPropagation 和 preventDefault</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">};</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><p>其中入参 <code>event</code> 是小程序事件对象基础上多了 <code>event.instance</code> 来表示触发事件的组件的 <code>ComponentDescriptor</code> 实例。<code>ownerInstance</code> 表示的是触发事件的组件所在的组件的 <code>ComponentDescriptor</code> 实例，如果触发事件的组件是在页面内的，<code>ownerInstance</code> 表示的是页面实例。</p>\n<h2>ComponentDescriptor</h2>\n<h3>定义</h3>\n<p>| 方法                           | 参数                           | 描述                                                                                               | 最低版本 |\n|</p>\n",
      "date_published": "2020-12-18T00:00:00.000Z",
      "date_modified": "2024-01-25T18:01:12.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "框架",
      "url": "https://mister-hope.com/code/mini-app/guide/frame/",
      "id": "https://mister-hope.com/code/mini-app/guide/frame/",
      "summary": "目录",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/intro.html\" target=\"_blank\">小程序框架介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/scene.html\" target=\"_blank\">场景值</a> </p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/env.html\" target=\"_blank\">运行环境</a> </p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/mechanism.html\" target=\"_blank\">运行机制</a> </p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/update.html\" target=\"_blank\">更新机制</a> </p>\n</li>\n</ul>\n",
      "date_published": "2022-01-07T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "场景值",
      "url": "https://mister-hope.com/code/mini-app/guide/frame/scene.html",
      "id": "https://mister-hope.com/code/mini-app/guide/frame/scene.html",
      "summary": "场景值用来描述用户进入小程序的路径。",
      "content_html": "<p>场景值用来描述用户进入小程序的路径。</p>\n<!-- more -->\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>由于 Android 系统限制，目前还无法获取到按 Home 键退出到桌面，然后从桌面再次进小程序的场景值，对于这种情况，会保留上一次的场景值。</p>\n</div>\n<h2>获取场景值</h2>\n<p>开发者可以通过下列方式获取场景值:</p>\n<ul>\n<li>对于小程序，可以在 App 的 <code>onLaunch</code> 和 <code>onShow</code>，或 <code>wx.getLaunchOptionsSync</code> 中获取上述场景值。</li>\n<li>对于小游戏，可以在 <code>wx.getLaunchOptionsSync</code> 和 <code>wx.onShow</code> 中获取上述场景值</li>\n</ul>\n<h2>场景值列表</h2>\n<p>| 场景值 ID | 说明                                                                            |\n|</p>\n",
      "date_published": "2020-12-12T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "第一章",
      "url": "https://mister-hope.com/physics/electromagnetism/charpter1.html",
      "id": "https://mister-hope.com/physics/electromagnetism/charpter1.html",
      "summary": "电场与电势 $$ k = \\frac{1}{4\\pi\\varepsilon_0} = \\frac{\\mu_0}{4\\pi} $$ $$ F_{12} = k \\frac{q_1q_2}{r^2}\\overrightharpoon{e_{12}} $$ $$ E = \\frac{F}{q_0} $$ $$ \\overrightharpoon{E} = -...",
      "content_html": "<h2>电场与电势</h2>\n<p>$$\nk = \\frac{1}{4\\pi\\varepsilon_0} = \\frac{\\mu_0}{4\\pi}\n$$</p>\n<p>$$\nF_{12} = k \\frac{q_1q_2}{r^2}\\overrightharpoon{e_{12}}\n$$</p>\n<p>$$\nE = \\frac{F}{q_0}\n$$</p>\n<p>$$\n\\overrightharpoon{E} = - \\nabla U\n$$</p>\n<p>$$\nU = \\int_P^\\infty\\overrightharpoon{E}\\cdot\\overrightharpoon{dl}\n$$</p>\n<h3>点电荷</h3>\n<p>$$\nE = \\frac{Q}{4\\pi\\varepsilon_0r^2}\n$$</p>\n<p>$$\nU = \\frac{Q}{4\\pi\\varepsilon_0r}\n$$</p>\n<h3>电偶极子</h3>\n<p>$\\overrightharpoon{p} = q \\overrightharpoon{l}$, $l$ 由 $-q$ 到 $q$</p>\n<p>$$\nU = \\frac{1}{4\\pi\\varepsilon_0}\\frac{\\overrightharpoon{p}\\cdot\\overrightharpoon{e_r}}{r^2}\n$$</p>\n<p>$$\nE = \\begin{cases}\n\\frac{1}{4\\pi\\varepsilon}\\frac{2p}{r^3} &amp;\\text{中垂线}\\\n\\frac{1}{4\\pi\\varepsilon}\\frac{p}{r^3} &amp;\\text{延长线}\n\\end{cases}\n$$</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>对于电偶极子、电四极子这类题，主要利用 $a \\gg b$ 的条件，将结果变为包含 $\\frac{b}{a}$，合理舍去高阶小量。</p>\n<p>虚功原理也可以用来解决电偶极子一类题:</p>\n<p>$$\nF_l = \\frac{\\partial w}{\\partial l}\n$$</p>\n<p>$$\nL_\\theta = \\frac{\\partial w}{\\partial\\theta}\n$$</p>\n</div>\n<h2>高斯定理</h2>\n<p>$$\n\\varPhi_E = \\oiint_s \\overrightharpoon{E}\\cdot\\overrightharpoon{dS} = \\frac{1}{\\varepsilon_0}\\sum_iq_i\n$$</p>\n<p>对于无限长线电荷密度为 $\\eta_e$ 的线，其电场强度</p>\n<p>$$E = \\frac{\\eta_e}{2\\pi\\varepsilon_0r}$$</p>\n<p>对于无限大面电荷密度为 $\\sigma_e$ 的线，其电场强度</p>\n<p>$$E = \\frac{\\sigma_e}{2\\varepsilon_0}$$</p>\n<p>静电场的环路定理:</p>\n<p>$$\n\\oint_LE\\cdot dl = 0\n$$</p>\n<h2>相互作用能</h2>\n<p>$$\nW_{\\text{互}} = \\frac{1}{4\\pi\\varepsilon_0}\\sum_{i=1}<sup>n\\sum_{j=1}</sup>{i-1}\\frac{q_iq_j}{r_{ij}} \\= \\frac{1}{8\\pi\\varepsilon_0}\\sum_{i=1}<sup>n\\sum_{j=1}</sup>n\\frac{q_iq_j}{r_{ij}} (i\\ne j) \\= \\frac{1}{2}\\sum_iq_iU_i\n$$</p>\n<p>对于连续分布:</p>\n<p>$$\nW_e = \\frac{1}{2}\\int_V\\rho_eUdV \\tag{体}\n$$</p>\n<p>$$\nW_e = \\frac{1}{2}\\int_S\\sigma_eUdS \\tag{面}\n$$</p>\n<p>$$\nW_e = \\frac{1}{2}\\int_l\\eta_eUdl \\tag{线}\n$$</p>\n",
      "date_published": "2020-12-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "第二章",
      "url": "https://mister-hope.com/physics/electromagnetism/charpter2.html",
      "id": "https://mister-hope.com/physics/electromagnetism/charpter2.html",
      "summary": "导体 导体表面为等势面。 对于孤立导体，空腔内表面无电荷、无电场。 若内部含有其他带电体，则内表面会感应出相反的电荷量。 电容 $C = \\frac{Q}{U}$，单位符号为 $F$，单位名称法拉。 常见电容 $$4\\pi\\varepsilon_0R \\tag{孤立球}$$ $$\\frac{\\varepsilon_0S}{d} \\tag{平行板}$$ ...",
      "content_html": "<h2>导体</h2>\n<p>导体表面为等势面。</p>\n<p>对于孤立导体，空腔内表面无电荷、无电场。</p>\n<p>若内部含有其他带电体，则内表面会感应出相反的电荷量。</p>\n<h2>电容</h2>\n<p>$C = \\frac{Q}{U}$，单位符号为 $F$，单位名称法拉。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">常见电容</p>\n<p>$$4\\pi\\varepsilon_0R \\tag{孤立球}$$</p>\n<p>$$\\frac{\\varepsilon_0S}{d} \\tag{平行板}$$</p>\n<p>$$\\frac{4\\pi\\varepsilon_0R_AR_B}{R_b-R_A} \\tag{同心球}$$</p>\n<p>$$\\frac{2\\pi\\varepsilon_ol}{ln\\frac{R_B}{R_A}} \\tag{同轴圆筒}$$</p>\n</div>\n<p>电容器并联满足:</p>\n<p>$$\nC_{\\text{并}} = C_1 + C_2 + \\dots + C_n\n$$</p>\n<p>电容器串联满足:</p>\n<p>$$\nC_{\\text{串}}= \\frac{1}{\\frac{1}{C_1} + \\frac{1}{C_2} + \\dots + \\frac{1}{C_n}}\n$$</p>\n<p>电容器能量:</p>\n<p>$$\nW_e = \\int_0^QUdq = \\frac{1}{2}\\frac{Q^2}{C} = \\frac{1}{2}CU^2 = \\frac{1}{2}QU\n$$</p>\n<h2>电极化密度</h2>\n<p>$$\nP = \\frac{\\sum p_{\\text{分子}}}{\\varDelta V}\n$$</p>\n<p>符号为 $P$，单位 $C/m^2$</p>\n",
      "date_published": "2020-11-28T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "Pull Request",
      "url": "https://mister-hope.com/code/github/pr.html",
      "id": "https://mister-hope.com/code/github/pr.html",
      "summary": "简介 对于一个用户的公开仓库，在默认情况下虽然其他用户可以拉取该库的代码，但是他们并不能够直接向这个库进行推送。 GitHub 是一个代码社区，这意味着鼓励大家互相提交与贡献代码。所以这就是 Fork 和 Pull Request 出现的意义。没有人会给一个陌生人添加访问自己仓库的权限，所以我们需要一种方式，能够让大家向仓库所有者发起贡献代码的请求。这...",
      "content_html": "<h2>简介</h2>\n<p>对于一个用户的公开仓库，在默认情况下虽然其他用户可以拉取该库的代码，但是他们并不能够直接向这个库进行推送。</p>\n<p>GitHub 是一个代码社区，这意味着鼓励大家互相提交与贡献代码。所以这就是 Fork 和 Pull Request 出现的意义。没有人会给一个陌生人添加访问自己仓库的权限，所以我们需要一种方式，能够让大家向仓库所有者发起贡献代码的请求。这就是 pull request 的由来。</p>\n<h2>提交自己贡献的代码</h2>\n<p>对于代码贡献者来说，他需要用一种方法将自己贡献的代码推送到远程库上，以便发起请求，最好的办法就是 fork 原仓库。</p>\n<figure><figcaption>Fork 仓库</figcaption></figure>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>相关介绍，请见 <a href=\"/code/github/intro.html#fork\" target=\"_blank\">GitHub 简介 → fork</a></p>\n</div>\n<p>这样，贡献者在自己的账号上获得一个和原仓库完全相同的副本。</p>\n<p>既然副本已经创建在自己的账号上，贡献者自然可以:</p>\n<ol>\n<li>克隆这个项目到本地</li>\n<li>在这个项目上贡献自己的代码</li>\n<li>将贡献的代码推送到这个副本上</li>\n</ol>\n<h2>发送请求</h2>\n<p>pull request 是请求仓库所有者拉取指定仓库分支代码的请求。</p>\n<p>在贡献自己的代码并推送到自己的 fork 仓库后，贡献者即可到原仓库去选择自己仓库的对应分支发送这个拉取请求。仓库所有者随时可以批准这个更改，使其自动添加到自己的库中，或是拒绝这个请求。</p>\n<figure><figcaption>Pull request</figcaption></figure>\n<blockquote>\n<p>这个仓库我已经删了所以显示 <code>unknown repository</code>，原为 <code>Mister-Hope:master</code></p>\n</blockquote>\n<p>这个页面允许所有人在主要对话线上交换自己的意见。</p>\n<p>在 Pull request 里，一旦请求被创建，仓库所有者应该可以直观地看到哪些文件发生了怎样的改变。</p>\n<figure><figcaption>文件改动</figcaption></figure>\n<p>同时，他们也可以对贡献者的代码进行审查，对特定行或片段标注，并陈述自己的意见，同时将这个意见根据程度标注为“探讨”、“改进”或者“必须更改”，以便贡献者进行交流讨论与完善修改。</p>\n<figure><figcaption>代码审查</figcaption></figure>\n<p>同时，对于一个大型库来说，仓库所有者应该可以看到贡献的代码是否通过了所有测试。</p>\n<figure><figcaption>测试通过情况</figcaption></figure>\n<p>如果审查者认为没有问题，他可能就会通过这个拉取请求，拉取对应的代码到自己的仓库上。这样您就完成了对这个仓库的贡献。</p>\n<h2>同步原仓库</h2>\n<p>需要注意的是，fork 创建的是一个时刻副本，也就是自己 fork 产生的仓库，会保持 fork 时的状态，原仓库的任何变动都不会自动同步到 fork 的仓库上。</p>\n<p>有些时候，在自己 fork 原仓库、自己编写代码并提交的这段时间里，原仓库已经进行了很多提交。这时，我们就需要同步原仓库的更新到自己的副本上，以确保自己贡献的代码并未和新增代码发生冲突、可以正常工作。</p>\n<p>这个时候只需反向拉取，在自己的仓库创建原仓库特定分支到自己仓库特定分支的 Pull request，并批准这个 pull request。这样即可很方便的将原仓库特定分支的更新同步到自己的副本上。</p>\n<p>您当然可以在本地添加原仓库的远程库，将最新的更改直接 fetch 到本地，在本地测试通过并完成合并后，由本地推送至自己的 fork 仓库。</p>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2023-03-12T09:46:14.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "语义化提交",
      "url": "https://mister-hope.com/code/github/semantic.html",
      "id": "https://mister-hope.com/code/github/semantic.html",
      "summary": "Semantic 对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。 无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以...",
      "content_html": "<h2>Semantic</h2>\n<p>对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。</p>\n<p>无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家查看。所以我们需要一种规范的，语义化的备注格式，很快由知名项目牵头，全球接收并统一了一种语义化的备注格式，这就是 semantic 规范的来源。</p>\n<h2>优势</h2>\n<p>当一个仓库所有的 commit 信息都是用标准的 semantic 格式时，用户可以很方便的理解每一个 commit 的作用。</p>\n<p>同时，semantic 支持直接将某个提交或 PR 与特定 issue 链接，并自动关闭或引用这些 issue。</p>\n<p>通过一些第三方工具，大家可以基于这些备注信息进行过滤查找，更新日志生成等操作。</p>\n<h2>格式</h2>\n<div class=\"language-text\" data-highlighter=\"shiki\" data-ext=\"text\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>\n<span class=\"line\"><span>&lt;body&gt;</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>&lt;footer&gt;</span></span></code></pre>\n</div><h3>header</h3>\n<p>第一行被称为 <code>header</code>，它必须只有一行，包括三个字段: <code>&lt;type&gt;</code>(必需)、<code>&lt;scope&gt;</code>(可选)和 <code>&lt;subject&gt;</code>(必需)</p>\n<h3>type</h3>\n<p>commit 的类型。</p>\n<p>规范中规定了如下类型:</p>\n<ul>\n<li><code>feat</code>: feature, 新增功能</li>\n<li><code>fix</code> : bug fix, 修复 bug</li>\n<li><code>docs</code>: documentation, 仅仅修改了文档，如 <code>README.md</code></li>\n<li><code>style</code>: style, 仅仅是对格式进行修改，如逗号、缩进、空格等，不改变代码逻辑</li>\n<li><code>refactor</code>: refactor, 代码重构，一般更改了源文件或测试文件，但没有新增功能或修复 bug</li>\n<li><code>perf</code>: performance, 优化相关，如提升性能、用户体验等</li>\n<li><code>test</code>: test, 测试用例，包括单元测试，集成测试</li>\n<li><code>chore</code>: chore, 对于库的其他内容的改变，一般不涉及到源文件或测试文件，比如更改 CI 设置，提升仓库以来等</li>\n<li><code>revert</code>: 版本回滚</li>\n</ul>\n<h3>scope</h3>\n<p>用于说明 commit 影响的范围，比如: <code>views</code> , <code>component</code>, <code>utils</code>, <code>test</code>。这个是由项目的内容与结构决定的。</p>\n<h3>subject</h3>\n<p>commit 目的的简短描述，最好小于 50 字符，一般不超过 65 个字符，最长不超过 80 字符。</p>\n<p>当 subject 限制的字符数无法详细说明此 commit 的变动时，将 commit 的具体变动放置在 body 中</p>\n<h3>body</h3>\n<p>对本次 commit 修改内容的具体描述，可以分为多行。<code>body</code> 是可选的，而且 <code>body</code> 可以有多行。</p>\n<h3>footer</h3>\n<p>可选的，前面有一空行。可以添加一些备注，一般放置 <code>BREAKING CHANGE</code>(一些破坏性的变动) 或修复的 bug(涉及的 issue)的链接。</p>\n<h2>Semantic commit 与 Changelog 生成</h2>\n<p>不同语言环境都有很多种工具来帮助您创建一个 semantic commit 或者自动生成 changelog。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<p>Node.js 环境下可以使用:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/commitizen/cz-conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code>cz-conventional-changelog</code></a> 提供 <code>git cz</code> 命令辅助创建 semantic commit。</p>\n</li>\n<li>\n<p><a href=\"https://github.com/conventional-changelog/conventional-changelog\" target=\"_blank\" rel=\"noopener noreferrer\"><code>conventional-changelog-cli</code></a> 来快速生成更新日志，如 <a href=\"https://github.com/Mister-Hope/vuepress-theme-hope/blob/master/CHANGELOG.md\" target=\"_blank\" rel=\"noopener noreferrer\">vuepress-theme-hope 的更改日志</a></p>\n</li>\n</ul>\n</div>\n",
      "date_published": "2021-01-18T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "工具软件",
      "url": "https://mister-hope.com/software/tool/",
      "id": "https://mister-hope.com/software/tool/",
      "summary": "目录 : Windows 实用工具合集 PasteEx: Paste As File 把剪贴板的内容直接粘贴为文件 typora: 一个页面很漂亮的 Markdown 编辑器 Potplayer: 心目中最 NB 的视频播放器，没有之一 : Windows 终端 : Windows 的命令行外壳程序和脚本环境",
      "content_html": "<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"/software/tool/power-toys.html\" target=\"_blank\">PowerToys</a>: Windows 实用工具合集</p>\n</li>\n<li>\n<p><a href=\"https://github.com/huiyadanli/PasteEx\" target=\"_blank\" rel=\"noopener noreferrer\">PasteEx</a>: Paste As File 把剪贴板的内容直接粘贴为文件</p>\n</li>\n<li>\n<p><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener noreferrer\">typora</a>: 一个页面很漂亮的 Markdown 编辑器</p>\n</li>\n<li>\n<p><a href=\"https://potplayer.daum.net/?lang=zh_CN\" target=\"_blank\" rel=\"noopener noreferrer\">Potplayer</a>: 心目中最 NB 的视频播放器，没有之一</p>\n</li>\n<li>\n<p><a href=\"/software/tool/terminal/\" target=\"_blank\">Terminal</a>: Windows 终端</p>\n</li>\n<li>\n<p><a href=\"/software/tool/powershell.html\" target=\"_blank\">PowerShell</a>: Windows 的命令行外壳程序和脚本环境</p>\n</li>\n</ul>\n",
      "date_published": "2022-01-07T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "PowerToys",
      "url": "https://mister-hope.com/software/tool/power-toys.html",
      "id": "https://mister-hope.com/software/tool/power-toys.html",
      "summary": "安装 您可以: 从 Microsoft Store 的 PowerToys 页面 进行安装 直接下载 exe 进行安装。 使用 WinGet: 当前 PowerToy 实用工具 当前可用的实用工具包括： Always on Top Always on Top 使你能够使用快捷键 (⊞ Win+Ctrl+T) 将窗口固定在其他窗口之上。 PowerToy...",
      "content_html": "<h2>安装</h2>\n<p>您可以:</p>\n<ul>\n<li>\n<p><a href=\"https://aka.ms/getPowertoys\" target=\"_blank\" rel=\"noopener noreferrer\">从 Microsoft Store 的 PowerToys 页面</a> 进行安装</p>\n</li>\n<li>\n<p><a href=\"https://github.com/microsoft/PowerToys/releases\" target=\"_blank\" rel=\"noopener noreferrer\">直接下载 exe</a> 进行安装。</p>\n</li>\n<li>\n<p>使用 WinGet:</p>\n<div class=\"language-shell\" data-highlighter=\"shiki\" data-ext=\"shell\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">winget</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> install</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> Microsoft.PowerToys</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> --source</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> winget</span></span></code></pre>\n</div></li>\n</ul>\n<h2>当前 PowerToy 实用工具</h2>\n<p>当前可用的实用工具包括：</p>\n<h3>Always on Top</h3>\n<p>Always on Top 使你能够使用快捷键 (⊞ Win+Ctrl+T) 将窗口固定在其他窗口之上。</p>\n<h3>PowerToys Awake</h3>\n<p>PowerToys Awake 旨在使计算机保持唤醒状态，且无需管理其电源和睡眠设置。 运行耗时较长的任务时，此行为非常有用，可确保计算机不会进入睡眠状态或关闭其显示屏。</p>\n<h3>颜色选取器</h3>\n<p>颜色选取器是一种系统范围的颜色选取实用工具，通过 <code>Win</code> + <code>Shift</code> + <code>C</code> 进行激活。 从屏幕上的任意位置选取颜色，选取器会自动以设置的格式将颜色复制到剪贴板。 颜色选取器还包含一个编辑器，其中显示了之前选取的颜色的历史记录，你可用它来微调所选颜色并复制不同的字符串表示形式。</p>\n<figure><figcaption>取色器演示</figcaption></figure>\n<h3>裁剪和锁定</h3>\n<p>裁剪和锁定是一个实用工具，用于创建一个新窗口，该窗口是另一个窗口的裁剪窗口或缩略图。</p>\n<h3>环境变量</h3>\n<p>环境变量提供了一种简单便捷的方式来管理环境变量。 利用它，还可以创建配置文件来统一管理一组变量。</p>\n<h3>FancyZones</h3>\n<p>FancyZones 是一种窗口管理器，可用于轻松创建复杂的窗口布局，并将窗口快速放入到这些布局中。</p>\n<p>FancyZones 实现了更高效地利用屏幕的面积，管理切换大量窗口而不杂乱，是大屏幕用户必备的效率工具，快捷键为 <code>Win + `</code></p>\n<p>当首次启动时，FancyZones 会要求您为当前显示器选择一个默认的布局。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>请注意 FancyZones 布局是基于显示器的，所以如果您有多个显示器，您需要分别设置它们。</p>\n<figure><figcaption>布局选择</figcaption></figure>\n<p>如果上述布局选择不能满足您的需求，您也可以点击 \"Custom\" 选项卡进行自定义。</p>\n<figure><figcaption>自定义布局</figcaption></figure>\n</div>\n<h3>资源管理器加载项</h3>\n<p>资源管理器加载项支持资源管理器中的预览窗格和缩略图呈现以显示各种文件类型。 若要启用预览窗格，请在资源管理器中选择“视图”选项卡，然后选择“预览窗格”。</p>\n<figure><figcaption>SVG 预览</figcaption></figure>\n<figure><figcaption>Markdown 预览</figcaption></figure>\n<h3>File Locksmith</h3>\n<p>File Locksmith 是一个 Windows shell 扩展，用于检查哪些文件正在使用中以及由哪些进程使用。 右键单击资源管理器中的一个或多个选定文件，然后选择“什么进程正在使用此文件?”。</p>\n<h3>主机文件编辑器</h3>\n<p>主机文件编辑器是一种编辑包含域名和匹配 IP 地址的“主机”文件的便捷方式，充当一个用于识别和定位 IP 网络上主机的映射。</p>\n<h3>图像大小调整器</h3>\n<p>图像大小调整器是一种用于快速调整图像大小的 Windows Shell 扩展。 只需在 资源管理器中简单右键单击一下，立即就能调整一张或多张图像的大小。</p>\n<p>用户可选择修改一张或批量修改多张图片的大小尺寸、旋转图片方向或者转换图片格式。</p>\n<figure><figcaption>图片尺寸调整</figcaption></figure>\n<p>软件预设了大/中/小/手机等不同的常用模版，单击确定即可一键完成图片尺寸的批量调整。您也可以点击 Settings 进入设置，按自己需求的尺寸大小、是否转换格式等来配置自己的常用“模版”。</p>\n<figure><figcaption>图片尺寸调整设置</figcaption></figure>\n<p>对于经常有多张图片的大小需要处理，而对专业性要求不高的用户来说，这款工具能替代专门的图像处理器软件。</p>\n<p>同时，用户不仅可以导出为其他格式，也可以设置默认编码器(在不能保存为原始格式时)。</p>\n<p>在导出时，也支持修改 PNG、JPEG 和 TIFF 的图片保存设置，与是否保留原来的最后修改日期。</p>\n<h3>键盘管理器</h3>\n<p>通过键盘管理器，可重新映射键和创建自己的键盘快捷方式，从而自定义键盘来提高工作效率。</p>\n<p>它的主要作用能帮您将键盘上的某个按键映射为另一个按键，甚至还能将一组快捷键映射为另一组。在一些特殊的情况下，它能帮您的大忙。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>Keyboard Manager 修改键位之后无需重启电脑即可立即生效。</p>\n</div>\n<h3>鼠标实用程序</h3>\n<p>鼠标实用程序添加了用于增强鼠标和光标的功能。 使用“查找我的鼠标”，通过聚焦于光标的焦点快速查找鼠标的位置。 此功能基于由 Raymond Chen 开发的源代码。 单击鼠标左键或右键时，鼠标荧光笔会显示可视指示器。 鼠标跳转使你可以在大型显示屏上快速跳转。 鼠标指针十字准线以鼠标指针为中心绘制十字准线。</p>\n<h3>无边框鼠标</h3>\n<p>借助无边框鼠标，你可以使用同一个键盘和鼠标与多台计算机进行交互，在计算机之间无缝共享剪贴板内容和文件。</p>\n<h3>粘贴为纯文本</h3>\n<p>通过粘贴为纯文本，可以使用快捷键 (<code>Ctrl</code> + <code>Win</code> + <code>V</code>) 以不带格式的方式粘贴剪贴板中的文本。</p>\n<h3>速览</h3>\n<p>使用速览可以预览文件内容，而无需打开多个应用程序或中断工作流。 只需选择文件并使用快捷方式（<code>Ctrl</code> + <code>Space</code>）</p>\n<h3>PowerRename</h3>\n<p>通过 PowerRename，可执行批量重命名，搜索和替换文件名称。 它附带高级功能，例如使用正则表达式、面向特定文件类型、预览预期结果和撤消更改的能力。</p>\n<p>为了避免出错，它在重命名之前可以让在界面上预览重命名后的结果，同时在重命名时，您可以很方便的选中全部您想要重命名的文件与文件夹，再排除指定的文件/文件夹。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">一些设置选项的解释</p>\n<ul>\n<li><strong>使用正则表达式</strong>: 默认搜索框中为文字匹配，启用后将认为搜索框中为正则表达式。</li>\n<li><strong>匹配所有出现的对象</strong>: 默认情况下只匹配项目中搜索文本的第一个实例，勾选后匹配所有。</li>\n<li><strong>枚举项</strong>: 勾选后，会在在操作中修改的文件名后追加一个数字后缀。例如: <code>mrhope.jpg</code> -&gt; <code>mrhope (1).jpg</code></li>\n</ul>\n</div>\n<h3>Quick Accent</h3>\n<p>Quick Accent 是键入重音字符的替代方法，当键盘不支持具有快捷键组合的特定重音时，此方法非常有用。</p>\n<h3>注册表预览版</h3>\n<p>注册表预览版是用于可视化和编辑 Windows 注册表文件的实用工具。</p>\n<h3>PowerToys Run</h3>\n<p>PowerToys Run 可帮助你立即搜索和启动应用。 如需打开，可使用快捷方式 <code>Alt</code> + <code>Space</code> ，然后开始键入。 对其他插件来说，它是开源和模块化的。</p>\n<h4>功能</h4>\n<ul>\n<li>\n<p>搜索</p>\n<p>直接输入名字后，它能快速找到对应的软件、搜索文件/文件夹，并回车迅速打开它们。</p>\n<figure><figcaption>搜索</figcaption></figure>\n</li>\n<li>\n<p>运行软件切换</p>\n<p>PowerToys Run 也支持快速搜索当前正在运行的软件，并切换到它们的窗口去。</p>\n</li>\n<li>\n<p>终端</p>\n<p>输入 <code>&gt;</code> 加您需要执行的命令，即可快速调用终端执行。</p>\n<figure><figcaption>终端命令</figcaption></figure>\n</li>\n<li>\n<p>简单计算</p>\n<p>您可以直接输入简单的数学表达式，PowerToys Run 会直接返回结果。</p>\n<figure><figcaption>简单计算</figcaption></figure>\n</li>\n</ul>\n<h4>快捷键</h4>\n<p>| 捷径                   | 行动                                                     |\n|</p>\n",
      "date_published": "2020-10-30T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "linter 介绍",
      "url": "https://mister-hope.com/code/language/linter/",
      "id": "https://mister-hope.com/code/language/linter/",
      "summary": "linter 用来检查程序的语法错误，并即时标注和指出来 (例如，把声明了但没使用的多余变量指出来，向错误语句添加红色波浪线)，是程序开发的辅助工具。同时，linter 也有统一规范代码书写方式的功能。 在大型项目中，编码需要统一的风格，比如在 JavaScript 中使用单引号还是双引号包裹字符串，在何时进行折行等。目前各种语言基本都有自己的出色 l...",
      "content_html": "<p>linter 用来检查程序的语法错误，并即时标注和指出来 (例如，把声明了但没使用的多余变量指出来，向错误语句添加红色波浪线)，是程序开发的辅助工具。同时，linter 也有统一规范代码书写方式的功能。</p>\n<p>在大型项目中，编码需要统一的风格，比如在 JavaScript 中使用单引号还是双引号包裹字符串，在何时进行折行等。目前各种语言基本都有自己的出色 linter，能够确保相同的使用不同换行方式、缩进、标记代码会最终格式化为相同的输出。</p>\n<!-- more -->\n<h2>Prettier</h2>\n<p>Prettier 是一个前端知名的 linter，它可以代码规范根据设置为唯一的排列格式。它支持 markdown, html, css, js, ts, jsx, tsx, json, vue 等多种文件格式。</p>\n<h2>ESlint</h2>\n<p>ESlint 是一个知名的 JavaScript linter，借助插件它也可以提供其他扩展语言的支持，如 jsx, ts, tsx, vue 等。</p>\n<h2>clang-format</h2>\n<p>clang-format 是 C/ C++ / Object-C 最流行的代码格式化工具，提供多种预设的代码风格。</p>\n<ul>\n<li><a href=\"/code/language/linter/clang-format.html\" target=\"_blank\">查看详情</a></li>\n</ul>\n<h2>checkStyle</h2>\n<p>checkStyle 是比较流行的 Java linter</p>\n",
      "date_published": "2020-10-21T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "clang-format",
      "url": "https://mister-hope.com/code/language/linter/clang-format.html",
      "id": "https://mister-hope.com/code/language/linter/clang-format.html",
      "summary": "clang-format 是一种代码格式化工具，可用于格式化(排版) C / C++ / Java / JavaScript / Objective-C / Protobuf / C# 的代码。它支持多种预设代码风格与自定义风格 (通过编写 .clang-format 文件)。",
      "content_html": "<p>clang-format 是一种代码格式化工具，可用于格式化(排版) C / C++ / Java / JavaScript / Objective-C / Protobuf / C# 的代码。它支持多种预设代码风格与自定义风格 (通过编写 <code>.clang-format</code> 文件)。</p>\n<!-- more -->\n<h2>自定义格式化</h2>\n<div class=\"language-shell\" data-highlighter=\"shiki\" data-ext=\"shell\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">clang-format</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -style=格式名</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> -dump-config</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> &gt; </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">.clang-format`</span></span></code></pre>\n</div><p>其中，格式名的取值可以为 <code>LLVM</code>, <code>Google</code>, <code>Chromium</code>, <code>Mozilla</code>, <code>Webkit</code> 中的任一种，这会将对应格式预设写入 <code>.clang-format</code> 文件。</p>\n<h2>使用命令行</h2>\n<h3>格式</h3>\n<div class=\"language-shell\" data-highlighter=\"shiki\" data-ext=\"shell\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">clang-format</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> [options] [</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&lt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">file</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">&gt;</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> ...]</span></span></code></pre>\n</div><h3>可用选项</h3>\n<ul>\n<li>\n<p><code>--Werror</code>: 将格式化警告变为错误</p>\n</li>\n<li>\n<p><code>--Wno-error=unknown</code>: 未知的格式化选项仅产生警告。</p>\n<p>这可以保持格式化启用，即使配置包含未知 (较新) 选项。</p>\n</li>\n<li>\n<p><code>--assume-filename=&lt;string&gt;</code>: 覆盖用于确定语言的文件名。</p>\n<p>通常在从 stdin 读取时，帮助 clang-fomat 获取文件名</p>\n</li>\n<li>\n<p><code>--dry-run</code> 或 <code>-n</code>: 如果设置，实际上不进行格式更改</p>\n</li>\n<li>\n<p><code>--dump-config</code>: 将配置选项转储到标准输出并退出, 可以与 <code>--style</code> 选项一起使用。</p>\n</li>\n<li>\n<p><code>--fallback-style=&lt;string&gt;</code>: 设置回退的默认格式，通常在 clang-format 找不到配置文件时使用。</p>\n<p>设置 <code>--fallback-style=none</code> 可以在这种情况下跳过格式化</p>\n</li>\n<li>\n<p><code>--ferror-limit=&lt;uint&gt;</code>: 设置 clang-format 输出的最大错误数，超过将停止输出。</p>\n<p>请仅与 <code>--dry-run</code> 或 <code>-n</code> 配合使用，<code>0</code> 意味着无限制</p>\n</li>\n<li>\n<p><code>-i</code>: 替换输入文件</p>\n</li>\n<li>\n<p><code>--length=&lt;uint&gt;</code>: 格式化指定长度范围</p>\n<p>可以通过指定多个偏移和长度对来格式化几个范围。</p>\n<p>当仅指定一个偏移量而没有 <code>--length</code>，clang-format 会一直格式化到文件的最后。</p>\n<p>只能与一个输入文件一起使用。</p>\n</li>\n<li>\n<p><code>--lines=&lt;string&gt;</code>: 格式为 <code>&lt;start line&gt;:&lt;end line&gt;</code></p>\n<p>设置格式化行的范围(起始为第一行)，可以通过指定多个范围来格式化多行。</p>\n<p>不能与 <code>--offset</code> 和 <code>--length</code> 一起使用。</p>\n<p>只能与一个输入文件一起使用。</p>\n</li>\n<li>\n<p><code>--offset=&lt;uint&gt;</code>: 格式化从此字节偏移量开始的范围。</p>\n<p>可以通过指定多个范围来格式化几个偏移量和长度对。</p>\n<p>只能与一个输入文件一起使用。</p>\n</li>\n<li>\n<p><code>--output-replacements-xml</code>: 输出 XML</p>\n</li>\n<li>\n<p><code>--sort-includes</code>: 如果设置，将覆盖包含排序行为。由 SortIncludes 样式标志确定</p>\n</li>\n<li>\n<p><code>--style=&lt;string&gt;</code> 编码样式</p>\n<p>当前支持: <code>LLVM</code>, <code>Google</code>, <code>Chromium</code>, <code>Mozilla</code>, <code>Webkit</code></p>\n<p>使用 <code>--style=file</code> 从中文件加载样式配置</p>\n<p>使用 <code>--style=\"{key:value,...}\"</code> 来设置特定的参数，\n例如: <code>\"{BasedOnStyle: llvm, IndentWidth: 8}\"</code></p>\n</li>\n<li>\n<p><code>--verbose</code>: 输出处理的文件列表</p>\n</li>\n</ul>\n<h2>VS Code</h2>\n<p>在 VS Code 中安装 C/C++ 插件以启用两者支持时会自动安装 clang-format，因此无需进行任何操作，即可在 C/C++ 文件中对代码进行格式化。</p>\n<h2>推荐样式</h2>\n<p>Mr.Hope 推荐使用 Google 预设，所以在个人与工作室的每个项目中，都会使用 Google 编码风格。</p>\n<p>建议在 VS Code 中配置默认格式风格:</p>\n<div class=\"language-json\" data-highlighter=\"shiki\" data-ext=\"json\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">  \"C_Cpp.clang_format_fallbackStyle\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">: </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Google\"</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h2>官方文档</h2>\n<ul>\n<li><a href=\"http://clang.llvm.org/docs/ClangFormat.html\" target=\"_blank\" rel=\"noopener noreferrer\">地址</a> (需 VPN)</li>\n</ul>\n",
      "date_published": "2020-10-21T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "浮动",
      "url": "https://mister-hope.com/code/website/css/layout/float.html",
      "id": "https://mister-hope.com/code/website/css/layout/float.html",
      "summary": "在网站布局中，应当以 normal flow, flex 和 grid 布局为主。只有在需要特殊样式无法满足时，再考虑 float 布局。 简介 把一个元素“浮动”(float)起来，会改变该元素本身和在正常布局流(normal flow)中跟随它的其他元素的行为。这一元素会浮动到左侧或右侧，并且从正常布局流(normal flow)中移除，这时候其他...",
      "content_html": "<p>在网站布局中，应当以 normal flow, flex 和 grid 布局为主。只有在需要特殊样式无法满足时，再考虑 float 布局。</p>\n<h2>简介</h2>\n<p>把一个元素“浮动”(float)起来，会改变该元素本身和在正常布局流(normal flow)中跟随它的其他元素的行为。这一元素会浮动到左侧或右侧，并且从正常布局流(normal flow)中移除，这时候其他的周围内容就会在这个被设置浮动(float)的元素周围环绕。</p>\n<p><code>float</code> 属性有四个可能的值:</p>\n<ul>\n<li><code>inherit</code>: 继承父元素的浮动属性。</li>\n<li><code>left</code>: 将元素浮动到左侧。</li>\n<li><code>right</code>: 将元素浮动到右侧。</li>\n<li><code>none</code>: 默认值, 不浮动。</li>\n</ul>\n\n<p>注意浮动内容仍然遵循盒子模型诸如外边距和边界。</p>\n<h2>首字下沉</h2>\n\n<h2>多列浮动布局</h2>\n\n<p>所有列使用宽度百分比会创建一个流式布局(liquid layout)。请尝试调整浏览器窗口的宽度，以便自己查看。需要注意的一件事是，当它们变得非常窄时，列就会变得很糟糕。切换回窄屏幕的单列布局通常是有意义的 (如手机)，使用媒体查询可以实现这一功能。</p>\n<p>另一种选择是将宽度设置为一个固定的单位如 rem 或像素，这就是固定宽度布局(fixed-width layout)</p>\n<h2>清除浮动</h2>\n<p>有些情况下，浮动元素内容过多会错乱排版。</p>\n\n<p>为了解决这个问题，您需要在页脚清除浮动。</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">footer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  clear: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">both</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>clear 可以取三个值:</p>\n<ul>\n<li><code>left</code>: 停止任何活动的左浮动</li>\n<li><code>right</code>: 停止任何活动的右浮动</li>\n<li><code>both</code>: 停止任何活动的左右浮动</li>\n</ul>\n\n<p>您通常只想设定一个 <code>clear: both</code> 在您想让浮动停止的元素上。在某些情况下，您会想要只取消 left 或 right 引用。</p>\n<h2>其他浮动问题</h2>\n<h3>宽度计算</h3>\n<p>到目前为止，我们的例子是没有应用样式的浮动框——这很容易。当您开始给这些框加上样式时，比如添加背景、外边距、内边距等等，问题就来了。</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">footer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  padding: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  border: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\"> solid</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> black</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  background-color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>有两个方法可以解决问题，最好的方法是给您的 HTML 加上下面的 CSS。</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">*</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  box-sizing: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">border-box</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p><code>box-sizing</code> 通过更改盒模型将宽度取值为 <code>content + padding + border</code>，而不仅是之前的 <code>content</code>。所以当增加内边距或边界的宽度时，不会使盒子更宽——而是会使内容调整得更窄。</p>\n<p>我们有另一个问题: 页脚正压在最长列上。但是如果试着清除页脚浮动的同时给出一些顶部外边距 <code>margin-top</code></p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">footer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  clear: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">both</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  margin-top: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">4</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>您会发现它们不起作用。</p>\n<p>浮动元素有以下性质:</p>\n<ul>\n<li>他们在父元素中所占的面积的有效高度为 0</li>\n<li>非浮动元素的外边距不能用于它们和浮动元素之间来创建空间</li>\n</ul>\n<p>为了解决这个问题，我们需要添加新的 <code>&lt;div&gt;</code> 元素，位于在 <code>&lt;footer&gt;</code> 标签的上方:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"clearfix\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>如果您没有一个可用的元素来清除您的浮动(比如我们的页脚)，在您想要清除的浮动之后添加一个看不见的“clearfix div”是非常有用的，但是在这里页脚也要用到。接下来我们要做的是，移除页脚样式规则中的 <code>clear: both;</code> 声明，取而代之将其放在 clearfix div 中:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.clearfix</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  clear: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">both</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>这个时候页脚现顶部外边距就会生效。</p>\n<p>但是这会造成另一个问题: clearfix div 背景、内边距和边界与我们的列和页脚相同</p>\n<p>为了解决这个问题，让我们先给每个列块一个类( class )column:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"column\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;...&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div><p>之后改变应用盒子样式的规则到这些块和页脚，这样只有列块被样式化:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.column</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">footer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  padding: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">1</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">%</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  border: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">2</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\"> solid</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> black</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  background-color: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">red</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div>\n",
      "date_published": "2019-09-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "正常布局流",
      "url": "https://mister-hope.com/code/website/css/layout/flow.html",
      "id": "https://mister-hope.com/code/website/css/layout/flow.html",
      "summary": "元素特性 一个块级元素的内容宽度是其父元素的 100%，其高度与其内容高度一致。 内联元素的 width height 与内容一致。您无法设置内联元素的 width height。 如果您想控制内联元素的尺寸，您需要为元素设置 display: block; 或 display: inline-block。inline-block 混合了 inline...",
      "content_html": "<h3>元素特性</h3>\n<ul>\n<li>\n<p>一个块级元素的内容宽度是其父元素的 100%，其高度与其内容高度一致。</p>\n</li>\n<li>\n<p>内联元素的 <code>width</code> <code>height</code> 与内容一致。您无法设置内联元素的 <code>width</code> <code>height</code>。</p>\n</li>\n<li>\n<p>如果您想控制内联元素的尺寸，您需要为元素设置 <code>display: block;</code> 或 <code>display: inline-block</code>。<code>inline-block</code> 混合了 <code>inline</code> 和 <code>block</code> 的特性。</p>\n</li>\n</ul>\n<h3>摆放特性</h3>\n<p>正常布局流(在布局介绍里提到过)是一套在浏览器视口内放置、组织元素的系统。默认的，块级元素按照基于其父元素的书写顺序(默认值: <code>horizontal-tb</code>)的块流动方向(block flow direction)放置。</p>\n<p>每个块级元素会在上一个元素下面另起一行，它们会被设置好的 <code>margin</code> 分隔。在英语，或者其他水平书写、自上而下模式里，块级元素是垂直组织的。</p>\n<p>内联元素的表现有所不同: 它们不会另起一行；只要在其父级块级元素的宽度内有足够的空间，它们与其他内联元素、相邻的文本内容(或者被包裹的)被安排在同一行。如果空间不够，溢出的文本或元素将移到新的一行。</p>\n<p>如果两个相邻的元素都设置了 <code>margin</code> 并且两个 <code>margin</code> 有重叠，那么更大的设置会被保留，小的则会消失。这被称为外边距叠加。</p>\n\n",
      "date_published": "2019-09-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "排版介绍",
      "url": "https://mister-hope.com/code/website/css/layout/intro.html",
      "id": "https://mister-hope.com/code/website/css/layout/intro.html",
      "summary": "正常布局流 正常布局流(normal flow)是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式。HTML 元素完全按照源码中出现的先后次序显示。 出现在另一个元素下面的元素被描述为块元素，与出现在另一个元素旁边的内联元素不同，内联元素就像段落中的单个单词一样。 相关信息 关于内联元素和块元素，请见 注意 块元素内容的布局方向被描述为...",
      "content_html": "<h2>正常布局流</h2>\n<p>正常布局流(normal flow)是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式。HTML 元素完全按照源码中出现的先后次序显示。</p>\n\n<p>出现在另一个元素下面的元素被描述为块元素，与出现在另一个元素旁边的内联元素不同，内联元素就像段落中的单个单词一样。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>关于内联元素和块元素，请见 <a href=\"/code/website/css/intro/box.html\" target=\"_blank\">CSS 介绍 → 盒模型</a></p>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>块元素内容的布局方向被描述为块方向。块方向在英语等具有水平书写模式(writing mode)的语言中垂直运行。它可以在任何垂直书写模式的语言中水平运行。对应的内联方向是内联内容(如句子)的运行方向。</p>\n<p>关于文字方向请看 <a href=\"/code/website/css/intro/text-direction.html\" target=\"_blank\">CSS 介绍 → 文字方向</a></p>\n</div>\n<p>当您使用 CSS 创建一个布局时，您正在离开<strong>正常布局流</strong>，但是对于页面上的多数元素，<strong>正常布局流</strong>将完全可以创建您所需要的布局。</p>\n<p>下列布局技术会覆盖默认的布局行为:</p>\n<ul>\n<li><code>display</code> 属性: 标准值为 <code>block</code>, <code>inline</code> 或者 <code>inline-block</code> ，这是素在正常布局流中的表现形式. 过设置 <code>display</code> 的值, 可以使元素使用 <a href=\"/code/website/css/layout/flex.html\" target=\"_blank\">弹性布局</a> 或 <a href=\"/code/website/css/layout/grid.html\" target=\"_blank\">网格布局</a>。</li>\n<li><code>float</code> 属性: 诸如 <code>left</code> 能够让块级元素互相并排成一行，而不是一个堆叠在另一个上面。</li>\n<li><code>position</code> 属性: 允许您精准设置盒子中的盒子的位置，正常布局流中，默认为 <code>static</code> ，使用其它值会引起元素不同的布局方式，例如将元素固定到浏览器视口的左上角。</li>\n<li>表格布局: 表格的布局方式可以用在非表格内容上，可以使用 <code>display: table</code> 和相关属性在非表元素上使用。</li>\n<li>多列布局: 可以让块按列布局，比如报纸的内容就是一列一列排布的。</li>\n</ul>\n<h2>display 属性</h2>\n<p>在 CSS 中实现页面布局的主要方法是设定 <code>display</code> 属性的值。此属性允许我们更改默认的显示方式。正常流中的所有内容都有一个 <code>display</code> 的值，用作元素的默认行为方式。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<p>段落显示在一个段落的下面，这是因为它们的样式是 <code>display:block</code>。</p>\n<p>在段落中的某个文本周围创建链接，则该链接将与文本的其余部分保持内联，并且不会打断到新行。这是因为 <code>&lt;a&gt;</code> 元素默认为 <code>display:inline</code>。</p>\n</div>\n<p>您可以更改此默认显示行为。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<p><code>&lt;li&gt;</code> 元素默认为 <code>display:block</code>，这意味着列表项显示为一个在另一个之下。将显示值更改为 <code>inline</code>，会令它们显示在彼此旁边，就像单词在句子中所做的那样。</p>\n</div>\n<p>您可以更改任何元素的 <code>display</code> 值，这意味着您可以根据内容的语义选择合适的 HTML 元素，而不必关心它们的外观。它们的样子是您可以改变的。</p>\n<h2>弹性盒子(Flexbox)</h2>\n<p>Flexbox 是 CSS 弹性盒子布局模块(Flexible Box Layout Module)的缩写，它被专门设计出来用于创建横向或是纵向的一维页面布局。要使用 flexbox，您只需要在想要进行 flex 布局的父元素上应用 <code>display: flex</code> ，所有直接子元素都将会按照 flex 进行布局。</p>\n\n<p>很多属性可以被应用到 flex 项(flex items)上面。这些属性可以改变 flex 项在 flex 布局中占用宽/高的方式，允许它们通过伸缩来适应可用空间。</p>\n\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>更多详情请见 <a href=\"/code/website/css/layout/flex.html\" target=\"_blank\">CSS 布局 → 弹性模型</a></p>\n</div>\n<h2>Grid 布局</h2>\n<p>Flexbox 用于设计横向或纵向的布局，而 Grid 布局则被设计用于同时在两个维度上把元素按行和列排列整齐。</p>\n<p>指定 <code>display: grid</code> 会转为 Grid 布局。</p>\n<p>使用 <code>grid-template-rows</code> 和 <code>grid-template-columns</code> 两个属性定义行和列的轨道。</p>\n\n<p>一旦您拥有了一个 grid，您也可以显式地将元素摆放在里面，而不是依赖于浏览器进行自动排列。</p>\n<p>利用 <code>grid-column</code> 和 <code>grid-row</code> 两个属性，您可以指定每一个子元素应该从哪一行/列开始，并在哪一行/列结束。这就能够让子元素在多个行/列上展开。</p>\n\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">相关信息</p>\n<p>更多详情请见 <a href=\"/code/website/css/layout/grid.html\" target=\"_blank\">CSS 布局 → 网格布局</a></p>\n</div>\n<h2>定位</h2>\n<p>定位(positioning)能够让我们把一个元素从它原本在正常布局流(normal flow)中应该在的位置移动到另一个位置。定位(positioning)并不是一种用来给您做主要页面布局的方式，它更像是让您去管理和微调页面中的一个特殊项的位置。</p>\n<p>有五种主要的定位类型:</p>\n<ul>\n<li><strong>静态定位</strong>(Static positioning)是每个元素默认的属性——它表示“将元素放在文档布局流的默认位置——没有什么特殊的地方”。</li>\n<li><strong>相对定位</strong>(Relative positioning)允许我们相对于元素在正常的文档流中的位置移动它——包括将两个元素叠放在页面上。这对于微调和精准设计(design pinpointing)非常有用。</li>\n<li><strong>绝对定位</strong>(Absolute positioning)将元素完全从页面的正常布局流(normal layout flow)中移出，类似将它单独放在一个图层中。我们可以将元素相对于页面的 <code>&lt;html&gt;</code> 元素边缘固定，或者相对于该元素的最近被定位祖先元素(nearest positioned ancestor element)。绝对定位在创建复杂布局效果时非常有用，例如通过标签显示和隐藏的内容面板或者通过按钮控制滑动到屏幕中的信息面板。</li>\n<li><strong>固定定位</strong>(Fixed positioning)与绝对定位非常类似，但是它是将一个元素相对浏览器视口固定，而不是相对另外一个元素。 这在创建类似在整个页面滚动过程中总是处于屏幕的某个位置的导航菜单时非常有用。</li>\n<li><strong>粘性定位</strong>(Sticky positioning)是一种新的定位方式，它会让元素先保持和 <code>position: static</code> 一样的定位，当它的相对视口位置(offset from the viewport)达到某一个预设值时，他就会像 <code>position: fixed</code> 一样定位。</li>\n</ul>\n<h3>简单定位</h3>\n\n<h3>相对定位</h3>\n<p>相对定位(relative positioning)让您能够把一个正常布局流(normal flow)中的元素从它的默认位置按坐标进行相对移动。比如将一个图标往下调一点，以便放置文字。</p>\n<p><strong>案例</strong>:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.positioned</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  position: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">relative</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  top: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">30</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  left: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">30</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><p>请注意，<code>top</code> 和 <code>left</code> 不能被理解成向上或向左，而是顶部与左侧与初始距离的位置。</p>\n\n<h3>绝对定位</h3>\n<p>绝对定位用于将元素移出正常布局流(normal flow)，以坐标的形式相对于它的容器定位到 web 页面的任何位置，以创建复杂的布局。有趣的是，它经常被用于与相对定位和浮动的协同工作。</p>\n<p><strong>案例</strong>:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">.positioned</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  position: </span><span style=\"--shiki-light:#383A42;--shiki-dark:#D19A66\">absolute</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  top: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">30</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  left: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">30</span><span style=\"--shiki-light:#986801;--shiki-dark:#E06C75\">px</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div>\n<p>定位元素现在已经与页面布局的其余部分完全分离，并位于页面的顶部。其他两段现在靠在一起，好像之前那个中间段落不存在一样。<code>top</code> 和 <code>left</code> 属性对绝对位置元素的影响不同于相对位置元素。在这一案例当中，他们没有指定元素相对于原始位置的移动程度。相反，在这一案例当中，它们指定元素应该从父元素的顶部和左边的距离(确切地说，是演示窗口元素的距离)。</p>\n<h3>固定定位</h3>\n<p>固定定位(fixed positioning)同绝对定位(absolute positioning)一样，将元素从文档流(document flow)当中移出了。但是，定位的坐标不会应用于\"容器\"边框来计算元素的位置，而是会应用于视口(viewport)边框。利用这一特性，我们可以轻松搞出一个固定位置的菜单，而不受底下的页面滚动的影响。</p>\n\n<h3>粘性定位</h3>\n<p>粘性定位(sticky positioning)是最后一种我们能够使用的定位方式。它将默认的静态定位(static positioning)和固定定位(fixed positioning)相混合。当一个元素被指定了 <code>position: sticky</code> 时，它会在正常布局流中滚动，直到它出现在了我们给它设定的相对于容器的位置，这时候它就会停止随滚动移动，就像它被应用了 <code>position: fixed</code> 一样。</p>\n\n<h2>浮动</h2>\n<p>把一个元素“浮动”(float)起来，会改变该元素本身和在正常布局流(normal flow)中跟随它的其他元素的行为。这一元素会浮动到左侧或右侧，并且从正常布局流(normal flow)中移除，这时候其他的周围内容就会在这个被设置浮动(float)的元素周围环绕。</p>\n<p><code>float</code> 属性有四个可能的值:</p>\n<ul>\n<li><code>left</code>: 将元素浮动到左侧。</li>\n<li><code>right</code>: 将元素浮动到右侧。</li>\n<li><code>none</code>: 默认值, 不浮动。</li>\n<li><code>inherit</code>: 继承父元素的浮动属性。</li>\n</ul>\n\n<h2>多列布局</h2>\n<p>多列布局模组给了我们 一种把内容按列排序的方式，就像文本在报纸上排列那样。由于在 web 内容里让您的用户在一个列上通过上下滚动来阅读两篇相关的文本是一种非常低效的方式，那么把内容排列成多列可能是一种有用的技术。</p>\n<p>要把一个块转变成多列容器(multicol container)，我们可以使用 <code>column-count</code> 属性来告诉浏览器我们需要多少列，也可以使用 <code>column-width</code> 来告诉浏览器以至少某个宽度的尽可能多的列来填充容器。</p>\n\n",
      "date_published": "2019-09-06T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Emmet 语法",
      "url": "https://mister-hope.com/code/website/emmet/",
      "id": "https://mister-hope.com/code/website/emmet/",
      "summary": "简介 所有操作按下 “tab” 键即可瞬间完成 Emmet 是一个快速创建 HTML 和 CSS 的方式，如果您想要成为一个高级 Web 开发者，为了工作效率，您应该掌握 Emmet 语法。",
      "content_html": "<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">简介</p>\n<p>所有操作按下 “tab” 键即可瞬间完成</p>\n</div>\n<p>Emmet 是一个快速创建 HTML 和 CSS 的方式，如果您想要成为一个高级 Web 开发者，为了工作效率，您应该掌握 Emmet 语法。</p>\n<!-- more -->\n<h2>HTML</h2>\n<ul>\n<li><a href=\"/code/website/emmet/html.html\" target=\"_blank\">HTML Emmet 语法</a></li>\n</ul>\n<h2>CSS</h2>\n<ul>\n<li><a href=\"/code/website/emmet/css.html\" target=\"_blank\">CSS Emmet 语法</a></li>\n</ul>\n<h2>其他功能</h2>\n<p>Emmet 还提供了很多内置功能，在 VS Code 中，您可以按下 <code>F1</code> 并输入 <code>emmet</code> 来查看功能列表。详细的功能列表说明请见 <a href=\"https://docs.emmet.io/actions/\" target=\"_blank\" rel=\"noopener noreferrer\">Emmet 文档</a></p>\n",
      "date_published": "2019-09-03T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Emmet"
      ]
    },
    {
      "title": "CSS Emmet",
      "url": "https://mister-hope.com/code/website/emmet/css.html",
      "id": "https://mister-hope.com/code/website/emmet/css.html",
      "summary": "对于 CSS 语法，Emmet 为属性提供了许多预定义的代码段。 添加属性 您可以使用缩写来生成 CSS 属性。如 m 会生成 margin: ;，同时光标会自动置于值处。 同时添加属性与值值 您可以将值直接输入缩写的后面，如果有多个值，您需要用 - 将它们分开，多余的 - 将会被理解为负值。 案例 m10: margin: 10px; m10-20:...",
      "content_html": "<p>对于 CSS 语法，Emmet 为属性提供了许多预定义的代码段。</p>\n<h2>添加属性</h2>\n<p>您可以使用缩写来生成 CSS 属性。如 <code>m</code> 会生成 <code>margin: ;</code>，同时光标会自动置于值处。</p>\n<h2>同时添加属性与值值</h2>\n<p>您可以将值直接输入缩写的后面，如果有多个值，您需要用 <code>-</code> 将它们分开，多余的 <code>-</code> 将会被理解为负值。</p>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">案例</p>\n<ul>\n<li><code>m10</code>: <code>margin: 10px;</code></li>\n<li><code>m10-20</code>: <code>margin: 10px 20px;</code></li>\n<li><code>m-10--20</code>: <code>margin: -10px -20px;</code></li>\n</ul>\n</div>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>请只有在必要(不添加会产生歧义)的情况下添加 <code>-</code> 分隔符，否则 Emmet 可能会错误的理解它。</p>\n</div>\n<h2>值的单位</h2>\n<p>使用整数值扩展缩写时，Emmet 会以 px 单位输出: <code>m10</code> → <code>margin: 10px;</code>。</p>\n<p>使用浮点值扩展缩写时，会以 em 单位输出: <code>m1.5</code> → <code>margin: 1.5em;</code>。</p>\n<p>您也可以在值后面紧跟任何字母字符，来显式提供单位名称: <code>m1.5ex</code> → <code>margin: 1.5ex;</code>，<code>m10foo</code> → <code>margin: 10foo;</code>。</p>\n<p>明确定义单位后，不再需要使用连字符来分隔值: <code>m10ex20em</code> → <code>margin: 10ex 20em;</code>，<code>m10ex-5</code> → <code>margin: 10ex -5px;</code>。</p>\n<h2>值别名</h2>\n<p>Emmet 具有一些常用值的别名:</p>\n<ul>\n<li><code>p</code> → <code>%</code></li>\n<li><code>e</code> → <code>em</code></li>\n<li><code>x</code> → <code>ex</code></li>\n</ul>\n<p>您可以使用别名代替完整的单位:</p>\n<ul>\n<li><code>w100p</code> → <code>width: 100%</code></li>\n<li><code>m10p30e5x</code> → <code>margin: 10% 30em 5ex</code></li>\n</ul>\n<h2>颜色值</h2>\n<p>Emmet 支持十六进制颜色值。<code>#</code> 将自动作为分隔符，所以针对颜色变量，将不再需要 <code>-</code>。</p>\n<ul>\n<li><code>c#3</code> → <code>color: #333;</code></li>\n<li><code>bd5#0s</code> → <code>border: 5px #000 solid</code>。(<code>#</code> 符号可将颜色与 <code>5</code> 分隔开，并且 <code>s</code>(别名为 <code>solid</code>)不是十六进制字符，因此省略了 <code>-</code>。</li>\n</ul>\n<p>颜色变量支持 1-3 位的缩写，表现如下:</p>\n<ul>\n<li><code>#1</code> → <code>#111111</code></li>\n<li><code>#e0</code> → <code>#e0e0e0</code></li>\n<li><code>#fc0</code> → <code>#ffcc00</code></li>\n</ul>\n<h2>无单元属性</h2>\n<p>一些 CSS 属性默认为无单位输出:</p>\n<ul>\n<li><code>lh2</code>→ <code>line-height: 2;</code></li>\n<li><code>fw400</code>→ <code>font-weight: 400</code>。</li>\n</ul>\n<p>这些值是: <code>z-index</code>，<code>line-height</code>，<code>opacity</code> 和 <code>font-weight</code></p>\n<h2>重要修饰符</h2>\n<p>您可以在任何 CSS 缩写的末尾添加 <code>!</code> 后缀来添加 <code>!important</code></p>\n<p><code>p!+m10e!</code>:</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">padding: !important;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">margin: 10em !important;</span></span></code></pre>\n</div><h2>输出多个属性</h2>\n<p>正如上方演示，您可以利用 <code>+</code> 同时输出多个 CSS 属性。</p>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">Snippets</p>\n<p>完整的 CSS snippets 请见 <a href=\"https://github.com/emmetio/emmet/blob/master/snippets/css.json\" target=\"_blank\" rel=\"noopener noreferrer\">Emmet Repo</a></p>\n</div>\n",
      "date_published": "2019-09-03T00:00:00.000Z",
      "date_modified": "2024-01-25T17:47:26.000Z",
      "authors": [],
      "tags": [
        "Emmet"
      ]
    },
    {
      "title": "HTML Emmet",
      "url": "https://mister-hope.com/code/website/emmet/html.html",
      "id": "https://mister-hope.com/code/website/emmet/html.html",
      "summary": "元素创建 在编辑器中输入元素名称之后按下 tab 即可自动补全生成 HTML 标签，即使不是标准的 HTML 标签。 创建文档 输入: ! 或者 html:5 将创建 HTML 基本结构。 结构操作 子元素 使用 > 生成子元素 案例 div>ul>li: 兄弟元素 使用 + 生成兄弟元素 案例 div+p+bq: 上移 使用 ^ 上移一级 案例 di...",
      "content_html": "<h2>元素创建</h2>\n<ol>\n<li>在编辑器中输入元素名称之后按下 tab 即可自动补全生成 HTML 标签，即使不是标准的 HTML 标签。</li>\n</ol>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">创建文档</p>\n<p>输入: <code>!</code> 或者 <code>html:5</code> 将创建 HTML 基本结构。</p>\n</div>\n<h2>结构操作</h2>\n<h3>子元素</h3>\n<p>使用 <code>&gt;</code> 生成子元素</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>div&gt;ul&gt;li</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>兄弟元素</h3>\n<p>使用 <code>+</code> 生成兄弟元素</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>div+p+bq</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">blockquote</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">blockquote</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>上移</h3>\n<p>使用 <code>^</code> 上移一级</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>div+div&gt;p&gt;span+em^bq</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">span</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">em</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">blockquote</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">blockquote</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>重复</h3>\n<p>使用 <code>*</code> 生成多个相同元素。</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>div&gt;ul&gt;li*5</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>分组</h3>\n<p>使用 <code>()</code> 将元素分组</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>+</code> 后面的元素与括号中的第一个元素属于兄弟关系</p>\n<p><code>div&gt;(header&gt;ul&gt;li*2)+footer&gt;p</code>:</p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">header</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">      &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">header</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">footer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">footer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div></details>\n<h2>属性操作</h2>\n<h3>ID 与 class</h3>\n<p>元素与 <code>id</code> 属性值之间用 <code>#</code> 分隔，与 <code>class</code> 属性值之间用 <code>.</code> 分隔</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>div#header+div.page+div#footer.class1.class2.class3</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"header\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"page\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> id</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"footer\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"class1 class2 class3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">div</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>自定义属性</h3>\n<p>在 Emmet 中，使用 <code>[]</code> 标记其他属性。</p>\n<p>您无需输入引号，直接使用 <code>[属性1=值1 属性2=值2 ... ]</code> 即可。</p>\n<ul>\n<li>\n<p>您可以在方括号内放置任意数量的属性。</p>\n</li>\n<li>\n<p>您不必指定属性值: <code>td[colspan title]</code> 会生成 <code>&lt;td colspan=\"\" title=\"\"&gt;</code>。</p>\n<p>接下来您可以通过按下 tab 将光标顺序移动至每个空属性内，这会让您很方便的输入内容。</p>\n</li>\n<li>\n<p>您可以使用单引号或双引号来引用属性值。如果值不包含空格，则无需引用它们。如: <code>td[title=hello colspan=3]</code></p>\n</li>\n</ul>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>td[title=\"Hello world!\" colspan=3]</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">td</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> title</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Hello world!\"</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> colspan</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">td</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>项目编号</h3>\n<p>用 <code>$</code> 符号实现 <code>1</code> 到 <code>n</code> 的自动编号 (<code>*</code> 实现多个元素)</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>li.item$*3</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item1\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item2\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<p>可在 <code>$</code> 后添加 <code>@n</code> 修改编号的起始值为 <code>n</code>。</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>li.item$@3*3</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item5\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<p>可在 “<code>$</code>” 后添加 “<code>@-</code>” 修改编号的方向。</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>li.item$@-3*3</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item5\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item4\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item3\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<p>您可以连续使用多个 <code>$</code> 以零填充数字。</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>ul&gt;li.item$$$*5</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item001\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item002\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item003\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item004\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> class</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"item005\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">li</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">ul</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<h3>文本</h3>\n<p>使用 <code>{}</code> 添加文本内容</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p><code>a[href=me.html]{click me}</code>:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"me.html\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;click me&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></details>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>请注意，<code>{text}</code> 是作为一个单独的元素使用和解析的。</p>\n<p>请理解以下案例:</p>\n<div class=\"language-html\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- a{click}+b{here} --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;click&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;here&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- a&gt;{click}+b{here} --&gt;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;click&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;here&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">b</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">&lt;!-- p&gt;{Click }+a{here}+{ to continue} --&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;Click &lt;</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> href</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">=</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;here&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt; to continue&lt;/</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">&gt;</span></span></code></pre>\n</div></div>\n<h2>隐式标签名称</h2>\n<p>即使使用功能强大的缩写引擎(可以从短缩写扩展大型 HTML 结构)，编写标签名称也可能非常繁琐。</p>\n<p>在许多情况下，您可以跳过键入标签名称的操作，而 Emmet 会自动为您生成一个。例如，您可以简单地将 <code>div.content</code> 写为 <code>.content</code>，Emmet 将自动扩展为 <code>&lt;div class=\"content\"&gt;&lt;/div&gt;</code>。</p>\n<h3>工作原理</h3>\n<p>扩展缩写词时，Emmet 会尝试在其内部扩展缩写词的地方获取上下文进行推断。如果成功捕获了上下文，Emmet 将使用其名称来解析隐式名称。</p>\n<details class=\"hint-container details\"><summary>案例</summary>\n<p>| Emmet 缩写                  | Emmet 实际输出                  |\n|</p>\n</details>\n",
      "date_published": "2019-09-03T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Emmet"
      ]
    },
    {
      "title": "CSS 介绍",
      "url": "https://mister-hope.com/code/website/css/intro/",
      "id": "https://mister-hope.com/code/website/css/intro/",
      "content_html": "",
      "date_published": "2019-09-06T00:00:00.000Z",
      "date_modified": "2024-02-05T17:43:05.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "文字样式",
      "url": "https://mister-hope.com/code/website/css/intro/font.html",
      "id": "https://mister-hope.com/code/website/css/intro/font.html",
      "summary": "文本 元素中的文本是布置在元素的内容框中。以内容区域的左上角作为起点 (或者是右上角，是在 RTL 语言的情况下)，一直延续到行的结束部分。一旦达到行的尽头，它就会进到下一行，然后继续，再接着下一行，直到所有内容都放入了盒子中。文本内容表现地像一些内联元素，被布置到相邻的行上，除非到达了行的尽头，否则不会换行，或者您想强制地手动造成换行的话，您可以使用...",
      "content_html": "<h2>文本</h2>\n<p>元素中的文本是布置在元素的内容框中。以内容区域的左上角作为起点 (或者是右上角，是在 RTL 语言的情况下)，一直延续到行的结束部分。一旦达到行的尽头，它就会进到下一行，然后继续，再接着下一行，直到所有内容都放入了盒子中。文本内容表现地像一些内联元素，被布置到相邻的行上，除非到达了行的尽头，否则不会换行，或者您想强制地手动造成换行的话，您可以使用 <code>&lt;br&gt;</code> 元素。</p>\n<p>用于样式文本的 CSS 属性通常可以分为两类:</p>\n<ul>\n<li><strong>字体样式</strong>: 作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体，等等。</li>\n<li><strong>文本布局风格</strong>: 作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。</li>\n</ul>\n<div class=\"hint-container warning\">\n<p class=\"hint-container-title\">注意</p>\n<p>包含在元素中的文本是作为一个单一的实体。您不能将文字其中一部分选中或添加样式。</p>\n<p>如果您要这么做，那么您必须要用适合的元素来包装它们，比如 (<code>&lt;span&gt;</code> 或者 <code>&lt;strong&gt;</code>)。</p>\n<p>您也可以使用伪元素，比如 <code>::first-letter</code> (选中元素文本的第一个字母), <code>::first-line</code> (选中元素文本的第一行), 或者 <code>::selection</code> (当前光标双击选中的文本)</p>\n</div>\n<h2>字体</h2>\n<h3>颜色</h3>\n<p><code>color</code> 属性设置选中元素的前景内容的颜色 (通常指文本，也包括诸如 <code>text-decoration</code> 属性设置的文本下方或上方的线)。</p>\n<p>color 也可以接受任何合法的 CSS 颜色单位。</p>\n\n<h3>字体种类</h3>\n<p>要在您的文本上设置一个不同的字体，您可以使用 font-family 属性，这个允许您为浏览器指定一个字体 (或者一个字体的列表)，然后浏览器可以将这种字体应用到选中的元素上。浏览器只会把在当前机器上可用的字体应用到当前正在访问的网站上；如果字体不可用，那么就会用浏览器默认的字体代替。</p>\n<div class=\"language-css\" data-highlighter=\"shiki\" data-ext=\"css\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\">p</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">  font-family: </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">arial</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n</div><h4>网页安全字体</h4>\n<p>只有某几个字体通常可以应用到所有系统，因此可以毫无顾忌地使用。这些都是所谓的<strong>网页安全字体</strong>。</p>\n<p>| 字体名称        | 泛型       | 注意                                                                                                                                               |\n|</p>\n",
      "date_published": "2019-09-05T00:00:00.000Z",
      "date_modified": "2024-01-25T18:01:12.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    }
  ]
}