<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://mister-hope.com/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://mister-hope.com/</id>
  <title>Mr.Hope</title>
  <subtitle>Where there is light, there is hope.</subtitle>
  <icon>https://mister-hope.com/favicon.ico</icon>
  <rights>基于 MIT 协议，© 2019-至今 Mr.Hope</rights>
  <updated>2024-02-04T07:55:24.160Z</updated>
  <generator>@vuepress/plugin-feed</generator>
  <link rel="self" href="https://mister-hope.com/atom.xml"/>
  <link rel="alternate" href="https://mister-hope.com/"/>
  <category term="基础"/>
  <category term="Vue"/>
  <category term="Android"/>
  <category term="快速上手"/>
  <category term="HTML"/>
  <category term="Git"/>
  <category term="后端"/>
  <category term="Node.js"/>
  <category term="小程序"/>
  <category term="前端"/>
  <category term="jQuery"/>
  <category term="JavaScript"/>
  <category term="设计"/>
  <category term="Linux"/>
  <category term="随笔"/>
  <category term="物理"/>
  <category term="GitHub"/>
  <category term="教程"/>
  <category term="软件"/>
  <category term="VS Code"/>
  <category term="C"/>
  <category term="C++"/>
  <category term="dart"/>
  <category term="Java"/>
  <category term="JSON"/>
  <category term="Markdown"/>
  <category term="PHP"/>
  <category term="Python"/>
  <category term="TypeScript"/>
  <category term="YAML"/>
  <category term="CSS"/>
  <category term="Emmet"/>
  <contributor>
    <name>小灰</name>
  </contributor>
  <contributor>
    <name>李欣桐</name>
  </contributor>
  <contributor>
    <name>阮一峰</name>
  </contributor>
  <contributor>
    <name>廖雪峰</name>
  </contributor>
  <entry>
    <title type="text">Windows 开发</title>
    <id>https://mister-hope.com/code/windows/developers.html</id>
    <link href="https://mister-hope.com/code/windows/developers.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>本文主要介绍 Windows 11 系统下，与开发相关的功能。</p>
<h2>WSL</h2>
<p>WSL 是 Windows Subsystem for Linux 的缩写，即 Windows 的 Linux 子系统。Windows 11 支持 WSL2，同时支持 wslg，即 WSL 图形化。</p>
<p>你可以很方便的启用 Windows For Linux 子系统，然后在 Windows 11 上安装 Linux 发行版，如 Ubuntu、Debian、Kali 等，然后在 Linux 环境下进行开发，同时启用 wslg，即可在 Windows 11 上使用 Linux 图形化应用如 Firefox 等进行调试。</p>]]></summary>
    <content type="html"><![CDATA[<p>本文主要介绍 Windows 11 系统下，与开发相关的功能。</p>
<h2>WSL</h2>
<p>WSL 是 Windows Subsystem for Linux 的缩写，即 Windows 的 Linux 子系统。Windows 11 支持 WSL2，同时支持 wslg，即 WSL 图形化。</p>
<p>你可以很方便的启用 Windows For Linux 子系统，然后在 Windows 11 上安装 Linux 发行版，如 Ubuntu、Debian、Kali 等，然后在 Linux 环境下进行开发，同时启用 wslg，即可在 Windows 11 上使用 Linux 图形化应用如 Firefox 等进行调试。</p>
<h3>安装 WSL</h3>
<p>你可以使用单个命令安装运行 WSL 所需的一切内容。 在管理员模式下打开 PowerShell 或 Windows 命令提示符，方法是右键单击并选择“以管理员身份运行”，输入 <code>wsl --install</code> 命令，然后重启计算机。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>有关 WSL 的详细内容，详见 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/" target="_blank" rel="noopener noreferrer">WSL 官方文档</a>。</p>
</div>
<h2>WSA</h2>
<p>WSA 是 Windows Subsystem for Android 的缩写，即 Windows 的 Android 子系统。Windows 11 支持 WSA，你可以在 Windows 11 上安装 Android 应用，如微信、QQ、抖音等，然后在 Windows 11 上使用。</p>
<p>默认情况下，你只能通过 WSA 内置的 Amazon 应用商店安装应用，但是你可以打开开发者模式通过 adb 安装任意应用的 APK。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>有关 WSA 的详细内容，详见 <a href="https://learn.microsoft.com/zh-cn/windows/android/wsa/" target="_blank" rel="noopener noreferrer">WSA 官方文档</a>。</p>
</div>
<h2>Windows 终端</h2>
<p>Windows 终端是一个新式主机应用程序，它面向你喜爱的命令行 shell，如命令提示符、PowerShell 和 bash（通过适用于 Linux 的 Windows 子系统 (WSL)）。 它的主要功能包括多个选项卡、窗格、Unicode 和 UTF-8 字符支持、GPU 加速文本呈现引擎，你还可用它来创建你自己的主题并自定义文本、颜色、背景和快捷方式。</p>
<p>更多内容详见 <a href="/software/tool/terminal/" target="_blank">软件 → Windows 终端</a>。</p>
<h2>PowerToys</h2>
<p>Microsoft PowerToys 是一组实用工具，可帮助高级用户调整和简化其 Windows 体验，从而提高工作效率。</p>
<p>更多内容详见 <a href="/software/tool/power-toys.html" target="_blank">软件 → PowerToys</a>。</p>
]]></content>
    <category term="基础"/>
    <published>2024-01-25T17:47:26.000Z</published>
  </entry>
  <entry>
    <title type="text">Windows 版本</title>
    <id>https://mister-hope.com/code/windows/version.html</id>
    <link href="https://mister-hope.com/code/windows/version.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>简介</h2>
<p>Microsoft Windows 操作系统是美国微软公司研发的一套操作系统，它问世于 1985 年，起初仅仅是 Microsoft-DOS 模拟环境，后续的系统版本由于微软不断的更新升级，不但易用，也当前应用最广泛的操作系统。</p>
<p>Windows 采用了图形化模式 GUI，比起从前的 DOS 需要输入指令使用的方式，更为人性化。随着计算机硬件和软件的不断升级，微软的 Windows也在不断升级，从架构的16位、32位再到64位,系统版本从最初的 Windows1.0到大家熟知的 Windows95、 Windows98、 Windows2000、 Windows XP、 Windows Vista、 Windows7、Windows8、Windows8.1、Windows10、Windows11 和 Windows Server 服务器企业级操作系统，不断持续更新.</p>]]></summary>
    <content type="html"><![CDATA[<h2>简介</h2>
<p>Microsoft Windows 操作系统是美国微软公司研发的一套操作系统，它问世于 1985 年，起初仅仅是 Microsoft-DOS 模拟环境，后续的系统版本由于微软不断的更新升级，不但易用，也当前应用最广泛的操作系统。</p>
<p>Windows 采用了图形化模式 GUI，比起从前的 DOS 需要输入指令使用的方式，更为人性化。随着计算机硬件和软件的不断升级，微软的 Windows也在不断升级，从架构的16位、32位再到64位,系统版本从最初的 Windows1.0到大家熟知的 Windows95、 Windows98、 Windows2000、 Windows XP、 Windows Vista、 Windows7、Windows8、Windows8.1、Windows10、Windows11 和 Windows Server 服务器企业级操作系统，不断持续更新.</p>
<p>目前，最新的消费者版本是 Windows 11。</p>
]]></content>
    <category term="基础"/>
    <published>2024-01-25T17:47:26.000Z</published>
  </entry>
  <entry>
    <title type="text">创建 Vue 应用</title>
    <id>https://mister-hope.com/code/vue/core/app.html</id>
    <link href="https://mister-hope.com/code/vue/core/app.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>应用实例</h2>
<p>每个 Vue 应用都是通过 <code>createApp</code> 函数创建一个新的<strong>应用实例</strong>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* 根组件选项 */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>应用实例</h2>
<p>每个 Vue 应用都是通过 <code>createApp</code> 函数创建一个新的<strong>应用实例</strong>：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* 根组件选项 */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>根组件</h2>
<p>我们传入 <code>createApp</code> 的对象实际上是一个组件，每个应用都需要一个“根组件”，其他组件将作为其子组件。</p>
<p>如果你使用的是单文件组件，我们可以直接从另一个文件中导入根组件。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token comment">// 从一个单文件组件中导入根组件</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>虽然许多示例只需要一个组件，但大多数真实的应用都是由一棵嵌套的、可重用的组件树组成的。例如，一个待办事项 (Todos) 应用的组件树可能是这样的：</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>App (root component)
├─ TodoList
│  └─ TodoItem
│     ├─ TodoDeleteButton
│     └─ TodoEditButton
└─ TodoFooter
   ├─ TodoClearButton
   └─ TodoStatistics
</code></pre></div><h2>挂载应用</h2>
<p>应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>应用根组件的内容将会被渲染在容器元素里面。容器元素自己将不会被视为应用的一部分。</p>
<p><code>.mount()</code> 方法应该始终在整个应用配置和资源注册完成后被调用。同时请注意，不同于其他资源注册方法，它的返回值是根组件实例而非应用实例。</p>
<h3>DOM 中的根组件模板</h3>
<p>当在未采用构建流程的情况下使用 Vue 时，我们可以在挂载容器中直接书写根组件模板：</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>count++<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>当根组件没有设置 <code>template</code> 选项时，Vue 将自动使用容器的 <code>innerHTML</code> 作为模板。</p>
</div>
<h2>应用配置</h2>
<p>应用实例会暴露一个 <code>.config</code> 对象允许我们配置一些应用级的选项，例如定义一个应用级的错误处理器，用来捕获所有子组件上的错误：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 处理错误 */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>应用实例还提供了一些方法来注册应用范围内可用的资源，例如注册一个组件：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"TodoDeleteButton"</span><span class="token punctuation">,</span> TodoDeleteButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这使得 <code>TodoDeleteButton</code> 在应用的任何地方都是可用的。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>确保在挂载应用实例之前完成所有应用配置！</p>
</div>
<h2>多个应用实例</h2>
<p>应用实例并不只限于一个。<code>createApp</code> API 允许你在同一个页面中创建多个共存的 Vue 应用，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app1 <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app1<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#container-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app2 <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app2<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#container-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果你正在使用 Vue 来增强服务端渲染 HTML，并且只想要 Vue 去控制一个大型页面中特殊的一小部分，应避免将一个单独的 Vue 应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p>
]]></content>
    <published>2023-02-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">快速上手 Vue.js</title>
    <id>https://mister-hope.com/code/vue/core/get-started.html</id>
    <link href="https://mister-hope.com/code/vue/core/get-started.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>Vue.js 是什么</h2>
<h2>起步</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>您应当已了解关于 HTML、CSS 和 JavaScript 的中级知识。</p>
</div>
<p><a href="https://cn.vuejs.org/guide/quick-start.html" target="_blank" rel="noopener noreferrer">安装</a></p>
<p>尝试 Vue.js 最简单的方法是使用 <a href="https://sfc.vuejs.org/" target="_blank" rel="noopener noreferrer">SFC Playground</a>。您可以在浏览器新标签页中打开它，跟着例子自己进行一些尝试。</p>]]></summary>
    <content type="html"><![CDATA[<h2>Vue.js 是什么</h2>
<h2>起步</h2>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>您应当已了解关于 HTML、CSS 和 JavaScript 的中级知识。</p>
</div>
<p><a href="https://cn.vuejs.org/guide/quick-start.html" target="_blank" rel="noopener noreferrer">安装</a></p>
<p>尝试 Vue.js 最简单的方法是使用 <a href="https://sfc.vuejs.org/" target="_blank" rel="noopener noreferrer">SFC Playground</a>。您可以在浏览器新标签页中打开它，跟着例子自己进行一些尝试。</p>
<p>当然，由于大多数浏览器都支持 ES Module，你可以直接导入 Vue:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span>
    createApp<span class="token punctuation">,</span>
    ref<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/vue@3/dist/vue.esm-browser.js"</span><span class="token punctuation">;</span>

  <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Hello Vue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        message<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p><code>vue-cli</code> 已经过时，不建议在新项目中使用，请使用 <code>vite</code></p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>Mr.Hope <strong>不推荐</strong> 新手直接使用 <code>vite</code> 或者 <code>webpack</code> 之类的 Bundler 进行上手，尤其是在您不熟悉基于 Node.js 的构建工具的情况下。</p>
<p>请使用 CDN 的方式引入 Vue，并充分熟悉 Vue 的基础知识后再引入 Bundler。</p>
</div>
]]></content>
    <category term="Vue"/>
    <published>2023-02-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">开发环境安装</title>
    <id>https://mister-hope.com/code/vue/core/install.html</id>
    <link href="https://mister-hope.com/code/vue/core/install.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>环境准备</h2>
<h3>VS Code 安装</h3>
<ul>
<li><a href="/software/vscode/install.html" target="_blank">安装 VS Code</a></li>
</ul>
<h4>开发指南</h4>
<ol>
<li>
<p>使用 VS Code 打开项目文件夹。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>请打开 VS Code 选择菜单栏中的 “文件-打开文件夹”，或在文件夹上 “右键——使用 VS Code 打开” 或在文件夹内部空白处 “右键——使用 VS Code 打开”。</p>
</div>
</li>
<li>
<p>打开终端(快捷键 <code>Ctrl + `</code> )。</p>
</li>
<li>
<p>在终端中输入相关指令即可执行相关功能。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>环境准备</h2>
<h3>VS Code 安装</h3>
<ul>
<li><a href="/software/vscode/install.html" target="_blank">安装 VS Code</a></li>
</ul>
<h4>开发指南</h4>
<ol>
<li>
<p>使用 VS Code 打开项目文件夹。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>请打开 VS Code 选择菜单栏中的 “文件-打开文件夹”，或在文件夹上 “右键——使用 VS Code 打开” 或在文件夹内部空白处 “右键——使用 VS Code 打开”。</p>
</div>
</li>
<li>
<p>打开终端(快捷键 <code>Ctrl + `</code> )。</p>
</li>
<li>
<p>在终端中输入相关指令即可执行相关功能。</p>
</li>
</ol>
<h3>Git 安装</h3>
<ul>
<li><a href="/software/git/install.html" target="_blank">安装 Git</a></li>
</ul>
<h3>Node.js 环境安装</h3>
<p>请先安装 Node.js 并将 npm 与 Node.js 添加至 path。</p>
<ul>
<li>
<p><a href="/code/node-js/install.html" target="_blank">安装 Node.js</a></p>
</li>
<li>
<p><a href="/code/windows/env-variable.html" target="_blank">添加到 path</a></p>
</li>
</ul>
<h2>开发工具安装</h2>
<p>Vue 官方提供的浏览器插件 Vue.js devtools 可以更好的帮助开发。</p>
<ul>
<li>用 Chrome 通过代理打开 <a href="https://chrome.google.com/webstore/detail/nhdogjmejiglipccpnnnanhbledajbpd" target="_blank" rel="noopener noreferrer">Vue.js devtools 网址</a>，安装 Vue.js devtools 开发工具</li>
<li>使用 Edge 打开 <a href="https://microsoftedge.microsoft.com/addons/detail/vuejs-devtools/olofadcdnkkjdfgjcmjaadnlehnnihnl?hl=zh-CN" target="_blank" rel="noopener noreferrer">Vue.js devtools 网址</a>，安装 Vue.js devtools 开发工具</li>
</ul>
]]></content>
    <category term="Vue"/>
    <published>2023-02-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Vue 单文件组件</title>
    <id>https://mister-hope.com/code/vue/core/sfc.html</id>
    <link href="https://mister-hope.com/code/vue/core/sfc.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>介绍</h2>
<p>Vue 的单文件组件 (即 <code>*.vue</code> 文件，简称 <strong>SFC</strong>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ greeting }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.greeting</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>介绍</h2>
<p>Vue 的单文件组件 (即 <code>*.vue</code> 文件，简称 <strong>SFC</strong>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">greeting</span><span class="token operator">:</span> <span class="token string">"Hello World!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ greeting }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.greeting</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>如你所见，Vue 的单文件组件是 HTML、CSS 和 JavaScript 三种元素的自然延伸。<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。</p>
<h2>总览</h2>
<h2>总览 {#overview}</h2>
<p>一个 Vue 单文件组件 (SFC)，通常使用 <code>*.vue</code> 作为文件扩展名，它是一种使用了类似 HTML 语法的自定义文件格式，用于定义 Vue 组件。一个 Vue 单文件组件在语法上是兼容 HTML 的。</p>
<p>每一个 <code>*.vue</code> 文件都由三种顶层语块构成：<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>，以及一些其他的自定义块：</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"Hello world!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.example</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom1</span><span class="token punctuation">&gt;</span></span>
  This could be e.g. documentation for the component.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom1</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>相应语言块 {#language-blocks}</h2>
<h3><code>&lt;template&gt;</code> {#template}</h3>
<ul>
<li>
<p>每个 <code>*.vue</code> 文件最多可以包含一个顶层 <code>&lt;template&gt;</code> 块。</p>
</li>
<li>
<p>语块包裹的内容将会被提取、传递给 <code>@vue/compiler-dom</code>，预编译为 JavaScript 渲染函数，并附在导出的组件上作为其 <code>render</code> 选项。</p>
</li>
</ul>
<h3><code>&lt;script&gt;</code> {#script}</h3>
<ul>
<li>
<p>每个 <code>*.vue</code> 文件最多可以包含一个 <code>&lt;script&gt;</code> 块。(使用 <a href="/api/sfc-script-setup.html" target="_blank"><code>&lt;script setup&gt;</code></a> 的情况除外)</p>
</li>
<li>
<p>这个脚本代码块将作为 ES 模块执行。</p>
</li>
<li>
<p><strong>默认导出</strong>应该是 Vue 的组件选项对象，可以是一个对象字面量或是 <a href="/api/general.html#definecomponent" target="_blank">defineComponent</a> 函数的返回值。</p>
</li>
</ul>
<h3><code>&lt;script setup&gt;</code> {#script-setup}</h3>
<ul>
<li>
<p>每个 <code>*.vue</code> 文件最多可以包含一个 <code>&lt;script setup&gt;</code>。(不包括一般的 <code>&lt;script&gt;</code>)</p>
</li>
<li>
<p>这个脚本块将被预处理为组件的 <code>setup()</code> 函数，这意味着它将<strong>为每一个组件实例</strong>都执行。<code>&lt;script setup&gt;</code> 中的顶层绑定都将自动暴露给模板。要了解更多细节，请看 <a href="/api/sfc-script-setup"><code>&lt;script setup&gt;</code> 的专门文档</a>。</p>
</li>
</ul>
<h3><code>&lt;style&gt;</code> {#style}</h3>
<ul>
<li>
<p>每个 <code>*.vue</code> 文件可以包含多个 <code>&lt;style&gt;</code> 标签。</p>
</li>
<li>
<p>一个 <code>&lt;style&gt;</code> 标签可以使用 <code>scoped</code> 或 <code>module</code> attribute (查看 <a href="/api/sfc-css-features">SFC 样式功能</a>了解更多细节) 来帮助封装当前组件的样式。使用了不同封装模式的多个 <code>&lt;style&gt;</code> 标签可以被混合入同一个组件。</p>
</li>
</ul>
<h3>自定义块 {#custom-blocks}</h3>
<p>在一个 <code>*.vue</code> 文件中可以为任何项目特定需求使用额外的自定义块。举个例子，一个用作写文档的 <code>&lt;docs&gt;</code> 块。这里是一些自定义块的真实用例：</p>
<ul>
<li><a href="https://gridsome.org/docs/querying-data/" target="_blank" rel="noopener noreferrer">Gridsome：<code>&lt;page-query&gt;</code></a></li>
<li><a href="https://github.com/wheatjs/vite-plugin-vue-gql" target="_blank" rel="noopener noreferrer">vite-plugin-vue-gql：<code>&lt;gql&gt;</code></a></li>
<li><a href="https://github.com/intlify/bundle-tools/tree/main/packages/vite-plugin-vue-i18n#i18n-custom-block" target="_blank" rel="noopener noreferrer">vue-i18n：<code>&lt;i18n&gt;</code></a></li>
</ul>
<p>自定义块的处理需要依赖工具链。如果你想要在构建中集成你的自定义语块，请参见<a href="/guide/scaling-up/tooling.html#sfc-custom-block-integrations" target="_blank">相关工具链指南</a>获取更多细节。</p>
<h2>自动名称推导 {#automatic-name-inference}</h2>
<p>SFC 在以下场景中会根据<strong>文件名</strong>自动推导其组件名：</p>
<ul>
<li>开发警告信息格式</li>
<li>DevTools 审阅</li>
<li>递归组件自引用。例如一个名为 <code>FooBar.vue</code> 的组件可以在模板中通过 <code>&lt;FooBar/&gt;</code> 引用自己。(同名情况下) 这比明确注册/导入的组件优先级低。</li>
</ul>
<h2>预处理器 {#pre-processors}</h2>
<p>代码块可以使用 <code>lang</code> 这个 attribute 来声明预处理器语言，最常见的用例就是对 <code>&lt;script&gt;</code> 块使用 TypeScript：</p>
<div class="language-vue-html" data-ext="vue-html" data-title="vue-html"><pre class="language-vue-html"><code>&lt;script lang="ts"&gt;
  // use TypeScript
&lt;/script&gt;
</code></pre></div><p><code>lang</code> 在任意块上都能使用，比如我们可以在 <code>&lt;style&gt;</code> 标签上使用 <a href="https://sass-lang.com/" target="_blank" rel="noopener noreferrer">SASS</a> 或是 <code>&lt;template&gt;</code> 上使用 <a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="noopener noreferrer">Pug</a>：</p>
<div class="language-vue-html" data-ext="vue-html" data-title="vue-html"><pre class="language-vue-html"><code>&lt;template lang="pug"&gt;
p {{ msg }}
&lt;/template&gt;

&lt;style lang="scss"&gt;
  $primary-color: #333;
  body {
    color: $primary-color;
  }
&lt;/style&gt;
</code></pre></div><p>注意对各种不同的预处理的集成会导致工具链的不同，你应该查看相应的工具链文档了解细节：</p>
<ul>
<li><a href="https://vitejs.dev/guide/features.html#css-pre-processors" target="_blank" rel="noopener noreferrer">Vite</a></li>
<li><a href="https://cli.vuejs.org/guide/css.html#pre-processors" target="_blank" rel="noopener noreferrer">Vue CLI</a></li>
<li><a href="https://vue-loader.vuejs.org/guide/pre-processors.html#using-pre-processors" target="_blank" rel="noopener noreferrer">webpack + vue-loader</a></li>
</ul>
<h2>Src 导入 {#src-imports}</h2>
<p>如果你更喜欢将 <code>*.vue</code> 组件分散到多个文件中，可以为一个语块使用 <code>src</code> 这个 attribute 来导入一个外部文件：</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./template.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./style.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>请注意 <code>src</code> 导入和 Webpack 的模块请求遵循相同的路径解析规则，这意味着：</p>
<ul>
<li>相对路径需要以 <code>./</code> 开头</li>
<li>你也可以从 npm 依赖中导入资源</li>
</ul>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 从所安装的 "todomvc-app-css" npm 包中导入一个文件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todomvc-app-css/index.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><code>src</code> 导入对自定义语块也同样适用：</p>
<div class="language-vue" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>unit-test</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./unit-test.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>unit-test</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2>注释 {#comments}</h2>
<p>在每一个语块中你都可以按照相应语言 (HTML、CSS、JavaScript 和 Pug 等等) 的语法书写注释。对于顶层注释，请使用 HTML 的注释语法 <code>&lt;!-- comment contents here --&gt;</code></p>
]]></content>
    <category term="Vue"/>
    <published>2023-02-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">模板语法</title>
    <id>https://mister-hope.com/code/vue/core/template.html</id>
    <link href="https://mister-hope.com/code/vue/core/template.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>
<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>
<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>]]></summary>
    <content type="html"><![CDATA[<p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。</p>
<p>在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p>
<p>如果你对虚拟 DOM 的概念比较熟悉，并且偏好直接使用 JavaScript，你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板。但请注意，这将不会享受到和模板同等级别的编译时优化。</p>
<h2>文本插值</h2>
<p>最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 (即双大括号)：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;span&gt;Message: {{ msg }}&lt;/span&gt;
</code></pre></div><p>双大括号标签会被替换为相应组件实例中 <code>msg</code> 属性的值。同时每次 <code>msg</code> 属性更改时它也会同步更新。</p>
<h2>原始 HTML</h2>
<p>双大括号会将数据解释为纯文本，而不是 HTML。若想插入 HTML，你需要使用 <code>v-html</code> 指令：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;p&gt;Using text interpolation: {{ rawHtml }}&lt;/p&gt;
&lt;p&gt;Using v-html directive: &lt;span v-html="rawHtml"&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre></div><p>Using text interpolation: {{ rawHtml }}</p>
<p>Using v-html directive: <span v-html="rawHtml"></span></p>
<p>这里我们遇到了一个新的概念。这里看到的 <code>v-html</code> attribute 被称为一个指令。指令由 <code>v-</code> 作为前缀，表明它们是一些由 Vue 提供的特殊 attribute，你可能已经猜到了，它们将为渲染的 DOM 应用特殊的响应式行为。这里我们做的事情简单来说就是：在当前组件实例上，将此元素的 innerHTML 与 <code>rawHtml</code> 属性保持同步。</p>
<p><code>span</code> 的内容将会被替换为 <code>rawHtml</code> 属性的值，插值为纯 HTML——数据绑定将会被忽略。</p>
<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>你不能使用 <code>v-html</code> 来拼接组合模板，因为 Vue 不是一个基于字符串的模板引擎。在使用 Vue 时，应当使用组件作为 UI 重用和组合的基本单元。</p>
</div>
<div class="hint-container warning">
<p class="hint-container-title">安全警告</p>
<p>在网站上动态渲染任意 HTML 是非常危险的，因为这非常容易造成 XSS 漏洞。请仅在内容安全可信时再使用 <code>v-html</code>，并且永远不要使用用户提供的 HTML 内容。</p>
</div>
<h2>Attribute 绑定</h2>
<p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用 <code>v-bind</code> 指令：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;div v-bind:id="dynamicId"&gt;&lt;/div&gt;
</code></pre></div><p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute 与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p>
<h3>简写</h3>
<p>因为 <code>v-bind</code> 非常常用，我们提供了特定的简写语法：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;div :id="dynamicId"&gt;&lt;/div&gt;
</code></pre></div><p>开头为 <code>:</code> 的 attribute 可能和一般的 HTML attribute 看起来不太一样，但它的确是合法的 attribute 名称字符，并且所有支持 Vue 的浏览器都能正确解析它。此外，他们不会出现在最终渲染的 DOM 中。简写语法是可选的，但相信在你了解了它更多的用处后，你应该会更喜欢它。</p>
<p>接下来的指引中，我们都将在示例中使用简写语法，因为这是在实际开发中更常见的用法。</p>
<h3>布尔型 Attribute</h3>
<p>布尔型 attribute 依据 true / false 值来决定 attribute 是否应该存在于该元素上。disabled 就是最常见的例子之一。</p>
<p><code>v-bind</code> 在这种场景下的行为略有不同：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;button :disabled="isButtonDisabled"&gt;Button&lt;/button&gt;
</code></pre></div><p>当 <code>isButtonDisabled</code> 为真值或一个空字符串 (即 <code>&lt;button disabled=""&gt;</code>) 时，元素会包含这个 <code>disabled</code> attribute。而当其为其他假值时 attribute 将被忽略。</p>
<h3>动态绑定多个值</h3>
<p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objectOfAttrs <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"container"</span><span class="token punctuation">,</span>
  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">"wrapper"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;div v-bind="objectOfAttrs"&gt;&lt;/div&gt;
</code></pre></div><h2>使用 JavaScript 表达式</h2>
<p>至此，我们仅在模板中绑定了一些简单的属性名。但是 Vue 实际上在所有的数据绑定中都支持完整的 JavaScript 表达式：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

&lt;div :id="`list-${id}`"&gt;&lt;/div&gt;
</code></pre></div><p>这些表达式都会被作为 JavaScript ，以当前组件实例为作用域解析执行。</p>
<p>在 Vue 模板内，JavaScript 表达式可以被使用在如下场景上：</p>
<ul>
<li>在文本插值中 (双大括号)</li>
<li>在任何 Vue 指令 (以 v- 开头的特殊 attribute) attribute 的值中</li>
</ul>
<h3>仅支持表达式</h3>
<p>每个绑定仅支持单一表达式，也就是一段能够被求值的 JavaScript 代码。一个简单的判断方法是是否可以合法地写在 return 后面。</p>
<p>因此，下面的例子都是无效的：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;!-- 这是一个语句，而非表达式 --&gt;
{{ var a = 1 }}

&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;
{{ if (ok) { return message } }}
</code></pre></div><h3>调用函数</h3>
<p>可以在绑定的表达式中使用一个组件暴露的方法：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;span :title="toTitleDate(date)"&gt;
{{ formatDate(date) }}
&lt;/span&gt;
</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>绑定在表达式中的方法在组件每次更新时都会被重新调用，因此不应该产生任何副作用，比如改变数据或触发异步操作。</p>
</div>
<h3>受限的全局访问</h3>
<p>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 <code>Math</code> 和 <code>Date</code>。</p>
<p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 <code>app.config.globalProperties</code> 上显式地添加它们，供所有的 Vue 表达式使用。</p>
<h2>指令 Directives</h2>
<p>指令是带有 <code>v-</code> 前缀的特殊 attribute。Vue 提供了许多内置指令，包括上面我们所介绍的 <code>v-bind</code> 和 <code>v-html</code>。</p>
<p>指令 attribute 的期望值为一个 JavaScript 表达式 (除了少数几个例外，即之后要讨论到的 <code>v-for</code>、<code>v-on</code> 和 <code>v-slot</code>)。一个指令的任务是在其表达式的值变化时响应式地更新 DOM。以 <code>v-if</code> 为例：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;p v-if="seen"&gt;Now you see me&lt;/p&gt;
</code></pre></div><p>这里，v-if 指令会基于表达式 seen 的值的真假来移除/插入该 <code>&lt;p&gt;</code> 元素。</p>
<h3>参数 Arguments</h3>
<p>某些指令会需要一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;a v-bind:href="url"&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;

&lt;a :href="url"&gt; ... &lt;/a&gt;
</code></pre></div><p>这里 href 就是一个参数，它告诉 <code>v-bind</code> 指令将表达式 url 的值绑定到元素的 <code>href</code> attribute 上。在简写中，参数前的一切 (例如 <code>v-bind:</code>) 都会被缩略为一个 <code>:</code> 字符。</p>
<p>另一个例子是 <code>v-on</code> 指令，它将监听 DOM 事件：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;a v-on:click="doSomething"&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a @click="doSomething"&gt; ... &lt;/a&gt;
</code></pre></div><p>这里的参数是要监听的事件名称：<code>click</code>。<code>v-on</code> 有一个相应的缩写，即 <code>@</code> 字符。</p>
<h3>动态参数</h3>
<p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号内：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;!--
注意，参数表达式有一些约束，
参见下面“动态参数值的限制”与“动态参数语法的限制”章节的解释
--&gt;
&lt;a v-bind:[attributeName]="url"&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a :[attributeName]="url"&gt; ... &lt;/a&gt;
</code></pre></div><p>这里的 <code>attributeName</code> 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 <code>attributeName</code>，其值为 <code>"href"</code>，那么这个绑定就等价于 <code>v-bind:href</code>。</p>
<p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;a v-on:[eventName]="doSomething"&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a @[eventName]="doSomething"&gt;
</code></pre></div><p>在此示例中，当 <code>eventName</code> 的值是 <code>"focus"</code> 时，<code>v-on:[eventName]</code> 就等价于 <code>v-on:focus</code>。</p>
<h3>动态参数值的限制</h3>
<p>动态参数中表达式的值应当是一个字符串，或者是 null。特殊值 null 意为显式移除该绑定。其他非字符串的值会触发警告。</p>
<h3>动态参数语法的限制</h3>
<p>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 HTML attribute 名称中都是不合法的。例如下面的示例：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;!-- 这会触发一个编译器警告 --&gt;
&lt;a :['foo' + bar]="value"&gt; ... &lt;/a&gt;
</code></pre></div><p>如果你需要传入一个复杂的动态参数，我们推荐使用计算属性替换复杂的表达式，也是 Vue 最基础的概念之一。</p>
<p>当使用 DOM 内嵌模板 (直接写在 HTML 文件里的模板) 时，我们需要避免在名称中使用大写字母，因为浏览器会强制将其转换为小写：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;a :[someAttr]="value"&gt; ... &lt;/a&gt;
</code></pre></div><p>上面的例子将会在 DOM 内嵌模板中被转换为 <code>:[someattr]</code>。如果你的组件拥有 “someAttr” 属性而非 “someattr”，这段代码将不会工作。单文件组件内的模板不受此限制。</p>
<h3>修饰符 Modifiers</h3>
<p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code>：</p>
<div class="language-template" data-ext="template" data-title="template"><pre class="language-template"><code>&lt;form @submit.prevent="onSubmit"&gt;...&lt;/form&gt;
</code></pre></div>]]></content>
    <published>2023-02-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">应用基础知识</title>
    <id>https://mister-hope.com/code/android/base.html</id>
    <link href="https://mister-hope.com/code/android/base.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>本章包含了一些关于 Android 开发的基础内容。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本章包含了一些关于 Android 开发的基础内容。</p>
<!-- more -->
<p>您可以使用 Kotlin、Java 和 C++ 语言编写 Android 应用。Android SDK 工具会将您的代码连同任何数据和资源文件编译成一个 APK(Android 软件包)，即带有 <code>.apk</code> 后缀的归档文件。一个 APK 文件包含 Android 应用的所有内容，它也是 Android 设备用来安装应用的文件。</p>
<p>每个 Android 应用都处于各自的安全沙盒中，并受以下 Android 安全功能的保护:</p>
<ul>
<li>
<p>Android 操作系统是一种多用户 Linux 系统，其中的每个应用都是一个不同的用户；
默认情况下，系统会为每个应用分配一个唯一的 Linux 用户 ID(该 ID 仅由系统使用，应用并不知晓)。系统会为应用中的所有文件设置权限，使得只有分配给该应用的用户 ID 才能访问这些文件；</p>
</li>
<li>
<p>每个进程都拥有自己的虚拟机 (VM)，因此应用代码独立于其他应用而运行。</p>
</li>
<li>
<p>默认情况下，每个应用都在其自己的 Linux 进程内运行。Android 系统会在需要执行任何应用组件时启动该进程，然后当不再需要该进程或系统必须为其他应用恢复内存时，其便会关闭该进程。</p>
</li>
</ul>
<p>Android 系统实现了最小权限原则。换言之，默认情况下，每个应用只能访问执行其工作所需的组件，而不能访问其他组件。这样便能创建非常安全的环境，在此环境中，应用无法访问其未获得权限的系统部分。不过，应用仍可通过一些途径与其他应用共享数据以及访问系统服务:</p>
<ul>
<li>
<p>可以安排两个应用共享同一 Linux 用户 ID，在此情况下，二者便能访问彼此的文件。为节省系统资源，也可安排拥有相同用户 ID 的应用在同一 Linux 进程中运行，并共享同一 VM。应用还必须使用相同的证书进行签名。</p>
</li>
<li>
<p>应用可以请求访问设备数据(如用户的联系人、短信消息、可装载存储装置(SD 卡)、相机、蓝牙等)的权限。用户必须明确授予这些权限。如需了解详细信息，请参阅使用系统权限。</p>
</li>
</ul>
<h2>应用组件</h2>
<p>应用组件是 Android 应用的基本构建块。每个组件都是一个入口点，系统或用户可通过该入口点进入您的应用。有些组件会依赖于其他组件。</p>
<p>共有四种不同的应用组件类型:</p>
<ul>
<li>Activity</li>
<li>服务</li>
<li>广播接收器</li>
<li>内容提供程序</li>
</ul>
<p>每种类型都有不同的用途和生命周期，后者会定义如何创建和销毁组件。</p>
<h3>Activity</h3>
<p>Activity 是与用户交互的入口点。它表示拥有界面的单个屏幕。例如，电子邮件应用可能有一个显示新电子邮件列表的 Activity、一个用于撰写电子邮件的 Activity 以及一个用于阅读电子邮件的 Activity。尽管这些 Activity 通过协作在电子邮件应用中形成一种紧密结合的用户体验，但每个 Activity 都独立于其他 Activity 而存在。因此，其他应用可以启动其中任何一个 Activity(如果电子邮件应用允许)。例如，相机应用可以启动电子邮件应用内用于撰写新电子邮件的 Activity，以便用户共享图片。Activity 有助于完成系统和应用程序之间的以下重要交互:</p>
<ul>
<li>
<p>追踪用户当前关心的内容(屏幕上显示的内容)，以确保系统继续运行托管 Activity 的进程。</p>
</li>
<li>
<p>了解先前使用的进程包含用户可能返回的内容(已停止的 Activity)，从而更优先保留这些进程。</p>
</li>
<li>
<p>帮助应用处理终止其进程的情况，以便用户可以返回已恢复其先前状态的 Activity。</p>
</li>
<li>
<p>提供一种途径，让应用实现彼此之间的用户流，并让系统协调这些用户流。(此处最经典的示例是共享。)</p>
</li>
</ul>
<p>您需将 Activity 作为 Activity 类的子类来实现。如需了解有关 Activity 类的更多信息，请参阅 Activity 开发者指南。</p>
<h2>服务</h2>
<p>服务是一个通用入口点，用于因各种原因使应用在后台保持运行状态。它是一种在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业。服务不提供界面。例如，当用户使用其他应用时，服务可能会在后台播放音乐或通过网络获取数据，但这不会阻断用户与 Activity 的交互。诸如 Activity 等其他组件可以启动服务，使该服务运行或绑定到该服务，以便与其进行交互。事实上，有两种截然不同的语义服务可以告知系统如何管理应用: 已启动服务会告知系统使其运行至工作完毕。此类工作可以是在后台同步一些数据，或者在用户离开应用后继续播放音乐。在后台同步数据或播放音乐也代表了两种不同类型的已启动服务，而这些服务可以修改系统处理它们的方式:</p>
<ul>
<li>
<p>音乐播放是用户可直接感知的服务，因此，应用会向用户发送通知，表明其希望成为前台，从而告诉系统此消息；在此情况下，系统明白它应尽全力维持该服务进程运行，因为进程消失会令用户感到不快。</p>
</li>
<li>
<p>通常，用户不会意识到常规后台服务正处于运行状态，因此系统可以更自由地管理其进程。如果系统需要使用 RAM 来处理用户更迫切关注的内容，则其可能允许终止服务(然后在稍后的某个时刻重启服务)。</p>
</li>
</ul>
<p>绑定服务之所以能运行，原因是某些其他应用(或系统)已表示希望使用该服务。从根本上讲，这是为另一个进程提供 API 的服务。因此，系统会知晓这些进程之间存在依赖关系，所以如果进程 A 绑定到进程 B 中的服务，系统便知道自己需使进程 B(及其服务)为进程 A 保持运行状态。此外，如果进程 A 是用户关心的内容，系统随即也知道将进程 B 视为用户关心的内容。由于存在灵活性(无论好坏)，服务已成为非常有用的构建块，并且可实现各种高级系统概念。动态壁纸、通知侦听器、屏幕保护程序、输入方法、无障碍功能服务以及众多其他核心系统功能均可构建为在其运行时由应用实现、系统绑定的服务。</p>
<p>您需将服务作为 Service 的子类来实现。如需了解有关 Service 类的更多信息，请参阅服务开发者指南。</p>
<h2>广播接收器</h2>
<p>借助广播接收器组件，系统能够在常规用户流之外向应用传递事件，从而允许应用响应系统范围内的广播通知。由于广播接收器是另一个明确定义的应用入口，因此系统甚至可以向当前未运行的应用传递广播。例如，应用可通过调度提醒来发布通知，以告知用户即将发生的事件。而且，通过将该提醒传递给应用的广播接收器，应用在提醒响起之前即无需继续运行。许多广播均由系统发起，例如，通知屏幕已关闭、电池电量不足或已拍摄照片的广播。应用也可发起广播，例如，通知其他应用某些数据已下载至设备，并且可供其使用。尽管广播接收器不会显示界面，但其可以创建状态栏通知，在发生广播事件时提醒用户。但广播接收器更常见的用途只是作为通向其他组件的通道，旨在执行极少量的工作。例如，它可能会根据带 JobScheduler 的事件调度 JobService 来执行某项工作
广播接收器作为 BroadcastReceiver 的子类实现，并且每条广播都作为 Intent 对象进行传递。如需了解详细信息，请参阅 BroadcastReceiver 类。</p>
<h2>内容提供程序</h2>
<p>内容提供程序管理一组共享的应用数据，您可以将这些数据存储在文件系统、SQLite 数据库、网络中或者您的应用可访问的任何其他持久化存储位置。其他应用可通过内容提供程序查询或修改数据(如果内容提供程序允许)。例如，Android 系统可提供管理用户联系人信息的内容提供程序。因此，任何拥有适当权限的应用均可查询内容提供程序(如 <code>ContactsContract.Data</code>)，以读取和写入特定人员的相关信息。我们很容易将内容提供程序看作数据库上的抽象，因为其内置的大量 API 和支持时常适用于这一情况。但从系统设计的角度看，二者的核心目的不同。对系统而言，内容提供程序是应用的入口点，用于发布由 URI 架构识别的已命名数据项。因此，应用可以决定如何将其包含的数据映射到 URI 命名空间，进而将这些 URI 分发给其他实体。反之，这些实体也可使用分发的 URI 来访问数据。在管理应用的过程中，系统可以执行以下特殊操作:</p>
<ul>
<li>
<p>分配 URI 无需应用保持运行状态，因此 URI 可在其所属的应用退出后继续保留。当系统必须从相应的 URI 检索应用数据时，系统只需确保所属应用仍处于运行状态。</p>
</li>
<li>
<p>这些 URI 还会提供重要的细粒度安全模型。例如，应用可将其所拥有图像的 URI 放到剪贴板上，但将其内容提供程序锁定，以便其他应用程序无法随意访问它。当第二个应用尝试访问剪贴板上的 URI 时，系统可允许该应用通过临时的 URI 授权来访问数据，这样便只能访问 URI 后面的数据，而非第二个应用中的其他任何内容。</p>
</li>
</ul>
<p>内容提供程序也适用于读取和写入您的应用不共享的私有数据。</p>
<p>内容提供程序作为 ContentProvider 的子类实现，并且其必须实现一组标准 API，以便其他应用能够执行事务。如需了解详细信息，请参阅内容提供程序开发者指南。</p>
]]></content>
    <category term="Android"/>
    <published>2020-04-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">应用资源概览</title>
    <id>https://mister-hope.com/code/android/resource.html</id>
    <link href="https://mister-hope.com/code/android/resource.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>资源是指代码使用的附加文件和静态内容，例如位图、布局定义、界面字符串、动画说明等。</p>
]]></summary>
    <content type="html"><![CDATA[<p>资源是指代码使用的附加文件和静态内容，例如位图、布局定义、界面字符串、动画说明等。</p>
<!-- more -->
<p>您应始终外部化应用资源(例如图像和代码中的字符串)，以便单独对其进行维护。此外，您还应为特定设备配置提供备用资源，方法是将其进行分组并放入专门命名的资源目录中。在运行时，Android 会根据当前配置使用合适的资源。例如，您可能需根据屏幕尺寸提供不同的界面布局，或根据语言设置提供不同的字符串。</p>
<p>外部化应用资源后，您便可使用在项目 R 类中生成的资源 ID 来访问这些资源。本文档会介绍如何对 Android 项目中的资源进行分组，如何为特定的设备配置提供备用资源，以及如何从您的应用代码或其他 XML 文件访问这些资源。</p>
<h2>分组资源类型</h2>
<p>您应将各类资源放入项目 <code>res/</code> 目录的特定子目录中。例如，以下是一个简单项目的文件层次结构:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>MyProject/
  src/
    MyActivity.java
  res/
    drawable/
      graphic.png
    layout/
      main.xml
      info.xml
    mipmap/
      icon.png
    values/
      strings.xml
</code></pre></div><p>如此示例所示，<code>res/</code> 目录包含所有资源(在子目录中): 一个图像资源、两个布局资源、启动器图标的 <code>mipmap/</code> 目录以及一个字符串资源文件。资源目录名称非常重要，具体说明请见表 1。</p>
<p>表 1. 项目 <code>res/</code> 目录中支持的资源目录。</p>
<p>| 目录      | 资源类型                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
|</p>
]]></content>
    <category term="Android"/>
    <published>2020-04-09T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">启动另一个 activity</title>
    <id>https://mister-hope.com/code/android/get-started/activity.html</id>
    <link href="https://mister-hope.com/code/android/get-started/activity.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<p>在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。</p>
]]></summary>
    <content type="html"><![CDATA[<p>在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。</p>
<!-- more -->
<h2>响应“Send”按钮</h2>
<p>您可按照以下步骤，向 MainActivity 类添加一个在用户点按 Send 按钮时调用的方法：</p>
<ol>
<li>
<p>在 app &gt; java &gt; com.example.myfirstapp &gt; MainActivity 文件中，添加以下 sendMessage() 方法桩：</p>

<p>您可能会看到一条错误，因为 Android Studio 无法解析用作方法参数的 View 类。若要清除错误，请点击 View 声明，将光标置于其上，然后按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Enter</code>）进行快速修复。如果出现一个菜单，请选择 Import class。</p>
</li>
<li>
<p>返回到 activity_main.xml 文件，并从该按钮调用此方法:</p>
<ol>
<li>选择布局编辑器中的相应按钮。</li>
<li>在 Attributes 窗口中，找到 onClick 属性，并从其下拉列表中选择 <code>sendMessage [MainActivity]</code>。</li>
</ol>
<p>现在，当用户点按该按钮时，系统将调用 <code>sendMessage()</code> 方法。</p>
<p>请注意此方法中提供的详细信息。系统需要这些信息来识别此方法是否与 android:onClick 属性兼容。具体来说，此方法具有以下特性：</p>
<ol>
<li>公开。</li>
<li>返回值为空，或在 Kotlin 中为隐式 Unit。</li>
<li>View 是唯一的参数。这是您在第 1 步结束时点击的 View 对象。</li>
</ol>
</li>
<li>
<p>接下来，填写此方法，以读取文本字段的内容，并将该文本传递给另一个 activity。</p>
</li>
</ol>
<h2>构建一个 intent</h2>
<p><code>Intent</code> 是在相互独立的组件（如两个 activity）之间提供运行时绑定功能的对象。Intent 表示应用执行某项操作的意图。您可以使用 intent 执行多种任务，但在本课中，您的 intent 将用于启动另一个 activity。</p>
<p>在 MainActivity 中，添加 EXTRA_MESSAGE 常量和 sendMessage() 代码，如下所示：</p>

<p>预计 Android Studio 会再次遇到 Cannot resolve symbol 错误。如需清除这些错误，请按 Alt+Enter（在 Mac 上则按 Option+Return）。您最后应导入以下内容：</p>

<p>DisplayMessageActivity 仍有错误，但没有关系。您将在下一部分中修复该错误。</p>
<p>sendMessage() 将发生以下情况：</p>
<ul>
<li>
<p>Intent 构造函数会获取两个参数：Context 和 Class。</p>
<p>首先使用 Context 参数，因为 Activity 类是 Context 的子类。</p>
<p>在本例中，系统将 Intent, 传递到的应用组件的 Class 参数是要启动的 activity。</p>
</li>
<li>
<p>putExtra() 方法将 EditText 的值添加到 intent。Intent 能够以称为“extra”的键值对形式携带数据类型。</p>
<p>您的键是一个公共常量 EXTRA_MESSAGE，因为下一个 activity 将使用该键检索文本值。为 intent extra 定义键时，最好使用应用的软件包名称作为前缀。这样可以确保这些键是独一无二的，这在您的应用需要与其他应用进行交互时会很重要。</p>
</li>
<li>
<p>startActivity() 方法将启动一个由 Intent 指定的 DisplayMessageActivity 实例。接下来，您需要创建该类。</p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>导航架构组件允许您使用导航编辑器将一个 activity 与另一个 activity 相关联。建立这种关联后，您可以利用 API 在用户触发关联的操作（例如，用户点击某个按钮时）时启动第二个 activity。如需了解详情，请参阅导航。</p>
</div>
<h2>创建第二个 activity</h2>
<p>若要创建第二个 activity，请按以下步骤操作：</p>
<ol>
<li>在 Project 窗口中，右键点击 app 文件夹，然后依次选择 New &gt; Activity &gt; Empty Activity。</li>
<li>在 Configure Activity 窗口中，输入“DisplayMessageActivity”作为 Activity Name。将所有其他属性保留为默认设置，然后点击 Finish。</li>
</ol>
<p>Android Studio 会自动执行下列三项操作：</p>
<ol>
<li>创建 DisplayMessageActivity 文件。</li>
<li>创建 DisplayMessageActivity 文件对应的布局文件 activity_display_message.xml。</li>
<li>在 AndroidManifest.xml 中添加所需的 <code>&lt;activity&gt;</code> 元素。</li>
</ol>
<p>如果您运行应用并点按第一个 activity 上的按钮，将启动第二个 activity，但它为空。这是因为第二个 activity 使用模板提供的空布局。</p>
<h2>添加文本视图</h2>
<p>新 activity 包含一个空白布局文件。请按以下步骤操作，在显示消息的位置添加一个文本视图：</p>
<ol>
<li>打开 app &gt; res &gt; layout &gt; activity_display_message.xml 文件。</li>
<li>点击工具栏中的 Enable Autoconnection to Parent 。系统将启用 Autoconnect。参见图 1。</li>
<li>在 Palette 面板中，点击 Text，将 TextView 拖动到布局中，然后将其放置在靠近布局顶部中心的位置，使其贴靠到出现的垂直线上。Autoconnect 将添加左侧和右侧约束条件，以便将该视图放置在水平中心位置。</li>
<li>再创建一个从文本视图顶部到布局顶部的约束条件，使该视图如图 1 中所示。</li>
</ol>
<p>或者，您可以对文本样式进行一些调整，方法是在 Attributes 窗口的 Common Attributes 面板中展开 textAppearance，然后更改 textSize 和 textColor 等属性。</p>
<h2>显示消息</h2>
<p>在此步骤中，您将修改第二个 activity 以显示第一个 activity 传递的消息。</p>
<ol>
<li>
<p>在 DisplayMessageActivity 中，将以下代码添加到 <code>onCreate()</code> 方法中：</p>

</li>
<li>
<p>按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Return</code>）导入其他所需的类：</p>

</li>
</ol>
<h2>添加向上导航功能</h2>
<p>在您的应用中，不是主入口点的每个屏幕（所有不是主屏幕的屏幕）都必须提供导航功能，以便将用户引导至应用层次结构中的逻辑父级屏幕。为此，请在应用栏中添加向上按钮。</p>
<p>若要添加向上按钮，您需要在 <code>AndroidManifest.xml</code> 文件中声明哪个 activity 是逻辑父级。打开 app &gt; manifests &gt; AndroidManifest.xml 文件，找到 DisplayMessageActivity 的 <code>&lt;activity&gt;</code> 标记，然后将其替换为以下代码：</p>
<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.DisplayMessageActivity<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">android:</span>parentActivityName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- The meta-data tag is required if you support API level 15 and lower --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>
        <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.support.PARENT_ACTIVITY<span class="token punctuation">"</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Android 系统现在会自动向应用栏添加向上按钮。</p>
<h2>运行应用</h2>
<p>点击工具栏中的 Apply Changes 以运行应用。当应用打开后，在文本字段中输入一条消息，点按 Send 即会看到该消息显示在第二个 activity 中。</p>
]]></content>
    <category term="Android"/>
    <category term="快速上手"/>
    <published>2022-04-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">创建项目</title>
    <id>https://mister-hope.com/code/android/get-started/create.html</id>
    <link href="https://mister-hope.com/code/android/get-started/create.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<p>本课将介绍如何使用 Android Studio 创建新的 Android 项目，并介绍该项目中的一些文件。</p>
<p>如需创建新的 Android 项目，请按以下步骤操作：</p>
<ol>
<li>
<p>安装最新版 Android Studio。</p>
</li>
<li>
<p>在 Welcome to Android Studio 窗口中，点击 Create New Project。</p>
<p>如果您已打开一个项目，请依次选择 File &gt; New &gt; New Project。</p>
</li>
<li>
<p>在 Select a Project Template 窗口中，选择 Empty Activity，然后点击 Next。</p>
</li>
<li>
<p>在 Configure your project 窗口中，完成以下操作：</p>
<ul>
<li>
<p>在 Name 字段中输入“My First App”。</p>
</li>
<li>
<p>在 Package name 字段中输入“com.example.myfirstapp”。</p>
</li>
<li>
<p>如果您想将项目放在其他文件夹中，请更改其 Save 位置。</p>
</li>
<li>
<p>从 Language 下拉菜单中选择 Java 或 Kotlin。</p>
</li>
<li>
<p>在 Minimum SDK 字段中选择您希望应用支持的最低 Android 版本。</p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>点击 Help me choose 链接可打开 Android Platform/API Version Distribution 对话框。此对话框会提供有关各 Android 版本在设备间的分布情况的信息。您需要权衡的主要因素是，您想支持的 Android 设备所占的百分比，以及在这些设备所搭载的各个不同版本上维护应用所需的工作量。例如，如果您选择让应用与多个不同 Android 版本兼容，那么维护最旧版本与最新版本之间的兼容性所需的工作量就会增大。</p>
</div>
<ul>
<li>
<p>如果您的应用需要旧版库支持，请选中 Use legacy android.support libraries 复选框。</p>
</li>
<li>
<p>其他选项保持原样。</p>
</li>
</ul>
</li>
<li>
<p>点击 Finish。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<p>本课将介绍如何使用 Android Studio 创建新的 Android 项目，并介绍该项目中的一些文件。</p>
<p>如需创建新的 Android 项目，请按以下步骤操作：</p>
<ol>
<li>
<p>安装最新版 Android Studio。</p>
</li>
<li>
<p>在 Welcome to Android Studio 窗口中，点击 Create New Project。</p>
<p>如果您已打开一个项目，请依次选择 File &gt; New &gt; New Project。</p>
</li>
<li>
<p>在 Select a Project Template 窗口中，选择 Empty Activity，然后点击 Next。</p>
</li>
<li>
<p>在 Configure your project 窗口中，完成以下操作：</p>
<ul>
<li>
<p>在 Name 字段中输入“My First App”。</p>
</li>
<li>
<p>在 Package name 字段中输入“com.example.myfirstapp”。</p>
</li>
<li>
<p>如果您想将项目放在其他文件夹中，请更改其 Save 位置。</p>
</li>
<li>
<p>从 Language 下拉菜单中选择 Java 或 Kotlin。</p>
</li>
<li>
<p>在 Minimum SDK 字段中选择您希望应用支持的最低 Android 版本。</p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>点击 Help me choose 链接可打开 Android Platform/API Version Distribution 对话框。此对话框会提供有关各 Android 版本在设备间的分布情况的信息。您需要权衡的主要因素是，您想支持的 Android 设备所占的百分比，以及在这些设备所搭载的各个不同版本上维护应用所需的工作量。例如，如果您选择让应用与多个不同 Android 版本兼容，那么维护最旧版本与最新版本之间的兼容性所需的工作量就会增大。</p>
</div>
<ul>
<li>
<p>如果您的应用需要旧版库支持，请选中 Use legacy android.support libraries 复选框。</p>
</li>
<li>
<p>其他选项保持原样。</p>
</li>
</ul>
</li>
<li>
<p>点击 Finish。</p>
</li>
</ol>
<p>经过一段时间的处理后，Android Studio 主窗口会出现。</p>
<p>下面花一点时间了解一下最重要的文件。</p>
<p>首先，确保已打开 Project 窗口（依次选择 View &gt; Tool Windows &gt; Project），并从该窗口顶部的下拉列表中选择 Android 视图。随后，您可以看到以下文件：</p>
<ul>
<li>
<p>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity</p>
<p>这是主 activity。它是应用的入口点。当您构建和运行应用时，系统会启动此 Activity 的实例并加载其布局。</p>
</li>
<li>
<p>app &gt; res &gt; layout &gt; activity_main.xml</p>
<p>此 XML 文件定义了 activity 界面 (UI) 的布局。它包含一个 TextView 元素，其中具有“Hello, World!”文本</p>
</li>
<li>
<p>app &gt; manifests &gt; AndroidManifest.xml</p>
<p>清单文件描述了应用的基本特性并定义了每个应用组件。</p>
</li>
<li>
<p>Gradle Scripts &gt; build.gradle</p>
<p>有两个使用此名称的文件：一个针对项目“Project: My First App”，另一个针对应用模块“Module: My_First_App.app”。每个模块均有自己的 build.gradle 文件，但此项目当前仅有一个模块。使用每个模块的 build.gradle 文件控制 Gradle 插件构建应用的方式。如需详细了解此文件，请参阅配置 build。</p>
</li>
</ul>
]]></content>
    <category term="Android"/>
    <category term="快速上手"/>
    <published>2022-04-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">构建简单的界面</title>
    <id>https://mister-hope.com/code/android/get-started/interface.html</id>
    <link href="https://mister-hope.com/code/android/get-started/interface.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<p>在本节课中，您将学习如何使用 Android Studio 布局编辑器创建包含一个文本框和一个按钮的布局。这将为下一课打下基础，下节课将学习如何在点按该按钮时让应用将文本框的内容发送到其他 activity。</p>
]]></summary>
    <content type="html"><![CDATA[<p>在本节课中，您将学习如何使用 Android Studio 布局编辑器创建包含一个文本框和一个按钮的布局。这将为下一课打下基础，下节课将学习如何在点按该按钮时让应用将文本框的内容发送到其他 activity。</p>
<!-- more -->
<p>Android 应用的界面 (UI) 以布局和微件的层次结构形式构建而成。布局是 ViewGroup 对象，即控制其子视图在屏幕上的放置方式的容器。微件是 View 对象，即按钮和文本框等界面组件。</p>
<figure><figcaption>ViewGroup</figcaption></figure>
<p>Android 提供了 ViewGroup 和 View 类的 XML 词汇表，因此界面的大部分内容都在 XML 文件中定义。不过，本节课将向您介绍如何使用 Android Studio 的布局编辑器创建布局，而不是教您编写 XML 代码。布局编辑器会在您拖放视图构建布局时为您编写 XML 代码。</p>
<h2>打开布局编辑器</h2>
<p>首先，请按照以下步骤设置工作区：</p>
<ol>
<li>在 Project 窗口中，依次打开 app &gt; res &gt; layout &gt; activity_main.xml。</li>
<li>若要给布局编辑器留出空间，请隐藏 Project 窗口。为此，请依次选择 View &gt; Tool Windows &gt; Project，或直接点击 Android Studio 屏幕左侧的 Project。</li>
<li>如果您的编辑器显示 XML 源代码，请点击窗口右上角的 Design 标签页。</li>
<li>点击 (Select Design Surface)，然后选择 Blueprint。</li>
<li>点击布局编辑器工具栏中的 (View Options)，并确保选中 Show All Constraints。</li>
<li>确保 Autoconnect 处于关闭状态。当 Autoconnect 处于关闭状态时，工具栏中的提示会显示 (Enable Autoconnection to Parent)。</li>
<li>点击工具栏中的 (Default Margins)，然后选择 16。如果需要，您可以稍后调整每个视图的外边距。</li>
<li>点击工具栏中的 (Device for Preview)，然后选择 5.5, 1440 × 2560, 560 dpi (Pixel XL)。</li>
</ol>
<p>您的布局编辑器现在如下图所示。</p>
<figure><figcaption>布局编辑器</figcaption></figure>
<p>左下方的 Component Tree 面板显示布局的视图层次结构。在本例中，根视图是 ConstraintLayout，它仅包含一个 TextView 对象。</p>
<p>ConstraintLayout 是一种布局，它根据同级视图和父布局的约束条件定义每个视图的位置。这样一来，使用扁平视图层次结构既可以创建简单布局，又可以创建复杂布局。这种布局无需嵌套布局。嵌套布局是布局内的布局（如图 2 所示），会增加绘制界面所需的时间。</p>
<p>例如，您可以声明以下布局，如下图所示：</p>
<ul>
<li>视图 A 距离父布局顶部 16 dp。</li>
<li>视图 A 距离父布局左侧 16 dp。</li>
<li>视图 B 距离视图 A 右侧 16 dp。</li>
<li>视图 B 与视图 A 顶部对齐。</li>
</ul>
<figure><figcaption>布局示例</figcaption></figure>
<h2>添加文本框</h2>
<p>请按照下面的步骤添加文本框：</p>
<ol>
<li>首先，您需要移除布局中已有的内容。在 Component Tree 面板中点击 TextView，然后按 Delete 键。</li>
<li>在 Palette 面板中，点击 Text 以显示可用的文本控件。</li>
<li>将 Plain Text 拖动到设计编辑器中，并将其放在靠近布局顶部的位置。这是一个接受纯文本输入的 EditText 微件。</li>
<li>点击设计编辑器中的视图。现在，您可以在每个角上看到调整视图大小的正方形手柄，并在每个边上看到圆形约束锚点。为了更好地控制，您可能需要放大编辑器。为此，请使用布局编辑器工具栏中的 Zoom 按钮。</li>
<li>点击并按住顶边上的锚点，将其向上拖动，直至其贴靠到布局顶部，然后将其释放。这是一个约束条件：它会将视图约束在已设置的默认外边距内。在本例中，您将其设置为距离布局顶部 16 dp。</li>
<li>使用相同的过程创建一个从视图左侧到布局左侧的约束条件。</li>
</ol>
<h2>添加按钮</h2>
<ol>
<li>在 Palette 面板中，点击 Buttons。</li>
<li>将 Button 微件拖到设计编辑器中，并将其放在靠近右侧的位置。</li>
<li>创建一个从按钮左侧到文本框右侧的约束条件。</li>
<li>如需按水平对齐约束视图，请创建一个文本基线之间的约束条件。为此，请右键点击按钮，然后选择 Show Baseline 在布局编辑器中显示基准操作。基线锚点显示在按钮内部。点击并按住此锚点，然后将其拖动到相邻文本框中显示的基线锚点上。</li>
</ol>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>您还可以根据顶边或底边实现水平对齐。但按钮的图片周围有内边距，因此如果以这种方式对齐，那么它们看上去是没有对齐的。</p>
</div>
<h2>更改界面字符串</h2>
<p>若要预览界面，请点击工具栏中的 (Select Design Surface)，然后选择 Design。请注意，文本输入和按钮标签应设置为默认值。</p>
<p>若要更改界面字符串，请按以下步骤操作：</p>
<ol>
<li>
<p>打开 Project 窗口，然后打开 app &gt; res &gt; values &gt; strings.xml。</p>
<p>这是一个字符串资源文件，您可在此文件中指定所有界面字符串。您可以利用该文件在一个位置管理所有界面字符串，使字符串的查找、更新和本地化变得更加容易。</p>
</li>
<li>
<p>点击窗口顶部的 Open editor。此时将打开 Translations Editor，它提供了一个可以添加和修改默认字符串的简单界面。它还有助于让所有已翻译的字符串井然有序。</p>
</li>
<li>
<p>点击 (Add Key) 可以创建一个新字符串作为文本框的“提示文本”。此时会打开如图 7 所示的窗口。</p>
<p>在 Add Key 对话框中，完成以下步骤：</p>
<ul>
<li>在 Key 字段中输入“edit_message”。</li>
<li>在 Default Value 字段中输入“Enter a message”。</li>
<li>点击 OK。</li>
</ul>
</li>
<li>
<p>再添加一个名为“button_send”且值为“Send”的键。</p>
</li>
</ol>
<p>现在，您可以为每个视图设置这些字符串。若要返回布局文件，请点击标签页栏中的 activity_main.xml。然后，添加字符串，如下所示：</p>
<ol>
<li>点击布局中的文本框。如果右侧还未显示 Attributes 窗口，请点击右侧边栏上的 Attributes。</li>
<li>找到 text 属性（当前设为“Name”）并删除相应的值。</li>
<li>找到 hint 属性，然后点击文本框右侧的 (Pick a Resource)。在显示的对话框中，双击列表中的 edit_message。</li>
<li>点击布局中的按钮，找到其 text 属性（当前设为“Button”）。然后点击 (Pick a Resource)，并选择 button_send。</li>
</ol>
<h2>让文本框大小可灵活调整</h2>
<p>若要创建一个适应不同屏幕尺寸的布局，您需要让文本框拉伸以填充去除按钮和外边距后剩余的所有水平空间。</p>
<p>继续操作之前，请点击工具栏中的 (Select Design Surface)，然后选择 Blueprint。</p>
<p>若要让文本框大小可灵活调整，请按以下步骤操作：</p>
<ol>
<li>
<p>选择两个视图。若要执行此操作，请点击一个视图，在按住 Shift 键的同时点击另一个视图，然后右键点击任一视图并依次选择 Chains &gt; Create Horizontal Chain。布局随即显示出来，如图 8 所示。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>链是两个或多个视图之间的双向约束条件，可让您采用一致的方式安排链接的视图。</p>
</div>
</li>
<li>
<p>选择按钮并打开 Attributes 窗口。然后使用 Constraint Widget 将右外边距设为 16 dp。
点击文本框以查看其属性。然后，点击宽度指示器两次，确保将其设置为锯齿状线 (Match Constraints)，如图 9 中的标注 1 所示。</p>
</li>
<li>
<p>“Match constraints”表示宽度将延长以符合水平约束条件和外边距的定义。因此，文本框将拉伸以填充去除按钮和所有外边距后剩余的水平空间。</p>
</li>
</ol>
<h2>运行应用</h2>
<p>如果已在上一课中将您的应用安装到设备上，只需点击工具栏中的 (Apply Changes)，即可使用新布局更新应用。或者点击 Run 'app' 以安装并运行应用。</p>
]]></content>
    <category term="Android"/>
    <category term="快速上手"/>
    <published>2022-04-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基础知识</title>
    <id>https://mister-hope.com/code/android/get-started/intro.html</id>
    <link href="https://mister-hope.com/code/android/get-started/intro.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<p>本部分介绍如何构建简单的 Android 应用。首先，您将了解如何通过 Android Studio 创建“Hello, World!”项目并运行它。然后，您将为应用创建一个新界面，该界面会接受用户输入，并切换到应用中的一个新屏幕以显示用户输入内容。</p>
<p>开始之前，您需要了解有关 Android 应用的两个基本概念：它们如何提供多个入口点，以及它们如何适应不同的设备。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本部分介绍如何构建简单的 Android 应用。首先，您将了解如何通过 Android Studio 创建“Hello, World!”项目并运行它。然后，您将为应用创建一个新界面，该界面会接受用户输入，并切换到应用中的一个新屏幕以显示用户输入内容。</p>
<p>开始之前，您需要了解有关 Android 应用的两个基本概念：它们如何提供多个入口点，以及它们如何适应不同的设备。</p>
<!-- more -->
<h2>应用提供多个入口点</h2>
<p>Android 应用都是将各种可单独调用的组件加以组合构建而成。例如，activity 是提供界面 (UI) 的一种应用组件。</p>
<p>“主”activity 在用户点按您的应用图标时启动。您还可以将用户从其他位置（例如，从通知中，甚至从其他应用中）引导至某个 activity。</p>
<p>其他组件（如 WorkManager）可使应用能够在没有界面的情况下执行后台任务。</p>
<p>构建您的首个应用后，请参阅 [应用基础知识][] 来详细了解其他应用组件。</p>
<h2>应用可适应不同的设备</h2>
<p>Android 允许您为不同的设备提供不同的资源。例如，您可以针对不同的屏幕尺寸创建不同的布局。系统会根据当前设备的屏幕尺寸确定要使用的布局。</p>
<p>如果应用的任何功能需要使用特定的硬件（例如摄像头），您可以在运行时查询该设备是否具有该硬件，如果没有，则停用相应的功能。您可以指定应用需要使用特定的硬件，这样，Google Play 就不会允许在没有这些硬件的设备上安装应用。</p>
<p>构建您的首个应用后，请参阅 [设备兼容性概览][] 来详细了解设备配置。</p>
]]></content>
    <category term="Android"/>
    <category term="快速上手"/>
    <published>2022-04-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">运行应用</title>
    <id>https://mister-hope.com/code/android/get-started/run.html</id>
    <link href="https://mister-hope.com/code/android/get-started/run.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>在真实设备上运行</h2>
<p>按照以下步骤设置设备：</p>
<ol>
<li>
<p>使用一根 USB 线将设备连接到开发机器。如果您是在 Windows 上开发的，则可能需要为设备安装合适的 USB 驱动程序。</p>
</li>
<li>
<p>执行以下步骤，在开发者选项窗口中启用 USB 调试：</p>
<ol>
<li>
<p>打开设置应用。</p>
</li>
<li>
<p>如果您的设备使用 Android v8.0 或更高版本，请选择系统。否则，请继续执行下一步。</p>
</li>
<li>
<p>滚动到底部，然后选择关于手机。</p>
</li>
<li>
<p>滚动到底部，然后点按版本号七次。</p>
</li>
<li>
<p>返回上一屏幕，滚动到底部，然后点按开发者选项。</p>
</li>
<li>
<p>在开发者选项窗口中，向下滚动以查找并启用 USB 调试。</p>
</li>
</ol>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>在真实设备上运行</h2>
<p>按照以下步骤设置设备：</p>
<ol>
<li>
<p>使用一根 USB 线将设备连接到开发机器。如果您是在 Windows 上开发的，则可能需要为设备安装合适的 USB 驱动程序。</p>
</li>
<li>
<p>执行以下步骤，在开发者选项窗口中启用 USB 调试：</p>
<ol>
<li>
<p>打开设置应用。</p>
</li>
<li>
<p>如果您的设备使用 Android v8.0 或更高版本，请选择系统。否则，请继续执行下一步。</p>
</li>
<li>
<p>滚动到底部，然后选择关于手机。</p>
</li>
<li>
<p>滚动到底部，然后点按版本号七次。</p>
</li>
<li>
<p>返回上一屏幕，滚动到底部，然后点按开发者选项。</p>
</li>
<li>
<p>在开发者选项窗口中，向下滚动以查找并启用 USB 调试。</p>
</li>
</ol>
</li>
</ol>
<p>按照以下步骤操作，在设备上运行应用：</p>
<ol>
<li>
<p>在 Android Studio 中，从工具栏中的运行/调试配置下拉菜单中选择您的应用。</p>
</li>
<li>
<p>在工具栏中，从目标设备下拉菜单中选择要用来运行应用的设备。</p>
</li>
<li>
<p>点击 Run 。</p>
<p>Android Studio 会在已连接的设备上安装您的应用并启动它。您现在会看到设备上的应用中显示了“Hello, World!”。</p>
</li>
</ol>
<h2>在模拟器上运行</h2>
<p>按照以下步骤操作，在模拟器上运行应用：</p>
<ol>
<li>
<p>在 Android Studio 中创建一个 Android 虚拟设备 (AVD)，模拟器可以使用该设备安装和运行您的应用。</p>
</li>
<li>
<p>在工具栏中，从运行/调试配置下拉菜单中选择您的应用。</p>
</li>
<li>
<p>从目标设备下拉菜单中，选择要用来运行应用的 AVD。</p>
</li>
<li>
<p>点击 Run 图标 。</p>
<p>Android Studio 会在 AVD 上安装应用并启动模拟器。您现在会看到应用中显示了“Hello, World!”。</p>
</li>
</ol>
]]></content>
    <category term="Android"/>
    <category term="快速上手"/>
    <published>2022-04-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">定义</title>
    <id>https://mister-hope.com/code/website/definition/</id>
    <link href="https://mister-hope.com/code/website/definition/"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>定义列表</h2>
<ul>
<li>
<p><a href="/code/website/definition/uri.html" target="_blank">URI 统一资源标识符</a></p>
</li>
<li>
<p><a href="/code/website/definition/url.html" target="_blank">URL 统一资源定位符</a></p>
</li>
<li>
<p><a href="/code/website/definition/seo.html" target="_blank">SEO 搜索引擎优化</a></p>
</li>
<li>
<p><a href="/code/website/definition/mime.html" target="_blank">MIME Type 媒体类型</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>定义列表</h2>
<ul>
<li>
<p><a href="/code/website/definition/uri.html" target="_blank">URI 统一资源标识符</a></p>
</li>
<li>
<p><a href="/code/website/definition/url.html" target="_blank">URL 统一资源定位符</a></p>
</li>
<li>
<p><a href="/code/website/definition/seo.html" target="_blank">SEO 搜索引擎优化</a></p>
</li>
<li>
<p><a href="/code/website/definition/mime.html" target="_blank">MIME Type 媒体类型</a></p>
</li>
</ul>
]]></content>
    <category term="HTML"/>
    <published>2019-09-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Http 与 Https 介绍</title>
    <id>https://mister-hope.com/code/website/definition/https.html</id>
    <link href="https://mister-hope.com/code/website/definition/https.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>什么是 HTTP 协议</h2>
<p>HTTP 协议全称 Hyper Text Transfer Protocol，翻译过来就是超文本传输协议，位于 TCP/IP 四层模型当中的应用层。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>HTTP 协议通过 <strong>请求/响应</strong> 的方式，在客户端和服务端之间进行通信。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>这一切看起来很美好，但是 HTTP 协议有一个致命的缺点: <strong>不够安全</strong>。</p>]]></summary>
    <content type="html"><![CDATA[<h2>什么是 HTTP 协议</h2>
<p>HTTP 协议全称 Hyper Text Transfer Protocol，翻译过来就是超文本传输协议，位于 TCP/IP 四层模型当中的应用层。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>HTTP 协议通过 <strong>请求/响应</strong> 的方式，在客户端和服务端之间进行通信。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>这一切看起来很美好，但是 HTTP 协议有一个致命的缺点: <strong>不够安全</strong>。</p>
<p>HTTP 协议的信息传输完全以明文方式，不做任何加密，相当于是在网络上“裸奔”。这样会导致什么问题呢? 让我们打一个比方:</p>
<p>小灰是客户端，小灰的同事小红是服务端，有一天小灰试图给小红发送请求。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>但是，由于传输信息是明文，这个信息有可能被某个中间人恶意截获甚至篡改。这种行为叫做<strong>中间人攻击</strong>。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>如何进行加密呢?</p>
<p>小灰和小红可以事先约定一种<strong>对称加密</strong>方式，并且约定一个随机生成的密钥。后续的通信中，信息发送方都使用密钥对信息加密，而信息接收方通过同样的密钥对信息解密。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>这样做是不是就绝对安全了呢? 并不是。</p>
<p>虽然我们在后续的通信中对明文进行了加密，但是第一次约定加密方式和密钥的通信仍然是明文，如果第一次通信就已经被拦截了，那么密钥就会泄露给中间人，中间人仍然可以解密后续所有的通信内容。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>这可怎么办呢? 别担心，我们可以使用<strong>非对称加密</strong>，为密钥的传输做一层额外的保护。</p>
<p>非对称加密的一组秘钥对中，包含一个公钥和一个私钥。明文既可以用公钥加密，用私钥解密；也可以用私钥加密，用公钥解密。</p>
<p>在小灰和小红建立通信的时候，小红首先把自己的公钥 Key1 发给小灰:</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>收到小红的公钥以后，小灰自己生成一个用于对称加密的密钥 Key2，并且用刚才接收的公钥 Key1 对 Key2 进行加密(这里有点绕)，发送给小红:</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>小红利用自己非对称加密的私钥，解开了公钥 Key1 的加密，获得了 Key2 的内容。从此以后，两人就可以利用 Key2 进行对称加密的通信了。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>在通信过程中，即使中间人在一开始就截获了公钥 Key1，由于不知道私钥是什么，也无从解密。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>是什么坏主意呢? 中间人虽然不知道小红的私钥是什么，但是在截获了小红的公钥 Key1 之后，却可以偷天换日，自己另外生成一对公钥私钥，把自己的公钥 Key3 发送给小灰。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>小灰不知道公钥被偷偷换过，以为 Key3 就是小红的公钥。于是按照先前的流程，用 Key3 加密了自己生成的对称加密密钥 Key2，发送给小红。</p>
<p>这一次通信再次被中间人截获，中间人先用自己的私钥解开了 Key3 的加密，获得 Key2，然后再用当初小红发来的 Key1 重新加密，再发给小红。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>这样一来，两个人后续的通信尽管用 Key2 做了对称加密，但是中间人已经掌握了 Key2，所以可以轻松进行解密。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>是什么解决方案呢? 难道再把公钥进行一次加密吗? 这样只会陷入鸡生蛋蛋生鸡，永无止境的困局。</p>
<p>这时候，我们有必要引入第三方，一个权威的证书颁发机构(CA)来解决。</p>
<p>到底什么是证书呢? 证书包含如下信息:</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<p>为了便于说明，我们这里做了简化，只列出了一些关键信息。至于这些证书信息的用处，我们看看具体的通信流程就能够弄明白了。</p>
<p>流程如下:</p>
<ol>
<li>
<p>作为服务端的小红，首先把自己的公钥发给证书颁发机构，向证书颁发机构申请证书。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
</li>
<li>
<p>证书颁发机构自己也有一对公钥私钥。机构利用自己的私钥来加密 Key1，并且通过服务端网址等信息生成一个证书签名，证书签名同样经过机构的私钥加密。证书制作完成后，机构把证书发送给了服务端小红。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
</li>
<li>
<p>当小灰向小红请求通信的时候，小红不再直接返回自己的公钥，而是把自己申请的证书返回给小灰。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
</li>
<li>
<p>小灰收到证书以后，要做的第一件事情是验证证书的真伪。需要说明的是，各大浏览器和操作系统已经维护了所有权威证书机构的名称和公钥。所以小灰只需要知道是</p>
<p>哪个机构颁布的证书，就可以从本地找到对应的机构公钥，解密出证书签名。</p>
<p>接下来，小灰按照同样的签名规则，自己也生成一个证书签名，如果两个签名一致，说明证书是有效的。</p>
<p>验证成功后，小灰就可以放心地再次利用机构公钥，解密出服务端小红的公钥 Key1。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
</li>
<li>
<p>像之前一样，小灰生成自己的对称加密密钥 Key2，并且用服务端公钥 Key1 加密 Key2，发送给小红。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
</li>
<li>
<p>最后，小红用自己的私钥解开加密，得到对称加密密钥 Key2。于是两人开始用 Key2 进行对称加密的通信。</p>
<figure><figcaption>Http 漫画</figcaption></figure>
</li>
</ol>
<p>在这样的流程下，我们不妨想一想，中间人是否还具有使坏的空间呢?</p>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<figure><figcaption>Http 漫画</figcaption></figure>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>最新推出的 TLS 协议，是 SSL 3.0 协议的升级版，和 SSL 协议的大体原理是相同的。</p>
</div>
]]></content>
    <author>
      <name>小灰</name>
    </author>
    <contributor>
      <name>小灰</name>
    </contributor>
    <published>2019-11-03T00:00:00.000Z</published>
    <rights>本文转载自&amp;lt;a href=&amp;quot;https://zhuanlan.zhihu.com/p/57142784&amp;quot;&amp;gt;小灰的知乎专栏&amp;lt;/a&amp;gt;</rights>
  </entry>
  <entry>
    <title type="text">MIME type</title>
    <id>https://mister-hope.com/code/website/definition/mime.html</id>
    <link href="https://mister-hope.com/code/website/definition/mime.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<p>MIME type，即媒体类型(media type) (有时是“内容类型(content type)”) 是指示文件类型的字符串，与文件一起发送。</p>
<p>例如，一个声音文件可能被标记为 <code>audio/ogg</code> ，一个图像文件可能是 <code>image/png</code>。</p>
<p>它与传统 Windows 上的文件扩展名有相同目的。</p>
]]></summary>
    <content type="html"><![CDATA[<p>MIME type，即媒体类型(media type) (有时是“内容类型(content type)”) 是指示文件类型的字符串，与文件一起发送。</p>
<p>例如，一个声音文件可能被标记为 <code>audio/ogg</code> ，一个图像文件可能是 <code>image/png</code>。</p>
<p>它与传统 Windows 上的文件扩展名有相同目的。</p>
]]></content>
    <category term="HTML"/>
    <published>2019-09-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">SEO</title>
    <id>https://mister-hope.com/code/website/definition/seo.html</id>
    <link href="https://mister-hope.com/code/website/definition/seo.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>简介</h2>
<p>搜索引擎优化 (<strong>S</strong>earch <strong>E</strong>ngine <strong>O</strong>ptimization)，是一种透过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少网站都希望透过各种形式来影响搜索引擎的排序，让自己的网站可以有优秀的搜索排名。</p>
<p>所谓“针对搜索引擎作最优化的处理”，是指为了要让网站更容易被搜索引擎接受。搜索引擎会将网站彼此间的内容做一些相关性的资料比对，然后再由浏览器将这些内容以最快速且接近最完整的方式，呈现给搜索者。搜索引擎优化就是通过搜索引擎的规则进行优化，为用户打造更好的用户体验，最终的目的就是做好用户体验。</p>]]></summary>
    <content type="html"><![CDATA[<h2>简介</h2>
<p>搜索引擎优化 (<strong>S</strong>earch <strong>E</strong>ngine <strong>O</strong>ptimization)，是一种透过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。由于不少研究发现，搜索引擎的用户往往只会留意搜索结果最前面的几个条目，所以不少网站都希望透过各种形式来影响搜索引擎的排序，让自己的网站可以有优秀的搜索排名。</p>
<p>所谓“针对搜索引擎作最优化的处理”，是指为了要让网站更容易被搜索引擎接受。搜索引擎会将网站彼此间的内容做一些相关性的资料比对，然后再由浏览器将这些内容以最快速且接近最完整的方式，呈现给搜索者。搜索引擎优化就是通过搜索引擎的规则进行优化，为用户打造更好的用户体验，最终的目的就是做好用户体验。</p>
<h2>相关文档</h2>
<ul>
<li>
<p><a href="https://schema.org/" target="_blank" rel="noopener noreferrer">Schema Org</a></p>
<ul>
<li>
<p><a href="https://schema.org/docs/gs.html" target="_blank" rel="noopener noreferrer">快速上手</a></p>
</li>
<li>
<p><a href="https://schema.org/docs/full.html" target="_blank" rel="noopener noreferrer">全部的 Schema 列表</a></p>
</li>
</ul>
</li>
<li>
<p><a href="https://ogp.me/" target="_blank" rel="noopener noreferrer">开放内容协议 OGP</a> (<strong>O</strong>pen <strong>G</strong>raph <strong>Pr</strong>otocal)</p>
</li>
<li>
<p><a href="https://developers.google.com/search/docs/" target="_blank" rel="noopener noreferrer">Google 搜索指南</a></p>
<ul>
<li><a href="https://developers.google.com/search/docs/guides/get-started" target="_blank" rel="noopener noreferrer">快速上手</a></li>
</ul>
</li>
</ul>
<h2>相关工具</h2>
<ul>
<li>
<p><a href="https://developers.google.com/search" target="_blank" rel="noopener noreferrer">Google 搜索中心</a></p>
</li>
<li>
<p><a href="https://search.google.com/search-console/" target="_blank" rel="noopener noreferrer">Google Search Console</a></p>
<p>Search Console 是 Google 推出的一款免费工具，可帮助开发者、网站所有者和搜索引擎优化专家了解其网站在 Google 搜索上的表现。</p>
</li>
<li>
<p><a href="https://search.google.com/test/rich-results" target="_blank" rel="noopener noreferrer">Google 富媒体测试工具</a></p>
</li>
</ul>
]]></content>
    <category term="HTML"/>
    <published>2019-09-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">URI</title>
    <id>https://mister-hope.com/code/website/definition/uri.html</id>
    <link href="https://mister-hope.com/code/website/definition/uri.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>简介</h2>
<p><strong>统一资源标识符</strong>(英语: Uniform Resource Identifier，缩写: URI)在电脑术语中是一个用于标识某一互联网资源名称的字符串。</p>
<p>该种标识允许用户对网络中(一般指万维网)的资源通过特定的协议进行交互操作。URI 的最常见的形式是统一资源定位符(URL)，经常指定为非正式的网址。更罕见的用法是统一资源名称(URN)，其目的是通过提供一种途径。用于在特定的名字空间资源的标识，以补充网址。</p>
<h2>与 URL 和 URN 的关系</h2>
<h3>URN</h3>
<p><strong>统一资源名称</strong>(英语: Uniform Resource Name，缩写: URN)是统一资源标识(URI)的历史名字，它使用 <code>urn:</code> 作为 URI scheme。</p>]]></summary>
    <content type="html"><![CDATA[<h2>简介</h2>
<p><strong>统一资源标识符</strong>(英语: Uniform Resource Identifier，缩写: URI)在电脑术语中是一个用于标识某一互联网资源名称的字符串。</p>
<p>该种标识允许用户对网络中(一般指万维网)的资源通过特定的协议进行交互操作。URI 的最常见的形式是统一资源定位符(URL)，经常指定为非正式的网址。更罕见的用法是统一资源名称(URN)，其目的是通过提供一种途径。用于在特定的名字空间资源的标识，以补充网址。</p>
<h2>与 URL 和 URN 的关系</h2>
<h3>URN</h3>
<p><strong>统一资源名称</strong>(英语: Uniform Resource Name，缩写: URN)是统一资源标识(URI)的历史名字，它使用 <code>urn:</code> 作为 URI scheme。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>更多详情请见 <a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%90%8D" target="_blank" rel="noopener noreferrer">维基百科</a></p>
</div>
<h3>URL</h3>
<p><strong>统一资源定位符</strong>(英语: Uniform Resource Locator，缩写: URL；或称统一资源定位器、定位地址、URL 地址，俗称网页地址或简称网址)是因特网上标准的资源的地址(Address)，如同在网络上的门牌。</p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>更多详情请见 <a href="/code/website/definition/url.html" target="_blank">URL</a></p>
</div>
<h3>关系</h3>
<figure><figcaption>URL方案分类图</figcaption></figure>
<p>URL(定位符)和 URN(名称)方案属于 URI 的子类，URI 可以为 URL 或 URN 两者之一或同时是 URI 和 URN。技术上讲，URL 和 URN 属于资源 ID；但是，人们往往无法将某种方案归类于两者中的某一个: 所有的 URI 都可被作为名称看待，而某些方案同时体现了两者中的不同部分。
URI 可被视为定位符(URL)，名称(URN)或两者兼备。统一资源名(URN)如同一个人的名称，而统一资源定位符(URL)代表一个人的住址。换言之，URN 定义某事物的身份，而 URL 提供查找该事物的方法。</p>
<div class="hint-container tip">
<p class="hint-container-title">例子</p>
<p>用于标识唯一书目的 ISBN 系统是一个典型的 URN 使用范例。例如，ISBN <code>0-486-27557-4</code> 无二义性地标识出莎士比亚的戏剧《罗密欧与朱丽叶》的某一特定版本。为获得该资源并阅读该书，人们需要它的位置，也就是一个 URL 地址。在类 Unix 操作系统中，一个典型的 URL 地址可能是一个文件目录，例如 <code>file:///home/username/RomeoAndJuliet.pdf</code>。该 URL 标识出存储于本地硬盘中的电子书文件。因此，URL 和 URN 有着互补的作用。</p>
</div>
<h3>技术观点</h3>
<p>URL 是一种 URI，它标识一个互联网资源，并指定对其进行操作或获取该资源的方法。可能通过对主要访问手段的描述，也可能通过网络“位置”进行标识。例如，<a href="http://www.wikipedia.org/" target="_blank" rel="noopener noreferrer">http://www.wikipedia.org/</a> 这个 URL，标识一个特定资源(首页)并表示该资源的某种形式(例如以编码字符表示的，首页的 HTML 代码)是可以通过 HTTP 协议从 <code>www.wikipedia.org</code> 这个网络主机获得的。URN 是基于某名字空间通过名称指定资源的 URI。人们可以通过 URN 来指出某个资源，而无需指出其位置和获得方式。资源无需是基于互联网的。例如，URN <code>urn:ISBN 0-395-36341-1</code> 指定标识系统(即国际标准书号 ISBN)和某资源在该系统中的唯一表示的 URI。它可以允许人们在不指出其位置和获得方式的情况下谈论这本书。</p>
<p>技术刊物，特别是 IETF 和 W3C 发布的标准中，通常不再使用“URL”这一术语，因为很少需要区别 URL 和 URI。但是，在非技术文献和万维网软件中，URL 这一术语仍被广泛使用。此外，术语“网址”(没有正式定义)在非技术文献中时常作为 URL 或 URI 的同义词出现，虽然往往其指代的只是“http”和“https”协议。</p>
<h2>文法格式</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>                    hierarchical part
        ┌───────────────────┴─────────────────────┐
                    authority               path
        ┌───────────────┴───────────────┐┌───┴────┐
  abc://username:password@example.com:123/path/data?key=value&amp;key2=value2#fragid1
  └┬┘   └───────┬───────┘ └────┬────┘ └┬┘           └─────────┬─────────┘ └──┬──┘
scheme  user information     host     port                  query         fragment

  urn:example:mammal:monotreme:echidna
  └┬┘ └──────────────┬───────────────┘
scheme              path
</code></pre></div>]]></content>
    <category term="HTML"/>
    <published>2019-09-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">URL</title>
    <id>https://mister-hope.com/code/website/definition/url.html</id>
    <link href="https://mister-hope.com/code/website/definition/url.html"/>
    <updated>2023-03-24T09:43:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>简介</h2>
<p><strong>统一资源定位符</strong>(英语: Uniform Resource Locator，缩写: URL；或称统一资源定位器、定位地址、URL 地址，俗称网页地址或简称网址)是因特网上标准的资源的地址(Address)，如同在网络上的门牌。</p>
<p>统一资源定位符的标准格式如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[协议类型]://[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>简介</h2>
<p><strong>统一资源定位符</strong>(英语: Uniform Resource Locator，缩写: URL；或称统一资源定位器、定位地址、URL 地址，俗称网页地址或简称网址)是因特网上标准的资源的地址(Address)，如同在网络上的门牌。</p>
<p>统一资源定位符的标准格式如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[协议类型]://[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]
</code></pre></div><p>统一资源定位符的完整格式如下:</p>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>[协议类型]://[访问资源需要的凭证信息]@[服务器地址]:[端口号]/[资源层级UNIX文件路径][文件名]?[查询]#[片段ID]
</code></pre></div><div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>更多详情请见 <a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6" target="_blank" rel="noopener noreferrer">维基百科</a></p>
</div>
<h2>绝对 URL 和相对 URL</h2>
<p>您可能会在网络上遇到两个术语，绝对 URL 和相对 URL(或者称为，绝对链接和相对链接):</p>
<h3>绝对 URL</h3>
<p>指向由其在 Web 上的绝对位置定义的位置，包括 protocol(协议) 和 domain name(域名)。</p>
<div class="hint-container tip">
<p class="hint-container-title">例子</p>
<p>如果 index.html 页面上传到 projects 这一个目录。并且 projects 目录位于 web 服务站点的根目录，web 站点的域名为 <code>http://www.example.com</code>，那么这个页面就可以通过 <code>http://www.example.com/projects/index.html</code> 访问(或者通过 <code>http://www.example.com/projects/</code> 来访问，因为在没有指定特定的 URL 的情况下，大多数 web 服务会默认访问加载 <code>index.html</code> 这类页面)</p>
</div>
<p>不管绝对 URL 在哪里使用，它总是指向确定的相同位置。</p>
<h3>相对 URL</h3>
<p>指向与您链接的文件相关的位置，更像我们在前面一节中所看到的位置。例如，如果我们想从示例文件链接 <code>http://www.example.com/projects/index.html</code> 转到相同目录下的一个 PDF 文件，URL 就是文件名 URL(如: <code>project-brief.pdf</code>)。如果 PDF 文件能够在 projects 的子目录 pdfs 中访问到，相对路径就是 <code>pdfs/project-brief.pdf</code>(对应的绝对 URL 是 <code>http://www.example.com/projects/pdfs/project-brief.pdf</code>)</p>
<p>一个相对 URL 将指向不同的位置，这取决于它所在的文件所在的位置——例如，如果我们把 index.html 文件从 projects 目录移动到 Web 站点的根目录(最高级别，而不是任何目录中)，里面的 <code>pdfs/project-brief.pdf</code> 相对 URL 将会指向 <code>http://www.example.com/pdfs/project-brief.pdf</code>，而不是 <code>http://www.example.com/projects/pdfs/project-brief.pdf</code></p>
<p>当然，project-brief.pdf 文件和 pdfs 文件夹的位置不会因为您移动了 <code>index.html</code> 文件而突然发生变化——这将使您的链接指向错误的位置，因此如果单击它，它将无法工作。您得小心点!</p>
]]></content>
    <category term="HTML"/>
    <published>2019-09-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">环境变量</title>
    <id>https://mister-hope.com/code/windows/env-variable.html</id>
    <link href="https://mister-hope.com/code/windows/env-variable.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>以 Windows 10 系统为例，直接在左下角搜索栏中输入“系统变量”</p>
<figure><figcaption>搜索</figcaption></figure>
<p>在弹出的框中点击环境变量</p>
<figure><figcaption>系统变量</figcaption></figure>
<p>如果你需要添加环境变量，直接添加即可。</p>
<p>如果你只是希望添加到 Path，在弹出的新窗口中找到 path，选中并点击编辑</p>
<figure><figcaption>系统变量</figcaption></figure>
<p>点击添加输入想要添加到 path 的路径或者执行文件名即可</p>]]></summary>
    <content type="html"><![CDATA[<p>以 Windows 10 系统为例，直接在左下角搜索栏中输入“系统变量”</p>
<figure><figcaption>搜索</figcaption></figure>
<p>在弹出的框中点击环境变量</p>
<figure><figcaption>系统变量</figcaption></figure>
<p>如果你需要添加环境变量，直接添加即可。</p>
<p>如果你只是希望添加到 Path，在弹出的新窗口中找到 path，选中并点击编辑</p>
<figure><figcaption>系统变量</figcaption></figure>
<p>点击添加输入想要添加到 path 的路径或者执行文件名即可</p>
<figure><figcaption>系统变量</figcaption></figure>
]]></content>
    <category term="基础"/>
    <published>2019-09-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Update Flutter Project Deps</title>
    <id>https://mister-hope.com/note/flutter/</id>
    <link href="https://mister-hope.com/note/flutter/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[
<h2>Gradle</h2>
<p>Versions can be found here: <a href="https://gradle.org/releases/" target="_blank" rel="noopener noreferrer">https://gradle.org/releases/</a></p>
<h2>Kotlin Plugin</h2>
<p>Versions can be found here: <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm" target="_blank" rel="noopener noreferrer">https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm</a></p>]]></summary>
    <content type="html"><![CDATA[
<h2>Gradle</h2>
<p>Versions can be found here: <a href="https://gradle.org/releases/" target="_blank" rel="noopener noreferrer">https://gradle.org/releases/</a></p>
<h2>Kotlin Plugin</h2>
<p>Versions can be found here: <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm" target="_blank" rel="noopener noreferrer">https://plugins.gradle.org/plugin/org.jetbrains.kotlin.jvm</a></p>
<h2>Android Gradle Build Tools</h2>
<ul>
<li>
<p><a href="https://maven.google.com/web/index.html" target="_blank" rel="noopener noreferrer">Google maven repository website</a></p>
</li>
<li>
<p><a href="https://developer.android.google.cn/studio/releases/gradle-plugin?hl=zh-cn#updating-plugin" target="_blank" rel="noopener noreferrer">Related docs</a></p>
</li>
</ul>
]]></content>
    <published>2022-11-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">WSA</title>
    <id>https://mister-hope.com/note/wsa/</id>
    <link href="https://mister-hope.com/note/wsa/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <published>2022-11-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">WSL</title>
    <id>https://mister-hope.com/note/wsl/</id>
    <link href="https://mister-hope.com/note/wsl/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>目前使用的系统是 WSL2。</p>
<p>其中以下操作可能需要在新机器上进行相同操作:</p>
<h2>Windows 侧</h2>
<p>Windows 侧可以在用户目录下创建 <code>.wslconfig</code> 文件，用于配置 WSL2。</p>
<div class="language-conf" data-ext="conf" data-title="conf"><pre class="language-conf"><code>[wsl2]
# Limits VM memory in WSL 2 to 8 GB
memory=8GB
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<p>目前使用的系统是 WSL2。</p>
<p>其中以下操作可能需要在新机器上进行相同操作:</p>
<h2>Windows 侧</h2>
<p>Windows 侧可以在用户目录下创建 <code>.wslconfig</code> 文件，用于配置 WSL2。</p>
<div class="language-conf" data-ext="conf" data-title="conf"><pre class="language-conf"><code>[wsl2]
# Limits VM memory in WSL 2 to 8 GB
memory=8GB
</code></pre></div><h2>WSL 侧</h2>
<p>WSL 侧可以通过 <code>/etc/wsl.conf</code> 进行配置。</p>
<h3>启用 init.d 支持</h3>
<p>在 <code>/etc/wsl.conf</code> 中加入:</p>
<div class="language-conf" data-ext="conf" data-title="conf"><pre class="language-conf"><code>[boot]
systemd=true
</code></pre></div><h3>生成新的 RSA 密钥</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"mister-hope@outlook.com"</span>
</code></pre></div><h3>使用 Windows 代理</h3>
<p>可以在 <code>.bashrc</code> 中加入以下内容:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># add for proxy</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">hostIP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ip</span> route <span class="token operator">|</span> <span class="token function">grep</span> default <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $3}'</span><span class="token variable">)</span></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">socks5Port</span><span class="token operator">=</span><span class="token number">10810</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">httpPort</span><span class="token operator">=</span><span class="token number">10811</span>

<span class="token builtin class-name">alias</span> <span class="token assign-left variable">proxy</span><span class="token operator">=</span><span class="token string">'
  export HTTPS_PROXY="socks5://${hostIP}:${socks5Port}";
  export HTTP_PROXY="socks5://${hostIP}:${socks5Port}";
  export ALL_PROXY="socks5://${hostIP}:${socks5Port}";
  git config --global http.proxy "socks5://${hostIP}:${socks5Port}";
  git config --global https.proxy "socks5://${hostIP}:${socks5Port}";
  echo -e "Acquire::http::Proxy \"socks5://${hostIP}:${socks5Port}\"; " | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;
  echo -e "Acquire::https::Proxy \"socks5://${hostIP}:${socks5Port}\"; " | sudo tee -a /etc/apt/apt.conf.d/proxy.conf;
  if [ -e "~/.ssh/config"]; then
    sed -i "s/^ProxyCommand \/usr\/bin\/corkscrew .* %h %p$/ProxyCommand \/usr\/bin\/corkscrew ${hostIP} ${httpPort} %h %p/g" ~/.ssh/config;
  else
    echo "Host github.com
  User git
  Port 22
  Hostname github.com
  IdentityFile "~/.ssh/id_rsa"
  TCPKeepAlive yes
  ProxyCommand /usr/bin/corkscrew ${hostIP} ${httpPort} %h %p

Host ssh.github.com
  User git
  Port 443
  Hostname ssh.github.com
  IdentityFile "~/.ssh/id_rsa"
  TCPKeepAlive yes
  ProxyCommand /usr/bin/corkscrew ${hostIP} ${httpPort} %h %p
"
'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">unproxy</span><span class="token operator">=</span><span class="token string">'
  unset HTTPS_PROXY;
  unset HTTP_PROXY;
  unset ALL_PROXY;
  git config --global --unset http.proxy;
  git config --global --unset https.proxy;
  sudo sed -i -e '</span>/Acquire::http::Proxy/d<span class="token string">' /etc/apt/apt.conf.d/proxy.conf;
  sudo sed -i -e '</span>/Acquire::https::Proxy/d<span class="token string">' /etc/apt/apt.conf.d/proxy.conf;
'</span>
</code></pre></div><p>这样就可以快速地使用 proxy 和 unproxy 命令。</p>
<h3>安装 nvm 和 Node.js</h3>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre></div><ol>
<li>
<p>由于 GitHub 已经遭到封锁，可以考虑安装 V2Ray 给 WSL2 以获得推送代码的能力。</p>
</li>
<li>
<p>更改 Node.js 可以使用的 Old Space 大小:</p>
<p>在用户目录的 <code>.bashrc</code> 中加入:</p>
<div class="language-conf" data-ext="conf" data-title="conf"><pre class="language-conf"><code>export NODE_OPTIONS="--max-old-space-size=8192"
</code></pre></div></li>
</ol>
]]></content>
    <published>2022-11-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Git 代理</title>
    <id>https://mister-hope.com/software/git/proxy.html</id>
    <link href="https://mister-hope.com/software/git/proxy.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>由于目前 GitHub 已经在全国大部分范围内被主要运营商进行 DNS 封锁，所以如果需要配合 GitHub 使用 Git，需要进行代理设置。</p>
<h2>代理设置</h2>
<p>通常情况下，我们可以通过设置环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来进行代理设置。</p>
<p>在 Windows 下，我们可以通过设置环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来进行代理设置。</p>
<details class="hint-container details"><summary>Windows 例子</summary>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">HTTP_PROXY</span><span class="token operator">=</span>http://127.0.0.1:1080
<span class="token builtin class-name">set</span> <span class="token assign-left variable">HTTPS_PROXY</span><span class="token operator">=</span>http://127.0.0.1:1080
</code></pre></div></details>]]></summary>
    <content type="html"><![CDATA[<p>由于目前 GitHub 已经在全国大部分范围内被主要运营商进行 DNS 封锁，所以如果需要配合 GitHub 使用 Git，需要进行代理设置。</p>
<h2>代理设置</h2>
<p>通常情况下，我们可以通过设置环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来进行代理设置。</p>
<p>在 Windows 下，我们可以通过设置环境变量 <code>HTTP_PROXY</code> 和 <code>HTTPS_PROXY</code> 来进行代理设置。</p>
<details class="hint-container details"><summary>Windows 例子</summary>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">HTTP_PROXY</span><span class="token operator">=</span>http://127.0.0.1:1080
<span class="token builtin class-name">set</span> <span class="token assign-left variable">HTTPS_PROXY</span><span class="token operator">=</span>http://127.0.0.1:1080
</code></pre></div></details>
<details class="hint-container details"><summary>Linux 例子</summary>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">HTTP_PROXY</span><span class="token operator">=</span>http://127.0.0.1:1080
<span class="token builtin class-name">export</span> <span class="token assign-left variable">HTTPS_PROXY</span><span class="token operator">=</span>http://127.0.0.1:1080
</code></pre></div></details>
<p>上述做法仅对当前终端有效，如果需要永久生效，可以将上述命令添加到系统环境变量 (Windows) 或 <code>~/.bashrc</code> (Linux) 中。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p><a href="/code/windows/env-variable.html" target="_blank">Windows 添加环境变量</a></p>
</div>
<h2>SSH 配置</h2>
<p>如果你在使用 22 端口通过 SSH 使用 Git，那么你需要在用户目录下的 <code>.ssh</code> 目录新建 <code>config</code> 文件，并输入以下内容:</p>
<div class="language-conf" data-ext="conf" data-title="conf"><pre class="language-conf"><code>Host github.com
  User git
  Port 22
  Hostname github.com
  # 这里在 Windows 下需要替换成实际目录，如 "C:\Users\mister-hope\.ssh\id_rsa"
  IdentityFile "~/.ssh/id_rsa"
  TCPKeepAlive yes
  # Ubuntu 需要安装 corkscrew
  ProxyCommand /usr/bin/corkscrew 172.31.16.1 10808 %h %p
  # Windows 可以改为 Git 安装目录下的 connect，如
  # ProxyCommand "C:\Program Files\Git\mingw64\bin\connect" -S 127.0.0.1:10808 -a none %h %p

Host ssh.github.com
  User git
  Port 443
  Hostname ssh.github.com
  # 这里在 Windows 下需要替换成实际目录，如 "C:\Users\mister-hope\.ssh\id_rsa"
  IdentityFile "~/.ssh/id_rsa"
  TCPKeepAlive yes
  # Ubuntu 需要安装 corkscrew
  ProxyCommand /usr/bin/corkscrew 172.31.16.1 10808 %h %p
  # Windows 可以改为 Git 安装目录下的 connect，如
  # ProxyCommand "C:\Program Files\Git\mingw64\bin\connect" -S 127.0.0.1:10808 -a none %h %p

</code></pre></div><div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>如果在 WSL 使用，获取 Windows 的 IP 地址命令为 <code>ip route | grep default | awk '{print $3}'</code>。</p>
<p>特别注意，如不进行额外配置，每次重启后主机地址都会发生变化。</p>
</div>
<p>你可以使用 <code>ssh -T git@github.com</code> 来测试你的代理配置是否有效。</p>
]]></content>
    <category term="Git"/>
    <published>2022-11-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">后端开发</title>
    <id>https://mister-hope.com/code/back-end/</id>
    <link href="https://mister-hope.com/code/back-end/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>后端入门</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>2023 年后端还是 Java 比较多</p>
</div>
<h3>PHP</h3>
<p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言，免费，并且使用非常广泛。PHP (全称 Hypertext Preprocessor，即超文本预处理器)是一种通用开源脚本语言。</p>
<p>PHP 手册:</p>
<ul>
<li>
<p><a href="http://www.w3school.com.cn/php/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/php/php-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>后端入门</h2>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>2023 年后端还是 Java 比较多</p>
</div>
<h3>PHP</h3>
<p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言，免费，并且使用非常广泛。PHP (全称 Hypertext Preprocessor，即超文本预处理器)是一种通用开源脚本语言。</p>
<p>PHP 手册:</p>
<ul>
<li>
<p><a href="http://www.w3school.com.cn/php/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/php/php-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>
<p>如果服务器访问数量不大的情况下，PHP 作为一种门槛低，开发方便的脚本语言，还是挺受到欢迎的。</p>
<h3>ASP</h3>
<p>ASP 文件可包含文本、HTML 标签和脚本。ASP 文件中的脚本可在服务器上执行。由于 ASP 在服务器上运行，浏览器无需支持客户端脚本就可以显示 ASP 文件!</p>
<ul>
<li>
<p><a href="http://www.w3school.com.cn/asp/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/asp/asp-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>更多详情有待日后补充</p>
</div>
]]></content>
    <category term="后端"/>
    <published>2019-09-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">操作系统</title>
    <id>https://mister-hope.com/code/basic/os.html</id>
    <link href="https://mister-hope.com/code/basic/os.html"/>
    <updated>2023-03-12T09:46:14.000Z</updated>
    <summary type="html"><![CDATA[<p>操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。</p>
]]></summary>
    <content type="html"><![CDATA[<p>操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。</p>
<!-- more -->
<p>操作系统会控制其他程序运行，管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序，例如:</p>
<ol>
<li>
<p>文件系统</p>
<p>提供计算机存储信息的结构，信息存储在文件中，文件主要存储在计算机的内部硬盘里，在目录的分层结构中组织文件。文件系统为操作系统提供了组织管理数据的方式。</p>
</li>
<li>
<p>设备驱动程序</p>
<p>提供连接计算机的每个硬件设备的接口，设备驱动器使程序能够写入设备，而不需要了解执行每个硬件的细节。简单来说，就是让您能吃到鸡蛋，但不用养一只鸡。</p>
</li>
<li>
<p>用户接口</p>
<p>操作系统需要为用户提供一种运行程序和访问文件系统的方法。如常用的 Windows 图形界面，可以理解为一种用户与操作系统交互的方式；智能手机的 Android 或 iOS 系统，也是一种操作系统的交互方式。</p>
</li>
<li>
<p>系统服务程序</p>
<p>当计算机启动时，会自启动许多系统服务程序，执行安装文件系统、启动网络服务、运行预定任务等操作。</p>
</li>
</ol>
<p>打个比方，操作系统就好像是一个政府，其它软件都会被它管控；操作系统在给其他软件提供各种便利的同时，还会约束其他软件不能为所欲为。</p>
<figure><figcaption>操作系统结构示意图</figcaption></figure>
<p>目前流行的服务器和 PC 端操作系统有 Linux、Windows、UNIX 等，手机操作系统有 Android、iOS，嵌入式操作系统有 Windows CE、PalmOS、eCos、uClinux 等。</p>
]]></content>
    <category term="基础"/>
    <published>2019-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">高级合并</title>
    <id>https://mister-hope.com/software/git/merge.html</id>
    <link href="https://mister-hope.com/software/git/merge.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>Squash merge</h2>
<p>通过使用 <code>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>
<p>也就是对于以下的例子</p>
<p><code>git merge feature</code> 得到的结果为:</p>
<p>而如果 <code>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code>git merge --squash feature</code> 得到:</p>
<h2>Cherry pick</h2>
<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>]]></summary>
    <content type="html"><![CDATA[<h2>Squash merge</h2>
<p>通过使用 <code>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>
<p>也就是对于以下的例子</p>
<p><code>git merge feature</code> 得到的结果为:</p>
<p>而如果 <code>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code>git merge --squash feature</code> 得到:</p>
<h2>Cherry pick</h2>
<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>
<p>在这种情况下，我们可以回到 main 分支，执行 <code>git cherry-pick &lt;commit id&gt;</code> 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。</p>
<ul>
<li><code>git cherry-pick &lt;commit id 1&gt; &lt;commit id 2&gt;</code> 表示挑拣 commit id 1 和 commit id 2</li>
<li><code>git cherry-pick &lt;commit id 1&gt;...&lt;commit id 2&gt;</code> 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交</li>
<li><code>git cherry-pick &lt;branch&gt;</code> 表示挑拣该分支最新的提交</li>
</ul>
]]></content>
    <category term="Git"/>
    <published>2022-08-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">模块</title>
    <id>https://mister-hope.com/code/node-js/cjs.html</id>
    <link href="https://mister-hope.com/code/node-js/cjs.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>
<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Node.js 环境中，一个 <code>.js</code> 文件就称之为一个模块(module)。</p>
<p>使用模块有什么好处?</p>
<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Node.js 内置的模块和来自第三方的模块。</p>
<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>
]]></summary>
    <content type="html"><![CDATA[<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>
<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Node.js 环境中，一个 <code>.js</code> 文件就称之为一个模块(module)。</p>
<p>使用模块有什么好处?</p>
<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Node.js 内置的模块和来自第三方的模块。</p>
<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>
<!-- more -->
<p>在上一节，我们编写了一个 hello.js 文件，这个 hello.js 文件就是一个模块，模块的名字就是文件名(去掉.js 后缀)，所以 hello.js 文件就是名为 hello 的模块。</p>
<p>我们把 hello.js 改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> greet<span class="token punctuation">;</span>
</code></pre></div><p>函数 <code>greet()</code> 是我们在 hello 模块中定义的，您可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数 <code>greet</code> 作为模块的输出暴露出去，这样其他模块就可以使用 <code>greet</code> 函数了。</p>
<p>问题是其他模块怎么使用 hello 模块的这个 <code>greet</code> 函数呢? 我们再编写一个 <code>main.js</code> 文件，调用 <code>hello</code> 模块的 <code>greet</code> 函数:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token comment">// 引入hello模块:</span>
<span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"Michael"</span><span class="token punctuation">;</span>

<span class="token function">greet</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Michael!</span>
</code></pre></div><p>注意到引入 <code>hello</code> 模块用 Node.js 提供的 <code>require</code> 函数:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>引入的模块作为变量保存在 <code>greet</code> 变量中，那 greet 变量到底是什么东西? 其实变量 <code>greet</code> 就是在 <code>hello.js</code> 中我们用 <code>module.exports = greet;</code> 输出的 <code>greet</code> 函数。所以，<code>main.js</code> 就成功地引用了 <code>hello.js</code> 模块中定义的 <code>greet()</code> 函数，接下来就可以直接使用它了。</p>
<p>在使用 <code>require()</code> 引入模块的时候，请注意模块的相对路径。因为 main.js 和 hello.js 位于同一个目录，所以我们用了当前目录.:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不要忘了写相对目录!</span>
</code></pre></div><p>如果只写模块名:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>则 Node.js 会依次在内置模块、全局模块和当前模块下查找 hello.js，您很可能会得到一个错误:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>js
    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
          <span class="token operator">^</span>
<span class="token literal-property property">Error</span><span class="token operator">:</span> Cannot find module <span class="token string">'hello'</span>
    at Function<span class="token punctuation">.</span>Module<span class="token punctuation">.</span>_resolveFilename
    at Function<span class="token punctuation">.</span>Module<span class="token punctuation">.</span>_load
    <span class="token operator">...</span>
    at Function<span class="token punctuation">.</span>Module<span class="token punctuation">.</span>_load
    at Function<span class="token punctuation">.</span>Module<span class="token punctuation">.</span>runMain
</code></pre></div><p>遇到这个错误，您要检查:</p>
<ul>
<li>模块名是否写对了；</li>
<li>模块文件是否存在；</li>
<li>相对路径是否写对了。</li>
</ul>
<h2>CommonJS 规范</h2>
<p>这种模块加载机制被称为 <code>CommonJS</code> 规范。在这个规范下，每个 <code>.js</code> 文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，<code>hello.js</code> 和 <code>main.js</code> 都申明了全局变量 <code>const s = 'xxx'</code>，但互不影响。</p>
<p>一个模块想要对外暴露变量(函数也是变量)，可以用 <code>module.exports = variable;</code>，一个模块要引用其他模块暴露的变量，用 <code>const ref = require('module_name');</code> 就拿到了引用模块的变量。</p>
<h2>总结</h2>
<p>要在模块中对外输出变量，用:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> variable<span class="token punctuation">;</span>
</code></pre></div><p>输出的变量可以是任意对象、函数、数组等等。</p>
<p>要引入其他模块输出的对象，用:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"other_module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>引入的对象具体是什么，取决于引入模块输出的对象。</p>
<h2>深入了解模块原理</h2>
<p>如果您想详细地了解<strong>CommonJS</strong>的模块实现原理，请继续往下阅读。如果不想了解，请结束阅读。</p>
<p>当我们编写 JavaScript 代码时，我们可以申明全局变量:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"global"</span><span class="token punctuation">;</span>
</code></pre></div><p>在浏览器中，大量使用全局变量可不好。如果您在 <code>a.js</code> 中使用了全局变量 s，那么，在 <code>b.js</code> 中也使用全局变量 s，将造成冲突，<code>b.js</code> 中对 s 赋值会改变 <code>a.js</code> 的运行逻辑。</p>
<p>也就是说，JavaScript 语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。</p>
<p>那 Node.js 是如何实现这一点的?</p>
<p>其实要实现“模块”这个功能，并不需要语法层面的支持。Node.js 也并不会增加任何 JavaScript 语法。实现“模块”功能的奥妙就在于 JavaScript 是一种函数式编程语言，它支持闭包。如果我们把一段 JavaScript 代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。</p>
<p>请注意我们编写的 <code>hello.js</code> 代码是这样的:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>Node.js 加载了 hello.js 后，它可以把代码包装一下，变成这样执行:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取的hello.js代码:</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// hello.js代码结束</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样一来，原来的全局变量 <code>s</code> 现在变成了匿名函数内部的局部变量。如果 Node.js 继续加载其他模块，这些模块中定义的“全局”变量 <code>s</code> 也互不干扰。</p>
<p>所以，Node.js 利用 JavaScript 的函数式编程的特性，轻而易举地实现了模块的隔离。</p>
<p>但是，模块的输出 <code>module.exports</code> 怎么实现?</p>
<p>这个也很容易实现，Node.js 可以先准备一个对象 <code>module</code>:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 准备module对象:</span>
<span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取的hello.js代码:</span>
  <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> greet<span class="token punctuation">;</span>
  <span class="token comment">// hello.js代码结束</span>
  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> exported <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 保存module:</span>
<span class="token function">save</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> exported<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>可见，变量 module 是 Node.js 在加载 js 文件前准备的一个变量，并将其传入加载函数，我们在 <code>hello.js</code> 中可以直接使用变量 <code>module</code> 原因就在于它实际上是函数的一个参数:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> greet<span class="token punctuation">;</span>
</code></pre></div><p>通过把参数 <code>module</code> 传递给 <code>load()</code> 函数，<code>hello.js</code> 就顺利地把一个变量传递给了 Node.js 执行环境，Node.js 会把 module 变量保存到某个地方。</p>
<p>由于 Node.js 保存了所有导入的 module，当我们用 <code>require()</code> 获取 module 时，Node.js 找到对应的 module，把这个 module 的 <code>exports</code> 变量返回，这样，另一个模块就顺利拿到了模块的输出:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>以上是 Node.js 实现 JavaScript 模块的一个简单的原理介绍。</p>
<h2>module.exports vs exports</h2>
<p>很多时候，您会看到，在 Node.js 环境中，有两种方法可以在一个模块中输出变量:</p>
<p>方法一: 对 module.exports 赋值:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// hello.js</span>

<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">hello</span><span class="token operator">:</span> hello<span class="token punctuation">,</span>
  <span class="token literal-property property">greet</span><span class="token operator">:</span> greet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>方法二: 直接使用 exports:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// hello.js</span>

<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>greet <span class="token operator">=</span> greet<span class="token punctuation">;</span>
</code></pre></div><p>但是您不可以直接对 exports 赋值:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 代码可以执行，但是模块并没有输出任何变量:</span>
exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">hello</span><span class="token operator">:</span> hello<span class="token punctuation">,</span>
  <span class="token literal-property property">greet</span><span class="token operator">:</span> greet<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>如果您对上面的写法感到十分困惑，不要着急，我们来分析 Node.js 的加载机制:</p>
<p>首先，Node.js 会把整个待加载的 hello.js 文件放入一个包装函数 load 中执行。在执行这个 load()函数前，Node.js 准备好了 module 变量:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>load()</code> 函数最终返回 <code>module.exports</code>:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">load</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// hello.js的文件内容</span>
    <span class="token operator">...</span>
    <span class="token comment">// load函数返回:</span>
    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> exported <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>也就是说，默认情况下，Node.js 准备的 <code>exports</code> 变量和 <code>module.exports</code> 变量实际上是同一个变量，并且初始化为空对象 <code>{}</code>，于是，我们可以写:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>也可以写:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"bar"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>换句话说，Node.js 默认给您准备了一个空对象 <code>{}</code>，这样您可以直接往里面加东西。</p>
<p>但是，如果我们要输出的是一个函数或数组，那么，只能给 <code>module.exports</code> 赋值:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>给 <code>exports</code> 赋值是无效的，因为赋值后，<code>module.exports</code> 仍然是空对象 <code>{}</code>。</p>
<h2>结论</h2>
<p>如果要输出一个键值对象 <code>{}</code>，可以利用 <code>exports</code> 这个已存在的空对象 <code>{}</code>，并继续在上面添加新的键值；</p>
<p>如果要输出一个函数或数组，必须直接对 <code>module.exports</code> 对象赋值。</p>
<p>所以我们可以得出结论: 直接对 <code>module.export</code>s 赋值，可以应对任何情况:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>或者:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>最终，我们强烈建议使用 <code>module.exports = xxx</code> 的方式来输出模块变量，这样，您只需要记忆一种方法。</p>
]]></content>
    <category term="Node.js"/>
    <published>2022-05-14T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">API</title>
    <id>https://mister-hope.com/code/mini-app/guide/service/api/</id>
    <link href="https://mister-hope.com/code/mini-app/guide/service/api/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。详细介绍请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener noreferrer">API 文档</a>。 </p>
]]></summary>
    <content type="html"><![CDATA[<p>小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。详细介绍请参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/" target="_blank" rel="noopener noreferrer">API 文档</a>。 </p>
<!-- more -->
<p>通常，在小程序 API 有以下几种类型:</p>
<h2>事件监听 API</h2>
<p>我们约定，以 on 开头的 API 用来监听某个事件是否触发，如: <code>wx.onSocketOpen</code>, <code>wx.onCompassChange</code> 等。</p>
<p>这类 API 接受一个回调函数作为参数，当事件触发时会调用这个回调函数，并将相关数据以参数形式传入。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>wx<span class="token punctuation">.</span><span class="token function">onCompassChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>direction<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>同步 API</h2>
<p>我们约定，以 <code>Sync</code> 结尾的 API 都是同步 API， 如 <code>wx.setStorageSync</code>，<code>wx.getSystemInfoSync</code> 等。此外，也有一些其他的同步 API，如 <code>wx.createWorker</code>, <code>wx.getBackgroundAudioManager</code> 等，详情参见 API 文档中的说明。</p>
<p>同步 API 的执行结果可以通过函数返回值直接获取，如果执行出错会抛出异常。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  wx<span class="token punctuation">.</span><span class="token function">setStorageSync</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>异步 API</h2>
<p>大多数 API 都是异步 API，如 <code>wx.request</code>，<code>wx.login</code> 等。这类 API 接口通常都接受一个 <code>Object</code> 类型的参数，这个参数都支持按需指定以下字段来接收接口调用结果:</p>
<h3>Object 参数说明</h3>
<p>| 参数名   | 类型     | 必填 | 说明                                           |
|</p>
]]></content>
    <category term="小程序"/>
    <published>2022-04-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Angular</title>
    <id>https://mister-hope.com/code/angular/</id>
    <link href="https://mister-hope.com/code/angular/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>
<p>框架强制 Typescript，更倾向于大型项目。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>
<p>框架强制 Typescript，更倾向于大型项目。</p>
<!-- more -->
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>2023 年 Angular 挺凉的了</p>
</div>
<div class="hint-container info">
<p class="hint-container-title">Angular 的优点</p>
<ol>
<li>零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config</li>
<li>官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级</li>
<li>提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面</li>
<li>框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发</li>
<li>内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合</li>
<li>每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题</li>
<li>通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改</li>
</ol>
</div>
<p>Angular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。</p>
<p>如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。</p>
<h2>相关链接</h2>
<ul>
<li><a href="https://angular.io/docs" target="_blank" rel="noopener noreferrer">官方文档</a></li>
<li><a href="https://angular.cn/docs" target="_blank" rel="noopener noreferrer">中文文档</a></li>
</ul>
]]></content>
    <category term="前端"/>
    <published>2020-05-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">MySQL</title>
    <id>https://mister-hope.com/software/mysql/</id>
    <link href="https://mister-hope.com/software/mysql/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li><a href="/software/mysql/intro.html" target="_blank">介绍</a></li>
<li><a href="/software/mysql/compare.html" target="_blank">5.7 版本与 8 的比较</a></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li><a href="/software/mysql/intro.html" target="_blank">介绍</a></li>
<li><a href="/software/mysql/compare.html" target="_blank">5.7 版本与 8 的比较</a></li>
</ul>
]]></content>
    <author>
      <name>李欣桐</name>
    </author>
    <contributor>
      <name>李欣桐</name>
    </contributor>
    <published>2022-01-12T00:00:00.000Z</published>
    <rights>Copyright by 李欣桐</rights>
  </entry>
  <entry>
    <title type="text">AJAX</title>
    <id>https://mister-hope.com/code/website/jQuery/ajax.html</id>
    <link href="https://mister-hope.com/code/website/jQuery/ajax.html"/>
    <updated>2022-02-12T05:50:30.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">章节过时</p>
<p>目前，一套代码已经可以在多个浏览器上运行良好了，所以 jQuery 的意义并不大。在 Node.js 中，我们使用 <a href="/code/node-js/package/axois.html" target="_blank">axios</a> 来进行请求。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">章节过时</p>
<p>目前，一套代码已经可以在多个浏览器上运行良好了，所以 jQuery 的意义并不大。在 Node.js 中，我们使用 <a href="/code/node-js/package/axois.html" target="_blank">axios</a> 来进行请求。</p>
</div>
<!-- more -->
<p>用 JavaScript 写 Ajax 前面已经介绍过了，主要问题就是不同浏览器需要写不同代码，并且状态和错误处理写起来很麻烦。</p>
<p>用 jQuery 的相关对象来处理 AJAX，不但不需要考虑浏览器问题，代码也能大大简化。</p>
<h2>Ajax</h2>
<p>jQuery 在全局对象 jQuery (也就是 <code>$</code>) 绑定了 <code>ajax()</code> 函数，可以处理 Ajax 请求。<code>ajax(url, settings)</code> 函数需要接收一个 URL 和一个可选的 settings 对象，常用的选项如下:</p>
<ul>
<li>
<p>async: 是否异步执行 Ajax 请求，默认为 <code>true</code>；</p>
</li>
<li>
<p>method: 发送的 Method，缺省为 <code>'GET'</code>，可指定为 <code>'POST'</code> 、<code>'PUT'</code> 等；</p>
</li>
<li>
<p>contentType: 发送 POST 请求的格式，默认值为 <code>'application/x-www-form-urlencoded; charset=UTF-8'</code>，也可以指定为 <code>text/plain</code>、<code>application/json</code>；</p>
</li>
<li>
<p>data: 发送的数据，可以是字符串、数组或 object。如果是 <code>GET</code> 请求，data 将被转换成 <code>query</code> 附加到 URL 上，如果是 <code>POST</code> 请求，根据 <code>contentType</code> 把 <code>data</code> 序列化成合适的格式；</p>
</li>
<li>
<p>headers: 发送的额外的 HTTP 头，必须是一个 object；</p>
</li>
<li>
<p>dataType: 接收的数据格式，可以指定为 <code>'html'</code>、<code>'xml'</code>、<code>'json'</code>、<code>'text'</code> 等，缺省情况下根据响应的 <code>Content-Type</code> 猜测。</p>
</li>
</ul>
<p>下面的例子发送一个 <code>GET</code> 请求，并返回一个 JSON 格式的数据:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jqxhr <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"/api/categories"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 请求已经发送了</span>
</code></pre></div><p>不过，如何用回调函数处理返回的数据和出错时的响应呢?</p>
<p>还记得 Promise 对象吗? jQuery 的 <code>jqXHR</code> 对象类似一个 Promise 对象，我们可以用链式写法来处理各种回调:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">ajaxLog</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> txt <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-response-text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  txt<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-response-text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> jqxhr <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"/api/categories"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ajaxLog</span><span class="token punctuation">(</span><span class="token string">"成功, 收到的数据: "</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">xhr<span class="token punctuation">,</span> status</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ajaxLog</span><span class="token punctuation">(</span><span class="token string">"失败: "</span> <span class="token operator">+</span> xhr<span class="token punctuation">.</span>status <span class="token operator">+</span> <span class="token string">", 原因: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ajaxLog</span><span class="token punctuation">(</span><span class="token string">"请求完成: 无论成功或失败都会调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>get</h2>
<p>对常用的 Ajax 操作，jQuery 提供了一些辅助方法。由于 GET 请求最常见，所以 jQuery 提供了 <code>get()</code> 方法，可以这么写:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jqxhr <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/path/to/resource"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Bob Lee"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">check</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>第二个参数如果是 object，jQuery 自动把它变成 <code>query string</code> 然后加到 URL 后面，实际的 URL 是:</p>
<p><code>/path/to/resource?name=Bob%20Lee&amp;check=1</code></p>
<p>这样我们就不用关心如何用 URL 编码并构造一个 <code>query string</code> 了。</p>
<h2>post</h2>
<p><code>post()</code> 和 <code>get()</code> 类似，但是传入的第二个参数默认被序列化为 <code>application/x-www-form-urlencoded</code>:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jqxhr <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/path/to/resource"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Bob Lee"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">check</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>实际构造的数据 <code>name=Bob%20Lee&amp;check=1</code> 作为 POST 的 body 被发送。</p>
<h2>getJSON</h2>
<p>由于 JSON 用得越来越普遍，所以 jQuery 也提供了 <code>getJSON()</code> 方法来快速通过 GET 获取一个 JSON 对象:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jqxhr <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/path/to/resource"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Bob Lee"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">check</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// data已经被解析为JSON对象了</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2>安全限制</h2>
<p>jQuery 的 Ajax 完全封装的是 JavaScript 的 Ajax 操作，所以它的安全限制和前面讲的用 JavaScript 写 Ajax 完全一样。</p>
<p>如果需要使用 JSONP，可以在 <code>ajax()</code> 中设置 <code>jsonp: 'callback'</code>，让 jQuery 实现 JSONP 跨域加载数据。</p>
<p>关于跨域的设置请参考浏览器 Ajax 一节中 CORS 的设置。</p>
]]></content>
    <category term="jQuery"/>
    <published>2019-11-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">修改 DOM 结构</title>
    <id>https://mister-hope.com/code/website/jQuery/modify-dom.html</id>
    <link href="https://mister-hope.com/code/website/jQuery/modify-dom.html"/>
    <updated>2022-02-12T05:50:30.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">章节过时</p>
<p>而且目前浏览器 API 已经基本统一，除非兼容旧版本 IE，否则无需针对不同浏览器写不同的代码。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">章节过时</p>
<p>而且目前浏览器 API 已经基本统一，除非兼容旧版本 IE，否则无需针对不同浏览器写不同的代码。</p>
</div>
<!-- more -->
<p>直接使用浏览器提供的 API 对 DOM 结构进行修改，不但代码复杂，而且要针对浏览器写不同的代码。</p>
<p>有了 jQuery，我们就专注于操作 jQuery 对象本身，底层的 DOM 操作由 jQuery 完成就可以了，这样一来，修改 DOM 也大大简化了。</p>
<h2>添加 DOM</h2>
<p>要添加新的 DOM 节点，除了通过 jQuery 的 <code>html()</code> 这种暴力方法外，还可以用 <code>append()</code> 方法，例如:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-div<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Swift<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>如何向列表新增一个语言? 首先要拿到 <code>&lt;ul&gt;</code> 节点:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div&gt;ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>然后，调用 <code>append()</code> 传入 HTML 片段:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code>ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;&lt;span&gt;Haskell&lt;/span&gt;&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>除了接受字符串，<code>append()</code> 还可以传入原始的 DOM 对象，jQuery 对象和函数对象:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建DOM对象:</span>
<span class="token keyword">const</span> ps <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;span&gt;Pascal&lt;/span&gt;"</span><span class="token punctuation">;</span>
<span class="token comment">// 添加DOM对象:</span>
ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加jQuery对象:</span>
ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#scheme"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加函数对象:</span>
ul<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">"&lt;li&gt;&lt;span&gt;Language - "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"&lt;/span&gt;&lt;/li&gt;"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>传入函数时，要求返回一个字符串、DOM 对象或者 jQuery 对象。因为 jQuery 的 <code>append()</code> 可能作用于一组 DOM 节点，只有传入函数才能针对每个 DOM 生成不同的子节点。</p>
<p><code>append()</code> 把 DOM 添加到最后，<code>prepend()</code> 则把 DOM 添加到最前。</p>
<p>另外注意，如果要添加的 DOM 节点已经存在于 HTML 文档中，它会首先从文档移除，然后再添加，也就是说，用 <code>append()</code>，您可以移动一个 DOM 节点。</p>
<p>如果要把新节点插入到指定位置，例如，JavaScript 和 Python 之间，那么，可以先定位到 JavaScript，然后用 <code>after()</code> 方法:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> js <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div&gt;ul&gt;li:first-child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
js<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;&lt;span&gt;Lua&lt;/span&gt;&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>也就是说，同级节点可以用 <code>after()</code> 或者 <code>before()</code> 方法。</p>
<h2>删除节点</h2>
<p>要删除 DOM 节点，拿到 jQuery 对象后直接调用 <code>remove()</code> 方法就可以了。如果 jQuery 对象包含若干 DOM 节点，实际上可以一次删除多个 DOM 节点:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> li <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div&gt;ul&gt;li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
li<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有&lt;li&gt;全被删除</span>
</code></pre></div>]]></content>
    <category term="jQuery"/>
    <published>2019-11-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">操作 DOM</title>
    <id>https://mister-hope.com/code/website/jQuery/operate-dom.html</id>
    <link href="https://mister-hope.com/code/website/jQuery/operate-dom.html"/>
    <updated>2022-02-12T05:50:30.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">章节过时</p>
<p>目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">章节过时</p>
<p>目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。</p>
</div>
<!-- more -->
<p>jQuery 的选择器很强大，用起来又简单又灵活，但是搞了这么久，我拿到了 jQuery 对象，到底要干什么?</p>
<p>答案当然是操作对应的 DOM 节点啦!</p>
<p>回顾一下修改 DOM 的 CSS、文本、设置 HTML 有多么麻烦，而且有的浏览器只有 innerHTML，有的浏览器支持 innerText，有了 jQuery 对象，不需要考虑浏览器差异了，全部统一操作!</p>
<h2>修改 Text 和 HTML</h2>
<p>jQuery 对象的 <code>text()</code> 和 <code>html()</code> 方法分别获取节点的文本和原始 HTML 文本，例如，如下的 HTML 结构:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-ul<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java <span class="token entity named-entity" title="&amp;">&amp;amp;</span> JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>分别获取文本和 HTML:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li[name=book]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Java &amp; JavaScript'</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li[name=book]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Java &amp;amp; JavaScript'</span>
</code></pre></div><p>如何设置文本或 HTML ? jQuery 的 API 设计非常巧妙: 无参数调用 <code>text()</code> 是获取文本，传入参数就变成设置文本，HTML 也是类似操作，自己动手试试:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> j1 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> j2 <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li[name=book]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

j1<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;span style="color: red"&gt;JavaScript&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
j2<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"JavaScript &amp; ECMAScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code>JavaScript
Java &amp; JavaScript
</code></pre></div><p>一个 jQuery 对象可以包含 0 个或任意个 DOM 对象，它的方法实际上会作用在对应的每个 DOM 节点上。在上面的例子中试试:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-ul li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"JS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是不是两个节点都变成了JS?</span>
</code></pre></div><p>所以 jQuery 对象的另一个好处是我们可以执行一个操作，作用在对应的一组 DOM 节点上。即使选择器没有返回任何 DOM 节点，调用 jQuery 对象的方法仍然不会报错:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 如果不存在 id 为 not-exist 的节点:</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#not-exist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 代码不报错，没有节点被设置为'Hello'</span>
</code></pre></div><p>这意味着 jQuery 帮您免去了许多 if 语句。</p>
<h2>修改 CSS</h2>
<p>jQuery 对象有“批量操作”的特点，这用于修改 CSS 实在是太方便了。考虑下面的 HTML 结构:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML 结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lang dy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lang<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lang dy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lang<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Swift<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lang dy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>要高亮显示动态语言，调用 jQuery 对象的 <code>css('name', 'value')</code> 方法，我们用一行语句实现:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-css li.dy&gt;span"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"#ffd351"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code>JavaScript
Java
Python
Swift
Scheme
</code></pre></div><p>注意，jQuery 对象的所有方法都返回一个 jQuery 对象(可能是新的也可能是自身)，这样我们可以进行链式调用，非常方便。</p>
<p>jQuery 对象的 <code>css()</code> 方法可以这么用:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '#000033', 获取CSS属性</span>
div<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">"#336699"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置CSS属性</span>
div<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除CSS属性</span>
</code></pre></div><p>为了和 JavaScript 保持一致，CSS 属性可以用 <code>'background-color'</code> 和 <code>'backgroundColor'</code> 两种格式。</p>
<p><code>css()</code> 方法将作用于 DOM 节点的 style 属性，具有最高优先级。如果要修改 class 属性，可以用 jQuery 提供的下列方法:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">"highlight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false， class是否包含highlight</span>
div<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"highlight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加highlight这个class</span>
div<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"highlight"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除highlight这个class</span>
</code></pre></div><h2>显示和隐藏 DOM</h2>
<p>要隐藏一个 DOM，我们可以设置 CSS 的 <code>display</code> 属性为 <code>none</code>，利用 <code>css()</code> 方法就可以实现。不过，要显示这个 DOM 就需要恢复原有的 <code>display</code> 属性，这就得先记下来原有的 <code>display</code> 属性到底是 <code>block</code> 还是 <code>inline</code> 还是别的值。</p>
<p>考虑到显示和隐藏 DOM 元素使用非常普遍，jQuery 直接提供 <code>show()</code> 和 <code>hide()</code> 方法，我们不用关心它是如何修改 display 属性的，总之它能正常工作:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[target=_blank]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏</span>
a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示</span>
</code></pre></div><p>注意，隐藏 DOM 节点并未改变 DOM 树的结构，它只影响 DOM 节点的显示。这和删除 DOM 节点是不同的。</p>
<h2>获取 DOM 信息</h2>
<p>利用 jQuery 对象的若干方法，我们直接可以获取 DOM 的高宽等信息，而无需针对不同浏览器编写特定代码:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 浏览器可视窗口大小:</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 800</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 600</span>

<span class="token comment">// HTML 文档大小:</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 800</span>
<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3500</span>

<span class="token comment">// 某个 div 的大小:</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 600</span>
div<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300</span>
div<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 CSS 属性 width: 400px，是否生效要看 CSS 是否有效</span>
div<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">"200px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 CSS 属性 height: 200px，是否生效要看 CSS 是否有效</span>
</code></pre></div><p><code>attr()</code> 和 <code>removeAttr()</code> 方法用于操作 DOM 节点的属性:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// &lt;div id="test-div" name="Test" start="1"&gt;...&lt;/div&gt;</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
div<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, 属性不存在</span>
div<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Test'</span>
div<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// div 的 name 属性变为 'Hello'</span>
div<span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除 name 属性</span>
div<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre></div><p><code>prop()</code> 方法和 <code>attr()</code> 类似，但是 HTML5 规定有一种属性在 DOM 节点中可以没有值，只有出现与不出现两种，例如:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-radio<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>等价于:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-radio<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><code>attr()</code> 和 <code>prop()</code> 对于属性 <code>checked</code> 处理有所不同:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> radio <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-radio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
radio<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'checked'</span>
radio<span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p><code>prop()</code> 返回值更合理一些。不过，用 <code>is()</code> 方法判断更好:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> radio <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-radio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
radio<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">":checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><p>类似的属性还有 <code>selected</code>，处理时最好用 <code>is(':selected')</code>。</p>
<h2>操作表单</h2>
<p>对于表单元素，jQuery 对象统一提供 <code>val()</code> 方法获取和设置对应的 <code>value</code> 属性:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
    &lt;input id="test-input" name="email" value=""&gt;
    &lt;select id="test-select" name="city"&gt;
        &lt;option value="BJ" selected&gt;Beijing&lt;/option&gt;
        &lt;option value="SH"&gt;Shanghai&lt;/option&gt;
        &lt;option value="SZ"&gt;Shenzhen&lt;/option&gt;
    &lt;/select&gt;
    &lt;textarea id="test-textarea"&gt;Hello&lt;/textarea&gt;
*/</span>
<span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-input"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  select <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-select"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  textarea <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test-textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

input<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'test'</span>
input<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"abc@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文本框的内容已变为 abc@example.com</span>

select<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'BJ'</span>
select<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"SH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 选择框已变为 Shanghai</span>

textarea<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Hello'</span>
textarea<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文本区域已更新为 'Hi'</span>
</code></pre></div><p>可见，一个 <code>val()</code> 就统一了各种输入框的取值和赋值的问题。</p>
]]></content>
    <category term="jQuery"/>
    <published>2019-11-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">AJAX</title>
    <id>https://mister-hope.com/code/language/js/browser/ajax.html</id>
    <link href="https://mister-hope.com/code/language/js/browser/ajax.html"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Ajax 不是 JavaScript 的规范，它只是一个哥们“发明”的缩写: Asynchronous JavaScript and XML，意思就是用 JavaScript 执行异步网络请求。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Ajax 不是 JavaScript 的规范，它只是一个哥们“发明”的缩写: Asynchronous JavaScript and XML，意思就是用 JavaScript 执行异步网络请求。</p>
<!-- more -->
<p>如果仔细观察一个 Form 的提交，您就会发现，一旦用户点击 “Submit” 按钮，表单开始提交，浏览器就会刷新页面，然后在新页面里告诉您操作是成功了还是失败了。如果不幸由于网络太慢或者其他原因，就会得到一个 404 页面。</p>
<p>这就是 Web 的运作原理: 一次 HTTP 请求对应一个页面。</p>
<p>如果要让用户留在当前页面中，同时发出新的 HTTP 请求，就必须用 JavaScript 发送这个新请求，接收到数据后，再用 JavaScript 更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</p>
<p>最早大规模使用 Ajax 的就是 Gmail，Gmail 的页面在首次加载后，剩下的所有数据都依赖于 Ajax 来更新。</p>
<p>用 JavaScript 写一个完整的 Ajax 代码并不复杂，但是需要注意: Ajax 请求是异步执行的，也就是说，要通过回调函数获得响应。</p>
<p>在现代浏览器上写 Ajax 主要依靠 XMLHttpRequest 对象:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">success</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#test-response-text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#test-response-text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新建XMLHttpRequest对象</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 状态发生变化时，函数被回调</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成功完成</span>
    <span class="token comment">// 判断响应结果:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span>
      <span class="token comment">// 成功，通过responseText拿到响应的文本:</span>
      <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 失败，根据响应码判断失败原因:</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// HTTP请求还在继续...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 发送请求:</span>
request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/api/categories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请求已发送，请等待响应..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>对于低版本的 IE，需要换一个 ActiveXObject 对象:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token string">"use strict"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">success</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#test-ie-response-text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> text<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">fail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#test-ie-response-text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error code: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新建Microsoft.XMLHTTP对象</span>

request<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 状态发生变化时，函数被回调</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 成功完成</span>
    <span class="token comment">// 判断响应结果:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span>
      <span class="token comment">// 成功，通过responseText拿到响应的文本:</span>
      <span class="token keyword">return</span> <span class="token function">success</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 失败，根据响应码判断失败原因:</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">fail</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// HTTP请求还在继续...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 发送请求:</span>
request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/api/categories"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请求已发送，请等待响应..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如果您想把标准写法和 IE 写法混在一起，可以这么写:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> request<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>通过检测 <code>window</code> 对象是否有 <code>XMLHttpRequest</code> 属性来确定浏览器是否支持标准的 <code>XMLHttpRequest</code>。注意，不要根据浏览器的 <code>navigator.userAgent</code> 来检测浏览器是否支持某个 JavaScript 特性，一是因为这个字符串本身可以伪造，二是通过 IE 版本判断 JavaScript 特性将非常复杂。</p>
<p>当创建了 <code>XMLHttpRequest</code> 对象后，要先设置 <code>onreadystatechange</code> 的回调函数。在回调函数中，通常我们只需通过 <code>readyState === 4</code> 判断请求是否完成，如果已完成，再根据 <code>status === 200</code> 判断是否是一个成功的响应。</p>
<p><code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法有 3 个参数，第一个参数指定是 GET 还是 POST，第二个参数指定 URL 地址，第三个参数指定是否使用异步，默认是 <code>true</code>，所以不用写。</p>
<div class="hint-container caution">
<p class="hint-container-title">警告</p>
<p>千万不要把第三个参数指定为 <code>false</code>，否则浏览器将停止响应，直到 Ajax 请求完成。如果这个请求耗时 10 秒，那么 10 秒内您会发现浏览器处于“假死”状态。</p>
</div>
<p>最后调用 <code>send()</code> 方法才真正发送请求。GET 请求不需要参数，POST 请求需要把 body 部分以字符串或者 <code>FormData</code> 对象传进去。</p>
<h2>安全限制</h2>
<p>上面代码的 URL 使用的是相对路径。如果您把它改为 <code>'https://www.sina.com.cn/'</code>，再运行，肯定报错。在 Chrome 的控制台里，还可以看到错误信息。</p>
<p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript 在发送 Ajax 请求时，URL 的域名必须和当前页面完全一致。</p>
<p>完全一致的意思是，域名要相同 (<code>www.example.com</code> 和 <code>example.com</code> 不同)，协议要相同 (HTTP 和 HTTPS 不同)，端口号要相同(默认是 <code>:80</code> 端口，它和 <code>:8080</code> 就不同)。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>
<p>那是不是用 JavaScript 无法请求外域(就是其他网站)的 URL 了呢? 方法还是有的，大概有这么几种:</p>
<p>一是通过 Flash 插件发送 HTTP 请求，这种方式可以绕过浏览器的安全限制，但必须安装 Flash，并且跟 Flash 交互。不过 Flash 用起来麻烦，而且现在用得也越来越少了。</p>
<p>二是通过在同源域名下架设一个代理服务器来转发，JavaScript 负责把请求发送到代理服务器 <code>/proxy?url=https://www.sina.com.cn</code></p>
<p>代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。</p>
<p>第三种方式称为 JSONP，它有个限制，只能用 GET 请求，并且要求返回 JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用 JavaScript 资源:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://example.com/abc.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    ...
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>JSONP 通常以函数调用的形式返回，例如，返回 JavaScript 内容如下:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样一来，我们如果在页面中先准备好 <code>foo()</code> 函数，然后给页面动态加一个 <code>&lt;script&gt;</code> 节点，相当于动态读取外域的 JavaScript 资源，最后就等着接收回调了。</p>
<p>以 163 的股票查询 URL 为例，对于 <code>URL: https://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice</code>，您将得到如下返回:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">refreshPrice</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"0000001"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">"code"</span><span class="token operator">:</span> <span class="token string">"0000001"</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>因此我们需要首先在页面中准备好回调函数:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">refreshPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#test-jsonp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">当前价格: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span><span class="token string">"0000001"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span><span class="token string">"0000001"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">；</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span><span class="token string">"1399001"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span><span class="token string">"1399001"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>最后用 <code>getPrice()</code> 函数触发:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getPrice</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> head <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  js<span class="token punctuation">.</span>src <span class="token operator">=</span>
    <span class="token string">"https://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice"</span><span class="token punctuation">;</span>
  head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>就完成了跨域加载数据。</p>
<h2>CORS</h2>
<p>如果浏览器支持 HTML5，那么就可以一劳永逸地使用新的跨域策略: <strong>CORS</strong> 了。</p>
<p>CORS 全称 <code>Cross-Origin Resource Sharing</code>，是 HTML5 规范定义的如何跨域访问资源。</p>
<p>了解 CORS 前，我们先搞明白概念:</p>
<p><strong>Origin</strong> 表示本域，也就是浏览器当前页面的域。当 JavaScript 向外域 (如 sina.com) 发起请求后，浏览器收到响应后，首先检查 <code>Access-Control-Allow-Origin</code> 是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript 将无法获取到响应的任何数据。</p>
<p>用一个图来表示就是:</p>
<figure><figcaption>js-cors</figcaption></figure>
<p>假设本域是 <code>my.com</code>，外域是 <code>sina.com</code>，只要响应头 <code>Access-Control-Allow-Origin</code> 为 <code>https://my.com</code>，或者是 <code>*</code>，本次请求就可以成功。</p>
<p>可见，跨域能否成功，取决于对方服务器是否愿意给您设置一个正确的 <code>Access-Control-Allow-Origin</code>，决定权始终在对方手中。</p>
<p>上面这种跨域请求，称之为“简单请求”。简单请求包括 <code>GET</code>、<code>HEAD</code> 和 <code>POST</code> ( POST 的 <code>Content-Type</code> 类型
仅限 <code>application/x-www-form-urlencoded、multipart/form-data和text/plain</code>)，并且不能出现任何自定义头(例如，X-Custom: 12345)，通常能满足 90% 的需求。</p>
<p>无论您是否需要用 JavaScript 通过 CORS 跨域请求资源，您都要了解 CORS 的原理。最新的浏览器全面支持 HTML5。在引用外域资源时，除了 JavaScript 和 CSS 外，都要验证 CORS。例如，当您引用了某个第三方 CDN 上的字体文件时:</p>
<div class="language-css" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token comment">/* CSS */</span>
<span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"FontAwesome"</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://cdn.com/fonts/fontawesome.ttf"</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"truetype"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果该 CDN 服务商未正确设置 <code>Access-Control-Allow-Origin</code>，那么浏览器无法加载字体资源。</p>
<p>对于 PUT、DELETE 以及其他类型如 <code>application/json</code> 的 POST 请求，在发送 Ajax 请求之前，浏览器会先发送一个 <code>OPTIONS</code> 请求(称为 preflighted 请求)到这个 URL 上，询问目标服务器是否接受:</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">OPTIONS</span> <span class="token request-target url">/path/to/resource</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">bar.com</span></span>
<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://my.com</span></span>
<span class="token header"><span class="token header-name keyword">Access-Control-Request-Method</span><span class="token punctuation">:</span> <span class="token header-value">POST</span></span>
</code></pre></div><p>服务器必须响应并明确指出允许的 Method:</p>
<div class="language-http" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span>
<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Origin</span><span class="token punctuation">:</span> <span class="token header-value">https://my.com</span></span>
<span class="token header"><span class="token header-name keyword">Access-Control-Allow-Methods</span><span class="token punctuation">:</span> <span class="token header-value">POST, GET, PUT, OPTIONS</span></span>
<span class="token header"><span class="token header-name keyword">Access-Control-Max-Age</span><span class="token punctuation">:</span> <span class="token header-value">86400</span></span>
</code></pre></div><p>浏览器确认服务器响应的 <code>Access-Control-Allow-Methods</code> 头确实包含将要发送的 Ajax 请求的 Method，才会继续发送 AJAX，否则，抛出一个错误。</p>
<p>由于以 POST、PUT 方式传送 JSON 格式的数据在 REST 中很常见，所以要跨域正确处理 POST 和 PUT 请求，服务器端必须正确响应 OPTIONS 请求。</p>
<p>需要深入了解 CORS 的童鞋请移步 <a href="https://www.w3.org/TR/cors/" target="_blank" rel="noopener noreferrer">W3C 文档</a>。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2019-10-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">操作 DOM</title>
    <id>https://mister-hope.com/code/language/js/browser/dom.html</id>
    <link href="https://mister-hope.com/code/language/js/browser/dom.html"/>
    <updated>2022-02-12T05:50:30.000Z</updated>
    <summary type="html"><![CDATA[<p>由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。</p>
<p>始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:</p>
<ul>
<li>
<p>更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；</p>
</li>
<li>
<p>遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；</p>
</li>
<li>
<p>添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；</p>
</li>
<li>
<p>删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。</p>
</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<p>由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。</p>
<p>始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:</p>
<ul>
<li>
<p>更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；</p>
</li>
<li>
<p>遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；</p>
</li>
<li>
<p>添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；</p>
</li>
<li>
<p>删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。</p>
</li>
</ul>
<!-- more -->
<p>在操作一个 DOM 节点前，我们需要通过各种方式先拿到这个 DOM 节点。最常用的方法是使用 <code>querySelector()</code> 和 <code>querySelectorAll()</code>。</p>
<p>使用这个 API 需要了解 CSS selector 语法，然后使用条件来获取节点，十分方便:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通过 querySelector 获取 ID 为 q1 的节点:</span>
<span class="token keyword">const</span> q1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#q1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 通过 querySelectorAll 获取 q1 节点内的符合条件的所有节点:</span>
<span class="token keyword">const</span> ps <span class="token operator">=</span> q1<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div.highlighted &gt; p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>低版本的 IE &lt; 8 不支持 <code>querySelector</code> 和 <code>querySelectorAll</code>。IE8 仅有限支持。</p>
<p>在历史上，使用的方法是 <code>document.getElementById()</code> 和 <code>document.getElementsByTagName()</code>，以及 CSS 选择器 <code>document.getElementsByClassName()</code>。</p>
<p>由于 ID 在 HTML 文档中是唯一的，所以 <code>document.getElementById()</code> 可以直接定位唯一的一个 DOM 节点。<code>document.getElementsByTagName()</code> 和 <code>document.getElementsByClassName()</code> 总是返回一组 DOM 节点。要精确地选择 DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。</p>
<p>例如:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 返回ID为 'test' 的节点:</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 先定位ID为'test-table'的节点，再返回其内部所有tr节点:</span>
<span class="token keyword">const</span> trs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test-table"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点:</span>
<span class="token keyword">const</span> reds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"test-div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取节点 test 下的所有直属子节点:</span>
<span class="token keyword">const</span> cs <span class="token operator">=</span> test<span class="token punctuation">.</span>children<span class="token punctuation">;</span>

<span class="token comment">// 获取节点 test 下第一个、最后一个子节点:</span>
<span class="token keyword">const</span> first <span class="token operator">=</span> test<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">;</span>
<span class="token keyword">const</span> last <span class="token operator">=</span> test<span class="token punctuation">.</span>lastElementChild<span class="token punctuation">;</span>
</code></pre></div></div>
<p>严格地讲，我们这里的 DOM 节点是指 <code>Element</code>，但是 DOM 节点实际上是 <code>Node</code>，在 HTML 中，<code>Node</code> 包括 <code>Element</code>、<code>Comment</code>、<code>CDATA_SECTION</code> 等很多种，以及根节点 <code>Document</code> 类型，但是，绝大多数时候我们只关心 <code>Element</code>，也就是实际控制页面结构的 <code>Node</code>，其他类型的 <code>Node</code> 忽略即可。根节点 Document 已经自动绑定为全局变量 <code>document</code>。</p>
<h2>更新 DOM</h2>
<p>拿到一个 DOM 节点后，我们可以对它进行更新。</p>
<p>可以直接修改节点的文本，方法有两种:</p>
<p>一种是修改 <code>innerHTML</code> 属性，这个方式非常强大，不但可以修改一个 DOM 节点的文本内容，还可以直接通过 HTML 片段修改 DOM 节点内部的子树:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 获取&lt;p id="p-id"&gt;...&lt;/p&gt;</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#p-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置文本为abc:</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"ABC"</span><span class="token punctuation">;</span> <span class="token comment">// &lt;p id="p-id"&gt;ABC&lt;/p&gt;</span>
<span class="token comment">// 设置HTML:</span>
p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'ABC &lt;span style="color:red"&gt;RED&lt;/span&gt; XYZ'</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;p&gt;...&lt;/p&gt;的内部结构已修改</span>
</code></pre></div><p>用 <code>innerHTML</code> 时要注意，是否需要写入 HTML。如果写入的字符串是通过网络拿到了，要注意对字符编码来避免 XSS 攻击。</p>
<p>第二种是修改 <code>innerText</code> 或 <code>textContent</code> 属性，这样可以自动对字符串进行 HTML 编码，保证无法设置任何 HTML 标签:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 获取&lt;p id="p-id"&gt;...&lt;/p&gt;</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#p-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置文本:</span>
p<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'&lt;script&gt;alert("Hi")&lt;/script&gt;'</span><span class="token punctuation">;</span>
<span class="token comment">// HTML被自动编码，无法设置一个&lt;script&gt;节点:</span>
<span class="token comment">// &lt;p id="p-id"&gt;&amp;lt;script&amp;gt;alert("Hi")&amp;lt;/script&amp;gt;&lt;/p&gt;</span>
</code></pre></div><p>两者的区别在于读取属性时，<code>innerText</code> 不返回隐藏元素的文本，而 <code>textContent</code> 返回所有文本。</p>
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>IE &lt; 9 不支持 <code>textContent</code>。</p>
</div>
<p>修改 CSS 也是经常需要的操作。DOM 节点的 style 属性对应所有的 CSS，可以直接获取或设置。因为 CSS 允许 <code>font-size</code> 这样的名称，但它并非 JavaScript 有效的属性名，所以需要在 JavaScript 中改写为驼峰式命名 <code>fontSize</code>:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 获取&lt;p id="p-id"&gt;...&lt;/p&gt;</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#p-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置CSS:</span>
p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#ff0000"</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">"20px"</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingTop <span class="token operator">=</span> <span class="token string">"2em"</span><span class="token punctuation">;</span>
</code></pre></div><h2>插入 DOM</h2>
<p>当我们获得了某个 DOM 节点，想在这个 DOM 节点内插入新的 DOM，应该如何做?</p>
<p>如果这个 DOM 节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用 <code>innerHTML = '&lt;span&gt;child&lt;/span&gt;'</code> 就可以修改 DOM 节点的内容，相当于“插入”了新的 DOM 节点。</p>
<p>如果这个 DOM 节点不是空的，那就不能这么做，因为 <code>innerHTML</code> 会直接替换掉原来的所有子节点。</p>
<p>有两个办法可以插入新的节点。一个是使用 <code>appendChild</code>，把一个子节点添加到父节点的最后一个子节点。例如:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>把 <code>&lt;p id="js"&gt;JavaScript&lt;/p&gt;</code> 添加到 <code>&lt;div id="list"&gt;</code> 的最后一项:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>现在，HTML 结构变成了这样:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>因为我们插入的 js 节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置。</p>
<p>更多的时候我们会从零创建一个新的节点，然后插入到指定位置:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> haskell <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

haskell<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"haskell"</span><span class="token punctuation">;</span>
haskell<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"Haskell"</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>haskell<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样我们就动态添加了一个新的节点:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>haskell<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Haskell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>动态创建一个节点然后添加到 DOM 树中，可以实现很多功能。举个例子，下面的代码动态创建了一个 <code>&lt;style&gt;</code> 节点，然后把它添加到 <code>&lt;head&gt;</code> 节点的末尾，这样就动态地给文档添加了新的 CSS 定义:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

d<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"text/css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"p { color: red }"</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>可以在 Chrome 的控制台执行上述代码，观察页面样式的变化。</p>
<h3>insertBefore</h3>
<p>如果我们要把子节点插入到指定的位置怎么办? 可以使用 <code>parentElement.insertBefore(newElement, referenceElement);</code>，子节点会插入到 <code>referenceElement</code> 之前。</p>
<p>还是以上面的 HTML 为例，假定我们要把 <code>Haskell</code> 插入到 <code>Python</code> 之前:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可以这么写:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ref <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> haskell <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

haskell<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">"haskell"</span><span class="token punctuation">;</span>
haskell<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">"Haskell"</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>haskell<span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>新的 HTML 结构如下:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML结构 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>haskell<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Haskell<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>python<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scheme<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Scheme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>可见，使用 <code>insertBefore</code> 重点是要拿到一个“参考子节点”的引用。很多时候，需要循环一个父节点的所有子节点，可以通过迭代 <code>children</code> 属性实现:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> c<span class="token punctuation">;</span>
<span class="token keyword">const</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> c <span class="token operator">=</span> list<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 拿到第i个子节点</span>
</code></pre></div><h2>删除 DOM</h2>
<p>删除一个 DOM 节点就比插入要容易得多。</p>
<p>要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的 <code>removeChild</code> 把自己删掉:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 拿到待删除节点:</span>
<span class="token keyword">const</span> self <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#to-be-removed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拿到父节点:</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> self<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>
<span class="token comment">// 删除:</span>
<span class="token keyword">const</span> removed <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>

removed <span class="token operator">===</span> self<span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置。</p>
</div>
<p>当您遍历一个父节点的子节点并进行删除操作时，要注意，<code>children</code> 属性是一个只读属性，并且它在子节点变化时会实时更新。</p>
<p>例如，对于如下 HTML 结构:</p>
<div class="language-html" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>First<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>当我们用如下代码删除子节点时:</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 浏览器报错</span>
</code></pre></div><p>浏览器报错: <code>parent.children[1]</code> 不是一个有效的节点。原因就在于，当 <code>&lt;p&gt;First&lt;/p&gt;</code> 节点被删除后，<code>parent.children</code> 的节点数量已经从 <code>2</code> 变为了 <code>1</code>，索引 <code>[1]</code> 已经不存在了。</p>
<p>因此，删除多个节点时，要注意 <code>children</code> 属性时刻都在变化。</p>
]]></content>
    <category term="JavaScript"/>
    <published>2019-10-16T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Mr.Hope 介绍</title>
    <id>https://mister-hope.com/about/</id>
    <link href="https://mister-hope.com/about/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">代码笔记</title>
    <id>https://mister-hope.com/code/</id>
    <link href="https://mister-hope.com/code/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>此处是 Mr.Hope 存放的一些代码笔记。</p>
]]></summary>
    <content type="html"><![CDATA[<p>此处是 Mr.Hope 存放的一些代码笔记。</p>
<!-- more -->
<h2>目录</h2>
<h3>基础</h3>
<ul>
<li>
<p><a href="/code/basic/" target="_blank">基础知识</a></p>
</li>
<li>
<p><a href="/code/windows/" target="_blank">Windows 基础</a></p>
</li>
<li>
<p><a href="/code/github/" target="_blank">GitHub 介绍</a></p>
</li>
</ul>
<h3>前端开发</h3>
<ul>
<li>
<p><a href="/code/website/" target="_blank">网站相关</a></p>
</li>
<li>
<p><a href="/code/vue/" target="_blank">Vue 相关</a></p>
</li>
<li>
<p><a href="/code/mini-app/" target="_blank">小程序教程</a></p>
</li>
<li>
<p><a href="/code/node-js/" target="_blank">Node.js</a></p>
</li>
</ul>
<h3>代码学习</h3>
<ul>
<li>
<p><a href="/code/language/" target="_blank">代码学习</a></p>
</li>
<li>
<p><a href="/code/language/learning.html" target="_blank">如何学习一门语言</a></p>
</li>
<li>
<p><a href="/code/language/js/" target="_blank">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/python/" target="_blank">Python 教程</a> (编写中...)</p>
</li>
<li>
<p><a href="/code/language/markdown/" target="_blank">Markdown 教程</a></p>
</li>
<li>
<p><a href="/code/language/yaml/" target="_blank">YAML 教程</a></p>
</li>
<li>
<p><a href="/code/language/json/" target="_blank">JSON 教程</a></p>
</li>
</ul>
<h3>APP</h3>
<ul>
<li><a href="/code/android/" target="_blank">Android 开发</a></li>
</ul>
<h3>后端开发</h3>
<ul>
<li><a href="/code/back-end/" target="_blank">后端开发</a></li>
</ul>
<h3>代码学习网站</h3>
<h3>优质网站</h3>
<ul>
<li>
<p><a href="https://wangdoc.com/" target="_blank" rel="noopener noreferrer">网道</a></p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener noreferrer">廖雪峰的网站</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener noreferrer">MDN</a></p>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>MDN 的中文文档翻译很差，大多都是机翻，十分建议直接阅读英文文档。</p>
</div>
</li>
</ul>
<h3>杂牌网站</h3>
<ul>
<li>
<p><a href="https://www.runoob.com/" target="_blank" rel="noopener noreferrer">菜鸟教程</a> </p>
</li>
<li>
<p><a href="https://www.w3cschool.cn" target="_blank" rel="noopener noreferrer">w3cschool</a> </p>
</li>
<li>
<p><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener noreferrer">w3school</a> </p>
</li>
</ul>
]]></content>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">UI 设计</title>
    <id>https://mister-hope.com/design/</id>
    <link href="https://mister-hope.com/design/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<p>本文列出了一些 UI 设计相关的资源。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本文列出了一些 UI 设计相关的资源。</p>
<!-- more -->
<h2>相关教程</h2>
<ul>
<li>
<p><a href="/design/icon/" target="_blank">图标设计教程</a></p>
</li>
<li>
<p><a href="/design/navigation/" target="_blank">导航设计教程</a></p>
</li>
</ul>
<h2>配色</h2>
<ul>
<li>
<p><a href="http://www.ruanyifeng.com/blog/2019/03/coloring-scheme.html" target="_blank" rel="noopener noreferrer">阮一峰 - 配色方案</a></p>
</li>
<li>
<p><a href="https://webgradients.com/" target="_blank" rel="noopener noreferrer">网页背景渐变色</a></p>
</li>
</ul>
<h2>设计</h2>
<ul>
<li>
<p><a href="https://developer.apple.com/design/tips/" target="_blank" rel="noopener noreferrer">Apple 设计原则</a></p>
</li>
<li>
<p><a href="https://developer.apple.com/design/" target="_blank" rel="noopener noreferrer">Apple 设计</a></p>
</li>
<li>
<p><a href="/design/APP.html" target="_blank">App 组件设计规范</a></p>
</li>
</ul>
<h2>网站组件</h2>
<ul>
<li>
<p><a href="https://ant.design/index-cn" target="_blank" rel="noopener noreferrer">Ant Design</a></p>
</li>
<li>
<p><a href="https://weui.io/" target="_blank" rel="noopener noreferrer">WeUI</a></p>
</li>
</ul>
<h2>小程序组件库</h2>
<ul>
<li>
<p><a href="https://youzan.github.io/vant-weapp/" target="_blank" rel="noopener noreferrer">Vant</a></p>
</li>
<li>
<p><a href="https://www.color-ui.com/" target="_blank" rel="noopener noreferrer">Color UI</a></p>
</li>
</ul>
]]></content>
    <category term="设计"/>
    <published>2019-11-24T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">硬件相关</title>
    <id>https://mister-hope.com/hardware/</id>
    <link href="https://mister-hope.com/hardware/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>这里是一些常见的硬件相关的问题总结，供访客查阅。</p>
]]></summary>
    <content type="html"><![CDATA[<p>这里是一些常见的硬件相关的问题总结，供访客查阅。</p>
<!-- more -->
]]></content>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Linux</title>
    <id>https://mister-hope.com/linux/</id>
    <link href="https://mister-hope.com/linux/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>Linux 教程</h2>
<ul>
<li>
<p><a href="/linux/intro/" target="_blank">Linux 介绍</a></p>
<ul>
<li>
<p><a href="/linux/intro/intro.html" target="_blank">Linux 介绍</a></p>
</li>
<li>
<p><a href="/linux/intro/history.html" target="_blank">Linux 历史</a></p>
</li>
<li>
<p><a href="/linux/intro/language.html" target="_blank">Linux 编写语言</a></p>
</li>
<li>
<p><a href="/linux/intro/advantage.html" target="_blank">Linux 优势</a></p>
</li>
<li>
<p><a href="/linux/intro/desktop.html" target="_blank">Linux 桌面环境</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/file/" target="_blank">Linux 文件</a></p>
<ul>
<li>
<p><a href="/linux/file/file.html" target="_blank">Linux 文件</a></p>
</li>
<li>
<p><a href="/linux/file/dir.html" target="_blank">Linux 目录</a></p>
</li>
<li>
<p><a href="/linux/file/mount.html" target="_blank">挂载</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/command/" target="_blank">Linux 命令</a></p>
<ul>
<li>
<p><a href="/linux/command/command.html" target="_blank">命令格式简介</a></p>
</li>
<li>
<p><a href="/linux/command/dir.html" target="_blank">目录相关</a></p>
</li>
<li>
<p><a href="/linux/command/file.html" target="_blank">文件相关</a></p>
</li>
<li>
<p><a href="/linux/command/other.html" target="_blank">其他命令</a></p>
</li>
<li>
<p><a href="/linux/command/add.html" target="_blank">命令的自动补全</a></p>
</li>
<li>
<p><a href="/linux/command/excu.html" target="_blank">命令的执行</a></p>
</li>
<li>
<p><a href="/linux/command/path.html" target="_blank">环境变量</a></p>
</li>
<li>
<p><a href="/linux/command/ln.html" target="_blank">创建链接</a></p>
</li>
</ul>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>Linux 教程</h2>
<ul>
<li>
<p><a href="/linux/intro/" target="_blank">Linux 介绍</a></p>
<ul>
<li>
<p><a href="/linux/intro/intro.html" target="_blank">Linux 介绍</a></p>
</li>
<li>
<p><a href="/linux/intro/history.html" target="_blank">Linux 历史</a></p>
</li>
<li>
<p><a href="/linux/intro/language.html" target="_blank">Linux 编写语言</a></p>
</li>
<li>
<p><a href="/linux/intro/advantage.html" target="_blank">Linux 优势</a></p>
</li>
<li>
<p><a href="/linux/intro/desktop.html" target="_blank">Linux 桌面环境</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/file/" target="_blank">Linux 文件</a></p>
<ul>
<li>
<p><a href="/linux/file/file.html" target="_blank">Linux 文件</a></p>
</li>
<li>
<p><a href="/linux/file/dir.html" target="_blank">Linux 目录</a></p>
</li>
<li>
<p><a href="/linux/file/mount.html" target="_blank">挂载</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/linux/command/" target="_blank">Linux 命令</a></p>
<ul>
<li>
<p><a href="/linux/command/command.html" target="_blank">命令格式简介</a></p>
</li>
<li>
<p><a href="/linux/command/dir.html" target="_blank">目录相关</a></p>
</li>
<li>
<p><a href="/linux/command/file.html" target="_blank">文件相关</a></p>
</li>
<li>
<p><a href="/linux/command/other.html" target="_blank">其他命令</a></p>
</li>
<li>
<p><a href="/linux/command/add.html" target="_blank">命令的自动补全</a></p>
</li>
<li>
<p><a href="/linux/command/excu.html" target="_blank">命令的执行</a></p>
</li>
<li>
<p><a href="/linux/command/path.html" target="_blank">环境变量</a></p>
</li>
<li>
<p><a href="/linux/command/ln.html" target="_blank">创建链接</a></p>
</li>
</ul>
</li>
</ul>
<h2>ubuntu</h2>
<ul>
<li><a href="/linux/ubuntu/" target="_blank">点击前往</a></li>
</ul>
<h2>CentOS</h2>
<ul>
<li><a href="/linux/centos.html" target="_blank">点击前往</a></li>
</ul>
<h2>WSL</h2>
<ul>
<li><a href="/linux/WSL.html" target="_blank">点击前往</a></li>
</ul>
]]></content>
    <category term="Linux"/>
    <published>2019-11-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Mr.Hope 的随笔</title>
    <id>https://mister-hope.com/note/</id>
    <link href="https://mister-hope.com/note/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>这里是 Mr.Hope 的一些随笔，后续被整理进博客中。</p>
<h2>四季</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的散文诗集，最初发表在空间日志上。</p>
<p>后续也写了一些诗补充了进去，其中以 “秋之思” 篇幅最多</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<ul>
<li>
<p><a href="/note/fall/catalog.html" target="_blank">秋之思</a></p>
</li>
<li>
<p><a href="/note/winter/note.html" target="_blank">冬之语</a></p>
</li>
<li>
<p><a href="/note/spring/1.html" target="_blank">春之诗</a></p>
</li>
<li>
<p><a href="/note/summer/1.html" target="_blank">夏之歌</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>这里是 Mr.Hope 的一些随笔，后续被整理进博客中。</p>
<h2>四季</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的散文诗集，最初发表在空间日志上。</p>
<p>后续也写了一些诗补充了进去，其中以 “秋之思” 篇幅最多</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<ul>
<li>
<p><a href="/note/fall/catalog.html" target="_blank">秋之思</a></p>
</li>
<li>
<p><a href="/note/winter/note.html" target="_blank">冬之语</a></p>
</li>
<li>
<p><a href="/note/spring/1.html" target="_blank">春之诗</a></p>
</li>
<li>
<p><a href="/note/summer/1.html" target="_blank">夏之歌</a></p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">其他方式</p>
<p>也可查看 <a href="https://user.qzone.qq.com/1178522294" target="_blank" rel="noopener noreferrer">空间相册</a></p>
</div>
<h2>笑谈人生</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的人生感悟，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<ul>
<li><a href="/note/life/" target="_blank">点击前往</a></li>
</ul>
<h2>轻言细语</h2>
<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的一些小的散文诗，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<ul>
<li><a href="/note/poem/" target="_blank">点击前往</a></li>
</ul>
<h2>Node.js 相关</h2>
<ul>
<li><a href="/note/node-js/current-path.html" target="_blank">current-path 相关</a></li>
</ul>
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">物理笔记</title>
    <id>https://mister-hope.com/physics/</id>
    <link href="https://mister-hope.com/physics/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/physics/electromagnetism/" target="_blank">电磁学</a></p>
</li>
<li>
<p><a href="/physics/optism/" target="_blank">光学</a></p>
</li>
<li>
<p><a href="/physics/tsp/" target="_blank">热力学与统计物理</a></p>
</li>
<li>
<p><a href="/physics/quatum/" target="_blank">量子力学</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/physics/electromagnetism/" target="_blank">电磁学</a></p>
</li>
<li>
<p><a href="/physics/optism/" target="_blank">光学</a></p>
</li>
<li>
<p><a href="/physics/tsp/" target="_blank">热力学与统计物理</a></p>
</li>
<li>
<p><a href="/physics/quatum/" target="_blank">量子力学</a></p>
</li>
</ul>
]]></content>
    <category term="物理"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">软件教程</title>
    <id>https://mister-hope.com/software/</id>
    <link href="https://mister-hope.com/software/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>代码编辑器</h2>
<ul>
<li><a href="/software/editor.html" target="_blank">编辑器介绍</a></li>
</ul>
<h2>团队协作</h2>
<p>开发项目的代码版本管理以及多人协作使用 Git 软件</p>
<ul>
<li>
<p><a href="/software/git/" target="_blank">Git 教程</a></p>
</li>
<li>
<p><a href="/code/github/" target="_blank">GitHub 介绍</a></p>
</li>
</ul>
<h2>浏览器</h2>]]></summary>
    <content type="html"><![CDATA[<h2>代码编辑器</h2>
<ul>
<li><a href="/software/editor.html" target="_blank">编辑器介绍</a></li>
</ul>
<h2>团队协作</h2>
<p>开发项目的代码版本管理以及多人协作使用 Git 软件</p>
<ul>
<li>
<p><a href="/software/git/" target="_blank">Git 教程</a></p>
</li>
<li>
<p><a href="/code/github/" target="_blank">GitHub 介绍</a></p>
</li>
</ul>
<h2>浏览器</h2>
<p>在开发中，调试网页推荐使用 Chrome。</p>
<ul>
<li><a href="/software/chrome.html" target="_blank">Chrome 介绍</a></li>
</ul>
<h2>后端</h2>
<h3>Http Server</h3>
<p>网站已经停止使用 Apache Lounge 编译的 httpd Apache。目前迁移到更加轻量，并发性能更好的 Nginx 上。</p>
<ul>
<li>
<p><a href="/software/apache.html" target="_blank">Apache</a> </p>
</li>
<li>
<p><a href="/software/nginx.html" target="_blank">Nginx</a></p>
</li>
</ul>
<h3>抓包与 API 调试</h3>
<ul>
<li><a href="/software/postman.html" target="_blank">Postman</a></li>
</ul>
<h2>工具软件</h2>
<ul>
<li><a href="/software/tool/" target="_blank">查看详情</a></li>
</ul>
<h2>手机 APP</h2>
<h3>soloLearn</h3>
<p>一个代码在线学习社区，只有英文版。由于代码语义贴近英文原生逻辑，十分建议在编辑代码时 “think in English”。</p>
<p>软件中的 code playground 可以在线运行大部分代码，大家在手机上就可以进行练习与尝试。</p>
<h2>Adobe 软件</h2>
<p>Adobe 全系软件的获取，请见 <a href="https://www.weibo.com/vposy" target="_blank" rel="noopener noreferrer">VPosy 的微博</a> 的置顶帖。</p>
]]></content>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">基础介绍</title>
    <id>https://mister-hope.com/code/basic/</id>
    <link href="https://mister-hope.com/code/basic/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。</p>
]]></summary>
    <content type="html"><![CDATA[<p>这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。</p>
<!-- more -->
]]></content>
    <category term="基础"/>
    <published>2019-12-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GitHub</title>
    <id>https://mister-hope.com/code/github/</id>
    <link href="https://mister-hope.com/code/github/"/>
    <updated>2023-03-12T09:46:14.000Z</updated>
    <summary type="html"><![CDATA[<h2>快速上手</h2>
]]></summary>
    <content type="html"><![CDATA[<h2>快速上手</h2>
]]></content>
    <category term="GitHub"/>
    <published>2019-11-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">代码学习教程</title>
    <id>https://mister-hope.com/code/language/</id>
    <link href="https://mister-hope.com/code/language/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<ul>
<li><a href="/code/language/learning.html" target="_blank">如何学习一门语言</a></li>
</ul>
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/language/js/" target="_blank">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/python/" target="_blank">Python 教程</a> (编写中...)</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744" target="_blank" rel="noopener noreferrer">Java 教程</a>(廖雪峰的博客)</p>
</li>
<li>
<p><a href="/code/language/markdown/" target="_blank">Markdown 教程</a></p>
</li>
<li>
<p><a href="/code/language/yaml/" target="_blank">YAML 教程</a></p>
</li>
<li>
<p><a href="/code/language/json/" target="_blank">JSON 教程</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<ul>
<li><a href="/code/language/learning.html" target="_blank">如何学习一门语言</a></li>
</ul>
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/language/js/" target="_blank">JavaScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></p>
</li>
<li>
<p><a href="/code/language/python/" target="_blank">Python 教程</a> (编写中...)</p>
</li>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744" target="_blank" rel="noopener noreferrer">Java 教程</a>(廖雪峰的博客)</p>
</li>
<li>
<p><a href="/code/language/markdown/" target="_blank">Markdown 教程</a></p>
</li>
<li>
<p><a href="/code/language/yaml/" target="_blank">YAML 教程</a></p>
</li>
<li>
<p><a href="/code/language/json/" target="_blank">JSON 教程</a></p>
</li>
</ul>
<h2>Linter</h2>
<ul>
<li><a href="/code/language/linter/" target="_blank">Linter 介绍</a></li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>C 、C++、Java、PHP 正在编写中...</p>
</div>
]]></content>
    <category term="教程"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">小程序</title>
    <id>https://mister-hope.com/code/mini-app/</id>
    <link href="https://mister-hope.com/code/mini-app/"/>
    <updated>2022-02-12T05:50:30.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发小程序之前。应当掌握 <a href="/code/website/html/" target="_blank">HTML</a>、<a href="/code/website/css/" target="_blank">CSS</a>、<a href="/code/language/js/guide/" target="_blank">JavaScript 基础</a> 以及 <a href="/code/language/js/es6/" target="_blank">ES6</a>。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在开发小程序之前。应当掌握 <a href="/code/website/html/" target="_blank">HTML</a>、<a href="/code/website/css/" target="_blank">CSS</a>、<a href="/code/language/js/guide/" target="_blank">JavaScript 基础</a> 以及 <a href="/code/language/js/es6/" target="_blank">ES6</a>。</p>
</div>
<!-- more -->
<h2>小程序基础简介</h2>
<p>在微信小程序中主要有四种文件结构: <code>wxml</code>、<code>wxss</code>、<code>js</code> 和 <code>json</code>。其中 <code>wxml</code> 对应带有 vue.js 特征的 html5，<code>wxss</code> 对应 css3，<code>js</code> 对应 ES6 标准的的 javaScript。</p>
<p>对于 QQ 小程序，其文件结构为 <code>QML</code>、<code>qss</code>、<code>js</code> 和 <code>json</code>。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>QQ 小程序本质还是换汤不换药的，且 QQ 开发者工具兼容 <code>wxml</code> 与 <code>wss</code>)</p>
</div>
<p>小程序开发与网页开发极其相似。所以必须有适当的网页开发基础。零基础的人可能很难直接上手小程序开发。</p>
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/mini-app/guide/file-structure.html" target="_blank">文件结构</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/env.html" target="_blank">运行环境</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/" target="_blank">小程序配置</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/config/app-config.html" target="_blank">全局配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/page-config.html" target="_blank">页面配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/sitemap-config.html" target="_blank">sitemap 配置</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/" target="_blank">小程序框架</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/frame/intro.html" target="_blank">框架介绍</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/scene.html" target="_blank">场景值</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/env.html" target="_blank">运行环境</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/mechanism.html" target="_blank">运行机制</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/update.html" target="_blank">更新机制</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/service/" target="_blank">逻辑层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/service/lifetime.html" target="_blank">生命周期</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/route.html" target="_blank">路由</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/register.html" target="_blank">注册</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/app.html" target="_blank">App()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/page.html" target="_blank">Page()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/run.html" target="_blank">运行</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/module.html" target="_blank">模块化</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/api/" target="_blank">API</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/view/" target="_blank">视图层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/view/wxml.html" target="_blank">WXML</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxss.html" target="_blank">WXSS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/event.html" target="_blank">事件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/component.html" target="_blank">基础组件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/animation.html" target="_blank">动画</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs-event.html" target="_blank">WXS 事件</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/model.html" target="_blank">建议双向绑定</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">获取界面上的节点信息</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">相应显示区域变化</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/rendering-cache.html" target="_blank">初始渲染缓存</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/" target="_blank">小程序能力</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/ability/network.html" target="_blank">网络请求</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/storage.html" target="_blank">存储</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/file-system.html" target="_blank">文件系统</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/debug.html" target="_blank">调试</a></p>
</li>
</ul>
</li>
</ul>
<h2>开发者工具</h2>
<ul>
<li>
<p><a href="/code/mini-app/tools/interface.html" target="_blank">工具界面简介</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/debug.html" target="_blank">调试</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/npm.html" target="_blank">npm</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/audit.html" target="_blank">体验评分</a></p>
</li>
</ul>
<h2>官方教程</h2>
<ul>
<li><a href="https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0008aeea9a8978ab0086a685851c0a" target="_blank" rel="noopener noreferrer">点击前往</a></li>
</ul>
<h2>案例</h2>
<ul>
<li><a href="https://github.com/Hope-Studio/wxminiappdemo" target="_blank" rel="noopener noreferrer">GitHub repository</a></li>
</ul>
<h2>Mr.Hope 框架说明</h2>
<ul>
<li>
<p><a href="/code/mini-app/framework/" target="_blank">小程序框架使用说明</a></p>
</li>
<li>
<p><a href="/code/mini-app/framework/tag-list.html" target="_blank">tag 值参数表</a></p>
</li>
<li>
<p><a href="/code/mini-app/framework/page.html" target="_blank">setPage 库使用说明</a></p>
</li>
<li>
<p><a href="/code/mini-app/framework/simple-debug.html" target="_blank">界面简单开发学习指南</a></p>
</li>
<li>
<p><a href="/code/mini-app/qr-code.html" target="_blank">分享相关</a></p>
</li>
</ul>
<h2>学习视频</h2>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/av22790583/" target="_blank" rel="noopener noreferrer">零基础开发小程序</a>(比较新的视频，强调总体思想)</p>
</li>
<li>
<p><a href="https://www.bilibili.com/video/av11938917" target="_blank" rel="noopener noreferrer">小程序-从入门到入土</a>(比较老的视频，针对每个组件或者 API 进行了针对的讲解与示范，但部分内容已经与最新官方文档不符)</p>
</li>
</ul>
<h2>示例代码</h2>
<ul>
<li>
<p><a href="https://github.com/wechat-miniprogram/miniprogram-demo" target="_blank" rel="noopener noreferrer">小程序实例源码</a></p>
<figure><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/demo.ef5c5bef.jpg" alt="小程序示例二维码" tabindex="0" loading="lazy"><figcaption>小程序示例二维码</figcaption></figure>
</li>
</ul>
<h2>官方文档</h2>
<ul>
<li><a href="https://q.qq.com/wiki/" target="_blank" rel="noopener noreferrer">QQ 小程序</a></li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/" target="_blank" rel="noopener noreferrer">微信小程序</a></li>
<li><a href="https://developers.weixin.qq.com/community/develop/question" target="_blank" rel="noopener noreferrer">微信小程序社区</a>
<ul>
<li><a href="https://developers.weixin.qq.com/community/develop/list/2?id=" target="_blank" rel="noopener noreferrer">官方公告</a></li>
</ul>
</li>
</ul>
<h3>QQ 开发者工具</h3>
<p>现在很多功能还处于缺失状态，bug 到没之前那么多了。</p>
<ul>
<li>
<p><a href="https://q.qq.com/wiki/" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
<li>
<p><a href="https://q.qq.com/wiki/tools/devtool/" target="_blank" rel="noopener noreferrer">下载地址</a></p>
</li>
</ul>
<h2>微信开发者工具</h2>
<p>微信开发者工具用来开发与调试微信小程序和微信相关网页的官方工具。小程序使用该开发工具进行开发。</p>
<ul>
<li>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener noreferrer">下载地址</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/" target="_blank">开发者工具教程</a></p>
</li>
<li>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html" target="_blank" rel="noopener noreferrer">官方使用指南</a></p>
</li>
</ul>
]]></content>
    <category term="小程序"/>
    <published>2019-11-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Node.js</title>
    <id>https://mister-hope.com/code/node-js/</id>
    <link href="https://mister-hope.com/code/node-js/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>
<!-- more -->
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/node-js/intro.html" target="_blank">Node.js 介绍</a></p>
</li>
<li>
<p><a href="/code/node-js/install.html" target="_blank">Node.js 与 npm 安装</a></p>
</li>
<li>
<p><a href="/code/node-js/environment.html" target="_blank">Node.js 环境</a></p>
</li>
<li>
<p><a href="/code/node-js/program.html" target="_blank">编程</a></p>
</li>
<li>
<p><a href="/code/node-js/cjs.html" target="_blank">Node.js CJS 模块</a></p>
</li>
</ul>
<p>以上，就是 Node.js 的简易介绍，系统学习可以查看下方的详细教程。</p>
<h2>初学者教程</h2>
<ul>
<li>
<p><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener noreferrer">Node.js 入门</a></p>
</li>
<li>
<p><a href="https://www.w3cschool.cn/nodejs/" target="_blank" rel="noopener noreferrer">W3CSchool</a></p>
</li>
</ul>
<h2>官方文档</h2>
<ul>
<li><a href="https://nodejs.org/dist/latest-v14.x/docs/api/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<h2>Yarn</h2>
<p>快速、可靠、安全的依赖管理工具。</p>
<ul>
<li>
<p>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，因此安装速度更快。</p>
</li>
<li>
<p>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p>
</li>
<li>
<p>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</p>
</li>
<li>
<p><a href="https://www.yarnpkg.com/zh-Hans/docs/install#windows-stable" target="_blank" rel="noopener noreferrer">下载地址</a></p>
</li>
<li>
<p><a href="https://www.yarnpkg.com/zh-Hans/docs" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</li>
</ul>
<h3>命令</h3>
<ul>
<li>
<p><code>yarn install</code>: 执行安装</p>
</li>
<li>
<p><code>yarn upgrade</code>: 执行升级</p>
</li>
<li>
<p><code>yarn add &lt;package&gt;</code>: 添加一个包</p>
</li>
<li>
<p><code>yarn config set cache-folder &lt;path&gt;</code>: 更改缓存文件夹</p>
</li>
<li>
<p><code>yarn config set registry &lt;registry&gt;</code>: 更改源</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在国内，建议换成淘宝源 <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener noreferrer">https://registry.npm.taobao.org</a></p>
<p>即执行</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org
</code></pre></div></div>
</li>
</ul>
]]></content>
    <category term="Node.js"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">React</title>
    <id>https://mister-hope.com/code/react/</id>
    <link href="https://mister-hope.com/code/react/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>创建 React 项目</h2>
<p>使用 <code>create-react-app</code> 工具。</p>
<p>创建普通模板:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx create-react-app xxx
</code></pre></div><p>创建 TS 模板:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx create-react-app xxx <span class="token parameter variable">--template</span> typescript
</code></pre></div>]]></summary>
    <content type="html"><![CDATA[<h2>创建 React 项目</h2>
<p>使用 <code>create-react-app</code> 工具。</p>
<p>创建普通模板:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx create-react-app xxx
</code></pre></div><p>创建 TS 模板:</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code>npx create-react-app xxx <span class="token parameter variable">--template</span> typescript
</code></pre></div><h2>React 文档</h2>
<ul>
<li><a href="https://reactjs.org/docs/getting-started.html" target="_blank" rel="noopener noreferrer">官方文档</a></li>
<li><a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noopener noreferrer">中文文档</a></li>
</ul>
]]></content>
    <category term="前端"/>
    <published>2020-05-08T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Vue.js</title>
    <id>https://mister-hope.com/code/vue/</id>
    <link href="https://mister-hope.com/code/vue/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>简介</h2>
<p>Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p>
<h2>渐进式框架</h2>
<p>Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue：</p>]]></summary>
    <content type="html"><![CDATA[<h2>简介</h2>
<p>Vue (发音为 /vjuː/，类似 view) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。</p>
<h2>渐进式框架</h2>
<p>Vue 是一个框架，也是一个生态。其功能覆盖了大部分前端开发常见的需求。但 Web 世界是十分多样化的，不同的开发者在 Web 上构建的东西可能在形式和规模上会有很大的不同。考虑到这一点，Vue 的设计非常注重灵活性和“可以被逐步集成”这个特点。根据你的需求场景，你可以用不同的方式使用 Vue：</p>
<ul>
<li>无需构建步骤，渐进式增强静态的 HTML</li>
<li>在任何页面中作为 Web Components 嵌入</li>
<li>单页应用 (SPA)</li>
<li>全栈 / 服务端渲染 (SSR)</li>
<li>Jamstack / 静态站点生成 (SSG)</li>
<li>开发桌面端、移动端、WebGL，甚至是命令行终端中的界面</li>
</ul>
<h2>Vue.js 教程目录</h2>
<ul>
<li>
<p><a href="/code/vue/core/install.html" target="_blank">开发环境安装</a></p>
</li>
<li>
<p><a href="/code/vue/core/get-started.html" target="_blank">起步上手</a></p>
</li>
<li>
<p><a href="/code/vue/core/app.html" target="_blank">创建 Vue 应用</a></p>
</li>
<li>
<p><a href="/code/vue/core/template.html" target="_blank">模板语法</a></p>
</li>
<li>
<p><a href="/code/vue/core/sfc.html" target="_blank">Vue 单文件组件说明</a></p>
</li>
</ul>
<h2>Vue 生态</h2>
<h3>Vue Router</h3>
<ul>
<li><a href="/code/vue/router/" target="_blank">Vue Router 概述</a></li>
</ul>
<!-- TODO: Add pinia and vite -->
<h3>其他 Vue 生态</h3>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/basic/vuepress/" target="_blank" rel="noopener noreferrer">VuePress</a>: 静态站点生成器；</li>
<li><a href="https://vue.ant.design/docs/vue/introduce-cn/" target="_blank" rel="noopener noreferrer">Ant Design Vue</a>: 阿里的一套 UI 组件库；</li>
<li><a href="https://bootstrap-vue.js.org/" target="_blank" rel="noopener noreferrer">BootstrapVue</a></li>
</ul>
<h2>官方文档</h2>
<ul>
<li>
<p><a href="https://cn.vuejs.org/guide/introduction.html" target="_blank" rel="noopener noreferrer">Vue.js 介绍</a></p>
</li>
<li>
<p><a href="https://cn.vuejs.org/api/" target="_blank" rel="noopener noreferrer">Vue.js API</a></p>
</li>
</ul>
]]></content>
    <category term="基础"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">网页入门</title>
    <id>https://mister-hope.com/code/website/</id>
    <link href="https://mister-hope.com/code/website/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>网页需要三件套: <strong>HTML</strong>、<strong>CSS</strong> 和 <strong>JavaScript</strong>。</p>
<ol>
<li>HTML 定义了网页的内容</li>
<li>CSS 描述了网页的样式</li>
<li>JavaScript 编写网页的行为</li>
</ol>
]]></summary>
    <content type="html"><![CDATA[<p>网页需要三件套: <strong>HTML</strong>、<strong>CSS</strong> 和 <strong>JavaScript</strong>。</p>
<ol>
<li>HTML 定义了网页的内容</li>
<li>CSS 描述了网页的样式</li>
<li>JavaScript 编写网页的行为</li>
</ol>
<!-- more -->
<h2>网站开发技术</h2>
<p>一个大型的网站，很少是直接使用原生代码写的。</p>
<ul>
<li>现代网站大多通过开源前端框架 (如 <a href="#react"><strong>React</strong></a>、<a href="#vue"><strong>Vue</strong></a>) 开发，并引入 npm 上的 UI 库编写而成。</li>
<li>较老的网站 (或者政企) 可能会在原生开发基础上使用其他框架作为辅助，比如 <a href="#bootstrap4"><strong>Bootstrap</strong></a>、<a href="#jquery"><strong>jQuery</strong></a> 等。</li>
</ul>
<h2>网页标准</h2>
<p>互联网网页标准由 W3C 组织制定，它的全称是万维网联盟组织。</p>
<h2>网页基础</h2>
<h3>HTML</h3>
<p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)，描述了网页的骨架(具体结构)。</p>
<ul>
<li><a href="/code/website/html/" target="_blank">HTML 教程</a></li>
</ul>
<h3>CSS</h3>
<p>CSS 指层叠样式表 (Cascading Style Sheets)，声明了网页的样式(具体布局)。</p>
<ul>
<li><a href="/code/website/css/" target="_blank">CSS 教程</a></li>
</ul>
<h3>Emmet</h3>
<p>Emmet 是一种快速输入 HTML 和 CSS 的语法。</p>
<ul>
<li><a href="/code/website/emmet/" target="_blank">Emmet 用法介绍</a></li>
</ul>
<h3>JavaScript</h3>
<p>JavaScript 是一种编程语言，声明了网页的交互逻辑。</p>
<p>JavaScript 是一种轻量级的编程语言，为可插入 HTML 页面的编程代码。所有现代的 HTML 页面都使用 JavaScript。</p>
<ul>
<li><a href="/code/website/js.html" target="_blank">JS 教程</a></li>
</ul>
<h2>现代前端框架</h2>
<h3>Vue</h3>
<p>Vue 是一套轻量化的前端渐进式框架框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<ul>
<li>
<p><a href="/code/vue/" target="_blank">Vue 学习教程</a></p>
</li>
<li>
<p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener noreferrer">Vue 官方文档</a></p>
</li>
</ul>
<h3>React</h3>
<ul>
<li><a href="/code/react/" target="_blank">React 教程</a></li>
</ul>
<h3>Angular</h3>
<ul>
<li><a href="/code/angular/" target="_blank">Angular 教程</a></li>
</ul>
<h2>深入网页开发</h2>
<h3>TypeScript</h3>
<p>TypeScript 是 JavaScript 的一个超集，使得 JS 变成了一种强定义语言。TypeScript 由于其诸多优良特性，目前在前端的份额越来越大。</p>
<ul>
<li><a href="/code/language/typescript/" target="_blank">TypeScript 教程</a></li>
</ul>
<h3>Node.js</h3>
<p>在深入了解并进行前端开发后，就避不开 Node。</p>
<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>
<ul>
<li><a href="/code/node-js/" target="_blank">Node.js 教程</a></li>
</ul>
<h2>历史前端框架</h2>
<h3>jQuery</h3>
<p>jQuery 是一个 JavaScript 库，极大地简化了 JavaScript 编程，很容易学习。</p>
<p>jQuery 的优势在于它能够在互联网发展早期兼容各式各样的浏览器，并轻松的选定与操作 DOM。</p>
<p>由于 MVVM 的兴起，目前 jQuery 已逐步被前端三大框架所取代。</p>
<ul>
<li>
<p><a href="/code/website/jQuery/" target="_blank">jQuery 教程</a></p>
</li>
<li>
<p><a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="noopener noreferrer">W3School</a></p>
</li>
<li>
<p><a href="https://www.runoob.com/jquery/jquery-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></p>
</li>
</ul>
<h3>Bootstrap4</h3>
<p>Bootstrap 是全球最受欢迎的前端组件库，用于开发响应式布局、移动设备优先的 WEB 项目。</p>
<p>Bootstrap 是一套用于 HTML、CSS 和 JS 开发的开源工具集。利用提供的 Sass 变量和大量 mixin、响应式栅格系统、可扩展的预制组件、基于 jQuery 的强大的插件系统，能够快速为您的想法开发出原型或者构建整个 app 。</p>
<ul>
<li>
<p><a href="https://getbootstrap.com/docs/4.1/getting-started/introduction/" target="_blank" rel="noopener noreferrer">bootstrap 官方文档</a></p>
</li>
<li>
<p><a href="https://v4.bootcss.com/docs/4.0/getting-started/introduction/" target="_blank" rel="noopener noreferrer">bootstrap 4.0 中文文档</a></p>
</li>
</ul>
<h2>定义列表</h2>
<ul>
<li><a href="/code/website/definition/uri.html" target="_blank">URI 统一资源标识符</a></li>
<li><a href="/code/website/definition/url.html" target="_blank">URL 统一资源定位符</a></li>
<li><a href="/code/website/definition/seo.html" target="_blank">SEO 搜索引擎优化</a></li>
<li><a href="/code/website/definition/mime.html" target="_blank">MIME Type 媒体类型</a></li>
<li><a href="/code/website/definition/https.html" target="_blank">HTTPS 介绍</a></li>
</ul>
]]></content>
    <category term="前端"/>
    <published>2019-09-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Windows 简介</title>
    <id>https://mister-hope.com/code/windows/</id>
    <link href="https://mister-hope.com/code/windows/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>以下是有关于 Windows 系统的一些基础知识。</p>
]]></summary>
    <content type="html"><![CDATA[<p>以下是有关于 Windows 系统的一些基础知识。</p>
<!-- more -->
]]></content>
    <category term="基础"/>
    <published>2019-09-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">设计文章</title>
    <id>https://mister-hope.com/design/articles/</id>
    <link href="https://mister-hope.com/design/articles/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>文章列表</h2>
<ul>
<li>
<p><a href="/design/articles/gestalt-principle.html" target="_blank">格式塔原则</a></p>
</li>
<li>
<p><a href="/design/articles/left-or-right.html" target="_blank">布局中的左和右</a></p>
</li>
<li>
<p><a href="/design/articles/infomation-flow.html" target="_blank">信息流介绍</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>文章列表</h2>
<ul>
<li>
<p><a href="/design/articles/gestalt-principle.html" target="_blank">格式塔原则</a></p>
</li>
<li>
<p><a href="/design/articles/left-or-right.html" target="_blank">布局中的左和右</a></p>
</li>
<li>
<p><a href="/design/articles/infomation-flow.html" target="_blank">信息流介绍</a></p>
</li>
</ul>
]]></content>
    <category term="设计"/>
    <published>2020-09-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">图标</title>
    <id>https://mister-hope.com/design/icon/</id>
    <link href="https://mister-hope.com/design/icon/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<p>本文介绍了 UI 设计中图标的相关介绍与技巧。</p>
]]></summary>
    <content type="html"><![CDATA[<p>本文介绍了 UI 设计中图标的相关介绍与技巧。</p>
<!-- more -->
<h2>图标网站</h2>
<ul>
<li>
<p><a href="https://www.iconfont.cn/" target="_blank" rel="noopener noreferrer">iconfont</a></p>
<p>阿里妈妈 MUX 倾力打造的矢量图标管理、交流平台。</p>
<p>设计师将图标上传到 Iconfont 平台，用户可以自定义下载多种格式的 icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。</p>
<p>强大的图标在线编辑与自定义下载</p>
<p>图标项目的项目管理、协同、分享</p>
</li>
</ul>
<h2>相关文档</h2>
<p>图标是 UI 的设计体系最重要的组成部分之一，是任何 UI 界面中都不可或缺的视觉元素。了解图标相关的概念，以及正确绘制的方法，是入门 UI 设计的必备条件。</p>
<ul>
<li>
<p><a href="/design/icon/intro.html" target="_blank">图标介绍</a></p>
</li>
<li>
<p><a href="/design/icon/type.html" target="_blank">图标种类</a></p>
</li>
<li>
<p><a href="/design/icon/guide.html" target="_blank">图标设计指南</a></p>
</li>
<li>
<p><a href="/design/icon/software.html" target="_blank">图标设计软件</a></p>
</li>
<li>
<p><a href="/design/icon/draw.html" target="_blank">图标绘制流程</a></p>
</li>
<li>
<p><a href="/design/icon/rule.html" target="_blank">图标设计准则</a></p>
</li>
<li>
<p><a href="/design/icon/line.html" target="_blank">线性图标设计演示</a></p>
</li>
<li>
<p><a href="/design/icon/flour.html" target="_blank">面性图标设计指南</a></p>
</li>
<li>
<p><a href="/design/icon/decorative.html" target="_blank">装饰性图标设计指南</a></p>
</li>
<li>
<p><a href="/design/icon/start.html" target="_blank">启动图标设计指南</a></p>
</li>
<li>
<p><a href="/design/icon/skill.html" target="_blank">图标设计技巧</a></p>
</li>
<li>
<p><a href="/design/icon/apply.html" target="_blank">图标实践注意事项</a></p>
</li>
</ul>
<h2>相关要求</h2>
<ul>
<li>
<p>了解图标的常见设计准则</p>
<ul>
<li>
<p>能够对一个图标的好坏做出评判。</p>
</li>
<li>
<p>了解不同的图标风格</p>
</li>
<li>
<p>能够从现有图表库中中选取合适的图标应用到项目中。</p>
</li>
</ul>
</li>
<li>
<p>简单了解图标的制作软件与制作方式</p>
<ul>
<li>
<p>能够制作简单的图标</p>
</li>
<li>
<p>在项目拥有一套完善图标风格，但部分图标存在缺失时能够自制图标补全。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    <category term="设计"/>
    <published>2020-09-13T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">交互设计</title>
    <id>https://mister-hope.com/design/interact/</id>
    <link href="https://mister-hope.com/design/interact/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>文章列表</h2>
<ul>
<li>
<p><a href="/design/interact/search.html" target="_blank">搜索框</a></p>
</li>
<li>
<p><a href="/design/interact/text-field.html" target="_blank">文本框</a></p>
</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>文章列表</h2>
<ul>
<li>
<p><a href="/design/interact/search.html" target="_blank">搜索框</a></p>
</li>
<li>
<p><a href="/design/interact/text-field.html" target="_blank">文本框</a></p>
</li>
</ul>
]]></content>
    <category term="设计"/>
    <published>2020-09-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">导航设计教程</title>
    <id>https://mister-hope.com/design/navigation/</id>
    <link href="https://mister-hope.com/design/navigation/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/design/navigation/intro.html" target="_blank">导航设计介绍</a></p>
</li>
<li>
<p><a href="/design/navigation/navbar.html" target="_blank">导航栏概述与设计方式</a></p>
</li>
<li>
<p><a href="/design/navigation/navbar-design.html" target="_blank">导航栏设计技巧</a></p>
</li>
<li>
<p><a href="/design/navigation/sidebar-navigate.html" target="_blank">侧边导航设计</a></p>
</li>
<li>
<p><a href="/design/navigation/tabbar.html" target="_blank">标签导航设计</a></p>
</li>
<li>
<p><a href="/design/navigation/tabbar-design.html" target="_blank">标签导航设计技巧</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/design/navigation/intro.html" target="_blank">导航设计介绍</a></p>
</li>
<li>
<p><a href="/design/navigation/navbar.html" target="_blank">导航栏概述与设计方式</a></p>
</li>
<li>
<p><a href="/design/navigation/navbar-design.html" target="_blank">导航栏设计技巧</a></p>
</li>
<li>
<p><a href="/design/navigation/sidebar-navigate.html" target="_blank">侧边导航设计</a></p>
</li>
<li>
<p><a href="/design/navigation/tabbar.html" target="_blank">标签导航设计</a></p>
</li>
<li>
<p><a href="/design/navigation/tabbar-design.html" target="_blank">标签导航设计技巧</a></p>
</li>
</ul>
]]></content>
    <category term="设计"/>
    <published>2020-09-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Bash 教程</title>
    <id>https://mister-hope.com/linux/bash/</id>
    <link href="https://mister-hope.com/linux/bash/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/linux/bash/intro.html" target="_blank">简介</a></p>
</li>
<li>
<p><a href="/linux/bash/grammar.html" target="_blank">基本语法</a></p>
</li>
<li>
<p><a href="/linux/bash/expansion.html" target="_blank">模式扩展</a></p>
</li>
<li>
<p><a href="/linux/bash/quotation.html" target="_blank">引号和转义</a></p>
</li>
<li>
<p><a href="/linux/bash/variable.html" target="_blank">变量</a></p>
</li>
<li>
<p><a href="/linux/bash/string.html" target="_blank">字符串操作</a></p>
</li>
<li>
<p><a href="/linux/bash/arithmetic.html" target="_blank">算术运算</a></p>
</li>
<li>
<p><a href="/linux/bash/readline.html" target="_blank">行操作</a></p>
</li>
<li>
<p><a href="/linux/bash/stack.html" target="_blank">目录堆栈</a></p>
</li>
<li>
<p><a href="/linux/bash/script.html" target="_blank">脚本入门</a></p>
</li>
<li>
<p><a href="/linux/bash/read.html" target="_blank">read 命令</a></p>
</li>
<li>
<p><a href="/linux/bash/condition.html" target="_blank">条件判断</a></p>
</li>
<li>
<p><a href="/linux/bash/loop.html" target="_blank">循环</a></p>
</li>
<li>
<p><a href="/linux/bash/function.html" target="_blank">函数</a></p>
</li>
<li>
<p><a href="/linux/bash/array.html" target="_blank">数组</a></p>
</li>
<li>
<p><a href="/linux/bash/set.html" target="_blank">set 命令</a></p>
</li>
<li>
<p><a href="/linux/bash/debug.html" target="_blank">脚本除错</a></p>
</li>
<li>
<p><a href="/linux/bash/mktemp.html" target="_blank">mktemp 命令，trap 命令</a></p>
</li>
<li>
<p><a href="/linux/bash/startup.html" target="_blank">启动环境</a></p>
</li>
<li>
<p><a href="/linux/bash/prompt.html" target="_blank">命令提示符</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/linux/bash/intro.html" target="_blank">简介</a></p>
</li>
<li>
<p><a href="/linux/bash/grammar.html" target="_blank">基本语法</a></p>
</li>
<li>
<p><a href="/linux/bash/expansion.html" target="_blank">模式扩展</a></p>
</li>
<li>
<p><a href="/linux/bash/quotation.html" target="_blank">引号和转义</a></p>
</li>
<li>
<p><a href="/linux/bash/variable.html" target="_blank">变量</a></p>
</li>
<li>
<p><a href="/linux/bash/string.html" target="_blank">字符串操作</a></p>
</li>
<li>
<p><a href="/linux/bash/arithmetic.html" target="_blank">算术运算</a></p>
</li>
<li>
<p><a href="/linux/bash/readline.html" target="_blank">行操作</a></p>
</li>
<li>
<p><a href="/linux/bash/stack.html" target="_blank">目录堆栈</a></p>
</li>
<li>
<p><a href="/linux/bash/script.html" target="_blank">脚本入门</a></p>
</li>
<li>
<p><a href="/linux/bash/read.html" target="_blank">read 命令</a></p>
</li>
<li>
<p><a href="/linux/bash/condition.html" target="_blank">条件判断</a></p>
</li>
<li>
<p><a href="/linux/bash/loop.html" target="_blank">循环</a></p>
</li>
<li>
<p><a href="/linux/bash/function.html" target="_blank">函数</a></p>
</li>
<li>
<p><a href="/linux/bash/array.html" target="_blank">数组</a></p>
</li>
<li>
<p><a href="/linux/bash/set.html" target="_blank">set 命令</a></p>
</li>
<li>
<p><a href="/linux/bash/debug.html" target="_blank">脚本除错</a></p>
</li>
<li>
<p><a href="/linux/bash/mktemp.html" target="_blank">mktemp 命令，trap 命令</a></p>
</li>
<li>
<p><a href="/linux/bash/startup.html" target="_blank">启动环境</a></p>
</li>
<li>
<p><a href="/linux/bash/prompt.html" target="_blank">命令提示符</a></p>
</li>
</ul>
]]></content>
    <author>
      <name>阮一峰</name>
    </author>
    <category term="Linux"/>
    <contributor>
      <name>阮一峰</name>
    </contributor>
    <published>2022-01-07T00:00:00.000Z</published>
    <rights>本教程采用&amp;lt;a href=&amp;quot;https://creativecommons.org/licenses/by-sa/3.0/deed.zh&amp;quot; rel=&amp;quot;noopener noreferrer&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;知识共享 署名-相同方式共享 3.0协议&amp;lt;/a&amp;gt;</rights>
  </entry>
  <entry>
    <title type="text">Linux 命令格式</title>
    <id>https://mister-hope.com/linux/command/</id>
    <link href="https://mister-hope.com/linux/command/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/linux/command/command.html" target="_blank">命令格式简介</a></p>
</li>
<li>
<p><a href="/linux/command/dir.html" target="_blank">目录相关</a></p>
</li>
<li>
<p><a href="/linux/command/file.html" target="_blank">文件相关</a></p>
</li>
<li>
<p><a href="/linux/command/other.html" target="_blank">其他命令</a></p>
</li>
<li>
<p><a href="/linux/command/add.html" target="_blank">命令的自动补全</a></p>
</li>
<li>
<p><a href="/linux/command/excu.html" target="_blank">命令的执行</a></p>
</li>
<li>
<p><a href="/linux/command/path.html" target="_blank">环境变量</a></p>
</li>
<li>
<p><a href="/linux/command/ln.html" target="_blank">创建链接</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/linux/command/command.html" target="_blank">命令格式简介</a></p>
</li>
<li>
<p><a href="/linux/command/dir.html" target="_blank">目录相关</a></p>
</li>
<li>
<p><a href="/linux/command/file.html" target="_blank">文件相关</a></p>
</li>
<li>
<p><a href="/linux/command/other.html" target="_blank">其他命令</a></p>
</li>
<li>
<p><a href="/linux/command/add.html" target="_blank">命令的自动补全</a></p>
</li>
<li>
<p><a href="/linux/command/excu.html" target="_blank">命令的执行</a></p>
</li>
<li>
<p><a href="/linux/command/path.html" target="_blank">环境变量</a></p>
</li>
<li>
<p><a href="/linux/command/ln.html" target="_blank">创建链接</a></p>
</li>
</ul>
]]></content>
    <category term="Linux"/>
    <published>2019-11-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">文件</title>
    <id>https://mister-hope.com/linux/file/</id>
    <link href="https://mister-hope.com/linux/file/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/linux/file/file.html" target="_blank">Linux 文件</a></p>
</li>
<li>
<p><a href="/linux/file/dir.html" target="_blank">Linux 目录</a></p>
</li>
<li>
<p><a href="/linux/file/mount.html" target="_blank">挂载</a></p>
</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/linux/file/file.html" target="_blank">Linux 文件</a></p>
</li>
<li>
<p><a href="/linux/file/dir.html" target="_blank">Linux 目录</a></p>
</li>
<li>
<p><a href="/linux/file/mount.html" target="_blank">挂载</a></p>
</li>
</ul>
]]></content>
    <category term="Linux"/>
    <published>2019-11-17T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Linux 简介</title>
    <id>https://mister-hope.com/linux/intro/</id>
    <link href="https://mister-hope.com/linux/intro/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[
<ul>
<li>
<p><a href="/linux/intro/intro.html" target="_blank">Linux 介绍</a></p>
</li>
<li>
<p><a href="/linux/intro/history.html" target="_blank">Linux 历史</a></p>
</li>
<li>
<p><a href="/linux/intro/language.html" target="_blank">Linux 编写语言</a></p>
</li>
<li>
<p><a href="/linux/intro/advantage.html" target="_blank">Linux 优势</a></p>
</li>
<li>
<p><a href="/linux/intro/desktop.html" target="_blank">Linux 桌面环境</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[
<ul>
<li>
<p><a href="/linux/intro/intro.html" target="_blank">Linux 介绍</a></p>
</li>
<li>
<p><a href="/linux/intro/history.html" target="_blank">Linux 历史</a></p>
</li>
<li>
<p><a href="/linux/intro/language.html" target="_blank">Linux 编写语言</a></p>
</li>
<li>
<p><a href="/linux/intro/advantage.html" target="_blank">Linux 优势</a></p>
</li>
<li>
<p><a href="/linux/intro/desktop.html" target="_blank">Linux 桌面环境</a></p>
</li>
</ul>
]]></content>
    <category term="Linux"/>
    <published>2019-11-15T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">ubuntu</title>
    <id>https://mister-hope.com/linux/ubuntu/</id>
    <link href="https://mister-hope.com/linux/ubuntu/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[
<ul>
<li>
<p><a href="/linux/ubuntu/manage.html" target="_blank">管理包</a></p>
</li>
<li>
<p><a href="/linux/ubuntu/debug.html" target="_blank">开发软件</a></p>
</li>
<li>
<p><a href="/linux/ubuntu/webserver.html" target="_blank">网络服务器相关</a></p>
</li>
<li>
<p><a href="/linux/ubuntu/lang.html" target="_blank">语言切换</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[
<ul>
<li>
<p><a href="/linux/ubuntu/manage.html" target="_blank">管理包</a></p>
</li>
<li>
<p><a href="/linux/ubuntu/debug.html" target="_blank">开发软件</a></p>
</li>
<li>
<p><a href="/linux/ubuntu/webserver.html" target="_blank">网络服务器相关</a></p>
</li>
<li>
<p><a href="/linux/ubuntu/lang.html" target="_blank">语言切换</a></p>
</li>
</ul>
]]></content>
    <category term="Linux"/>
    <published>2019-11-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">秋之思</title>
    <id>https://mister-hope.com/note/fall/</id>
    <link href="https://mister-hope.com/note/fall/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的一个散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的一个散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<!-- more -->
<ul>
<li><a href="https://h5.qzone.qq.com/ugc/share/?sharetag=7C43C7A8C547ED48D9D15448BEECAF99&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT4Y23uM&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103" target="_blank" rel="noopener noreferrer"><strong>空间相册链接</strong></a></li>
</ul>
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">笑谈人生</title>
    <id>https://mister-hope.com/note/life/</id>
    <link href="https://mister-hope.com/note/life/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的人生感悟，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<ul>
<li><a href="https://h5.qzone.qq.com/ugc/share/?sharetag=126FDE98906EB067815B0EEA0F72BEC0&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT49u8Sd&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103" target="_blank" rel="noopener noreferrer"><strong>空间相册链接</strong></a></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的人生感悟，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<ul>
<li><a href="https://h5.qzone.qq.com/ugc/share/?sharetag=126FDE98906EB067815B0EEA0F72BEC0&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT49u8Sd&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103" target="_blank" rel="noopener noreferrer"><strong>空间相册链接</strong></a></li>
</ul>
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">NodeJS</title>
    <id>https://mister-hope.com/note/node-js/</id>
    <link href="https://mister-hope.com/note/node-js/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li><a href="/note/node-js/current-path.html" target="_blank">current-path 相关</a></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li><a href="/note/node-js/current-path.html" target="_blank">current-path 相关</a></li>
</ul>
]]></content>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">轻言细语</title>
    <id>https://mister-hope.com/note/poem/</id>
    <link href="https://mister-hope.com/note/poem/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的一些小的散文诗，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的一些小的散文诗，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<!-- more -->
<ul>
<li><a href="https://h5.qzone.qq.com/ugc/share/?sharetag=38F7D93E6B85A1E5BE96A0C93F17652D&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT29nRn4&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103" target="_blank" rel="noopener noreferrer"><strong>空间相册链接</strong></a></li>
</ul>
<blockquote>
<p>由 赵婧一 摘抄</p>
</blockquote>
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">春之诗</title>
    <id>https://mister-hope.com/note/spring/</id>
    <link href="https://mister-hope.com/note/spring/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的第三篇散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的第三篇散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<!-- more -->
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">夏之歌</title>
    <id>https://mister-hope.com/note/summer/</id>
    <link href="https://mister-hope.com/note/summer/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的第四篇散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的第四篇散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<!-- more -->
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">冬之语</title>
    <id>https://mister-hope.com/note/winter/</id>
    <link href="https://mister-hope.com/note/winter/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的第二篇散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">介绍</p>
<p>这是我在高一写的第二篇散文诗集，最初发表在空间日志上。</p>
<p>近日将其作为少年回忆，整理在博客中。</p>
</div>
<!-- more -->
<ul>
<li><a href="https://h5.qzone.qq.com/ugc/share/?sharetag=2AC65F349EEC4F95F047C3685529CF9E&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT0dBJbe&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103" target="_blank" rel="noopener noreferrer"><strong>空间相册链接</strong></a></li>
</ul>
]]></content>
    <category term="随笔"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">电磁学笔记</title>
    <id>https://mister-hope.com/physics/electromagnetism/</id>
    <link href="https://mister-hope.com/physics/electromagnetism/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/physics/electromagnetism/charpter1.html" target="_blank">第一章</a></p>
</li>
<li>
<p><a href="/physics/electromagnetism/charpter2.html" target="_blank">第二章</a></p>
</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/physics/electromagnetism/charpter1.html" target="_blank">第一章</a></p>
</li>
<li>
<p><a href="/physics/electromagnetism/charpter2.html" target="_blank">第二章</a></p>
</li>
</ul>
]]></content>
    <category term="物理"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">光学笔记</title>
    <id>https://mister-hope.com/physics/optism/</id>
    <link href="https://mister-hope.com/physics/optism/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[
<ul>
<li><a href="/physics/optism/charpter1.html" target="_blank">第一章</a></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[
<ul>
<li><a href="/physics/optism/charpter1.html" target="_blank">第一章</a></li>
</ul>
]]></content>
    <category term="物理"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">量子力学笔记</title>
    <id>https://mister-hope.com/physics/quatum/</id>
    <link href="https://mister-hope.com/physics/quatum/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[
<ul>
<li><a href="/physics/quatum/charpter1.html" target="_blank">第一章</a></li>
</ul>
]]></summary>
    <content type="html"><![CDATA[
<ul>
<li><a href="/physics/quatum/charpter1.html" target="_blank">第一章</a></li>
</ul>
]]></content>
    <category term="物理"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">热力学与统计物理笔记</title>
    <id>https://mister-hope.com/physics/tsp/</id>
    <link href="https://mister-hope.com/physics/tsp/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/physics/tsp/definition.html" target="_blank">定义</a></p>
</li>
<li>
<p><a href="/physics/tsp/charpter1.html" target="_blank">第一章</a></p>
</li>
<li>
<p><a href="/physics/tsp/charpter2.html" target="_blank">第二章</a></p>
</li>
<li>
<p><a href="/physics/tsp/charpter3.html" target="_blank">第三章</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/physics/tsp/definition.html" target="_blank">定义</a></p>
</li>
<li>
<p><a href="/physics/tsp/charpter1.html" target="_blank">第一章</a></p>
</li>
<li>
<p><a href="/physics/tsp/charpter2.html" target="_blank">第二章</a></p>
</li>
<li>
<p><a href="/physics/tsp/charpter3.html" target="_blank">第三章</a></p>
</li>
</ul>
]]></content>
    <category term="物理"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">COMSOL</title>
    <id>https://mister-hope.com/software/comsol/</id>
    <link href="https://mister-hope.com/software/comsol/"/>
    <updated>2023-07-05T07:16:41.000Z</updated>
    <summary type="html"><![CDATA[<p>这里是一些 Comsol 的学习资料整理与学习心得。</p>
]]></summary>
    <content type="html"><![CDATA[<p>这里是一些 Comsol 的学习资料整理与学习心得。</p>
<!-- more -->
<div class="hint-container tip">
<p class="hint-container-title">写在前面</p>
<p>本教程只适用于从未接触过仿真的人员，内容比较基础。</p>
<p>我本人主要活跃在计算机相关领域，本科专业是物理学，并没有学过系统的工程原理、数值分析、模型建构以及相关的误差分析。COMSOL 是我本科制作毕设的软件，在毕设前，我也使用 COMSOL 构建了几个模型，完成了一些装置的模拟与优化。</p>
<p>本篇教程，是根据我对 COMSOL 以及有限元仿真的理解书写的，一定会有一些疏漏与理解错误之处，还望大家指出。另外我主要研究过的方向是传热与流体流动，在本教程的举例中，也大多以这两方面为主。对其他的方向与模块，我是不熟悉的。</p>
</div>
<ul>
<li>
<p><a href="/software/comsol/install.html" target="_blank">软件下载与安装</a></p>
</li>
<li>
<p><a href="/software/comsol/intro.html" target="_blank">有限元分析软件介绍</a></p>
</li>
<li>
<p><a href="/software/comsol/get-started.html" target="_blank">快速上手 COMSOL</a></p>
</li>
<li>
<p><a href="/software/comsol/geometry/" target="_blank">几何</a></p>
<ul>
<li>
<p><a href="/software/comsol/geometry/view.html" target="_blank">浏览几何</a></p>
</li>
<li>
<p><a href="/software/comsol/geometry/build.html" target="_blank">构建几何</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/software/comsol/select.html" target="_blank">选择</a></p>
</li>
<li>
<p><a href="/software/comsol/material.html" target="_blank">材料</a></p>
</li>
<li>
<p><a href="/software/comsol/physic-field.html" target="_blank">物理场</a></p>
</li>
<li>
<p><a href="/software/comsol/mesh/" target="_blank">网格</a></p>
</li>
<li>
<p><a href="/software/comsol/study.html" target="_blank">研究</a></p>
</li>
<li>
<p><a href="/software/comsol/result.html" target="_blank">结果</a></p>
</li>
<li>
<p><a href="/software/comsol/app.html" target="_blank">APP</a></p>
</li>
</ul>
<h2>文档</h2>
<ul>
<li>
<p><a href="https://mister-hope.com/file/comsol/IntroductionToCOMSOLMultiphysics.zh_CN.pdf" target="_blank" rel="noopener noreferrer">COMSOL 新手指南</a></p>
</li>
<li>
<p><a href="https://mister-hope.com/file/comsol/App%E5%BC%80%E5%8F%91%E5%99%A8%E7%AE%80%E4%BB%8B.pdf" target="_blank" rel="noopener noreferrer">COMSOL App 开发器简介</a></p>
</li>
<li>
<p><a href="https://mister-hope.com/file/comsol/ApplicationProgrammingGuide.zh_CN.pdf" target="_blank" rel="noopener noreferrer">COMSOL Multiphysics 应用程序编程指南</a></p>
</li>
<li>
<p><a href="http://cn.comsol.com/multiphysics/" target="_blank" rel="noopener noreferrer">COMSOL 多物理场仿真百科</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/videos" target="_blank" rel="noopener noreferrer">COMSOL 视频中心</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video-training" target="_blank" rel="noopener noreferrer">COMSOL 在线课程回放</a> (应该是在疫情期间限时开放)</p>
</li>
<li>
<p><a href="https://cn.comsol.com/papers-presentations" target="_blank" rel="noopener noreferrer">基于 COMSOL 的论文</a></p>
</li>
</ul>
<h2>其他杂项</h2>
<ul>
<li>
<p><a href="https://cn.comsol.com/blogs/how-to-make-boundary-conditions-conditional-in-your-simulation/" target="_blank" rel="noopener noreferrer">如何设置特殊边界条件</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/blogs/how-to-customize-the-comsol-desktop-and-use-keyboard-shortcuts/" target="_blank" rel="noopener noreferrer">如何定制 COMSOL Desktop<sup>®</sup> 和使用键盘快捷键</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/blogs/how-to-use-the-find-and-auto-completion-tools-for-faster-model-setup/" target="_blank" rel="noopener noreferrer">使用查找工具和自动完成工具加快建模过程</a></p>
</li>
</ul>
]]></content>
    <category term="软件"/>
    <published>2020-05-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Git</title>
    <id>https://mister-hope.com/software/git/</id>
    <link href="https://mister-hope.com/software/git/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。</p>
<div class="hint-container info">
<p class="hint-container-title">交互式学习</p>
<p>如果您觉得本文太枯燥，这里有一个 <a href="http://learngitbranching.js.org/" target="_blank" rel="noopener noreferrer">交互式的分支演示与学习网站</a>。您可以在这里领略 Git 的魅力。</p>
<p>但 Mr.Hope 仍建议您操作完再系统的学习并阅读以下内容。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。</p>
<div class="hint-container info">
<p class="hint-container-title">交互式学习</p>
<p>如果您觉得本文太枯燥，这里有一个 <a href="http://learngitbranching.js.org/" target="_blank" rel="noopener noreferrer">交互式的分支演示与学习网站</a>。您可以在这里领略 Git 的魅力。</p>
<p>但 Mr.Hope 仍建议您操作完再系统的学习并阅读以下内容。</p>
</div>
<!-- more -->
<h2>Git 安装</h2>
<ul>
<li><a href="/software/git/install.html" target="_blank">安装教程</a></li>
</ul>
<h2>Git 教程</h2>
<ul>
<li>
<p><a href="/software/git/intro.html" target="_blank">Git 介绍</a></p>
</li>
<li>
<p><a href="/software/git/create-repo.html" target="_blank">创建版本库</a></p>
</li>
<li>
<p><a href="/software/git/status.html" target="_blank">纵向查看</a></p>
</li>
<li>
<p><a href="/software/git/recall.html" target="_blank">撤销操作</a></p>
</li>
<li>
<p><a href="/software/git/reset.html" target="_blank">版本回退</a></p>
</li>
<li>
<p><a href="/software/git/working-directory.html" target="_blank">工作区和暂存区</a></p>
</li>
<li>
<p><a href="/software/git/change.html" target="_blank">修改管理</a></p>
</li>
<li>
<p><a href="/software/git/remote.html" target="_blank">远程仓库</a></p>
</li>
<li>
<p><a href="/software/git/branch.html" target="_blank">分支管理</a></p>
</li>
<li>
<p><a href="/software/git/tag.html" target="_blank">标签管理</a></p>
</li>
<li>
<p><a href="/software/git/ignore.html" target="_blank">忽略特殊文件</a></p>
</li>
</ul>
<h2>深入 Git</h2>
<ul>
<li>
<p><a href="/software/git/working.html" target="_blank">Git 原理</a></p>
</li>
<li>
<p><a href="/software/git/custom.html" target="_blank">自定义 Git</a></p>
</li>
<li>
<p><a href="/software/git/gitLFS.html" target="_blank">大文件管理存储</a></p>
</li>
<li>
<p><a href="/software/git/server.html" target="_blank">搭建 Git 服务器</a></p>
</li>
<li>
<p><a href="/software/git/merge.html" target="_blank">高级合并</a></p>
</li>
</ul>
<h2>扩展阅读</h2>
<ul>
<li>
<p><a href="https://git-scm.com/doc" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</li>
<li>
<p><a href="https://mister-hope.com/file/git/gitCheatSheet.pdf" target="_blank" rel="noopener noreferrer">Git-cheatSheet</a> (PDF)</p>
</li>
<li>
<p><a href="https://mister-hope.com/file/git/progit_v2.1.45.pdf" target="_blank" rel="noopener noreferrer">Pro Git</a> (PDF)</p>
</li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">TODO</p>
<ol>
<li>完善分支合并部分，加入更多命令介绍。如 <code>cherry-pick</code> <code>squash-merge</code>。</li>
<li>介绍 Git Hook</li>
</ol>
</div>
]]></content>
    <category term="Git"/>
    <published>2022-01-07T00:00:00.000Z</published>
    <rights>Copyright by 廖雪峰 Edited by Mr.Hope</rights>
  </entry>
  <entry>
    <title type="text">工具软件</title>
    <id>https://mister-hope.com/software/tool/</id>
    <link href="https://mister-hope.com/software/tool/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/software/tool/power-toys.html" target="_blank">PowerToys</a>: Windows 实用工具合集</p>
</li>
<li>
<p><a href="https://github.com/huiyadanli/PasteEx" target="_blank" rel="noopener noreferrer">PasteEx</a>: Paste As File 把剪贴板的内容直接粘贴为文件</p>
</li>
<li>
<p><a href="https://www.typora.io/" target="_blank" rel="noopener noreferrer">typora</a>: 一个页面很漂亮的 Markdown 编辑器</p>
</li>
<li>
<p><a href="https://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener noreferrer">Potplayer</a>: 心目中最 NB 的视频播放器，没有之一</p>
</li>
<li>
<p><a href="/software/tool/terminal/" target="_blank">Terminal</a>: Windows 终端</p>
</li>
<li>
<p><a href="/software/tool/powershell.html" target="_blank">PowerShell</a>: Windows 的命令行外壳程序和脚本环境</p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/software/tool/power-toys.html" target="_blank">PowerToys</a>: Windows 实用工具合集</p>
</li>
<li>
<p><a href="https://github.com/huiyadanli/PasteEx" target="_blank" rel="noopener noreferrer">PasteEx</a>: Paste As File 把剪贴板的内容直接粘贴为文件</p>
</li>
<li>
<p><a href="https://www.typora.io/" target="_blank" rel="noopener noreferrer">typora</a>: 一个页面很漂亮的 Markdown 编辑器</p>
</li>
<li>
<p><a href="https://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener noreferrer">Potplayer</a>: 心目中最 NB 的视频播放器，没有之一</p>
</li>
<li>
<p><a href="/software/tool/terminal/" target="_blank">Terminal</a>: Windows 终端</p>
</li>
<li>
<p><a href="/software/tool/powershell.html" target="_blank">PowerShell</a>: Windows 的命令行外壳程序和脚本环境</p>
</li>
</ul>
]]></content>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">VS Code</title>
    <id>https://mister-hope.com/software/vscode/</id>
    <link href="https://mister-hope.com/software/vscode/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Visual Studio Code 是一个轻量级但功能强大的源代码编辑器，可在您的桌面上运行，并且可用于 Windows，macOS 和 Linux。它具有对 JavaScript，TypeScript 和 Node.js 的内置支持，并具有丰富的其他语言 (例如 C ++，C＃，Java，Python，PHP，Go) 和运行时 (例如 .NET 和 Unity) 扩展的生态系统。由微软出品，因其开源，可扩展和众多插件成为全球最受欢迎的代码编辑器。</p>
<h2>特点</h2>
<ul>
<li>
<p>智能代码补全</p>
<p>使用 IntelliSense 可以更智能地编写代码、变量，方法和导入模块的完成。</p>
</li>
<li>
<p>热门扩展</p>
<p>启用其他语言，主题，调试器，命令等。</p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>Visual Studio Code 是一个轻量级但功能强大的源代码编辑器，可在您的桌面上运行，并且可用于 Windows，macOS 和 Linux。它具有对 JavaScript，TypeScript 和 Node.js 的内置支持，并具有丰富的其他语言 (例如 C ++，C＃，Java，Python，PHP，Go) 和运行时 (例如 .NET 和 Unity) 扩展的生态系统。由微软出品，因其开源，可扩展和众多插件成为全球最受欢迎的代码编辑器。</p>
<h2>特点</h2>
<ul>
<li>
<p>智能代码补全</p>
<p>使用 IntelliSense 可以更智能地编写代码、变量，方法和导入模块的完成。</p>
</li>
<li>
<p>热门扩展</p>
<p>启用其他语言，主题，调试器，命令等。</p>
</li>
</ul>
<h2>目录</h2>
<ul>
<li>
<p><a href="/software/vscode/install.html" target="_blank">安装</a></p>
</li>
<li>
<p><a href="/software/vscode/get-started.html" target="_blank">快速上手</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/" target="_blank">指南</a></p>
<ul>
<li>
<p><a href="/software/vscode/guide/basic.html" target="_blank">基础介绍</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/customization.html" target="_blank">个性化介绍</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/extension.html" target="_blank">扩展介绍</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/file.html" target="_blank">文件介绍</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/edit.html" target="_blank">编辑技巧</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/intellisense.html" target="_blank">智能补全</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/git.html" target="_blank">Git 支持</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/debug.html" target="_blank">调试介绍</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/task.html" target="_blank">任务介绍</a></p>
</li>
<li>
<p><a href="/software/vscode/guide/command.html" target="_blank">命令行介绍</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/software/vscode/ui.html" target="_blank">VS Code 用户界面</a></p>
</li>
<li>
<p><a href="/software/vscode/shortcut-key.html" target="_blank">VS Code 快捷键</a></p>
</li>
<li>
<p><a href="/software/vscode/settings.html" target="_blank">VS Code 设置</a></p>
</li>
<li>
<p><a href="/software/vscode/extension.html" target="_blank">VS Code 推荐扩展</a></p>
</li>
</ul>
<h2>官方文档</h2>
<ul>
<li>
<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">VS Code 官网</a></p>
</li>
<li>
<p><a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener noreferrer">官方文档</a></p>
</li>
<li>
<p><a href="https://code.visualstudio.com/docs/getstarted/introvideos" target="_blank" rel="noopener noreferrer">官方视频</a></p>
</li>
</ul>
]]></content>
    <category term="VS Code"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">GitHub Actions</title>
    <id>https://mister-hope.com/code/github/actions/</id>
    <link href="https://mister-hope.com/code/github/actions/"/>
    <updated>2023-03-12T09:46:14.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/code/github/actions/intro.html" target="_blank">GitHub Actions 介绍</a></p>
</li>
<li>
<p><a href="/code/github/actions/config.html" target="_blank">Workflow 配置</a></p>
</li>
</ul>
<h2>常用 GitHub Action</h2>
<ul>
<li>
<p><a href="/code/github/actions/checkout.html" target="_blank">checkout</a></p>
</li>
<li>
<p><a href="/code/github/actions/cache.html" target="_blank">cache</a></p>
</li>
<li>
<p><a href="/code/github/actions/gh-pages-deploy.html" target="_blank">GitHub Pages 部署</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/code/github/actions/intro.html" target="_blank">GitHub Actions 介绍</a></p>
</li>
<li>
<p><a href="/code/github/actions/config.html" target="_blank">Workflow 配置</a></p>
</li>
</ul>
<h2>常用 GitHub Action</h2>
<ul>
<li>
<p><a href="/code/github/actions/checkout.html" target="_blank">checkout</a></p>
</li>
<li>
<p><a href="/code/github/actions/cache.html" target="_blank">cache</a></p>
</li>
<li>
<p><a href="/code/github/actions/gh-pages-deploy.html" target="_blank">GitHub Pages 部署</a></p>
</li>
</ul>
<h2>官方文档</h2>
<ul>
<li>
<p><a href="https://docs.github.com/cn/actions" target="_blank" rel="noopener noreferrer">文档地址</a></p>
</li>
<li>
<p><a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">Workflow 触发事件</a></p>
</li>
<li>
<p><a href="https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">Workflow 配置</a></p>
</li>
</ul>
]]></content>
    <category term="GitHub"/>
    <published>2021-02-18T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">C 语言教程</title>
    <id>https://mister-hope.com/code/language/C/</id>
    <link href="https://mister-hope.com/code/language/C/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
<!-- more -->
]]></content>
    <category term="C"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">C++ 教程</title>
    <id>https://mister-hope.com/code/language/C__/</id>
    <link href="https://mister-hope.com/code/language/C__/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
<!-- more -->
]]></content>
    <category term="C++"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Dart 教程</title>
    <id>https://mister-hope.com/code/language/dart/</id>
    <link href="https://mister-hope.com/code/language/dart/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
<!-- more -->
<h2>dart 快速入门</h2>
<ul>
<li><a href="/code/language/dart/samples/samples.html" target="_blank">案例</a></li>
<li><a href="/code/language/dart/samples/cheatsheet.html" target="_blank">概要介绍</a></li>
<li><a href="/code/language/dart/samples/iterable.html" target="_blank">遍历</a></li>
</ul>
<h2>官网</h2>
<ul>
<li><a href="https://dart.dev/" target="_blank" rel="noopener noreferrer">英文官网</a></li>
<li><a href="https://www.dartcn.com/" target="_blank" rel="noopener noreferrer">中文官网</a> (不推荐，已有一年多未更新)</li>
</ul>
]]></content>
    <category term="dart"/>
    <published>2020-05-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 教程</title>
    <id>https://mister-hope.com/code/language/java/</id>
    <link href="https://mister-hope.com/code/language/java/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
<!-- more -->
]]></content>
    <category term="Java"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">JavaScript 教程</title>
    <id>https://mister-hope.com/code/language/js/</id>
    <link href="https://mister-hope.com/code/language/js/"/>
    <updated>2022-06-14T04:47:46.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>部分内容参考/来自廖雪峰、阮一峰书籍与博客</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container note">
<p class="hint-container-title">注</p>
<p>部分内容参考/来自廖雪峰、阮一峰书籍与博客</p>
</div>
<!-- more -->
<h2>JavaScript 是什么</h2>
<ul>
<li><a href="/code/language/js/intro/" target="_blank">导论</a></li>
</ul>
<div class="hint-container tip">
<p class="hint-container-title">有趣的历史</p>
<p>1995 年网景公司正凭借其 Navigator 浏览器成为 Web 时代开启时最著名的第一代互联网公司。由于网景公司希望能在静态 HTML 页面上添加一些动态效果，于是叫 Brendan Eich 这哥们在两周之内设计出了 JavaScript 语言。您没看错，这哥们只用了 10 天时间 (这也是为什么至今也有人也在吐槽 JavaScript 垃圾的原因)。</p>
<p>为什么起名叫 JavaScript? 原因是当时 Java 语言非常红火，所以网景公司就来碰瓷了，实际上两者没任何关系。</p>
<ul>
<li><a href="/code/language/js/intro/history.html" target="_blank">更多历史介绍</a></li>
</ul>
</div>
<h2>入门教程</h2>
<ul>
<li><a href="/code/language/js/guide/" target="_blank">快速上手</a></li>
</ul>
<h2>更多教程</h2>
<ul>
<li>
<p><a href="/code/language/js/types/" target="_blank">数据类型</a></p>
</li>
<li>
<p><a href="/code/language/js/operators/" target="_blank">运算符</a></p>
</li>
<li>
<p><a href="/code/language/js/function/" target="_blank">函数</a></p>
</li>
<li>
<p><a href="/code/language/js/object/" target="_blank">对象</a></p>
</li>
<li>
<p><a href="/code/language/js/browser/" target="_blank">浏览器</a></p>
</li>
</ul>
<h2>进阶</h2>
<ul>
<li>
<p><a href="/code/language/js/es6/" target="_blank">ES6 教程</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/" target="_blank">JQuery</a></p>
</li>
<li>
<p><a href="/code/language/js/error.html" target="_blank">错误处理</a></p>
</li>
<li>
<p><a href="/code/node-js/" target="_blank">node.js</a></p>
</li>
</ul>
<h2>在线教程</h2>
<ul>
<li>
<p><a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener noreferrer">JavaScript 在线教程</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener noreferrer">JavaScript MDN 教程</a></p>
</li>
</ul>
<h2>许可协议</h2>
<p>此部分博客采用 <a href="https://creativecommons.org/licenses/by-sa/3.0/deed.zh" target="_blank" rel="noopener noreferrer">知识共享 署名-相同方式共享 3.0 协议</a></p>
]]></content>
    <category term="JavaScript"/>
    <published>2019-09-12T00:00:00.000Z</published>
    <rights>此部分博客采用 &amp;lt;a href=&amp;quot;https://creativecommons.org/licenses/by-sa/3.0/deed.zh&amp;quot;&amp;gt;知识共享 署名-相同方式共享 3.0 协议&amp;lt;/a&amp;gt;</rights>
  </entry>
  <entry>
    <title type="text">JSON 教程</title>
    <id>https://mister-hope.com/code/language/json/</id>
    <link href="https://mister-hope.com/code/language/json/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<p>JSON: JavaScript Object Notation(JavaScript 对象表示法)</p>
<ul>
<li>
<p>JSON 是存储和交换文本信息的语法。类似 XML。</p>
</li>
<li>
<p>JSON 比 XML 更小、更快，更易解析。</p>
</li>
<li>
<p>JSON 是轻量级的文本数据交换格式</p>
</li>
<li>
<p>JSON 独立于语言: JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。目前非常多的动态(PHP，JSP，.NET)编程语言都支持 JSON。</p>
</li>
<li>
<p>JSON 具有自我描述性，更易理解</p>
</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<p>JSON: JavaScript Object Notation(JavaScript 对象表示法)</p>
<ul>
<li>
<p>JSON 是存储和交换文本信息的语法。类似 XML。</p>
</li>
<li>
<p>JSON 比 XML 更小、更快，更易解析。</p>
</li>
<li>
<p>JSON 是轻量级的文本数据交换格式</p>
</li>
<li>
<p>JSON 独立于语言: JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。目前非常多的动态(PHP，JSP，.NET)编程语言都支持 JSON。</p>
</li>
<li>
<p>JSON 具有自我描述性，更易理解</p>
</li>
</ul>
<!-- more -->
<h2>JSON 值</h2>
<p>JSON 值可以是:</p>
<ul>
<li>数字(整数或浮点数)</li>
<li>字符串(在双引号中)</li>
<li>逻辑值(<code>true</code> 或 <code>false</code>)</li>
<li>数组(在中括号中)</li>
<li>对象(在大括号中)</li>
<li>null</li>
</ul>
<h2>JSON 数字</h2>
<p>JSON 数字可以是整型或者浮点型:</p>
<p><strong>例:</strong></p>
<ul>
<li><code>5201314</code></li>
<li><code>-1</code></li>
<li><code>3.141592654</code></li>
</ul>
<h2>JSON 布尔值</h2>
<p>JSON 布尔值可以是 <code>true</code> 或者 <code>false</code></p>
<h2>JSON 字符串</h2>
<p>JSON 字符串需要用双括号 <code>"</code> 包含，如果内部含有英文引号 <code>"</code>，需要使用 <code>\</code> 转义。</p>
<p><strong>例:</strong></p>
<ul>
<li><code>"Mr.Hope is handsome"</code></li>
<li><code>"春眠不觉晓，处处闻啼鸟"</code></li>
<li><code>"A saying goes: \"Great hopes make great man.\""</code></li>
</ul>
<h2>JSON 对象</h2>
<p>JSON 对象在大括号 <code>{}</code> 中书写以 <code>键: 值</code> 对的方式书写，不同键值对之间用 <code>,</code> 分隔。</p>
<p><strong>例:</strong></p>
<div class="language-json" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">"tag"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
  <span class="token property">"heading"</span><span class="token operator">:</span> <span class="token string">"校园卡说明"</span><span class="token punctuation">,</span>
  <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"校园卡是东师的金融消费卡"</span>
<span class="token punctuation">}</span>
</code></pre></div><h2>JSON 数组</h2>
<p>JSON 数组在中括号 <code>[]</code> 中书写，不同元素间用 <code>,</code> 隔开。</p>
<h2>JSON null</h2>
<p>JSON 可以设置 <code>null</code> 值</p>
]]></content>
    <category term="JSON"/>
    <published>2020-07-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">linter 介绍</title>
    <id>https://mister-hope.com/code/language/linter/</id>
    <link href="https://mister-hope.com/code/language/linter/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<p>linter 用来检查程序的语法错误，并即时标注和指出来 (例如，把声明了但没使用的多余变量指出来，向错误语句添加红色波浪线)，是程序开发的辅助工具。同时，linter 也有统一规范代码书写方式的功能。</p>
<p>在大型项目中，编码需要统一的风格，比如在 JavaScript 中使用单引号还是双引号包裹字符串，在何时进行折行等。目前各种语言基本都有自己的出色 linter，能够确保相同的使用不同换行方式、缩进、标记代码会最终格式化为相同的输出。</p>
]]></summary>
    <content type="html"><![CDATA[<p>linter 用来检查程序的语法错误，并即时标注和指出来 (例如，把声明了但没使用的多余变量指出来，向错误语句添加红色波浪线)，是程序开发的辅助工具。同时，linter 也有统一规范代码书写方式的功能。</p>
<p>在大型项目中，编码需要统一的风格，比如在 JavaScript 中使用单引号还是双引号包裹字符串，在何时进行折行等。目前各种语言基本都有自己的出色 linter，能够确保相同的使用不同换行方式、缩进、标记代码会最终格式化为相同的输出。</p>
<!-- more -->
<h2>Prettier</h2>
<p>Prettier 是一个前端知名的 linter，它可以代码规范根据设置为唯一的排列格式。它支持 markdown, html, css, js, ts, jsx, tsx, json, vue 等多种文件格式。</p>
<h2>ESlint</h2>
<p>ESlint 是一个知名的 JavaScript linter，借助插件它也可以提供其他扩展语言的支持，如 jsx, ts, tsx, vue 等。</p>
<h2>clang-format</h2>
<p>clang-format 是 C/ C++ / Object-C 最流行的代码格式化工具，提供多种预设的代码风格。</p>
<ul>
<li><a href="/code/language/linter/clang-format.html" target="_blank">查看详情</a></li>
</ul>
<h2>checkStyle</h2>
<p>checkStyle 是比较流行的 Java linter</p>
]]></content>
    <published>2020-10-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Markdown</title>
    <id>https://mister-hope.com/code/language/markdown/</id>
    <link href="https://mister-hope.com/code/language/markdown/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>Markdown 的目标是实现「易读易写」。</p>
<p>Markdown 的主要目的是用来作为一种网络内容的<strong>写作用语言</strong>。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<p>Markdown 的目标是实现「易读易写」。</p>
<p>Markdown 的主要目的是用来作为一种网络内容的<strong>写作用语言</strong>。</p>
<!-- more -->
<h2>目录</h2>
<ul>
<li><a href="/code/language/markdown/intro.html" target="_blank">简介</a></li>
<li><a href="/code/language/markdown/block.html" target="_blank">块元素</a></li>
<li><a href="/code/language/markdown/inline.html" target="_blank">行内元素</a></li>
<li><a href="/code/language/markdown/extend.html" target="_blank">扩展与其他内容</a></li>
</ul>
<h2>Markdown 效果演示</h2>
<ul>
<li><a href="/code/language/markdown/demo.html" target="_blank">查看详情</a></li>
</ul>
]]></content>
    <category term="Markdown"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">PHP 语言教程</title>
    <id>https://mister-hope.com/code/language/php/</id>
    <link href="https://mister-hope.com/code/language/php/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>正在完善中...</p>
</div>
]]></content>
    <category term="PHP"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Python 语言教程</title>
    <id>https://mister-hope.com/code/language/python/</id>
    <link href="https://mister-hope.com/code/language/python/"/>
    <updated>2022-02-12T05:50:30.000Z</updated>
    <summary type="html"><![CDATA[<ul>
<li>优点: Python 是一种高级语言，它可以用更少的代码量完成相同工作。</li>
<li>缺点: Python 是一种脚本语言，它的执行效率不是很高。</li>
</ul>
]]></summary>
    <content type="html"><![CDATA[<ul>
<li>优点: Python 是一种高级语言，它可以用更少的代码量完成相同工作。</li>
<li>缺点: Python 是一种脚本语言，它的执行效率不是很高。</li>
</ul>
<!-- more -->
<div class="hint-container warning">
<p class="hint-container-title">注意</p>
<p>本教程基于 Python3, Python2 已经过时停止维护多年，请不要使用学习。</p>
</div>
<h2>Python 简介</h2>
<ul>
<li>
<p><a href="/code/language/python/intro/intro.html" target="_blank">Python 介绍</a></p>
</li>
<li>
<p><a href="/code/language/python/intro/install.html" target="_blank">Python 安装</a></p>
</li>
<li>
<p><a href="/code/language/python/intro/interpreter.html" target="_blank">Python 解释器</a></p>
</li>
</ul>
<h2>Python 快速入门</h2>
<ul>
<li>
<p><a href="/code/language/python/guide/write.html" target="_blank">第一个 Python 程序</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/io.html" target="_blank">输入与输出</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/basic.html" target="_blank">基础语法</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/string.html" target="_blank">字符串</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/list-and-tuple.html" target="_blank">List 和 Tuple</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/condition.html" target="_blank">条件判断</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/loop.html" target="_blank">循环</a></p>
</li>
<li>
<p><a href="/code/language/python/guide/dict-and-set.html" target="_blank">Dictionary 和 Set</a></p>
</li>
</ul>
<h2>Python 函数</h2>
<ul>
<li>
<p><a href="/code/language/python/function/intro.html" target="_blank">函数介绍</a></p>
</li>
<li>
<p><a href="/code/language/python/function/define.html" target="_blank">函数定义</a></p>
</li>
<li>
<p><a href="/code/language/python/function/call.html" target="_blank">函数调用</a></p>
</li>
<li>
<p><a href="/code/language/python/function/argument.html" target="_blank">函数参数</a></p>
</li>
<li>
<p><a href="/code/language/python/function/recursive.html" target="_blank">递归调用</a></p>
</li>
</ul>
<h2>Python 高级语法</h2>
<ul>
<li>
<p><a href="/code/language/python/advance/slice.html" target="_blank">切片</a></p>
</li>
<li>
<p><a href="/code/language/python/advance/iteration.html" target="_blank">迭代</a></p>
</li>
<li>
<p><a href="/code/language/python/advance/list-comprehensions.html" target="_blank">列表生成式</a></p>
</li>
<li>
<p><a href="/code/language/python/advance/generator.html" target="_blank">生成器</a></p>
</li>
<li>
<p><a href="/code/language/python/advance/iterator.html" target="_blank">迭代器</a></p>
</li>
</ul>
<h2>函数式编程</h2>
<ul>
<li>
<p><a href="/code/language/python/functional-programming/high-order-function/intro.html" target="_blank">高阶函数介绍</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/high-order-function/map-and-reduce.html" target="_blank">map / reduce</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/high-order-function/filter.html" target="_blank">filter</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/high-order-function/sorted.html" target="_blank">sorted</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/return-function.html" target="_blank">返回函数</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/anonymous-function.html" target="_blank">匿名函数</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/decorator.html" target="_blank">装饰器</a></p>
</li>
<li>
<p><a href="/code/language/python/functional-programming/parital-function.html" target="_blank">偏函数</a></p>
</li>
</ul>
<h2>相关工具</h2>
<ul>
<li><a href="https://c.runoob.com/compile/9" target="_blank" rel="noopener noreferrer">Python 在线运行器</a></li>
</ul>
]]></content>
    <author>
      <name>廖雪峰</name>
    </author>
    <category term="Python"/>
    <contributor>
      <name>廖雪峰</name>
    </contributor>
    <published>2020-05-18T00:00:00.000Z</published>
    <rights>Copyright by 廖雪峰</rights>
  </entry>
  <entry>
    <title type="text">TypeScript 教程</title>
    <id>https://mister-hope.com/code/language/typescript/</id>
    <link href="https://mister-hope.com/code/language/typescript/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>TypeScript 是一种由微软开发的自由和开源的编程语言，它是 JavaScript 的一个超集，扩展了 JavaScript 的语法。</p>
]]></summary>
    <content type="html"><![CDATA[<p>TypeScript 是一种由微软开发的自由和开源的编程语言，它是 JavaScript 的一个超集，扩展了 JavaScript 的语法。</p>
<!-- more -->
<h2>语法特性</h2>
<ul>
<li>类 Classes</li>
<li>接口 Interfaces</li>
<li>模块 Modules</li>
<li>类型注解 Type annotations</li>
<li>编译时类型检查 Compile time type checking</li>
<li>Arrow 函数 (类似 C# 的 Lambda 表达式)</li>
</ul>
<blockquote>
<p>更多内容可以参考: 下方目录。</p>
</blockquote>
<h2>目录</h2>
<ul>
<li>
<p><a href="/code/language/typescript/intro/" target="_blank">简介</a></p>
<ul>
<li><a href="/code/language/typescript/intro/what-is-typescript.html" target="_blank">什么是 TypeScript</a></li>
<li><a href="/code/language/typescript/intro/get-typescript.html" target="_blank">安装 TypeScript</a></li>
<li><a href="/code/language/typescript/intro/hello-typescript.html" target="_blank">Hello TypeScript</a></li>
</ul>
</li>
<li>
<p><a href="/code/language/typescript/basics/" target="_blank">基础</a></p>
<ul>
<li><a href="/code/language/typescript/basics/primitive-data-types.html" target="_blank">原始数据类型</a></li>
<li><a href="/code/language/typescript/basics/any.html" target="_blank">任意值</a></li>
<li><a href="/code/language/typescript/basics/type-inference.html" target="_blank">类型推论</a></li>
<li><a href="/code/language/typescript/basics/union-types.html" target="_blank">联合类型</a></li>
<li><a href="/code/language/typescript/basics/type-of-object-interfaces.html" target="_blank">对象的类型——接口</a></li>
<li><a href="/code/language/typescript/basics/type-of-array.html" target="_blank">数组的类型</a></li>
<li><a href="/code/language/typescript/basics/type-of-function.html" target="_blank">函数的类型</a></li>
<li><a href="/code/language/typescript/basics/type-assertion.html" target="_blank">类型断言</a></li>
<li><a href="/code/language/typescript/basics/declaration-files.html" target="_blank">声明文件</a></li>
<li><a href="/code/language/typescript/basics/built-in-objects.html" target="_blank">内置对象</a></li>
</ul>
</li>
<li>
<p><a href="/code/language/typescript/advanced/" target="_blank">进阶</a></p>
<ul>
<li><a href="/code/language/typescript/advanced/type-aliases.html" target="_blank">类型别名</a></li>
<li><a href="/code/language/typescript/advanced/string-literal-types.html" target="_blank">字符串字面量类型</a></li>
<li><a href="/code/language/typescript/advanced/tuple.html" target="_blank">元组</a></li>
<li><a href="/code/language/typescript/advanced/enum.html" target="_blank">枚举</a></li>
<li><a href="/code/language/typescript/advanced/class.html" target="_blank">类</a></li>
<li><a href="/code/language/typescript/advanced/class-and-interfaces.html" target="_blank">类与接口</a></li>
<li><a href="/code/language/typescript/advanced/generics.html" target="_blank">泛型</a></li>
<li><a href="/code/language/typescript/advanced/declaration-merging.html" target="_blank">声明合并</a></li>
<li><a href="/code/language/typescript/advanced/further-reading.html" target="_blank">扩展阅读</a></li>
</ul>
</li>
<li>
<p><a href="/code/language/typescript/engineering/" target="_blank">工程</a></p>
<ul>
<li><a href="/code/language/typescript/engineering/lint.html" target="_blank">代码检查</a></li>
</ul>
</li>
</ul>
<h2>JavaScript 与 TypeScript 的区别</h2>
<p>TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。</p>
<p>TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。</p>
<h2>TypeScript 官网文档</h2>
<ul>
<li><a href="http://www.typescriptlang.org/docs/home.html" target="_blank" rel="noopener noreferrer">点击查看官网</a></li>
<li><a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener noreferrer">点击查看第三方中文文档</a></li>
</ul>
]]></content>
    <category term="TypeScript"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">YAML 教程</title>
    <id>https://mister-hope.com/code/language/yaml/</id>
    <link href="https://mister-hope.com/code/language/yaml/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<p>编程免不了要写配置文件，怎么写配置也是一门学问。</p>
<p>YAML 是专门用来写配置文件的语言，非常简洁和强大。</p>
<h2>yaml 介绍</h2>
<p>YAML 语言(发音 /ˈjæməl/ )的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。</p>
<p>YAML 的全称是 YAML Ain’t Markup Language。</p>
<p>它的基本语法规则如下。</p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<p>编程免不了要写配置文件，怎么写配置也是一门学问。</p>
<p>YAML 是专门用来写配置文件的语言，非常简洁和强大。</p>
<h2>yaml 介绍</h2>
<p>YAML 语言(发音 /ˈjæməl/ )的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。</p>
<p>YAML 的全称是 YAML Ain’t Markup Language。</p>
<p>它的基本语法规则如下。</p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
</ul>
<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>
<p>YAML 支持的数据结构有三种。</p>
<ul>
<li>对象: 键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)</li>
<li>数组: 一组按次序排列的值，又称为序列(sequence) / 列表(list)</li>
<li>纯量(scalars): 单个的、不可再分的值</li>
</ul>
<h2>如何打开或编辑 yaml</h2>
<p>推荐使用 VS Code，具体详见<a href="/software/vscode/simple.html" target="_blank">VS Code 简单介绍</a>。</p>
<h2>数据结构介绍</h2>
<h3>对象</h3>
<p>对象的一组键值对，使用冒号结构表示。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">animal</span><span class="token punctuation">:</span> pets
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">animal</span><span class="token operator">:</span> <span class="token string">"pets"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">hash</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Steve<span class="token punctuation">,</span> <span class="token key atrule">foo</span><span class="token punctuation">:</span> bar <span class="token punctuation">}</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre></div><h3>数组</h3>
<p>一组连词线开头的行，构成一个数组。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> Cat
<span class="token punctuation">-</span> Dog
<span class="token punctuation">-</span> Goldfish
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">"Cat"</span><span class="token punctuation">,</span> <span class="token string">"Dog"</span><span class="token punctuation">,</span> <span class="token string">"Goldfish"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token punctuation">-</span> Cat
  <span class="token punctuation">-</span> Dog
  <span class="token punctuation">-</span> Goldfish
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Cat"</span><span class="token punctuation">,</span> <span class="token string">"Dog"</span><span class="token punctuation">,</span> <span class="token string">"Goldfish"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><p>数组也可以采用行内表示法。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">animal</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Cat<span class="token punctuation">,</span> Dog<span class="token punctuation">]</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">animal</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Cat"</span><span class="token punctuation">,</span> <span class="token string">"Dog"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>复合结构</h3>
<p>对象和数组可以结合使用，形成复合结构。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">languages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> Ruby
  <span class="token punctuation">-</span> Perl
  <span class="token punctuation">-</span> Python

<span class="token key atrule">websites</span><span class="token punctuation">:</span>
  <span class="token key atrule">YAML</span><span class="token punctuation">:</span> yaml.org
  <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> ruby<span class="token punctuation">-</span>lang.org
  <span class="token key atrule">Python</span><span class="token punctuation">:</span> python.org
  <span class="token key atrule">Perl</span><span class="token punctuation">:</span> use.perl.org
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">{</span>
  <span class="token key atrule">languages</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Ruby"</span><span class="token punctuation">,</span> <span class="token string">"Perl"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token key atrule">websites</span><span class="token punctuation">:</span>
    <span class="token punctuation">{</span>
      <span class="token key atrule">YAML</span><span class="token punctuation">:</span> <span class="token string">"yaml.org"</span><span class="token punctuation">,</span>
      <span class="token key atrule">Ruby</span><span class="token punctuation">:</span> <span class="token string">"ruby-lang.org"</span><span class="token punctuation">,</span>
      <span class="token key atrule">Python</span><span class="token punctuation">:</span> <span class="token string">"python.org"</span><span class="token punctuation">,</span>
      <span class="token key atrule">Perl</span><span class="token punctuation">:</span> <span class="token string">"use.perl.org"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h3>纯量</h3>
<p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p>
<ul>
<li>字符串</li>
<li>布尔值</li>
<li>整数</li>
<li>浮点数</li>
<li>Null</li>
<li>时间</li>
<li>日期</li>
</ul>
<p>数值直接以字面量的形式表示。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">12.30</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">12.3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>布尔值用 <code>true</code> 和 <code>false</code> 表示。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">isSet</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">isSet</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>null</code> 用 <code>~</code> 表示。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">parent</span><span class="token punctuation">:</span> <span class="token null important">~</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>时间采用 ISO8601 格式。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">iso8601</span><span class="token punctuation">:</span> <span class="token datetime number">2001-12-14t21:59:43.10-05:00</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">iso8601</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2001-12-14t21:59:43.10-05:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>日期采用复合 iso8601 格式的年、月、日表示。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">1976-07-31</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"1976-07-31"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>YAML 允许使用两个感叹号，强制转换数据类型。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">e</span><span class="token punctuation">:</span> <span class="token tag">!!str</span> <span class="token number">123</span>
<span class="token key atrule">f</span><span class="token punctuation">:</span> <span class="token tag">!!str</span> <span class="token boolean important">true</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token string">'true'</span> <span class="token punctuation">}</span>
</code></pre></div><h3>字符串</h3>
<p>字符串是最常见，也是最复杂的一种数据类型。</p>
<p>字符串默认不使用引号表示。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">str</span><span class="token punctuation">:</span> 这是一行字符串
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">"这是一行字符串"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">str</span><span class="token punctuation">:</span> <span class="token string">"内容: 字符串"</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">"内容: 字符串"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>单引号和双引号都可以使用，双引号不会对特殊字符转义。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">s1</span><span class="token punctuation">:</span> <span class="token string">'内容\n字符串'</span>
<span class="token key atrule">s2</span><span class="token punctuation">:</span> <span class="token string">"内容\n字符串"</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token literal-property property">s1</span><span class="token operator">:</span> <span class="token string">'内容\\n字符串'</span><span class="token punctuation">,</span> <span class="token literal-property property">s2</span><span class="token operator">:</span> <span class="token string">'内容\n字符串'</span> <span class="token punctuation">}</span>
</code></pre></div><p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">str</span><span class="token punctuation">:</span> <span class="token string">"labor's day"</span>
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">"labor's day"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">str</span><span class="token punctuation">:</span> 这是一段
  多行
  字符串
</code></pre></div><p>转为 JavaScript 如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">str</span><span class="token operator">:</span> <span class="token string">"这是一段 多行 字符串"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>多行字符串可以使用 <code>|</code> 保留换行符，也可以使用 <code>&gt;</code> 折叠换行。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">this</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
  Foo
  Bar</span>
<span class="token key atrule">that</span><span class="token punctuation">:</span> <span class="token punctuation">&gt;</span><span class="token scalar string">
  Foo
  Bar</span>
</code></pre></div><p>转为 JavaScript 代码如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token operator">:</span> <span class="token string">'Foo\nBar\n'</span><span class="token punctuation">,</span> <span class="token literal-property property">that</span><span class="token operator">:</span> <span class="token string">'Foo Bar\n'</span> <span class="token punctuation">}</span>
</code></pre></div><p><code>+</code> 表示保留文字块末尾的换行，<code>-</code> 表示删除字符串末尾的换行。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">s1</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
  Foo</span>

<span class="token key atrule">s2</span><span class="token punctuation">:</span> <span class="token punctuation">|</span>+
  Foo

<span class="token key atrule">s3</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>
  Foo
</code></pre></div><p>转为 JavaScript 代码如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span> <span class="token literal-property property">s1</span><span class="token operator">:</span> <span class="token string">'Foo\n'</span><span class="token punctuation">,</span> <span class="token literal-property property">s2</span><span class="token operator">:</span> <span class="token string">'Foo\n\n\n'</span><span class="token punctuation">,</span> <span class="token literal-property property">s3</span><span class="token operator">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span>
</code></pre></div><h2>引用</h2>
<p>锚点 <code>&amp;</code> 和别名 <code>*</code>，可以用来引用。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">defaults</span><span class="token punctuation">:</span> <span class="token important">&amp;defaults</span>
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost

<span class="token key atrule">development</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_development
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*defaults</span>

<span class="token key atrule">test</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_test
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*defaults</span>
</code></pre></div><p>等同于下面的代码。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">defaults</span><span class="token punctuation">:</span>
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost

<span class="token key atrule">development</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_development
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost

<span class="token key atrule">test</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> myapp_test
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> postgres
  <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
</code></pre></div><p><code>&amp;</code> 用来建立锚点(defaults)，<code>&lt;&lt;</code> 表示合并到当前数据，<code>*</code> 用来引用锚点。</p>
<p>下面是另一个例子。</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token important">&amp;showell</span> Steve
<span class="token punctuation">-</span> Clark
<span class="token punctuation">-</span> Brian
<span class="token punctuation">-</span> Oren
<span class="token punctuation">-</span> <span class="token important">*showell</span>
</code></pre></div><p>转为 JavaScript 代码如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">"Steve"</span><span class="token punctuation">,</span> <span class="token string">"Clark"</span><span class="token punctuation">,</span> <span class="token string">"Brian"</span><span class="token punctuation">,</span> <span class="token string">"Oren"</span><span class="token punctuation">,</span> <span class="token string">"Steve"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h2>函数和正则表达式的转换</h2>
<p>这是 JS-YAML 库特有的功能，可以把函数和正则表达式转为字符串。(官方 yaml 标准里不包含这个部分)</p>
<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># example.yml</span>

<span class="token key atrule">fn</span><span class="token punctuation">:</span> function () <span class="token punctuation">{</span> return 1 <span class="token punctuation">}</span>
<span class="token key atrule">reg</span><span class="token punctuation">:</span> /test/
</code></pre></div><p>解析上面的 yml 文件的代码如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> yaml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"js-yaml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> doc <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">"./example.yml"</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>从 JavaScript 对象还原到 yaml 文件的代码如下。</p>
<div class="language-javascript" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> yaml <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"js-yaml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">reg</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">test</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">"./example.yml"</span><span class="token punctuation">,</span> yaml<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>]]></content>
    <category term="YAML"/>
    <published>2020-07-26T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">小程序框架说明</title>
    <id>https://mister-hope.com/code/mini-app/framework/</id>
    <link href="https://mister-hope.com/code/mini-app/framework/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>开发框架优点</h2>
<ol>
<li>
<p>将界面开发的复杂过程转换为编写简单的 yaml 文件。开发门槛低，</p>
</li>
<li>
<p>拥有详细的开发文档说明，简单易懂，页面文件自述性高，没有开发基础的人也可以经过简单阅读后看懂页面文件大体描述内容。<a href="/code/mini-app/framework/demo.html" target="_blank">查看例子点这里</a></p>
</li>
<li>
<p>开发者无需着眼于界面样式或是功能的实现，只需着眼于在 yaml 文件中添加渲染界面所需参数并赋值，即可完成界面编写。开发者只需在开发过程中按照开发说明录入参数，并注意格式即可。</p>
</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h2>开发框架优点</h2>
<ol>
<li>
<p>将界面开发的复杂过程转换为编写简单的 yaml 文件。开发门槛低，</p>
</li>
<li>
<p>拥有详细的开发文档说明，简单易懂，页面文件自述性高，没有开发基础的人也可以经过简单阅读后看懂页面文件大体描述内容。<a href="/code/mini-app/framework/demo.html" target="_blank">查看例子点这里</a></p>
</li>
<li>
<p>开发者无需着眼于界面样式或是功能的实现，只需着眼于在 yaml 文件中添加渲染界面所需参数并赋值，即可完成界面编写。开发者只需在开发过程中按照开发说明录入参数，并注意格式即可。</p>
</li>
</ol>
]]></content>
    <category term="小程序"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">小程序指南</title>
    <id>https://mister-hope.com/code/mini-app/guide/</id>
    <link href="https://mister-hope.com/code/mini-app/guide/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/code/mini-app/guide/file-structure.html" target="_blank">文件结构</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/env.html" target="_blank">运行环境</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/" target="_blank">小程序配置</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/config/app-config.html" target="_blank">全局配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/page-config.html" target="_blank">页面配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/sitemap-config.html" target="_blank">sitemap 配置</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/" target="_blank">小程序框架</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/frame/intro.html" target="_blank">框架介绍</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/scene.html" target="_blank">场景值</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/env.html" target="_blank">运行环境</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/mechanism.html" target="_blank">运行机制</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/update.html" target="_blank">更新机制</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/service/" target="_blank">逻辑层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/service/lifetime.html" target="_blank">生命周期</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/route.html" target="_blank">路由</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/register.html" target="_blank">注册</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/app.html" target="_blank">App()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/page.html" target="_blank">Page()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/run.html" target="_blank">运行</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/module.html" target="_blank">模块化</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/api/" target="_blank">API</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/view/" target="_blank">视图层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/view/wxml.html" target="_blank">WXML</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/view/data-bind.html" target="_blank">数据绑定</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/condition-render.html" target="_blank">条件渲染</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/list-render.html" target="_blank">列表渲染</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/template.html" target="_blank">模板</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxss.html" target="_blank">WXSS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/event.html" target="_blank">事件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/component.html" target="_blank">基础组件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/animation.html" target="_blank">动画</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs-event.html" target="_blank">WXS 事件</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/model.html" target="_blank">建议双向绑定</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">获取界面上的节点信息</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">相应显示区域变化</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/rendering-cache.html" target="_blank">初始渲染缓存</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/" target="_blank">小程序能力</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/ability/network.html" target="_blank">网络请求</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/storage.html" target="_blank">存储</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/file-system.html" target="_blank">文件系统</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/debug.html" target="_blank">调试</a></p>
</li>
</ul>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/code/mini-app/guide/file-structure.html" target="_blank">文件结构</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/env.html" target="_blank">运行环境</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/" target="_blank">小程序配置</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/config/app-config.html" target="_blank">全局配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/page-config.html" target="_blank">页面配置</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/config/sitemap-config.html" target="_blank">sitemap 配置</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/" target="_blank">小程序框架</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/frame/intro.html" target="_blank">框架介绍</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/scene.html" target="_blank">场景值</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/env.html" target="_blank">运行环境</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/mechanism.html" target="_blank">运行机制</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/frame/update.html" target="_blank">更新机制</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/service/" target="_blank">逻辑层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/service/lifetime.html" target="_blank">生命周期</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/route.html" target="_blank">路由</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/register.html" target="_blank">注册</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/app.html" target="_blank">App()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/page.html" target="_blank">Page()</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/run.html" target="_blank">运行</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/module.html" target="_blank">模块化</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/service/api/" target="_blank">API</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/view/" target="_blank">视图层</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/view/wxml.html" target="_blank">WXML</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/view/data-bind.html" target="_blank">数据绑定</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/condition-render.html" target="_blank">条件渲染</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/list-render.html" target="_blank">列表渲染</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/template.html" target="_blank">模板</a></p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxss.html" target="_blank">WXSS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/event.html" target="_blank">事件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/component.html" target="_blank">基础组件</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/animation.html" target="_blank">动画</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs.html" target="_blank">WXS</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/wxs-event.html" target="_blank">WXS 事件</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/model.html" target="_blank">建议双向绑定</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">获取界面上的节点信息</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/selector.html" target="_blank">相应显示区域变化</a> </p>
</li>
<li>
<p><a href="/code/mini-app/guide/view/rendering-cache.html" target="_blank">初始渲染缓存</a> </p>
</li>
</ul>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/" target="_blank">小程序能力</a></p>
<ul>
<li>
<p><a href="/code/mini-app/guide/ability/network.html" target="_blank">网络请求</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/storage.html" target="_blank">存储</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/file-system.html" target="_blank">文件系统</a></p>
</li>
<li>
<p><a href="/code/mini-app/guide/ability/debug.html" target="_blank">调试</a></p>
</li>
</ul>
</li>
</ul>
]]></content>
    <category term="小程序"/>
    <published>2019-11-25T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">工具使用</title>
    <id>https://mister-hope.com/code/mini-app/tools/</id>
    <link href="https://mister-hope.com/code/mini-app/tools/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<h2>工具</h2>
<ul>
<li>
<p><a href="/code/mini-app/tools/interface.html" target="_blank">工具页面简介</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/debug.html" target="_blank">调试</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/npm.html" target="_blank">npm</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/audit.html" target="_blank">体验评分</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>工具</h2>
<ul>
<li>
<p><a href="/code/mini-app/tools/interface.html" target="_blank">工具页面简介</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/debug.html" target="_blank">调试</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/npm.html" target="_blank">npm</a></p>
</li>
<li>
<p><a href="/code/mini-app/tools/audit.html" target="_blank">体验评分</a></p>
</li>
</ul>
]]></content>
    <category term="小程序"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Vue Router</title>
    <id>https://mister-hope.com/code/vue/router/</id>
    <link href="https://mister-hope.com/code/vue/router/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>Vue Router 是 Vue 官方出品的路由组件，托管整个 Vue 项目路由。</p>
]]></summary>
    <content type="html"><![CDATA[<p>Vue Router 是 Vue 官方出品的路由组件，托管整个 Vue 项目路由。</p>
<!-- more -->
<h2>目录</h2>
<ul>
<li><a href="/code/vue/router/get-started.html" target="_blank">快速上手 Vue Router</a></li>
</ul>
<h2>官方文档</h2>
<ul>
<li>
<p><a href="https://router.vuejs.org/zh/guide/" target="_blank" rel="noopener noreferrer">Vue-Router 指南</a></p>
</li>
<li>
<p><a href="https://router.vuejs.org/zh/api/" target="_blank" rel="noopener noreferrer">Vue-Router API 参考</a></p>
</li>
<li>
<p><a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener noreferrer">官方仓库</a></p>
</li>
</ul>
]]></content>
    <category term="Vue"/>
    <published>2022-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">CSS</title>
    <id>https://mister-hope.com/code/website/css/</id>
    <link href="https://mister-hope.com/code/website/css/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)，它负责描述网页元素的具体样式。</p>
<p>CSS3 是最新的 CSS 标准，被拆分为"模块"。模块包括: 选择器、盒模型、背景和边框、文字特效、2D/3D 转换、动画、多列布局、用户界面。</p>
]]></summary>
    <content type="html"><![CDATA[<p>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)，它负责描述网页元素的具体样式。</p>
<p>CSS3 是最新的 CSS 标准，被拆分为"模块"。模块包括: 选择器、盒模型、背景和边框、文字特效、2D/3D 转换、动画、多列布局、用户界面。</p>
<!-- more -->
<h2>目录</h2>
<ul>
<li>
<p><a href="/code/website/css/guide/" target="_blank">快速上手</a></p>
<ul>
<li><a href="/code/website/css/guide/selector.html" target="_blank">CSS 选择器</a></li>
<li><a href="/code/website/css/guide/declaration.html" target="_blank">CSS 声明</a></li>
<li><a href="/code/website/css/guide/import.html" target="_blank">CSS 引入</a></li>
<li><a href="/code/website/css/guide/common.html" target="_blank">CSS 常用属性介绍</a></li>
<li><a href="/code/website/css/guide/box.html" target="_blank">CSS 盒模型</a></li>
</ul>
</li>
<li>
<p><a href="/code/website/css/layout/" target="_blank">CSS 布局介绍</a></p>
<ul>
<li><a href="/code/website/css/layout/flex.html" target="_blank">CSS 弹性模型</a></li>
<li><a href="/code/website/css/layout/exercise.html" target="_blank">CSS 布局实战</a></li>
<li><a href="/code/website/css/layout/grid.html" target="_blank">CSS 网格模型</a></li>
</ul>
</li>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps/CSS%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C" target="_blank" rel="noopener noreferrer">CSS 工作原理</a></p>
</li>
</ul>
<h2>CSS 参考</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener noreferrer">MDN 教程</a></li>
</ul>
<h2>其他文档 </h2>
<ul>
<li>
<p>CSS</p>
<ul>
<li><a href="https://www.w3cschool.cn/css/" target="_blank" rel="noopener noreferrer">W3CSchool 教程</a></li>
<li><a href="http://www.w3school.com.cn/css/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></li>
<li><a href="https://www.runoob.com/css/css-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li>
</ul>
</li>
<li>
<p>CSS3</p>
<ul>
<li><a href="https://www.w3cschool.cn/css3/" target="_blank" rel="noopener noreferrer">W3CSchool 教程</a></li>
<li><a href="http://www.w3school.com.cn/css3/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></li>
<li><a href="https://www.runoob.com/css3/css3-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li>
</ul>
</li>
</ul>
<h2>在线练习网址</h2>
<ul>
<li><a href="https://c.runoob.com/front-end/61" target="_blank" rel="noopener noreferrer">菜鸟教程在线工具</a></li>
<li><a href="https://jsfiddle.net/" target="_blank" rel="noopener noreferrer">jsfiddle</a></li>
</ul>
<h2>CSS 的超集</h2>
<ul>
<li>
<p>Stylus</p>
<p>带来更简单的写法，支持变量、函数等功能。</p>
<ul>
<li><a href="https://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="noopener noreferrer">中文文档</a></li>
<li><a href="http://stylus-lang.com/" target="_blank" rel="noopener noreferrer">官方文档</a></li>
</ul>
</li>
<li>
<p>Sass</p>
<p>Sass 是世界上最成熟、稳定、强大的专业级 CSS 扩展语言。</p>
<blockquote>
<p>注: 官网说的，不是我说的 😂</p>
</blockquote>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>SCSS 是 Sass3 版本当中引入的新语法特性,完全兼容 CSS3 的同时继承了 Sass 强大的动态功能。</p>
</div>
<ul>
<li><a href="https://sass.bootcss.com/" target="_blank" rel="noopener noreferrer">中文文档</a></li>
<li><a href="https://sass-lang.com/" target="_blank" rel="noopener noreferrer">官方文档</a></li>
</ul>
</li>
</ul>
]]></content>
    <category term="CSS"/>
    <published>2019-09-05T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">Emmet 语法</title>
    <id>https://mister-hope.com/code/website/emmet/</id>
    <link href="https://mister-hope.com/code/website/emmet/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">简介</p>
<p>所有操作按下 “tab” 键即可瞬间完成</p>
</div>
<p>Emmet 是一个快速创建 HTML 和 CSS 的方式，如果您想要成为一个高级 Web 开发者，为了工作效率，您应该掌握 Emmet 语法。</p>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">简介</p>
<p>所有操作按下 “tab” 键即可瞬间完成</p>
</div>
<p>Emmet 是一个快速创建 HTML 和 CSS 的方式，如果您想要成为一个高级 Web 开发者，为了工作效率，您应该掌握 Emmet 语法。</p>
<!-- more -->
<h2>HTML</h2>
<ul>
<li><a href="/code/website/emmet/html.html" target="_blank">HTML Emmet 语法</a></li>
</ul>
<h2>CSS</h2>
<ul>
<li><a href="/code/website/emmet/css.html" target="_blank">CSS Emmet 语法</a></li>
</ul>
<h2>其他功能</h2>
<p>Emmet 还提供了很多内置功能，在 VS Code 中，您可以按下 <code>F1</code> 并输入 <code>emmet</code> 来查看功能列表。详细的功能列表说明请见 <a href="https://docs.emmet.io/actions/" target="_blank" rel="noopener noreferrer">Emmet 文档</a></p>
]]></content>
    <category term="Emmet"/>
    <published>2019-09-03T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">HTML</title>
    <id>https://mister-hope.com/code/website/html/</id>
    <link href="https://mister-hope.com/code/website/html/"/>
    <updated>2024-01-25T17:47:26.000Z</updated>
    <summary type="html"><![CDATA[<p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)，它不是一种编程语言，而是一种标记语言 (markup language)，它使用标记标签来描述网页。HTML5 是 HTML 最新的修订版本。</p>
]]></summary>
    <content type="html"><![CDATA[<p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)，它不是一种编程语言，而是一种标记语言 (markup language)，它使用标记标签来描述网页。HTML5 是 HTML 最新的修订版本。</p>
<!-- more -->
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>在网页的前端开发中，它描绘了视图层的具体结构。</p>
</div>
<h2>初学者教程</h2>
<ul>
<li><a href="/code/website/html/guide/" target="_blank">HTML 快速入门</a></li>
<li><a href="/code/website/html/guide/tag.html" target="_blank">HTML 常用标签</a></li>
</ul>
<h2>HTML 教程</h2>
<ul>
<li><a href="/code/website/html/intro/history.html" target="_blank">历史</a></li>
<li><a href="/code/website/html/intro/head.html" target="_blank">Head 标签</a></li>
<li><a href="/code/website/html/intro/basic.html" target="_blank">基本标签</a></li>
<li><a href="/code/website/html/intro/link.html" target="_blank">链接</a></li>
<li><a href="/code/website/html/intro/image.html" target="_blank">图片</a></li>
<li><a href="/code/website/html/intro/svg.html" target="_blank">矢量图形</a></li>
<li><a href="/code/website/html/intro/media.html" target="_blank">视频与音频</a></li>
<li><a href="/code/website/html/intro/table.html" target="_blank">表格</a></li>
<li><a href="/code/website/html/intro/embed.html" target="_blank">嵌入</a></li>
<li><a href="/code/website/html/intro/format.html" target="_blank">格式化文档</a></li>
<li><a href="/code/website/html/intro/layout.html" target="_blank">网站布局</a></li>
</ul>
<h2>HTML 参考</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/learn/HTML" target="_blank" rel="noopener noreferrer">MDN 教程</a></li>
</ul>
<h2>HTML5</h2>
<p>HTML5 是 HTML 现行的最新修订版本，主要的新特性包括:</p>
<ul>
<li>用于绘画的 <code>&lt;canvas /&gt;</code> 元素</li>
<li>用于媒体播放的 <code>&lt;video /&gt;</code> 和 <code>&lt;audio /&gt;</code> 元素</li>
<li>更好地支持本地离线存储</li>
<li>新的特殊内容元素，比如 <code>&lt;article /&gt;</code>、<code>&lt;footer /&gt;</code>、<code>&lt;header /&gt;</code>、<code>&lt;nav /&gt;</code>、<code>&lt;section /&gt;</code></li>
<li>新的表单控件，比如 calendar、date、time、email、url、search</li>
</ul>
<h2>其他文档 </h2>
<ul>
<li>
<p>HTML</p>
<ul>
<li><a href="https://www.w3cschool.cn/html/" target="_blank" rel="noopener noreferrer">W3CSchool 教程</a></li>
<li><a href="https://www.runoob.com/html/html-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li>
<li><a href="http://www.w3school.com.cn/html/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></li>
</ul>
</li>
<li>
<p>HTML5</p>
<ul>
<li><a href="https://www.w3cschool.cn/html5/" target="_blank" rel="noopener noreferrer">W3CSchool 教程</a></li>
<li><a href="https://www.runoob.com/html/html5-intro.html" target="_blank" rel="noopener noreferrer">菜鸟教程</a></li>
<li><a href="http://www.w3school.com.cn/html5/index.asp" target="_blank" rel="noopener noreferrer">W3School 教程</a></li>
</ul>
</li>
</ul>
]]></content>
    <category term="HTML"/>
    <published>2019-09-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">jQuery</title>
    <id>https://mister-hope.com/code/website/jQuery/</id>
    <link href="https://mister-hope.com/code/website/jQuery/"/>
    <updated>2023-03-12T09:46:14.000Z</updated>
    <summary type="html"><![CDATA[<p>jQuery 是一款能够方便快捷的操作 DOM，并兼容所有主流浏览器的框架，目前最新版本是 3.5.1。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>由于目前前端应用的愈加复杂，前端开发者大多数转向 MVVM 框架，目前世界比较流行的三大 MVVM 框架是 Vue React Angular。可以说，在 2023 年，<strong>jQuery 已经过时了</strong>!</p>
<p>不过 jQuery 无论说从代码实现还是从写法上，到今天都是值得借鉴的。</p>
<p>所以如果您只想简单了解并掌握前端开发，而不是深入地从事相关行业，您可以直接 <a href="/code/vue/" target="_blank">跳过本章节</a>。</p>
<p>本章节应以理解写法与思路为主，无需刻意记忆。</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<p>jQuery 是一款能够方便快捷的操作 DOM，并兼容所有主流浏览器的框架，目前最新版本是 3.5.1。</p>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>由于目前前端应用的愈加复杂，前端开发者大多数转向 MVVM 框架，目前世界比较流行的三大 MVVM 框架是 Vue React Angular。可以说，在 2023 年，<strong>jQuery 已经过时了</strong>!</p>
<p>不过 jQuery 无论说从代码实现还是从写法上，到今天都是值得借鉴的。</p>
<p>所以如果您只想简单了解并掌握前端开发，而不是深入地从事相关行业，您可以直接 <a href="/code/vue/" target="_blank">跳过本章节</a>。</p>
<p>本章节应以理解写法与思路为主，无需刻意记忆。</p>
</div>
<!-- more -->
<h2>教程目录</h2>
<ul>
<li>
<p><a href="/code/website/jQuery/intro.html" target="_blank">jQuery 简介</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/selector.html" target="_blank">选择器</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/operate-dom.html" target="_blank">操作 DOM</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/modify-dom.html" target="_blank">修改 DOM 结构</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/event.html" target="_blank">事件</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/animation.html" target="_blank">动画</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/ajax.html" target="_blank">Ajax</a></p>
</li>
<li>
<p><a href="/code/website/jQuery/extend.html" target="_blank">扩展</a></p>
</li>
</ul>
]]></content>
    <category term="jQuery"/>
    <published>2019-11-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="text">几何</title>
    <id>https://mister-hope.com/software/comsol/geometry/</id>
    <link href="https://mister-hope.com/software/comsol/geometry/"/>
    <updated>2022-02-06T16:46:58.000Z</updated>
    <summary type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/software/comsol/geometry/view.html" target="_blank">浏览几何</a></p>
</li>
<li>
<p><a href="/software/comsol/geometry/build.html" target="_blank">构建几何</a></p>
</li>
</ul>
<h2>官方文档</h2>
<p>视频教程:</p>
<ul>
<li>
<p><a href="https://cn.comsol.com/video/introductory-video-series-on-how-to-build-geometries-in-comsol" target="_blank" rel="noopener noreferrer">入门视频合集: 如何在 COMSOL® 中创建几何结构</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/importing-geometry-files-comsol-multiphysics" target="_blank" rel="noopener noreferrer">在 COMSOL Multiphysics 中导入几何文件</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/identify-geometric-entities-model-selection-list" target="_blank" rel="noopener noreferrer">使用“选择列表”对模型几何实体进行标识</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/form-union-form-assembly-geometry-finalization-methods" target="_blank" rel="noopener noreferrer">几何定型方法: “形成联合体”与“形成装配”</a></p>
</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h2>目录</h2>
<ul>
<li>
<p><a href="/software/comsol/geometry/view.html" target="_blank">浏览几何</a></p>
</li>
<li>
<p><a href="/software/comsol/geometry/build.html" target="_blank">构建几何</a></p>
</li>
</ul>
<h2>官方文档</h2>
<p>视频教程:</p>
<ul>
<li>
<p><a href="https://cn.comsol.com/video/introductory-video-series-on-how-to-build-geometries-in-comsol" target="_blank" rel="noopener noreferrer">入门视频合集: 如何在 COMSOL® 中创建几何结构</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/importing-geometry-files-comsol-multiphysics" target="_blank" rel="noopener noreferrer">在 COMSOL Multiphysics 中导入几何文件</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/identify-geometric-entities-model-selection-list" target="_blank" rel="noopener noreferrer">使用“选择列表”对模型几何实体进行标识</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/form-union-form-assembly-geometry-finalization-methods" target="_blank" rel="noopener noreferrer">几何定型方法: “形成联合体”与“形成装配”</a></p>
</li>
</ul>
<p>博客:</p>
<ul>
<li><a href="https://cn.comsol.com/blogs/navigating-the-intuitive-comsol-multiphysics-modeling-environment/" target="_blank" rel="noopener noreferrer">COMSOL Multiphysics<sup>®</sup> 直观的建模环境</a></li>
</ul>
<h2>几何进阶</h2>
<p>视频:</p>
<ul>
<li><a href="https://cn.comsol.com/video/create-geometry-imported-mesh" target="_blank" rel="noopener noreferrer">基于导入的网格创建几何</a></li>
</ul>
<p>博客:</p>
<ul>
<li>
<p><a href="https://cn.comsol.com/blogs/how-to-compute-distances-between-objects-in-comsol-multiphysics/" target="_blank" rel="noopener noreferrer">如何在 COMSOL Multiphysics<sup>®</sup> 中计算几何对象间的距离</a></p>
</li>
<li>
<p><a href="https://cn.comsol.com/video/shell-tube-heat-exchanger-model-tutorial" target="_blank" rel="noopener noreferrer">管壳式换热器模型教程</a></p>
</li>
</ul>
]]></content>
    <category term="软件"/>
    <published>2020-05-29T00:00:00.000Z</published>
  </entry>
</feed>