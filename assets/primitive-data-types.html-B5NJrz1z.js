import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,e as l,o}from"./app-BMeR4ubx.js";const p={};function t(r,s){return o(),n("div",null,[s[0]||(s[0]=a('<p>JavaScript 的类型分为两种: 原始数据类型(<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">Primitive data types</a>)和对象类型(Object types)。</p><p>原始数据类型包括: 布尔值、数值、字符串、<code>null</code>、<code>undefined</code> 以及 <a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noopener noreferrer">ES6 中的新类型 <code>Symbol</code></a>。</p><p>本节主要介绍<strong>前五种</strong>原始数据类型在 TypeScript 中的应用。</p>',3)),l(" more "),s[1]||(s[1]=a(`<h2 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值"><span>布尔值</span></a></h2><p>布尔值是最基础的数据类型，在 TypeScript 中，使用 <code>boolean</code> 定义布尔值类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> isDone</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 编译通过</span></span>
<span class="line"><span style="color:#616E88;">// 后面约定，未强调编译错误的代码片段，默认为编译通过</span></span></code></pre></div><p>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> createdByNewBoolean</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Boolean</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// Type &#39;Boolean&#39; is not assignable to type &#39;boolean&#39;.</span></span>
<span class="line"><span style="color:#616E88;">//   &#39;boolean&#39; is a primitive, but &#39;Boolean&#39; is a wrapper object. Prefer using &#39;boolean&#39; when possible.</span></span></code></pre></div><p>事实上 <code>new Boolean()</code> 返回的是一个 <code>Boolean</code> 对象:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> createdByNewBoolean</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Boolean</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Boolean</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>直接调用 <code>Boolean</code> 也可以返回一个 <code>boolean</code> 类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> createdByBoolean</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> Boolean</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>在 TypeScript 中，<code>boolean</code> 是 JavaScript 中的基本类型，而 <code>Boolean</code> 是 JavaScript 中的构造函数。其他基本类型(除了 <code>null</code> 和 <code>undefined</code>)一样，不再赘述。</p><h2 id="数值" tabindex="-1"><a class="header-anchor" href="#数值"><span>数值</span></a></h2><p>使用 <code>number</code> 定义数值类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> decLiteral</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 6</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> hexLiteral</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0xf00d</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// ES6 中的二进制表示法</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> binaryLiteral</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0b1010</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// ES6 中的八进制表示法</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> octalLiteral</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0o744</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> notANumber</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> NaN;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> infinityNumber</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> Infinity;</span></span></code></pre></div><p>编译结果:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> decLiteral</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 6</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> hexLiteral</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0xf00d</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// ES6 中的二进制表示法</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> binaryLiteral</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// ES6 中的八进制表示法</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> octalLiteral</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 484</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> notANumber</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> NaN;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> infinityNumber</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> Infinity;</span></span></code></pre></div><p>其中 <code>0b1010</code> 和 <code>0o744</code> 是 <a href="http://es6.ruanyifeng.com/#docs/number#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener noreferrer">ES6 中的二进制和八进制表示法</a>，它们会被编译为十进制数字。</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>使用 <code>string</code> 定义字符串类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> myName</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Tom</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> myAge</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 25</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 模板字符串</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> sentence</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">Hello, my name is </span><span style="color:#ECEFF4;">\${</span><span style="color:#D8DEE9;">myName</span><span style="color:#ECEFF4;">}</span><span style="color:#A3BE8C;">.</span></span>
<span class="line"><span style="color:#A3BE8C;">I&#39;ll be </span><span style="color:#ECEFF4;">\${</span><span style="color:#D8DEE9;">myAge</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">}</span><span style="color:#A3BE8C;"> years old next month.</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>编译结果:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> myName</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Tom</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> myAge</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 25</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 模板字符串</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> sentence</span><span style="color:#81A1C1;"> =</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">Hello, my name is </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#D8DEE9;">  myName</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">.</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">I&#39;ll be </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  (</span><span style="color:#D8DEE9;">myAge</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;"> years old next month.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>其中 <code>\`</code> 用来定义 <a href="http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noopener noreferrer">ES6 中的模板字符串</a>，<code>\${expr}</code> 用来在模板字符串中嵌入表达式。</p><h2 id="空值" tabindex="-1"><a class="header-anchor" href="#空值"><span>空值</span></a></h2><p>JavaScript 没有空值(Void)的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> alertName</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> void</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  alert</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">My name is Tom</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>声明一个 <code>void</code> 类型的变量没有什么用，因为您只能将它赋值为 <code>undefined</code> 和 <code>null</code>:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> unusable</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> void</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> undefined;</span></span></code></pre></div><h2 id="null-和-undefined" tabindex="-1"><a class="header-anchor" href="#null-和-undefined"><span>Null 和 Undefined</span></a></h2><p>在 TypeScript 中，可以使用 <code>null</code> 和 <code>undefined</code> 来定义这两个原始数据类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> u</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> undefined</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> undefined;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> null</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> null;</span></span></code></pre></div><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 这样不会报错</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> num</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> undefined;</span></span></code></pre></div><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 这样也不会报错</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> u</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> undefined</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> num</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> u</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> u</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> void</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> num</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> u</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// Type &#39;void&#39; is not assignable to type &#39;number&#39;.</span></span></code></pre></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="http://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="noopener noreferrer">Basic Types</a>(<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html" target="_blank" rel="noopener noreferrer">中文版</a>)</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">Primitive data types</a></li><li><a href="http://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noopener noreferrer">ES6 中的新类型 <code>Symbol</code></a></li><li><a href="http://es6.ruanyifeng.com/#docs/number#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E6%B3%95" target="_blank" rel="noopener noreferrer">ES6 中的二进制和八进制表示法</a></li><li><a href="http://es6.ruanyifeng.com/#docs/string#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noopener noreferrer">ES6 中的模板字符串</a></li></ul>`,37))])}const d=e(p,[["render",t],["__file","primitive-data-types.html.vue"]]),y=JSON.parse('{"path":"/code/language/typescript/basics/primitive-data-types.html","title":"原始数据类型","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"原始数据类型","icon":"type","category":"TypeScript","description":"JavaScript 的类型分为两种: 原始数据类型([Primitive data types][])和对象类型(Object types)。 原始数据类型包括: 布尔值、数值、字符串、null、undefined 以及 [ES6 中的新类型 Symbol][]。 本节主要介绍前五种原始数据类型在 TypeScript 中的应用。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/typescript/basics/primitive-data-types.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"原始数据类型"}],["meta",{"property":"og:description","content":"JavaScript 的类型分为两种: 原始数据类型([Primitive data types][])和对象类型(Object types)。 原始数据类型包括: 布尔值、数值、字符串、null、undefined 以及 [ES6 中的新类型 Symbol][]。 本节主要介绍前五种原始数据类型在 TypeScript 中的应用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原始数据类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"布尔值","slug":"布尔值","link":"#布尔值","children":[]},{"level":2,"title":"数值","slug":"数值","link":"#数值","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"空值","slug":"空值","link":"#空值","children":[]},{"level":2,"title":"Null 和 Undefined","slug":"null-和-undefined","link":"#null-和-undefined","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1},{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":2.78,"words":834},"filePathRelative":"code/language/typescript/basics/primitive-data-types.md","localizedDate":"2020年5月4日","excerpt":"<p>JavaScript 的类型分为两种: 原始数据类型([Primitive data types][])和对象类型(Object types)。</p>\\n<p>原始数据类型包括: 布尔值、数值、字符串、<code>null</code>、<code>undefined</code> 以及 [ES6 中的新类型 <code>Symbol</code>][]。</p>\\n<p>本节主要介绍<strong>前五种</strong>原始数据类型在 TypeScript 中的应用。</p>\\n","autoDesc":true}');export{d as comp,y as data};
