import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,b as t}from"./app-ByRR1PFc.js";const n={},o=t(`<p>我们已经成功地添加并提交了一个 readme.txt 文件，继续修改 readme.txt 文件，改成如下内容:</p><div class="language-md" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">Git is a distributed version control system.</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Git is free software.</span></span></code></pre></div><p>现在，运行 <code>git status</code> 命令看看结果:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> not</span><span style="color:#A3BE8C;"> staged</span><span style="color:#A3BE8C;"> for</span><span style="color:#A3BE8C;"> commit:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git add &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> update</span><span style="color:#A3BE8C;"> what</span><span style="color:#A3BE8C;"> will</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git checkout -- &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> discard</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> in</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> directory</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">no</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> added</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> commit</span><span style="color:#D8DEE9FF;"> (use </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">git add</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> and/or</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git commit -a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span></code></pre></div><p><code>git status</code> 命令可以输出仓库当前的状态，上面的命令输出告诉我们，readme.txt 被修改过了，但还没有准备提交的修改。</p><div class="hint-container tip"><p class="hint-container-title">简介输出</p><p><code>git status</code> 命令的输出十分详细，但其用语有些繁琐。Git 有一个选项可以帮您缩短状态命令的输出，这样可以以简洁的方式查看更改。如果您使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，您将得到一种格式更为紧凑的输出。</p><p>输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。</p><p>新添加的未跟踪文件前面有 <code>??</code> 标记，新添加到暂存区中的文件前面有 <code>A</code> 标记，修改过的文件前面有 <code>M</code> 标记。</p><details class="hint-container details"><summary>案例</summary><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span><span style="color:#A3BE8C;"> -s</span></span>
<span class="line"><span style="color:#88C0D0;"> M</span><span style="color:#A3BE8C;"> README</span></span>
<span class="line"><span style="color:#88C0D0;">MM</span><span style="color:#A3BE8C;"> Rakefile</span></span>
<span class="line"><span style="color:#88C0D0;">A</span><span style="color:#A3BE8C;">  lib/git.rb</span></span>
<span class="line"><span style="color:#88C0D0;">M</span><span style="color:#A3BE8C;">  lib/simplegit.rb</span></span>
<span class="line"><span style="color:#81A1C1;">??</span><span style="color:#D8DEE9FF;"> LICENSE.txt</span></span></code></pre></div><p>上面的状态报告显示: <code>README</code> 文件在工作区已修改但尚未暂存，而 <code>lib/simplegit.rb</code> 文件已修改且已暂存。<code>Rakefile</code> 文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。</p></details></div><p>Git 现在只告诉我们 readme.txt 被修改了，我们用 <code>git diff</code> 这个命令能看看具体修改了什么内容:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> diff</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">diff</span><span style="color:#A3BE8C;"> --git</span><span style="color:#A3BE8C;"> a/readme.txt</span><span style="color:#A3BE8C;"> b/readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">index</span><span style="color:#A3BE8C;"> 46d49bf..9247db6</span><span style="color:#B48EAD;"> 100644</span></span>
<span class="line"><span style="color:#88C0D0;">---</span><span style="color:#A3BE8C;"> a/readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">+++</span><span style="color:#A3BE8C;"> b/readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">@@</span><span style="color:#A3BE8C;"> -1,2</span><span style="color:#A3BE8C;"> +1,2</span><span style="color:#A3BE8C;"> @@</span></span>
<span class="line"><span style="color:#88C0D0;">-Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;">+Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;"> Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software.</span></span></code></pre></div><p><code>git diff</code> 顾名思义就是查看 difference，显示的格式正是 Unix 通用的 diff 格式，可以从上面的命令输出看到，我们在第一行添加了一个 distributed 单词。</p><p>知道了对 readme.txt 作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是 <code>git add</code>:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> add</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">--no</span><span style="color:#A3BE8C;"> output</span><span style="color:#A3BE8C;"> --</span></span></code></pre></div><p>同样没有任何输出。在执行第二步 <code>git commit</code> 之前，我们再运行 <code>git status</code> 看看当前仓库的状态:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git reset HEAD &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> unstage</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span></code></pre></div><p><code>git status</code> 告诉我们，将要被提交的修改包括 readme.txt，下一步，就可以放心地提交了:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> commit</span><span style="color:#A3BE8C;"> -m</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">add distributed</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">master e475afc</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> add distributed</span></span>
<span class="line"><span style="color:#88C0D0;"> 1</span><span style="color:#A3BE8C;"> file</span><span style="color:#A3BE8C;"> changed,</span><span style="color:#B48EAD;"> 1</span><span style="color:#A3BE8C;"> insertion</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">+</span><span style="color:#ECEFF4;">)</span><span style="color:#A3BE8C;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#A3BE8C;"> deletion</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">-</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>提交后，我们再用 <code>git status</code> 命令看看仓库的当前状态:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">nothing</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> commit,</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> tree</span><span style="color:#A3BE8C;"> clean</span></span></code></pre></div><p>Git 告诉我们当前没有需要提交的修改，而且，工作目录是干净(working tree clean)的。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ul><li><p>要随时掌握工作区的状态，使用 <code>git status</code> 命令。</p></li><li><p>如果 <code>git status</code> 告诉您有文件被修改过，用 <code>git diff</code> 可以查看修改内容。</p></li></ul>`,20),l=[o];function p(c,r){return a(),e("div",null,l)}const y=s(n,[["render",p],["__file","status.html.vue"]]),E=JSON.parse('{"path":"/software/git/status.html","title":"纵向查看","lang":"zh-CN","frontmatter":{"date":"2020-05-05T00:00:00.000Z","title":"纵向查看","icon":"list","order":4,"author":"廖雪峰","category":"Git","tag":["Git","软件"],"copyright":"Copyright by 廖雪峰 Edited by Mr.Hope","description":"我们已经成功地添加并提交了一个 readme.txt 文件，继续修改 readme.txt 文件，改成如下内容: 现在，运行 git status 命令看看结果: git status 命令可以输出仓库当前的状态，上面的命令输出告诉我们，readme.txt 被修改过了，但还没有准备提交的修改。 简介输出 git status 命令的输出十分详细，但其...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/software/git/status.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"纵向查看"}],["meta",{"property":"og:description","content":"我们已经成功地添加并提交了一个 readme.txt 文件，继续修改 readme.txt 文件，改成如下内容: 现在，运行 git status 命令看看结果: git status 命令可以输出仓库当前的状态，上面的命令输出告诉我们，readme.txt 被修改过了，但还没有准备提交的修改。 简介输出 git status 命令的输出十分详细，但其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"软件"}],["meta",{"property":"article:published_time","content":"2020-05-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"纵向查看\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-05T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":13},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":2}]},"readingTime":{"minutes":2.68,"words":805},"filePathRelative":"software/git/status.md","localizedDate":"2020年5月5日","excerpt":"","autoDesc":true}');export{y as comp,E as data};
