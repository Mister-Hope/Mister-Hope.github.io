import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,b as e}from"./app-ByRR1PFc.js";const l={},o=e(`<h1 id="异步任务" tabindex="-1"><a class="header-anchor" href="#异步任务"><span>异步任务</span></a></h1><p>Bash 脚本有时候需要同时执行多个任务。通常这涉及到启动一个脚本，依次，启动一个或多个子脚本来执行额外的任务，而父脚本继续运行。然而，当一系列脚本 以这种方式运行时，要保持父子脚本之间协调工作，会有一些问题。也就是说，若父脚本或子脚本依赖于另一方，并且 一个脚本必须等待另一个脚本结束任务之后，才能完成它自己的任务，这应该怎么办?</p><p>bash 有一个内置命令，能帮助管理诸如此类的异步执行的任务。wait 命令导致一个父脚本暂停运行，直到一个 特定的进程(例如，子脚本)运行结束。</p><p>首先我们将演示一下 wait 命令的用法。为此，我们需要两个脚本，一个父脚本:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"><span style="color:#616E88;"># async-parent : Asynchronous execution demo (parent)</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: starting...</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: launching child script...</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">async-child</span><span style="color:#ECEFF4;"> &amp;</span></span>
<span class="line"><span style="color:#D8DEE9;">pid</span><span style="color:#81A1C1;">=$!</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: child (PID= </span><span style="color:#D8DEE9;">$pid</span><span style="color:#A3BE8C;">) launched.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: continuing...</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">sleep</span><span style="color:#B48EAD;"> 2</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: pausing to wait for child to finish...</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">wait</span><span style="color:#D8DEE9;"> $pid</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: child is finished. Continuing...</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Parent: parent is done. Exiting.</span><span style="color:#ECEFF4;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和一个子脚本:</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"><span style="color:#616E88;"># async-child : Asynchronous execution demo (child)</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Child: child is running...</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">sleep</span><span style="color:#B48EAD;"> 5</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Child: child is done. Exiting.</span><span style="color:#ECEFF4;">&quot;</span></span></code></pre></div><p>在这个例子中，我们看到该子脚本是非常简单的。真正的操作通过父脚本完成。在父脚本中，子脚本被启动， 并被放置到后台运行。子脚本的进程 ID 记录在 pid 变量中，这个变量的值是 $! shell 参数的值，它总是 包含放到后台执行的最后一个任务的进程 ID 号。</p><p>父脚本继续，然后执行一个以子进程 PID 为参数的 wait 命令。这就导致父脚本暂停运行，直到子脚本退出， 意味着父脚本结束。</p><p>当执行后，父子脚本产生如下输出:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> async-parent</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> starting...</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> launching</span><span style="color:#A3BE8C;"> child</span><span style="color:#A3BE8C;"> script...</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> child</span><span style="color:#D8DEE9FF;"> (PID= </span><span style="color:#B48EAD;">6741</span><span style="color:#D8DEE9FF;">) launched.</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> continuing...</span></span>
<span class="line"><span style="color:#88C0D0;">Child:</span><span style="color:#A3BE8C;"> child</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> running...</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> pausing</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> wait</span><span style="color:#A3BE8C;"> for</span><span style="color:#A3BE8C;"> child</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> finish...</span></span>
<span class="line"><span style="color:#88C0D0;">Child:</span><span style="color:#A3BE8C;"> child</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> done.</span><span style="color:#A3BE8C;"> Exiting.</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> child</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> finished.</span><span style="color:#A3BE8C;"> Continuing...</span></span>
<span class="line"><span style="color:#88C0D0;">Parent:</span><span style="color:#A3BE8C;"> parent</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> done.</span><span style="color:#A3BE8C;"> Exiting.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),p=[o];function t(i,c){return n(),a("div",null,p)}const y=s(l,[["render",t],["__file","async.html.vue"]]),h=JSON.parse('{"path":"/linux/bash/archives/async.html","title":"异步任务","lang":"zh-CN","frontmatter":{"date":"2020-06-04T00:00:00.000Z","description":"异步任务 Bash 脚本有时候需要同时执行多个任务。通常这涉及到启动一个脚本，依次，启动一个或多个子脚本来执行额外的任务，而父脚本继续运行。然而，当一系列脚本 以这种方式运行时，要保持父子脚本之间协调工作，会有一些问题。也就是说，若父脚本或子脚本依赖于另一方，并且 一个脚本必须等待另一个脚本结束任务之后，才能完成它自己的任务，这应该怎么办? bash ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/linux/bash/archives/async.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"异步任务"}],["meta",{"property":"og:description","content":"异步任务 Bash 脚本有时候需要同时执行多个任务。通常这涉及到启动一个脚本，依次，启动一个或多个子脚本来执行额外的任务，而父脚本继续运行。然而，当一系列脚本 以这种方式运行时，要保持父子脚本之间协调工作，会有一些问题。也就是说，若父脚本或子脚本依赖于另一方，并且 一个脚本必须等待另一个脚本结束任务之后，才能完成它自己的任务，这应该怎么办? bash ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-07T05:21:25.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2020-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-07T05:21:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异步任务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-07T05:21:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[],"git":{"createdTime":1591204114000,"updatedTime":1712467285000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":2},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":1.76,"words":528},"filePathRelative":"linux/bash/archives/async.md","localizedDate":"2020年6月4日","excerpt":"","autoDesc":true}');export{y as comp,h as data};
