import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o as p}from"./app-BMeR4ubx.js";const o={};function e(t,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p><h2 id="使用-type" tabindex="-1"><a class="header-anchor" href="#使用-type"><span>使用 <code>type()</code></span></a></h2><p>首先，我们来判断对象类型，使用 <code>type()</code> 函数:</p><p>基本类型都可以用 <code>type()</code> 判断:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">123</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">int</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">str</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">str</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">None</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">None</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">NoneType</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>如果一个变量指向函数或者类，也可以用 <code>type()</code> 判断:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">abs</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">builtin_function_or_method</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">a</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">__main__.Animal</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>但是 <code>type()</code> 函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在 if 语句中判断，就需要比较两个变量的 type 类型是否相同:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">123</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">456</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">123</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#88C0D0;">int</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">123</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#88C0D0;">str</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">123</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断基本数据类型可以直接写 <code>int</code>，<code>str</code> 等，但如果要判断一个对象是否是函数怎么办？可以使用 <code>types</code> 模块中定义的常量:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> import</span><span style="color:#D8DEE9FF;"> types</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> fn</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">pass</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">fn</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;">types</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">FunctionType</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">abs</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;">types</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">BuiltinFunctionType</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">lambda</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;">types</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">LambdaType</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">((</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">)))</span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;">types</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">GeneratorType</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-isinstance" tabindex="-1"><a class="header-anchor" href="#使用-isinstance"><span>使用 <code>isinstance()</code></span></a></h2><p>对于 class 的继承关系来说，使用 <code>type()</code> 就很不方便。我们要判断 class 的类型，可以使用 <code>isinstance()</code> 函数。</p><p>我们回顾上次的例子，如果继承关系是:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>object -&gt; Animal -&gt; Dog -&gt; Husky</span></span></code></pre></div><p>那么，<code>isinstance()</code> 就可以告诉我们，一个对象是否是某种类型。先创建 3 种类型的对象:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Animal</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> d </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Dog</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> h </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Husky</span><span style="color:#ECEFF4;">()</span></span></code></pre></div><p>然后，判断:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">h</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Husky</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre></div><p>没有问题，因为 <code>h</code> 变量指向的就是 <code>Husky</code> 对象。</p><p>再判断:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">h</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Dog</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre></div><p><code>h</code> 虽然自身是 <code>Husky</code> 类型，但由于 <code>Husky</code> 是从 <code>Dog</code> 继承下来的，所以，<code>h</code> 也还是 <code>Dog</code> 类型。换句话说，<code>isinstance()</code> 判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p><p>因此，我们可以确信，<code>h</code> 还是 <code>Animal</code> 类型:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">h</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Animal</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre></div><p>同理，实际类型是 <code>Dog</code> 的 <code>d</code> 也是 <code>Animal</code> 类型:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">d</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Dog</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> and</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">d</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Animal</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre></div><p>但是，<code>d</code> 不是 <code>Husky</code> 类型:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">d</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Husky</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span></code></pre></div><p>能用 <code>type()</code> 判断的基本类型也可以用 <code>isinstance()</code> 判断:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> str</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">123</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> int</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">b</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bytes</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre></div><p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是 <code>list</code> 或者 <code>tuple</code>:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">],</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">list</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> tuple</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">((</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">),</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">list</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> tuple</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>总是优先使用 <code>isinstance()</code> 判断类型，可以将指定类型及其子类“一网打尽”。</p></div><h2 id="使用-dir" tabindex="-1"><a class="header-anchor" href="#使用-dir"><span>使用 <code>dir()</code></span></a></h2><p>如果要获得一个对象的所有属性和方法，可以使用 <code>dir()</code> 函数，它返回一个包含字符串的 <code>list</code>，比如，获得一个 <code>str</code> 对象的所有属性和方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> dir</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">ABC</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">__add__</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">__class__</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;">...</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">__subclasshook__</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">capitalize</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">casefold</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;">...</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">zfill</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>类似 <code>__xxx__</code> 的属性和方法在 Python 中都是有特殊用途的，比如 <code>__len__</code> 方法返回长度。在 Python 中，如果您调用 <code>len()</code> 函数试图获取一个对象的长度，实际上，在 len()函数内部，它自动去调用该对象的 <code>__len__()</code> 方法，所以，下面的代码是等价的:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> len</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">ABC</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">ABC</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">__len__</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span></code></pre></div><p>我们自己写的类，如果也想用 <code>len(myObj)</code> 的话，就自己写一个 <code>__len__()</code> 方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> MyDog</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> __len__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">return</span><span style="color:#B48EAD;"> 100</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> dog </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> MyDog</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> len</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">dog</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">100</span></span></code></pre></div><p>剩下的都是普通属性或方法，比如 <code>lower()</code> 返回小写的字符串:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">ABC</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lower</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>仅仅把属性和方法列出来是不够的，配合 <code>getattr()</code>、<code>setattr()</code> 以及 <code>hasattr()</code>，我们可以直接操作一个对象的状态:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> MyObject</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 9</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> power</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">*</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">x</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> obj </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> MyObject</span><span style="color:#ECEFF4;">()</span></span></code></pre></div><p>紧接着，可以测试该对象的属性:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> hasattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 有属性&#39;x&#39;吗？</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">x</span></span>
<span class="line"><span style="color:#B48EAD;">9</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> hasattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">y</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 有属性&#39;y&#39;吗？</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> setattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">y</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 19</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 设置一个属性&#39;y&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> hasattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">y</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 有属性&#39;y&#39;吗？</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">y</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 获取属性&#39;y&#39;</span></span>
<span class="line"><span style="color:#B48EAD;">19</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">y </span><span style="color:#616E88;"># 获取属性&#39;y&#39;</span></span>
<span class="line"><span style="color:#B48EAD;">19</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果试图获取不存在的属性，会抛出 <code>AttributeError</code> 的错误:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 获取属性&#39;z&#39;</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">AttributeError</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">MyObject</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#88C0D0;"> object</span><span style="color:#D8DEE9FF;"> has no attribute </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>可以传入一个 <code>default</code> 参数，如果属性不存在，就返回默认值:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 404</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 获取属性&#39;z&#39;，如果不存在，返回默认值404</span></span>
<span class="line"><span style="color:#B48EAD;">404</span></span></code></pre></div><p>也可以获得对象的方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> hasattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">power</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 有属性&#39;power&#39;吗？</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">power</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 获取属性&#39;power&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">bound method MyObject</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">power of </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">__main__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">MyObject </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">10077a6a0</span><span style="color:#81A1C1;">&gt;&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> fn </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">power</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 获取属性&#39;power&#39;并赋值到变量fn</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> fn </span><span style="color:#616E88;"># fn指向obj.power</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">bound method MyObject</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">power of </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">__main__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">MyObject </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">10077a6a0</span><span style="color:#81A1C1;">&gt;&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> fn</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;"> # 调用fn()与调用obj.power()是一样的</span></span>
<span class="line"><span style="color:#B48EAD;">81</span></span></code></pre></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>通过内置的一系列函数，我们可以对任意一个 Python 对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">sum</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">y</span></span></code></pre></div><p>就不要写:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">sum</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> +</span><span style="color:#88C0D0;"> getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">obj</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">y</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>一个正确的用法的例子如下:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> readImage</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">fp</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#88C0D0;"> hasattr</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">fp</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">read</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> readData</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">fp</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> None</span></span></code></pre></div><p>假设我们希望从文件流 <code>fp</code> 中读取图像，我们首先要判断该 <code>fp</code> 对象是否存在 <code>read</code> 方法，如果存在，则该对象是一个流，如果不存在，则无法读取。<code>hasattr()</code> 就派上了用场。</p><p>请注意，在 Python 这类动态语言中，根据鸭子类型，有 <code>read()</code> 方法，不代表该 fp 对象就是一个文件流，它也可能是网络流，也可能是内存中的一个字节流，但只要 <code>read()</code> 方法返回的是有效的图像数据，就不影响读取图像的功能。</p>`,62)]))}const y=a(o,[["render",e],["__file","info.html.vue"]]),E=JSON.parse('{"path":"/code/language/python/oop/info.html","title":"获取对象信息","lang":"zh-CN","frontmatter":{"title":"获取对象信息","author":"廖雪峰","icon":"info","date":"2021-03-28T00:00:00.000Z","category":"Python","description":"当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？ 使用 type() 首先，我们来判断对象类型，使用 type() 函数: 基本类型都可以用 type() 判断: 如果一个变量指向函数或者类，也可以用 type() 判断: 但是 type() 函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在 if 语句中判断，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/python/oop/info.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"获取对象信息"}],["meta",{"property":"og:description","content":"当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？ 使用 type() 首先，我们来判断对象类型，使用 type() 函数: 基本类型都可以用 type() 判断: 如果一个变量指向函数或者类，也可以用 type() 判断: 但是 type() 函数返回的是什么类型呢？它返回对应的 Class 类型。如果我们要在 if 语句中判断，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2021-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"获取对象信息\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"使用 type()","slug":"使用-type","link":"#使用-type","children":[]},{"level":2,"title":"使用 isinstance()","slug":"使用-isinstance","link":"#使用-isinstance","children":[]},{"level":2,"title":"使用 dir()","slug":"使用-dir","link":"#使用-dir","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1616944982000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":2},{"name":"Mister-Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":4.75,"words":1426},"filePathRelative":"code/language/python/oop/info.md","localizedDate":"2021年3月28日","excerpt":"","autoDesc":true}');export{y as comp,E as data};
