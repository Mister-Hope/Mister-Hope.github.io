import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as l,d as o,e as s,b as p}from"./app-ByRR1PFc.js";const e={},c=s("p",null,"ES2017 标准引入了 async 函数，使得异步操作变得更加方便。",-1),r=s("p",null,"Async 函数是什么? 一句话，它就是 Generator 函数的语法糖。",-1),t=p(`<p>前文有一个 Generator 函数，依次读取两个文件。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> fs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">fs</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> readFile</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">fileName</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> reject</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">fileName</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">error</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">error</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">return</span><span style="color:#88C0D0;"> reject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">error</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">      resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> gen</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function*</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> f1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> yield</span><span style="color:#88C0D0;"> readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/etc/fstab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> f2</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> yield</span><span style="color:#88C0D0;"> readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/etc/shells</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">f1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">f2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写成 <code>async</code> 函数，就是下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> asyncReadFile</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> f1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/etc/fstab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> f2</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> readFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/etc/shells</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">f1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">f2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>一比较就会发现，<code>async</code> 函数就是将 Generator 函数的星号(<code>*</code>)替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code>，仅此而已。</p><p><code>async</code> 函数对 Generator 函数的改进，体现在以下四点。</p><p>(1)内置执行器。</p><p>Generator 函数的执行必须靠执行器，所以才有了 <code>co</code> 模块，而 <code>async</code> 函数自带执行器。也就是说，<code>async</code> 函数的执行，与普通函数一模一样，只要一行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">asyncReadFile</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面的代码调用了 <code>asyncReadFile</code> 函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用 <code>next</code> 方法，或者用 <code>co</code> 模块，才能真正执行，得到最后结果。</p><p>(2)更好的语义。</p><p><code>async</code> 和 <code>await</code>，比起星号和 <code>yield</code>，语义更清楚了。<code>async</code> 表示函数里有异步操作，<code>await</code> 表示紧跟在后面的表达式需要等待结果。</p><p>(3)更广的适用性。</p><p><code>co</code> 模块约定，<code>yield</code> 命令后面只能是 Thunk 函数或 Promise 对象，而 <code>async</code> 函数的 <code>await</code> 命令后面，可以是 Promise 对象和原始类型的值(数值、字符串和布尔值，但这时等同于同步操作)。</p><p>(4)返回值是 Promise。</p><p><code>async</code> 函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。您可以用 <code>then</code> 方法指定下一步的操作。</p><p>进一步说，<code>async</code> 函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而 <code>await</code> 命令就是内部 <code>then</code> 命令的语法糖。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><p><code>async</code> 函数返回一个 Promise 对象，可以使用 <code>then</code> 方法添加回调函数。当函数执行的时候，一旦遇到 <code>await</code> 就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> getStockPriceByName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> symbol</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> getStockSymbol</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> stockPrice</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> getStockPrice</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">symbol</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> stockPrice</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">getStockPriceByName</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">goog</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">result</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码是一个获取股票报价的函数，函数前面的 <code>async</code> 关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个 <code>Promise</code> 对象。</p><p>下面是另一个例子，指定多少毫秒后输出一个值。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> timeout</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">ms</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> ms</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> asyncPrint</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> ms</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#88C0D0;"> timeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ms</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">asyncPrint</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 50</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定 50 毫秒以后，输出 <code>hello world</code>。</p><p>由于 <code>async</code> 函数返回的是 Promise 对象，可以作为 <code>await</code> 命令的参数。所以，上面的例子也可以写成下面的形式。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> timeout</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">ms</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    setTimeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> ms</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> asyncPrint</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> ms</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#88C0D0;"> timeout</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ms</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">asyncPrint</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 50</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Async 函数有多种使用形式。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 函数声明</span></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 函数表达式</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> foo</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 对象的方法</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#81A1C1;"> async</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// Class 的方法</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Storage</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  constructor</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">cachePromise</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> caches</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">open</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">avatars</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  async</span><span style="color:#88C0D0;"> getAvatar</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> cache</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">cachePromise</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> cache</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">match</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">/avatars/</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">.jpg</span><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> storage</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Storage</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">storage</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getAvatar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">jake</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(…)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 箭头函数</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> foo</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> async</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p><code>async</code> 函数的语法规则总体上比较简单，难点是错误处理机制。</p><h3 id="返回-promise-对象" tabindex="-1"><a class="header-anchor" href="#返回-promise-对象"><span>返回 Promise 对象</span></a></h3><p><code>async</code> 函数返回一个 Promise 对象。</p><p><code>async</code> 函数内部 <code>return</code> 语句返回的值，会成为 <code>then</code> 方法回调函数的参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;hello world&quot;</span></span></code></pre></div><p>上面代码中，函数 <code>f</code> 内部 <code>return</code> 命令返回的值，会被 <code>then</code> 方法回调函数接收到。</p><p><code>async</code> 函数内部抛出错误，会导致返回的 Promise 对象变为 <code>reject</code> 状态。抛出的错误对象会被 <code>catch</code> 方法回调函数接收到。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Error: 出错了</span></span></code></pre></div><h3 id="promise-对象的状态变化" tabindex="-1"><a class="header-anchor" href="#promise-对象的状态变化"><span>Promise 对象的状态变化</span></a></h3><p><code>async</code> 函数返回的 Promise 对象，必须等到内部所有 <code>await</code> 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 <code>return</code> 语句或者抛出错误。也就是说，只有 <code>async</code> 函数内部的异步操作执行完，才会执行 <code>then</code> 方法指定的回调函数。</p><p>下面是一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> getTitle</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> response</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> html</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> response</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> html</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">match</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">/</span><span style="color:#EBCB8B;">&lt;title&gt;</span><span style="color:#ECEFF4;">([</span><span style="color:#EBCB8B;">\\s\\S</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;">+</span><span style="color:#ECEFF4;">)</span><span style="color:#EBCB8B;">&lt;\\/title&gt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">i</span><span style="color:#D8DEE9FF;">)[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#88C0D0;">getTitle</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">https://tc39.github.io/ecma262/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">log</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;ECMAScript 2017 Language Specification&quot;</span></span></code></pre></div><p>上面代码中，函数 <code>getTitle</code> 内部有三个操作: 抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行 <code>then</code> 方法里面的 <code>console.log</code>。</p><h3 id="await-命令" tabindex="-1"><a class="header-anchor" href="#await-命令"><span>await 命令</span></a></h3><p>正常情况下，<code>await</code> 命令后面是一个 Promise 对象。如果不是，会被转成一个立即 <code>resolve</code> 的 Promise 对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> await</span><span style="color:#B48EAD;"> 123</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 123</span></span></code></pre></div><p>上面代码中，<code>await</code> 命令的参数是数值 <code>123</code>，它被转成 Promise 对象，并立即 <code>resolve</code>。</p><p><code>await</code> 命令后面的 Promise 对象如果变为 <code>reject</code> 状态，则 <code>reject</code> 的参数会被 <code>catch</code> 方法的回调函数接收到。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 出错了</span></span></code></pre></div><p>注意，上面代码中，<code>await</code> 语句前面没有 <code>return</code>，但是 <code>reject</code> 方法的参数依然传入了 <code>catch</code> 方法的回调函数。这里如果在 <code>await</code> 前面加上 <code>return</code>，效果是一样的。</p><p>只要一个 <code>await</code> 语句后面的 Promise 变为 <code>reject</code>，那么整个 <code>async</code> 函数都会中断执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不会执行</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，第二个 <code>await</code> 语句是不会执行的，因为第一个 <code>await</code> 语句状态变成了 <code>reject</code>。</p><p>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个 <code>await</code> 放在 <code>try...catch</code> 结构里面，这样不管这个异步操作是否成功，第二个 <code>await</code> 都会执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{}</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// hello world</span></span></code></pre></div><p>另一种方法是 <code>await</code> 后面的 Promise 对象再跟一个 <code>catch</code> 方法，处理前面可能出现的错误。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 出错了</span></span>
<span class="line"><span style="color:#616E88;">// hello world</span></span></code></pre></div><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>如果 <code>await</code> 后面的异步操作出错，那么等同于 <code>async</code> 函数返回的 Promise 对象被 <code>reject</code>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> reject</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Error: 出错了</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>async</code> 函数 <code>f</code> 执行后，<code>await</code> 后面的 Promise 对象会抛出一个错误对象，导致 <code>catch</code> 方法的回调函数被调用，它的参数就是抛出的错误对象。具体的执行机制，可以参考后文的“async 函数的实现原理”。</p><p>防止出错的方法，也是将其放在 <code>try...catch</code> 代码块之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> reject</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">出错了</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{}</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> await</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>如果有多个 <code>await</code> 命令，可以统一放在 <code>try...catch</code> 结构中。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> main</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> val1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> firstStep</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> val2</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> secondStep</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">val1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> val3</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> thirdStep</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">val1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> val2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Final: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> val3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的例子使用 <code>try...catch</code> 结构，实现多次重复尝试。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> superagent</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">superagent</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> NUM_RETRIES</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> test</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> NUM_RETRIES</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> ++</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      await</span><span style="color:#D8DEE9;"> superagent</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">https://google.com/this-throws-an-error</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      break;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{}</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">test</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，如果 <code>await</code> 操作成功，就会使用 <code>break</code> 语句退出循环；如果失败，会被 <code>catch</code> 语句捕捉，然后进入下一轮循环。</p><h3 id="使用注意点" tabindex="-1"><a class="header-anchor" href="#使用注意点"><span>使用注意点</span></a></h3><p>第一点，前面已经说过，<code>await</code> 命令后面的 <code>Promise</code> 对象，运行结果可能是 <code>rejected</code>，所以最好把 <code>await</code> 命令放在 <code>try...catch</code> 代码块中。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> myFunction</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#88C0D0;"> somethingThatReturnsAPromise</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 另一种写法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> myFunction</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#88C0D0;"> somethingThatReturnsAPromise</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二点，多个 <code>await</code> 命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> foo</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> getFoo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> bar</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> getBar</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，<code>getFoo</code> 和 <code>getBar</code> 是两个独立的异步操作(即互不依赖)，被写成继发关系。这样比较耗时，因为只有 <code>getFoo</code> 完成以后，才会执行 <code>getBar</code>，完全可以让它们同时触发。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 写法一</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bar</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">all</span><span style="color:#D8DEE9FF;">([</span><span style="color:#88C0D0;">getFoo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> getBar</span><span style="color:#D8DEE9FF;">()])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 写法二</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> fooPromise</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getFoo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> barPromise</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> getBar</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> foo</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> fooPromise</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> bar</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> barPromise</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面两种写法，<code>getFoo</code> 和 <code>getBar</code> 都是同时触发，这样就会缩短程序的执行时间。</p><p>第三点，<code>await</code> 命令只能用在 <code>async</code> 函数之中，如果用在普通函数，就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> dbFuc</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">db</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> docs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">{},</span><span style="color:#ECEFF4;"> {},</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 报错</span></span>
<span class="line"><span style="color:#D8DEE9;">  docs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forEach</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">doc</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#D8DEE9;"> db</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">post</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码会报错，因为 <code>await</code> 用在普通函数之中了。但是，如果将 <code>forEach</code> 方法的参数改成 <code>async</code> 函数，也有问题。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> dbFuc</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">db</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  //这里不需要 async</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> docs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">{},</span><span style="color:#ECEFF4;"> {},</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 可能得到错误结果</span></span>
<span class="line"><span style="color:#D8DEE9;">  docs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forEach</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">doc</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#D8DEE9;"> db</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">post</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码可能不会正常工作，原因是这时三个 <code>db.post</code> 操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用 <code>for</code> 循环。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> dbFuc</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">db</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> docs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">{},</span><span style="color:#ECEFF4;"> {},</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> doc</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> docs</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#D8DEE9;"> db</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">post</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>如果确实希望多个请求并发执行，可以使用 <code>Promise.all</code> 方法。当三个请求都会 <code>resolved</code> 时，下面两种写法效果相同。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> dbFuc</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">db</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> docs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">{},</span><span style="color:#ECEFF4;"> {},</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> promises</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> docs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> db</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">post</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> results</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">all</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">promises</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">results</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 或者使用下面的写法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> dbFuc</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">db</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> docs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">{},</span><span style="color:#ECEFF4;"> {},</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> promises</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> docs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> db</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">post</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">doc</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> results</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> promise</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> promises</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    results</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">push</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> promise</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">results</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前，<a href="https://www.npmjs.com/package/esm" target="_blank" rel="noopener noreferrer"><code>esm</code></a>模块加载器支持顶层 <code>await</code>，即 <code>await</code> 命令可以不放在 async 函数里面，直接使用。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// async 函数的写法</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> start</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> async</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> res</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">google.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">start</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">log</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 顶层 await 的写法</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> res</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">google.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，第二种写法的脚本必须使用 <code>esm</code> 加载器，才会生效。</p><h2 id="async-函数的实现原理" tabindex="-1"><a class="header-anchor" href="#async-函数的实现原理"><span>async 函数的实现原理</span></a></h2><p>Async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> fn</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">args</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> fn</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">args</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#88C0D0;"> spawn</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function*</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">    // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的 <code>async</code> 函数都可以写成上面的第二种形式，其中的 <code>spawn</code> 函数就是自动执行器。</p><p>下面给出 <code>spawn</code> 函数的实现，基本就是前文自动执行器的翻版。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> spawn</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">genF</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> reject</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> gen</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> genF</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    function</span><span style="color:#88C0D0;"> step</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">nextF</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      let</span><span style="color:#D8DEE9;"> next</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">        next</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> nextF</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> reject</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span></span>
<span class="line"><span style="color:#81A1C1;">      if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">next</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">done</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">next</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span></span>
<span class="line"><span style="color:#8FBCBB;">      Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">next</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#81A1C1;">        function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">          step</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#D8DEE9;"> gen</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">          }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">        },</span></span>
<span class="line"><span style="color:#81A1C1;">        function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">          step</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#D8DEE9;"> gen</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">throw</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">          }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">        },</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      )</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#88C0D0;">    step</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      return</span><span style="color:#D8DEE9;"> gen</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">undefined</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与其他异步处理方法的比较" tabindex="-1"><a class="header-anchor" href="#与其他异步处理方法的比较"><span>与其他异步处理方法的比较</span></a></h2><p>我们通过一个例子，来看 async 函数与 Promise、Generator 函数的比较。</p><p>假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。</p><p>首先是 Promise 的写法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> chainAnimationsPromise</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">elem</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> animations</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // 变量ret用来保存上一个动画的返回值</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> ret</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 新建一个空的Promise</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> p</span><span style="color:#81A1C1;"> =</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 使用then方法，添加所有动画</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> anim</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> animations</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    p</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> p</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">val</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">      ret</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> val</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      return</span><span style="color:#88C0D0;"> anim</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">elem</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 返回一个部署了错误捕捉机制的Promise</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> p</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">      /* 忽略错误，继续执行 */</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      return</span><span style="color:#D8DEE9;"> ret</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 Promise 的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是 Promise 的 API(<code>then</code>、<code>catch</code> 等等)，操作本身的语义反而不容易看出来。</p><p>接着是 Generator 函数的写法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> chainAnimationsGenerator</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">elem</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> animations</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#88C0D0;"> spawn</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function*</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> ret</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> null;</span></span>
<span class="line"><span style="color:#81A1C1;">    try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> anim</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> animations</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">        ret</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> yield</span><span style="color:#88C0D0;"> anim</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">elem</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">      /* 忽略错误，继续执行 */</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> ret</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码使用 Generator 函数遍历了每个动画，语义比 Promise 写法更清晰，用户定义的操作全部都出现在 <code>spawn</code> 函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行 Generator 函数，上面代码的 <code>spawn</code> 函数就是自动执行器，它返回一个 Promise 对象，而且必须保证 <code>yield</code> 语句后面的表达式，必须返回一个 Promise。</p><p>最后是 async 函数的写法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> chainAnimationsAsync</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">elem</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> animations</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> ret</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> null;</span></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> anim</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> animations</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">      ret</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> anim</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">elem</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">    /* 忽略错误，继续执行 */</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> ret</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Async 函数的实现最简洁，最符合语义，几乎没有语义不相关的代码。它将 Generator 写法中的自动执行器，改在语言层面提供，不暴露给用户，因此代码量最少。如果使用 Generator 写法，自动执行器需要用户自己提供。</p><h2 id="实例-按顺序完成异步操作" tabindex="-1"><a class="header-anchor" href="#实例-按顺序完成异步操作"><span>实例: 按顺序完成异步操作</span></a></h2><p>实际开发中，经常遇到一组异步操作，需要按照顺序完成。比如，依次远程读取一组 URL，然后按照读取的顺序输出结果。</p><p>Promise 的写法如下。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> logInOrder</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">urls</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // 远程读取所有URL</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> textPromises</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> urls</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">response</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> response</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 按次序输出</span></span>
<span class="line"><span style="color:#D8DEE9;">  textPromises</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reduce</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">chain</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> textPromise</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> chain</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> textPromise</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">resolve</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码使用 <code>fetch</code> 方法，同时远程读取一组 URL。每个 <code>fetch</code> 操作都返回一个 Promise 对象，放入 <code>textPromises</code> 数组。然后，<code>reduce</code> 方法依次处理每个 Promise 对象，然后使用 <code>then</code>，将所有 Promise 对象连起来，因此就可以依次输出结果。</p><p>这种写法不太直观，可读性比较差。下面是 async 函数实现。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> logInOrder</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">urls</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> url</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> urls</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> response</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> response</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码确实大大简化，问题是所有远程操作都是继发。只有前一个 URL 返回结果，才会去读取下一个 URL，这样做效率很差，非常浪费时间。我们需要的是并发发出远程请求。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> logInOrder</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">urls</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // 并发读取远程URL</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> textPromises</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> urls</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">url</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> response</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> response</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // 按次序输出</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> textPromise</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> textPromises</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> textPromise</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，虽然 <code>map</code> 方法的参数是 <code>async</code> 函数，但它是并发执行的，因为只有 <code>async</code> 函数内部是继发执行，外部不受影响。后面的 <code>for..of</code> 循环内部使用了 <code>await</code>，因此实现了按顺序输出。</p><h2 id="异步遍历器" tabindex="-1"><a class="header-anchor" href="#异步遍历器"><span>异步遍历器</span></a></h2><p>《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的 <code>next</code> 方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。<code>next</code> 方法返回的对象的结构是 <code>{value, done}</code>，其中 <code>value</code> 表示当前的数据的值，<code>done</code> 是一个布尔值，表示遍历是否结束。</p><p>这里隐含着一个规定，<code>next</code> 方法必须是同步的，只要调用就必须立刻返回值。也就是说，一旦执行 <code>next</code> 方法，就必须同步地得到 <code>value</code> 和 <code>done</code> 这两个属性。如果遍历指针正好指向同步操作，当然没有问题，但对于异步操作，就不太合适了。目前的解决方法是，Generator 函数里面的异步操作，返回一个 Thunk 函数或者 Promise 对象，即 <code>value</code> 属性是一个 Thunk 函数或者 Promise 对象，等待以后返回真正的值，而 <code>done</code> 属性则还是同步产生的。</p><p>ES2018 <a href="https://github.com/tc39/proposal-async-iteration" target="_blank" rel="noopener noreferrer">引入</a>了”异步遍历器“(Async Iterator)，为异步操作提供原生的遍历器接口，即 <code>value</code> 和 <code>done</code> 这两个属性都是异步产生。</p><h3 id="异步遍历的接口" tabindex="-1"><a class="header-anchor" href="#异步遍历的接口"><span>异步遍历的接口</span></a></h3><p>异步遍历器的最大的语法特点，就是调用遍历器的 <code>next</code> 方法，返回的是一个 Promise 对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">asyncIterator</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">    ({</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> done</span><span style="color:#ECEFF4;"> })</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#616E88;"> /* ... */</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  )</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，<code>asyncIterator</code> 是一个异步遍历器，调用 <code>next</code> 方法以后，返回一个 Promise 对象。因此，可以使用 <code>then</code> 方法指定，这个 Promise 对象的状态变为 <code>resolve</code> 以后的回调函数。回调函数的参数，则是一个具有 <code>value</code> 和 <code>done</code> 两个属性的对象，这个跟同步遍历器是一样的。</p><p>我们知道，一个对象的同步遍历器的接口，部署在 <code>Symbol.iterator</code> 属性上面。同样地，对象的异步遍历器接口，部署在 <code>Symbol.asyncIterator</code> 属性上面。不管是什么样的对象，只要它的 <code>Symbol.asyncIterator</code> 属性有值，就表示应该对它进行异步遍历。</p><p>下面是一个异步遍历器的例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createAsyncIterable</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">Symbol</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">asyncIterator</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">asyncIterator</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">iterResult1</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">iterResult1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // { value: &#39;a&#39;, done: false }</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">iterResult2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">iterResult2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // { value: &#39;b&#39;, done: false }</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">iterResult3</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">iterResult3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // { value: undefined, done: true }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，异步遍历器其实返回了两次值。第一次调用的时候，返回一个 Promise 对象；等到 Promise 对象 <code>resolve</code> 了，再返回一个表示当前数据成员信息的对象。这就是说，异步遍历器与同步遍历器最终行为是一致的，只是会先返回 Promise 对象，作为中介。</p><p>由于异步遍历器的 <code>next</code> 方法，返回的是一个 Promise 对象。因此，可以把它放在 <code>await</code> 命令后面。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createAsyncIterable</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">Symbol</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">asyncIterator</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">  // { value: &#39;a&#39;, done: false }</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">  // { value: &#39;b&#39;, done: false }</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">  // { value: undefined, done: true }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>next</code> 方法用 <code>await</code> 处理以后，就不必使用 <code>then</code> 方法了。整个流程已经很接近同步处理了。</p><p>注意，异步遍历器的 <code>next</code> 方法是可以连续调用的，不必等到上一步产生的 Promise 对象 <code>resolve</code> 以后再调用。这种情况下，<code>next</code> 方法会累积起来，自动按照每一步的顺序运行下去。下面是一个例子，把所有的 <code>next</code> 方法放在 <code>Promise.all</code> 方法里面。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> createAsyncIterable</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> asyncIterator</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">Symbol</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">asyncIterator</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> [{</span><span style="color:#D8DEE9FF;"> value</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v1</span><span style="color:#ECEFF4;"> },</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> value</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v2</span><span style="color:#ECEFF4;"> }]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">all</span><span style="color:#D8DEE9FF;">([</span></span>
<span class="line"><span style="color:#D8DEE9;">  asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">  asyncIterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> v2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // a b</span></span></code></pre></div><p>另一种用法是一次性调用所有的 <code>next</code> 方法，然后 <code>await</code> 最后一步操作。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> runner</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> writer</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> openFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">someFile.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  writer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  writer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#D8DEE9;"> writer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">return</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">runner</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><h3 id="for-await-of" tabindex="-1"><a class="header-anchor" href="#for-await-of"><span>for await...of</span></a></h3><p>前面介绍过，<code>for...of</code> 循环用于遍历同步的 Iterator 接口。新引入的 <code>for await...of</code> 循环，则是用于遍历异步的 Iterator 接口。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> of</span><span style="color:#88C0D0;"> createAsyncIterable</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">])) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// a</span></span>
<span class="line"><span style="color:#616E88;">// b</span></span></code></pre></div><p>上面代码中，<code>createAsyncIterable()</code> 返回一个拥有异步遍历器接口的对象，<code>for...of</code> 循环自动调用这个对象的异步遍历器的 <code>next</code> 方法，会得到一个 Promise 对象。<code>await</code> 用来处理这个 Promise 对象，一旦 <code>resolve</code>，就把得到的值(<code>x</code>)传入 <code>for...of</code> 的循环体。</p><p><code>for await...of</code> 循环的一个用途，是部署了 asyncIterable 操作的异步接口，可以直接放入这个循环。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> body</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> req</span><span style="color:#D8DEE9FF;">) </span><span style="color:#D8DEE9;">body</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> parsed</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> JSON</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parse</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">body</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">got</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> parsed</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，<code>req</code> 是一个 asyncIterable 对象，用来异步读取数据。可以看到，使用 <code>for await...of</code> 循环以后，代码会非常简洁。</p><p>如果 <code>next</code> 方法返回的 Promise 对象被 <code>reject</code>，<code>for await...of</code> 就会报错，要用 <code>try...catch</code> 捕捉。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> of</span><span style="color:#88C0D0;"> createRejectingIterable</span><span style="color:#D8DEE9FF;">()) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>注意，<code>for await...of</code> 循环也可以用于同步遍历器。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// a</span></span>
<span class="line"><span style="color:#616E88;">// b</span></span></code></pre></div><p>Node.js v10 支持异步遍历器，Stream 就部署了这个接口。下面是读取文件的传统写法与异步遍历器写法的差异。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 传统写法</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> main</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">inputFilePath</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> readStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">inputFilePath</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    encoding</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">    highWaterMark</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1024</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  readStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">chunk</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&gt;&gt;&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> chunk</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  readStream</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">on</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">end</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">### DONE ###</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 异步遍历器写法</span></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> main</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">inputFilePath</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> readStream</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createReadStream</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">inputFilePath</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    encoding</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">utf8</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">    highWaterMark</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1024</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> chunk</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> readStream</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&gt;&gt;&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> chunk</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">### DONE ###</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步-generator-函数" tabindex="-1"><a class="header-anchor" href="#异步-generator-函数"><span>异步 Generator 函数</span></a></h3><p>就像 Generator 函数返回一个同步遍历器对象一样，异步 Generator 函数的作用，是返回一个异步遍历器对象。</p><p>在语法上，异步 Generator 函数就是 <code>async</code> 函数与 Generator 函数的结合。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> gen</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> genObj</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> gen</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">genObj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// { value: &#39;hello&#39;, done: false }</span></span></code></pre></div><p>上面代码中，<code>gen</code> 是一个异步 Generator 函数，执行后返回一个异步 Iterator 对象。对该对象调用 <code>next</code> 方法，返回一个 Promise 对象。</p><p>异步遍历器的设计目的之一，就是 Generator 函数处理同步操作和异步操作时，能够使用同一套接口。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 同步 Generator 函数</span></span>
<span class="line"><span style="color:#81A1C1;">function*</span><span style="color:#88C0D0;"> map</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">iterable</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> func</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> iter</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> iterable</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">Symbol</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">iterator</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  while</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> done</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> iter</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">done</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">break;</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#88C0D0;"> func</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 异步 Generator 函数</span></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> map</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">iterable</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> func</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> iter</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> iterable</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">Symbol</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">asyncIterator</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  while</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> done</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> iter</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">done</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">break;</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#88C0D0;"> func</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>map</code> 是一个 Generator 函数，第一个参数是可遍历对象 <code>iterable</code>，第二个参数是一个回调函数 <code>func</code>。<code>map</code> 的作用是将 <code>iterable</code> 每一步返回的值，使用 <code>func</code> 进行处理。上面有两个版本的 <code>map</code>，前一个处理同步遍历器，后一个处理异步遍历器，可以看到两个版本的写法基本上是一致的。</p><p>下面是另一个异步 Generator 函数的例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> readLines</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> file</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fileOpen</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">path</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  try</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    while</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">file</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">EOF</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">      yield</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> file</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readLine</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> finally</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#D8DEE9;"> file</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">close</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，异步操作前面使用 <code>await</code> 关键字标明，即 <code>await</code> 后面的操作，应该返回 Promise 对象。凡是使用 <code>yield</code> 关键字的地方，就是 <code>next</code> 方法停下来的地方，它后面的表达式的值(即 <code>await file.readLine()</code> 的值)，会作为 <code>next()</code> 返回对象的 <code>value</code> 属性，这一点是与同步 Generator 函数一致的。</p><p>异步 Generator 函数内部，能够同时使用 <code>await</code> 和 <code>yield</code> 命令。可以这样理解，<code>await</code> 命令用于将外部操作产生的值输入函数内部，<code>yield</code> 命令用于将函数内部的值输出。</p><p>上面代码定义的异步 Generator 函数的用法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> line</span><span style="color:#81A1C1;"> of</span><span style="color:#88C0D0;"> readLines</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">filePath</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">line</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>异步 Generator 函数可以与 <code>for await...of</code> 循环结合起来使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> prefixLines</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">asyncIterable</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> line</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> line</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>异步 Generator 函数的返回值是一个异步 Iterator，即每次调用它的 <code>next</code> 方法，会返回一个 Promise 对象，也就是说，跟在 <code>yield</code> 命令后面的，应该是一个 Promise 对象。如果像上面那个例子那样，<code>yield</code> 命令后面是一个字符串，会被自动包装成一个 Promise 对象。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> fetchRandom</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> url</span><span style="color:#81A1C1;"> =</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">https://www.random.org/decimal-fractions/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">?num=1&amp;dec=10&amp;col=1&amp;format=plain&amp;rnd=new</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#88C0D0;"> fetch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">url</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> asyncGenerator</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Start</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> fetchRandom</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // (A)</span></span>
<span class="line"><span style="color:#81A1C1;">  yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Result: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> result</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // (B)</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Done</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> ag</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> asyncGenerator</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">ag</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">({</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> done</span><span style="color:#ECEFF4;"> })</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>ag</code> 是 <code>asyncGenerator</code> 函数返回的异步遍历器对象。调用 <code>ag.next()</code> 以后，上面代码的执行顺序如下。</p><ol><li><code>ag.next()</code> 立刻返回一个 Promise 对象。</li><li><code>asyncGenerator</code> 函数开始执行，打印出 <code>Start</code>。</li><li><code>await</code> 命令返回一个 Promise 对象，<code>asyncGenerator</code> 函数停在这里。</li><li>A 处变成 fulfilled 状态，产生的值放入 <code>result</code> 变量，<code>asyncGenerator</code> 函数继续往下执行。</li><li>函数在 B 处的 <code>yield</code> 暂停执行，一旦 <code>yield</code> 命令取到值，<code>ag.next()</code> 返回的那个 Promise 对象变成 fulfilled 状态。</li><li><code>ag.next()</code> 后面的 <code>then</code> 方法指定的回调函数开始执行。该回调函数的参数是一个对象 <code>{value, done}</code>，其中 <code>value</code> 的值是 <code>yield</code> 命令后面的那个表达式的值，<code>done</code> 的值是 <code>false</code>。</li></ol><p>A 和 B 两行的作用类似于下面的代码。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">return</span><span style="color:#81A1C1;"> new</span><span style="color:#8FBCBB;"> Promise</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> reject</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  fetchRandom</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> result</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">())</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">      resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">        value</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Result: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> result</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">        done</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果异步 Generator 函数抛出错误，会导致 Promise 对象的状态变为 <code>reject</code>，然后抛出的错误被 <code>catch</code> 方法捕获。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> asyncGenerator</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Problem!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">asyncGenerator</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Error: Problem!</span></span></code></pre></div><p>注意，普通的 async 函数返回的是一个 Promise 对象，而异步 Generator 函数返回的是一个异步 Iterator 对象。可以这样理解，async 函数和异步 Generator 函数，是封装异步操作的两种方法，都用来达到同一种目的。区别在于，前者自带执行器，后者通过 <code>for await...of</code> 执行，或者自己编写执行器。下面就是一个异步 Generator 函数的执行器。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> takeAsync</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">asyncIterable</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> count</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> iterator</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> asyncIterable</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">Symbol</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">asyncIterator</span><span style="color:#D8DEE9FF;">]()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  while</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">result</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;"> count</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> done</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9;"> iterator</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">done</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">break;</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">push</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，异步 Generator 函数产生的异步遍历器，会通过 <code>while</code> 循环自动执行，每当 <code>await iterator.next()</code> 完成，就会进入下一轮循环。一旦 <code>done</code> 属性变为 <code>true</code>，就会跳出循环，异步遍历器执行结束。</p><p>下面是这个自动执行器的一个使用实例。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> gen</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> await</span><span style="color:#88C0D0;"> takeAsync</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">gen</span><span style="color:#D8DEE9FF;">())</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">result</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">result</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步 Generator 函数出现以后，JavaScript 就有了四种函数形式: 普通函数、async 函数、Generator 函数和异步 Generator 函数。请注意区分每种函数的不同之处。基本上，如果是一系列按照顺序执行的异步操作(比如读取文件，然后写入新内容，再存入硬盘)，可以使用 async 函数；如果是一系列产生相同数据结构的异步操作(比如一行一行读取文件)，可以使用异步 Generator 函数。</p><p>异步 Generator 函数也可以通过 <code>next</code> 方法的参数，接收外部传入的数据。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> writer</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> openFile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">someFile.txt</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">writer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 立即执行</span></span>
<span class="line"><span style="color:#D8DEE9;">writer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 立即执行</span></span>
<span class="line"><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9;"> writer</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">return</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 等待写入结束</span></span></code></pre></div><p>上面代码中，<code>openFile</code> 是一个异步 Generator 函数。<code>next</code> 方法的参数，向该函数内部的操作传入数据。每次 <code>next</code> 方法都是同步执行的，最后的 <code>await</code> 命令用于等待整个写入操作结束。</p><p>最后，同步的数据结构，也可以使用异步 Generator 函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> createAsyncIterable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">syncIterable</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> elem</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> syncIterable</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#D8DEE9;"> elem</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，由于没有异步操作，所以也就没有使用 <code>await</code> 关键字。</p><h3 id="yield-语句" tabindex="-1"><a class="header-anchor" href="#yield-语句"><span>yield* 语句</span></a></h3><p><code>yield*</code> 语句也可以跟一个异步遍历器。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> gen1</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  yield</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function*</span><span style="color:#88C0D0;"> gen2</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // result 最终会等于 2</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> yield*</span><span style="color:#88C0D0;"> gen1</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>gen2</code> 函数里面的 <code>result</code> 变量，最后的值是 <code>2</code>。</p><p>与同步 Generator 函数一样，<code>for await...of</code> 循环会展开 <code>yield*</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> of</span><span style="color:#88C0D0;"> gen2</span><span style="color:#D8DEE9FF;">()) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// a</span></span>
<span class="line"><span style="color:#616E88;">// b</span></span></code></pre></div>`,189);function E(y,i){return a(),l("div",null,[c,r,o(" more "),t])}const D=n(e,[["render",E],["__file","async.html.vue"]]),C=JSON.parse('{"path":"/code/language/js/es6/async.html","title":"async 函数","lang":"zh-CN","frontmatter":{"title":"async 函数","icon":"async","author":"阮一峰","date":"2019-10-23T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 Async 函数是什么? 一句话，它就是 Generator 函数的语法糖。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/es6/async.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"async 函数"}],["meta",{"property":"og:description","content":"ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 Async 函数是什么? 一句话，它就是 Generator 函数的语法糖。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"async 函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[{"level":3,"title":"返回 Promise 对象","slug":"返回-promise-对象","link":"#返回-promise-对象","children":[]},{"level":3,"title":"Promise 对象的状态变化","slug":"promise-对象的状态变化","link":"#promise-对象的状态变化","children":[]},{"level":3,"title":"await 命令","slug":"await-命令","link":"#await-命令","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"使用注意点","slug":"使用注意点","link":"#使用注意点","children":[]}]},{"level":2,"title":"async 函数的实现原理","slug":"async-函数的实现原理","link":"#async-函数的实现原理","children":[]},{"level":2,"title":"与其他异步处理方法的比较","slug":"与其他异步处理方法的比较","link":"#与其他异步处理方法的比较","children":[]},{"level":2,"title":"实例: 按顺序完成异步操作","slug":"实例-按顺序完成异步操作","link":"#实例-按顺序完成异步操作","children":[]},{"level":2,"title":"异步遍历器","slug":"异步遍历器","link":"#异步遍历器","children":[{"level":3,"title":"异步遍历的接口","slug":"异步遍历的接口","link":"#异步遍历的接口","children":[]},{"level":3,"title":"for await...of","slug":"for-await-of","link":"#for-await-of","children":[]},{"level":3,"title":"异步 Generator 函数","slug":"异步-generator-函数","link":"#异步-generator-函数","children":[]},{"level":3,"title":"yield* 语句","slug":"yield-语句","link":"#yield-语句","children":[]}]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":7},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":22.24,"words":6672},"filePathRelative":"code/language/js/es6/async.md","localizedDate":"2019年10月23日","excerpt":"<p>ES2017 标准引入了 async 函数，使得异步操作变得更加方便。</p>\\n<p>Async 函数是什么? 一句话，它就是 Generator 函数的语法糖。</p>\\n","autoDesc":true}');export{D as comp,C as data};
