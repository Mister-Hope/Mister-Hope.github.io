import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c,e as s,f as a,a as e,b as l}from"./app-ByRR1PFc.js";const r={},d=l(`<h2 id="什么是事件" tabindex="-1"><a class="header-anchor" href="#什么是事件"><span>什么是事件</span></a></h2><ul><li>事件是视图层到逻辑层的通讯方式。</li><li>事件可以将用户的行为反馈到逻辑层进行处理。</li><li>事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。</li><li>事件对象可以携带额外信息，如 <code>id</code>, <code>dataset</code>, <code>touches</code>。</li></ul><h2 id="事件的使用方式" tabindex="-1"><a class="header-anchor" href="#事件的使用方式"><span>事件的使用方式</span></a></h2><p>在组件中绑定一个事件处理函数，如 <code>bindtap</code>，当用户点击该组件的时候会在该页面对应的 <code>Page</code> 中找到相应的事件处理函数。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">tapTest</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> data-hi</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">WeChat</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">tapName</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> Click me! </span><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div><p>在相应的 <code>Page</code> 定义中写上相应的事件处理函数，参数是 <code>event</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">Page</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  tapName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">event</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">event</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>可以看到 log 出来的信息大致如下:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">type</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">tap</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">timeStamp</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 895</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">target</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#8FBCBB;">id</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">tapTest</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#8FBCBB;">dataset</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">hi</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">WeChat</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">currentTarget</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#8FBCBB;">id</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">tapTest</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#8FBCBB;">dataset</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">hi</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">WeChat</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">detail</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#8FBCBB;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 53</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#8FBCBB;">y</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 14</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">touches</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span></span>
<span class="line"><span style="color:#ECEFF4;">    {</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">identifier</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">pageX</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 53</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">pageY</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 14</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">clientX</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 53</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">clientY</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 14</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  ],</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#8FBCBB;">changedTouches</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span></span>
<span class="line"><span style="color:#ECEFF4;">    {</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">identifier</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">pageX</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 53</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">pageY</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 14</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">clientX</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 53</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      &quot;</span><span style="color:#8FBCBB;">clientY</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 14</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  ]</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),i={id:"使用-wxs-函数响应事件",tabindex:"-1"},E={class:"header-anchor",href:"#使用-wxs-函数响应事件"},F=l('<p>高级用法，详见脚注<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。</p><h2 id="事件详解" tabindex="-1"><a class="header-anchor" href="#事件详解"><span>事件详解</span></a></h2>',2),y={id:"事件分类",tabindex:"-1"},C={class:"header-anchor",href:"#事件分类"},h=l('<p>事件分为冒泡事件和非冒泡事件:</p><ul><li>冒泡事件: 当一个组件上的事件被触发后，该事件会向父节点传递。</li><li>非冒泡事件: 当一个组件上的事件被触发后，该事件不会向父节点传递。</li></ul><p>WXML 的冒泡事件列表:</p><p>| 类型 | 触发条件 | 最低版本 | | ------------------ | ----------------------------------------------------------------------------------------- | -------- | ----- | | touchstart | 手指触摸动作开始 | | | touchmove | 手指触摸后移动 | | | touchcancel | 手指触摸动作被打断，如来电提醒，弹窗 | | | touchend | 手指触摸动作结束 | | | tap | 手指触摸后马上离开 | | | longpress | 手指触摸后，超过 350ms 再离开，如果指定了事件回调函数并触发了这个事件，tap 事件将不被触发 | | 1.5.0 | | longtap | 手指触摸后，超过 350ms 再离开(推荐使用 longpress 事件代替) | | | transitionend | 会在 WXSS transition 或 wx.createAnimation 动画结束后触发 | | | animationstart | 会在一个 WXSS animation 动画开始时触发 | | | animationiteration | 会在一个 WXSS animation 一次迭代结束时触发 | | | animationend | 会在一个 WXSS animation 动画完成时触发 | | | touchforcechange | 在支持 3D Touch 的 iPhone 设备，重按时会触发 | 1.9.90 |</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>除上表之外的其他组件自定义事件如无特殊声明都是非冒泡事件，如 form 的 <code>submit</code> 事件，input 的 <code>input</code> 事件，scroll-view 的 <code>scroll</code> 事件。(详见各个组件)</p></div>',5),u={id:"普通事件绑定",tabindex:"-1"},B={class:"header-anchor",href:"#普通事件绑定"},m=l(`<p>事件绑定的写法类似于组件的属性，如:</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  Click here!</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div><p>如果用户点击这个 view ，则页面的 <code>handleTap</code> 会被调用。</p><p>事件绑定函数可以是一个数据绑定，如:</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">{{ handlerName }}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  Click here!</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div><p>此时，页面的 <code>this.data.handlerName</code> 必须是一个字符串，指定事件处理函数名；如果它是个空字符串，则这个绑定会失效(可以利用这个特性来暂时禁用一些事件)。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>自基础库版本 1.5.0 起，在大多数组件和自定义组件中， <code>bind</code> 后可以紧跟一个冒号，其含义不变，如 <code>bind:tap</code> 。基础库版本 2.8.1 起，在所有组件中开始提供这个支持。</p></div>`,7),v={id:"绑定并阻止事件冒泡",tabindex:"-1"},D={class:"header-anchor",href:"#绑定并阻止事件冒泡"},g=l(`<p>除 <code>bind</code> 外，也可以用 <code>catch</code> 来绑定事件。与 <code>bind</code> 不同， <code>catch</code> 会阻止事件向上冒泡。</p><p>例如在下边这个例子中，点击 inner view 会先后调用 <code>handleTap3</code> 和 <code>handleTap2</code> (因为 tap 事件会冒泡到 middle view，而 middle view 阻止了 tap 事件冒泡，不再向父节点传递)，点击 middle view 会触发 <code>handleTap2</code>，点击 outer view 会触发 <code>handleTap1</code>。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">outer</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  outer view</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">middle</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> catchtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    middle view</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">inner</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap3</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      inner view</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;/view&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;/view&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div>`,3),b={id:"互斥事件绑定",tabindex:"-1"},f={class:"header-anchor",href:"#互斥事件绑定"},A=l(`<p>自基础库版本 2.8.2 起，除 <code>bind</code> 和 <code>catch</code> 外，还可以使用 <code>mut-bind</code> 来绑定事件。一个 <code>mut-bind</code> 触发后，如果事件冒泡到其他节点上，其他节点上的 <code>mut-bind</code> 绑定函数不会被触发，但 <code>bind</code> 绑定函数和 <code>catch</code> 绑定函数依旧会被触发。</p><p>换而言之，所有 <code>mut-bind</code> 是“互斥”的，只会有其中一个绑定函数被触发。同时，它完全不影响 <code>bind</code> 和 <code>catch</code> 的绑定效果。</p><p>例如在下边这个例子中，点击 inner view 会先后调用 <code>handleTap3</code> 和 <code>handleTap2</code> ，点击 middle view 会调用 <code>handleTap2</code> 和 <code>handleTap1</code>。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">outer</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> mut-bind</span><span style="color:#ECEFF4;">:</span><span style="color:#8FBCBB;">tap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  outer view</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">middle</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    middle view</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;view</span><span style="color:#8FBCBB;"> id</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">inner</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> mut-bind</span><span style="color:#ECEFF4;">:</span><span style="color:#8FBCBB;">tap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">handleTap3</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      inner view</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;/view&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;/view&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div>`,4),q={id:"事件的捕获阶段",tabindex:"-1"},x={class:"header-anchor",href:"#事件的捕获阶段"},k=s("p",null,[a("这是一个很重要的内容，但不适合初学者直接学习，建议先了解其他内容。具体内容见脚注"),s("sup",{class:"footnote-ref"},[s("a",{href:"#footnote2"},"[2]"),s("a",{class:"footnote-anchor",id:"footnote-ref2"})]),a("。")],-1),w={id:"事件对象",tabindex:"-1"},T={class:"header-anchor",href:"#事件对象"},_=l(`<p>如无特殊说明，当组件触发事件时，逻辑层绑定该事件的处理函数会收到一个事件对象。</p><p>BaseEvent 基础事件对象属性列表:</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th><th>基础库版本</th></tr></thead><tbody><tr><td>type</td><td>String</td><td>事件类型</td><td></td></tr><tr><td>timeStamp</td><td>Integer</td><td>事件生成时的时间戳</td><td></td></tr><tr><td>target</td><td>Object</td><td>触发事件的组件的一些属性值集合</td><td></td></tr><tr><td>currentTarget</td><td>Object</td><td>当前组件的一些属性值集合</td><td></td></tr><tr><td>mark</td><td>Object</td><td>事件标记数据</td><td>2.7.1</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>canvas 中的触摸事件不可冒泡，所以没有 <code>currentTarget</code>。</p></div><h4 id="customevent" tabindex="-1"><a class="header-anchor" href="#customevent"><span>CustomEvent</span></a></h4><p>自定义事件对象属性列表(继承 BaseEvent):</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>detail</td><td>Object</td><td>额外的信息</td></tr></tbody></table><h4 id="touchevent" tabindex="-1"><a class="header-anchor" href="#touchevent"><span>TouchEvent</span></a></h4><p>触摸事件对象属性列表(继承 BaseEvent):</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>touches</td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td>changedTouches</td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组</td></tr></tbody></table><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h4><p>代表事件的类型。</p><h4 id="timestamp" tabindex="-1"><a class="header-anchor" href="#timestamp"><span>timeStamp</span></a></h4><p>页面打开到触发事件所经过的毫秒数。</p><h4 id="target" tabindex="-1"><a class="header-anchor" href="#target"><span>target</span></a></h4><p>触发事件的源组件。</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>事件源组件的 <code>id</code></td></tr><tr><td>dataset</td><td>Object</td><td>事件源组件上由 <code>data-</code> 开头的自定义属性组成的集合</td></tr></tbody></table><h4 id="currenttarget" tabindex="-1"><a class="header-anchor" href="#currenttarget"><span>currentTarget</span></a></h4><p>事件绑定的当前组件。</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>当前组件的 <code>id</code></td></tr><tr><td>dataset</td><td>Object</td><td>当前组件上由 <code>data-</code> 开头的自定义属性组成的集合</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>target</code> 和 <code>currentTarget</code> 可以参考上例中，点击 inner view <code>时，handleTap3</code> 收到的事件对象 <code>target</code> 和 <code>currentTarget</code> 都是 <code>inner，而</code> <code>handleTap2</code> 收到的事件对象 <code>target</code> 就是 <code>inner</code>，<code>currentTarget</code> 就是 <code>middle</code>。</p></div><h4 id="dataset" tabindex="-1"><a class="header-anchor" href="#dataset"><span>dataset</span></a></h4><p>在组件节点中可以附加一些自定义数据。这样，在事件中可以获取这些自定义的节点数据，用于事件的逻辑处理。</p><p>在 WXML 中，这些自定义数据以 <code>data-</code> 开头，多个单词由连字符 <code>-</code> 连接。这种写法中，连字符写法会转换成驼峰写法，而大写字符会自动转成小写字符。如:</p><ul><li><code>data-element-type</code>: 最终会呈现为 <code>event.currentTarget.dataset.elementType</code></li><li><code>data-elementType</code>: 最终会呈现为 <code>event.currentTarget.dataset.elementtype</code></li></ul><details class="hint-container details"><summary>例子</summary><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> data-alpha-beta</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> data-alphaBeta</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bindViewTap</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> DataSet Test </span><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">Page</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  bindViewTap</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">event</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    event</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">currentTarget</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">dataset</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">alphaBeta</span><span style="color:#81A1C1;"> ===</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // - 会转为驼峰写法</span></span>
<span class="line"><span style="color:#D8DEE9;">    event</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">currentTarget</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">dataset</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">alphabeta</span><span style="color:#81A1C1;"> ===</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 大写会转为小写</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div></details><h4 id="mark" tabindex="-1"><a class="header-anchor" href="#mark"><span>mark</span></a></h4><p>在基础库版本 2.7.1 以上，可以使用 mark 来识别具体触发事件的 <code>target</code> 节点。此外， mark 还可以用于承载一些自定义数据(类似于 <code>dataset</code> )。</p><p>当事件触发时，事件冒泡路径上所有的 mark 会被合并，并返回给事件回调函数。(即使事件不是冒泡事件，也会 mark)</p><details class="hint-container details"><summary>例子</summary><p><a href="https://developers.weixin.qq.com/s/boDQoKmu7M7G" target="_blank" rel="noopener noreferrer">在开发者工具中预览效果</a></p><div class="language-xml" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;view</span><span style="color:#8FBCBB;"> mark</span><span style="color:#ECEFF4;">:</span><span style="color:#8FBCBB;">myMark</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">last</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bindViewTap</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;button</span><span style="color:#8FBCBB;"> mark</span><span style="color:#ECEFF4;">:</span><span style="color:#8FBCBB;">anotherMark</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">leaf</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> bindtap</span><span style="color:#D8DEE9FF;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bindButtonTap</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">按钮</span><span style="color:#81A1C1;">&lt;/button&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/view&gt;</span></span></code></pre></div><p>在上述 WXML 中，如果按钮被点击，将触发 <code>bindViewTap</code> 和 <code>bindButtonTap</code> 两个事件，事件携带的 <code>event.mark</code> 将包含 <code>myMark</code> 和 <code>anotherMark</code> 两项。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">Page</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  bindViewTap</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    e</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">mark</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">myMark</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">last</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">    e</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">mark</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">anotherMark</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">leaf</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div></details><p><code>mark</code> 和 <code>dataset</code> 很相似，主要区别在于: <code>mark</code> 会包含从触发事件的节点到根节点上所有的 <code>mark</code>: 属性值；而 <code>dataset</code> 仅包含一个节点的 <code>data-</code> 属性值。</p><p>细节注意事项:</p><ul><li>如果存在同名的 <code>mark</code> ，父节点的 <code>mark</code> 会被子节点覆盖。</li><li>在自定义组件中接收事件时， <code>mark</code> 不包含自定义组件外的节点的 <code>mark</code> 。</li><li>不同于 <code>dataset</code> ，节点的 <code>mark</code> 不会做连字符和大小写转换。</li></ul><h4 id="touches" tabindex="-1"><a class="header-anchor" href="#touches"><span>touches</span></a></h4><p>touches 是一个数组，每个元素为一个 Touch 对象(canvas 触摸事件中携带的 touches 是 CanvasTouch 数组)。表示当前停留在屏幕上的触摸点。</p><h4 id="touch-对象" tabindex="-1"><a class="header-anchor" href="#touch-对象"><span>Touch 对象</span></a></h4><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>identifier</td><td>Number</td><td>触摸点的标识符</td></tr><tr><td>pageX, pageY</td><td>Number</td><td>距离文档左上角的距离，文档的左上角为原点 ，横向为 X 轴，纵向为 Y 轴</td></tr><tr><td>clientX, clientY</td><td>Number</td><td>距离页面可显示区域(屏幕除去导航条)左上角距离，横向为 X 轴，纵向为 Y 轴</td></tr></tbody></table><h4 id="canvastouch-对象" tabindex="-1"><a class="header-anchor" href="#canvastouch-对象"><span>CanvasTouch 对象</span></a></h4><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>identifier</td><td>Number</td><td>触摸点的标识符</td></tr><tr><td>x, y</td><td>Number</td><td>距离 Canvas 左上角的距离，Canvas 的左上角为原点 ，横向为 X 轴，纵向为 Y 轴</td></tr></tbody></table><h4 id="changedtouches" tabindex="-1"><a class="header-anchor" href="#changedtouches"><span>changedTouches</span></a></h4><p><code>changedTouches</code> 数据格式同 <code>touches</code>。表示有变化的触摸点，如从无变有(<code>touchstart</code>)，位置变化(<code>touchmove</code>)，从有变无(<code>touchend</code>、<code>touchcancel</code>)。</p><h4 id="detail" tabindex="-1"><a class="header-anchor" href="#detail"><span>detail</span></a></h4><p>自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入，媒体的错误事件会携带错误信息，详见组件定义中各个事件的定义。</p><p>点击事件的 <code>detail</code> 带有的 <code>x</code>, <code>y</code> 同 <code>pageX</code>, <code>pageY</code> 代表距离文档左上角的距离。</p><hr class="footnotes-sep">`,45),S=s("section",{class:"footnotes"},[s("ol",{class:"footnotes-list"},[s("li",{id:"footnote1",class:"footnote-item"},[s("p",null,[a("从基础库版本 2.4.4 开始，支持使用 WXS 函数绑定事件，WXS 函数接受 2 个参数，第一个是 "),s("code",null,"event"),a("，在原有的 "),s("code",null,"event"),a(" 的基础上加了 "),s("code",null,"event.instance"),a(" 对象，第二个参数是 "),s("code",null,"ownerInstance"),a("，和 "),s("code",null,"event.instance"),a(" 一样是一个 "),s("code",null,"ComponentDescriptor"),a(" 对象。具体使用如下:")]),s("p",null,"在组件中绑定和注册事件处理的 WXS 函数。"),s("div",{class:"language-xml","data-highlighter":"shiki","data-ext":"xml","data-title":"xml",style:{"background-color":"#2e3440ff",color:"#d8dee9ff"}},[s("pre",{class:"shiki nord vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"<wxs"),s("span",{style:{color:"#8FBCBB"}}," module"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"wxs"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," src"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"./test.wxs"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#81A1C1"}},"></wxs>")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"<view"),s("span",{style:{color:"#8FBCBB"}}," id"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"tapTest"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," data-hi"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"WeChat"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," bindtap"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"{{wxs.tapName}}"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#81A1C1"}},">"),s("span",{style:{color:"#D8DEE9FF"}}," Click me! "),s("span",{style:{color:"#81A1C1"}},"</view>")])])])]),s("div",null,[s("p",null,[s("strong",null,[a("绑定的 WXS 函数必须用 "),s("code",{"v-pre":""},"{{}}"),a(" 括起来")])])]),s("p",null,[s("code",null,"test.wxs"),a(" 文件实现 "),s("code",null,"tapName"),a(" 函数")]),s("div",{class:"language-js","data-highlighter":"shiki","data-ext":"js","data-title":"js",style:{"background-color":"#2e3440ff",color:"#d8dee9ff"}},[s("pre",{class:"shiki nord vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"const"),s("span",{style:{color:"#88C0D0"}}," tapName"),s("span",{style:{color:"#81A1C1"}}," ="),s("span",{style:{color:"#ECEFF4"}}," ("),s("span",{style:{color:"#D8DEE9"}},"event"),s("span",{style:{color:"#ECEFF4"}},","),s("span",{style:{color:"#D8DEE9"}}," ownerInstance"),s("span",{style:{color:"#ECEFF4"}},")"),s("span",{style:{color:"#81A1C1"}}," =>"),s("span",{style:{color:"#ECEFF4"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D8DEE9"}},"  console"),s("span",{style:{color:"#ECEFF4"}},"."),s("span",{style:{color:"#88C0D0"}},"log"),s("span",{style:{color:"#D8DEE9FF"}},"("),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"tap wechat"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#ECEFF4"}},","),s("span",{style:{color:"#D8DEE9"}}," JSON"),s("span",{style:{color:"#ECEFF4"}},"."),s("span",{style:{color:"#88C0D0"}},"stringify"),s("span",{style:{color:"#D8DEE9FF"}},"("),s("span",{style:{color:"#D8DEE9"}},"event"),s("span",{style:{color:"#D8DEE9FF"}},"))"),s("span",{style:{color:"#81A1C1"}},";")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ECEFF4"}},"}"),s("span",{style:{color:"#81A1C1"}},";")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#8FBCBB"}},"module"),s("span",{style:{color:"#ECEFF4"}},"."),s("span",{style:{color:"#8FBCBB"}},"exports"),s("span",{style:{color:"#81A1C1"}}," ="),s("span",{style:{color:"#ECEFF4"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88C0D0"}},"  tapName"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#D8DEE9"}}," tapName"),s("span",{style:{color:"#ECEFF4"}},",")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#ECEFF4"}},"}"),s("span",{style:{color:"#81A1C1"}},";")])])])]),s("p",null,[s("code",null,"ownerInstance"),a(" 包含了一些方法，可以设置组件的样式和 class，具体包含的方法以及为什么要用 WXS 函数响应事件，请点击查看 详情。 "),s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎")])]),s("li",{id:"footnote2",class:"footnote-item"},[s("p",null,[a("自基础库版本 1.5.0 起，触摸类事件支持捕获阶段。捕获阶段位于冒泡阶段之前，且在捕获阶段中，事件到达节点的顺序与冒泡阶段恰好相反。需要在捕获阶段监听事件时，可以采用 "),s("code",null,"capture-bind"),a("、"),s("code",null,"capture-catch"),a(" 关键字，后者将中断捕获阶段和取消冒泡阶段。")]),s("p",null,[a("在下面的代码中，点击 inner view 会先后调用 "),s("code",null,"handleTap2"),a("、"),s("code",null,"handleTap4"),a("、"),s("code",null,"handleTap3"),a("、"),s("code",null,"handleTap1"),a("。")]),s("div",{class:"language-xml","data-highlighter":"shiki","data-ext":"xml","data-title":"xml",style:{"background-color":"#2e3440ff",color:"#d8dee9ff"}},[s("pre",{class:"shiki nord vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"<view"),s("span",{style:{color:"#8FBCBB"}}," id"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"outer"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap1"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," capture-bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap2"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#81A1C1"}},">")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D8DEE9FF"}},"  outer view")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"  <view"),s("span",{style:{color:"#8FBCBB"}}," id"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"inner"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap3"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," capture-bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap4"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#81A1C1"}},">")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D8DEE9FF"}},"    inner view")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"  </view>")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"</view>")])])])]),s("p",null,[a("如果将上面代码中的第一个 "),s("code",null,"capture-bind"),a(" 改为 "),s("code",null,"capture-catch"),a("，将只触发 "),s("code",null,"handleTap2"),a("。")]),s("div",{class:"language-xml","data-highlighter":"shiki","data-ext":"xml","data-title":"xml",style:{"background-color":"#2e3440ff",color:"#d8dee9ff"}},[s("pre",{class:"shiki nord vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"<view"),s("span",{style:{color:"#8FBCBB"}}," id"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"outer"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap1"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," capture-catch"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap2"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#81A1C1"}},">")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D8DEE9FF"}},"  outer view")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"  <view"),s("span",{style:{color:"#8FBCBB"}}," id"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"inner"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap3"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#8FBCBB"}}," capture-bind"),s("span",{style:{color:"#ECEFF4"}},":"),s("span",{style:{color:"#8FBCBB"}},"touchstart"),s("span",{style:{color:"#D8DEE9FF"}},"="),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#A3BE8C"}},"handleTap4"),s("span",{style:{color:"#ECEFF4"}},'"'),s("span",{style:{color:"#81A1C1"}},">")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#D8DEE9FF"}},"    inner view")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"  </view>")]),a(`
`),s("span",{class:"line"},[s("span",{style:{color:"#81A1C1"}},"</view>")])])])]),a(),s("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎")])])],-1);function j(X,N){const n=t("Badge");return p(),c("div",null,[d,s("h2",i,[s("a",E,[s("span",null,[a("使用 WXS 函数响应事件 "),e(n,{type:"warning",text:"高级"})])])]),F,s("h3",y,[s("a",C,[s("span",null,[a("事件分类 "),e(n,{text:"重要",type:"error"})])])]),h,s("h3",u,[s("a",B,[s("span",null,[a("普通事件绑定 "),e(n,{text:"重要",type:"error"})])])]),m,s("h3",v,[s("a",D,[s("span",null,[a("绑定并阻止事件冒泡 "),e(n,{text:"重要",type:"error"})])])]),g,s("h3",b,[s("a",f,[s("span",null,[a("互斥事件绑定 "),e(n,{text:"初学无需掌握",type:"warn"})])])]),A,s("h3",q,[s("a",x,[s("span",null,[a("事件的捕获阶段 "),e(n,{text:"初学无需掌握",type:"warn"})])])]),k,s("h3",w,[s("a",T,[s("span",null,[a("事件对象 "),e(n,{text:"了解"}),a(),e(n,{text:"文档"})])])]),_,S])}const P=o(r,[["render",j],["__file","event.html.vue"]]),Y=JSON.parse('{"path":"/code/mini-app/guide/view/event.html","title":"事件","lang":"zh-CN","frontmatter":{"date":"2020-10-09T00:00:00.000Z","title":"事件","icon":"activity","category":"小程序","description":"什么是事件 事件是视图层到逻辑层的通讯方式。 事件可以将用户的行为反馈到逻辑层进行处理。 事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。 事件对象可以携带额外信息，如 id, dataset, touches。 事件的使用方式 在组件中绑定一个事件处理函数，如 bindtap，当用户点击该组件的时候会在该页面对应的 Page...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/mini-app/guide/view/event.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"事件"}],["meta",{"property":"og:description","content":"什么是事件 事件是视图层到逻辑层的通讯方式。 事件可以将用户的行为反馈到逻辑层进行处理。 事件可以绑定在组件上，当达到触发事件，就会执行逻辑层中对应的事件处理函数。 事件对象可以携带额外信息，如 id, dataset, touches。 事件的使用方式 在组件中绑定一个事件处理函数，如 bindtap，当用户点击该组件的时候会在该页面对应的 Page..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T18:01:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2020-10-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T18:01:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T18:01:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"什么是事件","slug":"什么是事件","link":"#什么是事件","children":[]},{"level":2,"title":"事件的使用方式","slug":"事件的使用方式","link":"#事件的使用方式","children":[]},{"level":2,"title":"使用 WXS 函数响应事件","slug":"使用-wxs-函数响应事件","link":"#使用-wxs-函数响应事件","children":[]},{"level":2,"title":"事件详解","slug":"事件详解","link":"#事件详解","children":[{"level":3,"title":"事件分类","slug":"事件分类","link":"#事件分类","children":[]},{"level":3,"title":"普通事件绑定","slug":"普通事件绑定","link":"#普通事件绑定","children":[]},{"level":3,"title":"绑定并阻止事件冒泡","slug":"绑定并阻止事件冒泡","link":"#绑定并阻止事件冒泡","children":[]},{"level":3,"title":"互斥事件绑定","slug":"互斥事件绑定","link":"#互斥事件绑定","children":[]},{"level":3,"title":"事件的捕获阶段","slug":"事件的捕获阶段","link":"#事件的捕获阶段","children":[]},{"level":3,"title":"事件对象","slug":"事件对象","link":"#事件对象","children":[]}]}],"git":{"createdTime":1591204114000,"updatedTime":1706205672000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":7},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":2}]},"readingTime":{"minutes":9.18,"words":2753},"filePathRelative":"code/mini-app/guide/view/event.md","localizedDate":"2020年10月9日","excerpt":"","autoDesc":true}');export{P as comp,Y as data};
