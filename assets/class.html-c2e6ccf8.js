const e=JSON.parse('{"key":"v-65d00140","path":"/code/language/js/es6/class.html","title":"Class 的基本语法","lang":"zh-CN","frontmatter":{"icon":"class","author":"阮一峰","date":"2019-10-23T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"简介 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 上面这种写法跟传统的面向对象语言(比如 C++ 和 Java)差异很大，很容易让新学习这门语言的程序员感到困惑。 ES6 提供了更接近传统语言的写法，引入了 Class(类)这个概念，作为对象的模板。通过 class 关键字，可以定义类。 基本上，ES6 的 c...","head":[["meta",{"property":"og:url","content":"https://mrhope.site/code/language/js/es6/class.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"Class 的基本语法"}],["meta",{"property":"og:description","content":"简介 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 上面这种写法跟传统的面向对象语言(比如 C++ 和 Java)差异很大，很容易让新学习这门语言的程序员感到困惑。 ES6 提供了更接近传统语言的写法，引入了 Class(类)这个概念，作为对象的模板。通过 class 关键字，可以定义类。 基本上，ES6 的 c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-12T05:50:30.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-12T05:50:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Class 的基本语法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-12T05:50:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"严格模式","slug":"严格模式","link":"#严格模式","children":[]},{"level":2,"title":"constructor 方法","slug":"constructor-方法","link":"#constructor-方法","children":[]},{"level":2,"title":"类的实例对象","slug":"类的实例对象","link":"#类的实例对象","children":[]},{"level":2,"title":"Class 表达式","slug":"class-表达式","link":"#class-表达式","children":[]},{"level":2,"title":"不存在变量提升","slug":"不存在变量提升","link":"#不存在变量提升","children":[]},{"level":2,"title":"私有方法和私有属性","slug":"私有方法和私有属性","link":"#私有方法和私有属性","children":[{"level":3,"title":"现有的方法","slug":"现有的方法","link":"#现有的方法","children":[]},{"level":3,"title":"私有属性的提案","slug":"私有属性的提案","link":"#私有属性的提案","children":[]}]},{"level":2,"title":"this 的指向","slug":"this-的指向","link":"#this-的指向","children":[]},{"level":2,"title":"name 属性","slug":"name-属性","link":"#name-属性","children":[]},{"level":2,"title":"Class 的取值函数(getter)和存值函数(setter)","slug":"class-的取值函数-getter-和存值函数-setter","link":"#class-的取值函数-getter-和存值函数-setter","children":[]},{"level":2,"title":"Class 的 Generator 方法","slug":"class-的-generator-方法","link":"#class-的-generator-方法","children":[]},{"level":2,"title":"Class 的静态方法","slug":"class-的静态方法","link":"#class-的静态方法","children":[]},{"level":2,"title":"Class 的静态属性和实例属性","slug":"class-的静态属性和实例属性","link":"#class-的静态属性和实例属性","children":[]},{"level":2,"title":"new.target 属性","slug":"new-target-属性","link":"#new-target-属性","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644645030000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":7}]},"readingTime":{"minutes":16.7,"words":5011},"filePathRelative":"code/language/js/es6/class.md","localizedDate":"2019年10月23日","excerpt":"","autoDesc":true}');export{e as data};
