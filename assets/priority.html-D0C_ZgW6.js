import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as o,b as l}from"./app-ByRR1PFc.js";const n={},p=l(`<h2 id="void-运算符" tabindex="-1"><a class="header-anchor" href="#void-运算符"><span>void 运算符</span></a></h2><p><code>void</code> 运算符的作用是执行一个表达式，然后不返回任何值，或者说返回 <code>undefined</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">void</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined</span></span>
<span class="line"><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined</span></span></code></pre></div><p>上面是 <code>void</code> 运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为 <code>void</code> 运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，<code>void 4 + 7</code> 实际上等同于 <code>(void 4) + 7</code>。</p><p>下面是 <code>void</code> 运算符的一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> //undefined</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 5</span></span></code></pre></div><p>这个运算符的主要用途是浏览器的书签工具(Bookmarklet)，以及在超级链接中插入代码防止网页跳转。</p><p>请看下面的代码。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello World</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;a</span><span style="color:#8FBCBB;"> href</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">http://example.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> onclick</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#88C0D0;">f</span><span style="color:#A3BE8C;">()</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> return</span><span style="color:#81A1C1;"> false;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">点击</span><span style="color:#81A1C1;">&lt;/a&gt;</span></span></code></pre></div><p>上面代码中，点击链接后，会先执行 <code>onclick</code> 的代码，由于 <code>onclick</code> 返回 <code>false</code>，所以浏览器不会跳转到 example.com。</p><p><code>void</code> 运算符可以取代上面的写法。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;a</span><span style="color:#8FBCBB;"> href</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">javascript: void(f())</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">文字</span><span style="color:#81A1C1;">&lt;/a&gt;</span></span></code></pre></div><p>下面是一个更实际的例子，用户点击链接提交表单，但是不产生页面跳转。</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;a</span><span style="color:#8FBCBB;"> href</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">javascript: void(document.form.submit())</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> 提交 </span><span style="color:#81A1C1;">&lt;/a&gt;</span></span></code></pre></div><h2 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h2><p>逗号运算符用于对两个表达式求值，并返回后一个表达式的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;b&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">++</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 10</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 10</span></span></code></pre></div><p>上面代码中，逗号运算符返回后一个表达式的值。</p><p>逗号运算符的一个用途是，在返回一个值之前，进行一些辅助操作。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hi!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Hi!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p>上面代码中，先执行逗号之前的操作，然后返回逗号后面的值。</p><h2 id="运算顺序" tabindex="-1"><a class="header-anchor" href="#运算顺序"><span>运算顺序</span></a></h2><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级"><span>优先级</span></a></h3><p>JavaScript 各种运算符的优先级别(Operator Precedence)是不一样的。优先级高的运算符先执行，优先级低的运算符后执行。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#B48EAD;">4</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 5</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 6</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 34</span></span></code></pre></div><p>上面的代码中，乘法运算符(<code>*</code>)的优先性高于加法运算符(<code>+</code>)，所以先执行乘法，再执行加法，相当于下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#B48EAD;">4</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#B48EAD;">5</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 6</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 34</span></span></code></pre></div><p>如果多个运算符混写在一起，常常会导致令人困惑的代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> arr</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">&lt;=</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;"> ||</span><span style="color:#D8DEE9;"> arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">===</span><span style="color:#81A1C1;"> undefined</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，变量 <code>y</code> 的值就很难看出来，因为这个表达式涉及 5 个运算符，到底谁的优先级最高，实在不容易记住。</p><p>根据语言规格，这五个运算符的优先级从高到低依次为: 小于等于(<code>&lt;=</code>)、严格相等(<code>===</code>)、或(<code>||</code>)、三元(<code>?:</code>)、等号(<code>=</code>)。因此上面的表达式，实际的运算顺序如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> ((</span><span style="color:#D8DEE9;">arr</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">&lt;=</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">||</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">===</span><span style="color:#81A1C1;"> undefined</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#81A1C1;">?</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>记住所有运算符的优先级，是非常难的，也是没有必要的。</p><h3 id="圆括号的作用" tabindex="-1"><a class="header-anchor" href="#圆括号的作用"><span>圆括号的作用</span></a></h3><p>圆括号(<code>()</code>)可以用来提高运算的优先级，因为它的优先级是最高的，即圆括号中的表达式会第一个运算。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">*</span><span style="color:#B48EAD;"> 6</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 54</span></span></code></pre></div><p>上面代码中，由于使用了圆括号，加法会先于乘法执行。</p><p>运算符的优先级别十分繁杂，且都是硬性规定，因此建议总是使用圆括号，保证运算顺序清晰可读，这对代码的维护和除错至关重要。</p><p>顺便说一下，圆括号不是运算符，而是一种语法结构。它一共有两种用法: 一种是把表达式放在圆括号之中，提升运算的优先级；另一种是跟在函数的后面，作用是调用函数。</p><p>注意，因为圆括号不是运算符，所以不具有求值作用，只改变运算的优先级。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码的第二行，如果圆括号具有求值作用，那么就会变成 <code>1 = 2</code>，这是会报错了。但是，上面的代码可以运行，这验证了圆括号只改变优先级，不会求值。</p><p>这也意味着，如果整个表达式都放在圆括号之中，那么不会有任何效果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">expression</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"><span style="color:#D8DEE9;">expression</span></span></code></pre></div><p>函数放在圆括号中，会返回函数本身。如果圆括号紧跟在函数的后面，就表示调用函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">f</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // function f(){return 1;}</span></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span></code></pre></div><p>上面代码中，函数放在圆括号之中会返回函数本身，圆括号跟在函数后面则是调用函数。</p><p>圆括号之中，只能放置表达式，如果将语句放在圆括号之中，就会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#616E88;">// SyntaxError: Unexpected token var</span></span></code></pre></div><h3 id="左结合与右结合" tabindex="-1"><a class="header-anchor" href="#左结合与右结合"><span>左结合与右结合</span></a></h3><p>对于优先级别相同的运算符，大多数情况，计算顺序总是从左到右，这叫做运算符的“左结合”(left-to-right associativity)，即从左边开始计算。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> z</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码先计算最左边的 <code>x</code> 与 <code>y</code> 的和，然后再计算与 <code>z</code> 的和。</p><p>但是少数运算符的计算顺序是从右到左，即从右边开始计算，这叫做运算符的“右结合”(right-to-left associativity)。其中，最主要的是赋值运算符(<code>=</code>)和三元条件运算符(<code>?:</code>)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">w</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> z</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">q</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> e</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> f</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> g</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码的运算结果，相当于下面的样子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">w</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> z</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">q</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">c</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> f</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> g</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面的两行代码，各有三个等号运算符和三个三元运算符，都是先计算最右边的那个运算符。</p><p>指数运算符(<code>**</code>)也是右结合的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 相当于 2 ** (3 ** 2)</span></span>
<span class="line"><span style="color:#B48EAD;">2</span><span style="color:#81A1C1;"> **</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;"> **</span><span style="color:#B48EAD;"> 2</span></span>
<span class="line"><span style="color:#616E88;">// 512</span></span></code></pre></div>`,60),e=[p];function t(c,r){return a(),o("div",null,e)}const y=s(n,[["render",t],["__file","priority.html.vue"]]),E=JSON.parse('{"path":"/code/language/js/operators/priority.html","title":"其他运算符与运算顺序","lang":"zh-CN","frontmatter":{"title":"其他运算符与运算顺序","icon":"more","date":"2019-09-30T00:00:00.000Z","category":"JavaScript","description":"void 运算符 void 运算符的作用是执行一个表达式，然后不返回任何值，或者说返回 undefined。 上面是 void 运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为 void 运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，void 4 + 7 实际上等同于 (void 4) + 7。 下面是 void 运...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/operators/priority.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"其他运算符与运算顺序"}],["meta",{"property":"og:description","content":"void 运算符 void 运算符的作用是执行一个表达式，然后不返回任何值，或者说返回 undefined。 上面是 void 运算符的两种写法，都正确。建议采用后一种形式，即总是使用圆括号。因为 void 运算符的优先性很高，如果不使用括号，容易造成错误的结果。比如，void 4 + 7 实际上等同于 (void 4) + 7。 下面是 void 运..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2019-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"其他运算符与运算顺序\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"void 运算符","slug":"void-运算符","link":"#void-运算符","children":[]},{"level":2,"title":"逗号运算符","slug":"逗号运算符","link":"#逗号运算符","children":[]},{"level":2,"title":"运算顺序","slug":"运算顺序","link":"#运算顺序","children":[{"level":3,"title":"优先级","slug":"优先级","link":"#优先级","children":[]},{"level":3,"title":"圆括号的作用","slug":"圆括号的作用","link":"#圆括号的作用","children":[]},{"level":3,"title":"左结合与右结合","slug":"左结合与右结合","link":"#左结合与右结合","children":[]}]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":5}]},"readingTime":{"minutes":4.75,"words":1425},"filePathRelative":"code/language/js/operators/priority.md","localizedDate":"2019年9月30日","excerpt":"","autoDesc":true}');export{y as comp,E as data};
