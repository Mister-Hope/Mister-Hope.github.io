import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,d as l,e as o,b as p}from"./app-ByRR1PFc.js";const e={},t=o("p",null,"ES6 加强了对 Unicode 的支持，并且扩展了字符串对象。",-1),c=p(`<h2 id="字符的-unicode-表示法" tabindex="-1"><a class="header-anchor" href="#字符的-unicode-表示法"><span>字符的 Unicode 表示法</span></a></h2><p>JavaScript 允许采用 <code>\\uxxxx</code> 形式表示一个字符，其中 <code>xxxx</code> 表示字符的 Unicode 码点。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u0061</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;a&quot;</span></span></code></pre></div><p>但是，这种表示法只限于码点在 <code>\\u0000</code>~<code>\\uFFFF</code> 之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\uD842\\uDFB7</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u20BB</span><span style="color:#A3BE8C;">7</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot; 7&quot;</span></span></code></pre></div><p>上面代码表示，如果直接在 <code>\\u</code> 后面跟上超过 <code>0xFFFF</code> 的数值(比如 <code>\\u20BB7</code>)，JavaScript 会理解成 <code>\\u20BB+7</code>。由于 <code>\\u20BB</code> 是一个不可打印字符，所以只会显示一个空格，后面跟着一个 <code>7</code>。</p><p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u{20BB7}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u{41}\\u{42}\\u{43}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;ABC&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> hello</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 123</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">hello</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u{1F680}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\uD83D\\uDE80</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p><p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\172</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\x7A</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u007A</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u{7A}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">z</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><h2 id="codepointat" tabindex="-1"><a class="header-anchor" href="#codepointat"><span>codePointAt()</span></a></h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为 <code>2</code> 个字节。对于那些需要 <code>4</code> 个字节储存的字符(Unicode 码点大于 <code>0xFFFF</code> 的字符)，JavaScript 会认为它们是两个字符。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">𠮷</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">charAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">charAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">charCodeAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 55362</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">charCodeAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 57271</span></span></code></pre></div><p>上面代码中，汉字“𠮷”(注意，这个字不是“吉祥”的“吉”)的码点是 <code>0x20BB7</code>，UTF-16 编码为 <code>0xD842 0xDFB7</code>(十进制为 <code>55362 57271</code>)，需要 <code>4</code> 个字节储存。对于这种 <code>4</code> 个字节的字符，JavaScript 不能正确处理，字符串长度会误判为 <code>2</code>，而且 <code>charAt</code> 方法无法读取整个字符，<code>charCodeAt</code> 方法只能分别返回前两个字节和后两个字节的值。</p><p>ES6 提供了 <code>codePointAt</code> 方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">𠮷a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 134071</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 57271</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 97</span></span></code></pre></div><p><code>codePointAt</code> 方法的参数，是字符在字符串中的位置(从 0 开始)。上面代码中，JavaScript 将“𠮷 a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071(即十六进制的 <code>20BB7</code>)。在第二个字符(即“𠮷”的后两个字节)和第三个字符“a”上，<code>codePointAt</code> 方法的结果与 <code>charCodeAt</code> 方法相同。</p><p>总之，<code>codePointAt</code> 方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与 <code>charCodeAt</code> 方法相同。</p><p><code>codePointAt</code> 方法返回的是码点的十进制值，如果想要十六进制的值，可以使用 <code>toString</code> 方法转换一下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">𠮷a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">16</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;20bb7&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">16</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;61&quot;</span></span></code></pre></div><p>您可能注意到了，<code>codePointAt</code> 方法的参数，仍然是不正确的。比如，上面代码中，字符 <code>a</code> 在字符串 <code>s</code> 的正确位置序号应该是 1，但是必须向 <code>codePointAt</code> 方法传入 2。解决这个问题的一个办法是使用 <code>for...of</code> 循环，因为它会正确识别 32 位的 UTF-16 字符。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">𠮷a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> ch</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> s</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ch</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">16</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// 20bb7</span></span>
<span class="line"><span style="color:#616E88;">// 61</span></span></code></pre></div><p><code>codePointAt</code> 方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> is32Bit</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">codePointAt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 0xffff</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">is32Bit</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">𠮷</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#88C0D0;">is32Bit</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span></code></pre></div><h2 id="string-fromcodepoint" tabindex="-1"><a class="header-anchor" href="#string-fromcodepoint"><span>String.fromCodePoint()</span></a></h2><p>ES5 提供 <code>String.fromCharCode</code> 方法，用于从码点返回对应字符，但是这个方法不能识别 32 位的 UTF-16 字符(Unicode 编号大于 <code>0xFFFF</code>)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromCharCode</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x20bb7</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;ஷ&quot;</span></span></code></pre></div><p>上面代码中，<code>String.fromCharCode</code> 不能识别大于 <code>0xFFFF</code> 的码点，所以 <code>0x20BB7</code> 就发生了溢出，最高位 <code>2</code> 被舍弃了，最后返回码点 <code>U+0BB7</code> 对应的字符，而不是码点 <code>U+20BB7</code> 对应的字符。</p><p>ES6 提供了 <code>String.fromCodePoint</code> 方法，可以识别大于 <code>0xFFFF</code> 的字符，弥补了 <code>String.fromCharCode</code> 方法的不足。在作用上，正好与 <code>codePointAt</code> 方法相反。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromCodePoint</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x20bb7</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;𠮷&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromCodePoint</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x78</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0x1f680</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0x79</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#EBCB8B;">\\uD83D\\uDE80</span><span style="color:#A3BE8C;">y</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// true</span></span></code></pre></div><p>上面代码中，如果 <code>String.fromCodePoint</code> 方法有多个参数，则它们会被合并成一个字符串返回。</p><p>注意，<code>fromCodePoint</code> 方法定义在 <code>String</code> 对象上，而 <code>codePointAt</code> 方法定义在字符串的实例对象上。</p><h2 id="字符串的遍历器接口" tabindex="-1"><a class="header-anchor" href="#字符串的遍历器接口"><span>字符串的遍历器接口</span></a></h2><p>ES6 为字符串添加了遍历器接口(详见《Iterator》一章)，使得字符串可以被 <code>for...of</code> 循环遍历。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> codePoint</span><span style="color:#81A1C1;"> of</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">codePoint</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// &quot;f&quot;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;o&quot;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;o&quot;</span></span></code></pre></div><p>除了遍历字符串，这个遍历器最大的优点是可以识别大于 <code>0xFFFF</code> 的码点，传统的 <code>for</code> 循环无法识别这样的码点。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> text</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromCodePoint</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0x20bb7</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> text</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">text</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// &quot; &quot;</span></span>
<span class="line"><span style="color:#616E88;">// &quot; &quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> text</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// &quot;𠮷&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，字符串 <code>text</code> 只有一个字符，但是 <code>for</code> 循环会认为它包含两个字符(都不可打印)，而 <code>for...of</code> 循环会正确识别出这一个字符。</p><h2 id="normalize" tabindex="-1"><a class="header-anchor" href="#normalize"><span>normalize()</span></a></h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如<code>Ǒ</code>(\\u01D1)。另一种是提供合成符号(combining character)，即原字符与重音符号的合成，两个字符合成一个字符，比如 <code>O</code>(\\u004F)和<code>ˇ</code>(\\u030C)合成<code>Ǒ</code>(\\u004F\\u030C)。</p><p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u01D1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\u004F\\u030C</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> //false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u01D1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u004F\\u030C</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span></code></pre></div><p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p><p>ES6 提供字符串实例的 <code>normalize()</code> 方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u01D1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\u004F\\u030C</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// true</span></span></code></pre></div><p><code>normalize</code> 方法可以接受一个参数来指定 <code>normalize</code> 的方式，参数的四个可选值如下。</p><ul><li><code>NFC</code>，默认参数，表示“标准等价合成”(Normalization Form Canonical Composition)，返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li><li><code>NFD</code>，表示“标准等价分解”(Normalization Form Canonical Decomposition)，即在标准等价的前提下，返回合成字符分解的多个简单字符。</li><li><code>NFKC</code>，表示“兼容等价合成”(Normalization Form Compatibility Composition)，返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。(这只是用来举例，<code>normalize</code> 方法不能识别中文。)</li><li><code>NFKD</code>，表示“兼容等价分解”(Normalization Form Compatibility Decomposition)，即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u004F\\u030C</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">NFC</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">\\u004F\\u030C</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">normalize</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">NFD</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span></code></pre></div><p>上面代码表示，<code>NFC</code> 参数返回字符的合成形式，<code>NFD</code> 参数返回字符的分解形式。</p><p>不过，<code>normalize</code> 方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p><h2 id="includes-startswith-endswith" tabindex="-1"><a class="header-anchor" href="#includes-startswith-endswith"><span>includes(), startsWith(), endsWith()</span></a></h2><p>传统上，JavaScript 只有 <code>indexOf</code> 方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p><ul><li><strong>includes()</strong>: 返回布尔值，表示是否找到了参数字符串。</li><li><strong>startsWith()</strong>: 返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><strong>endsWith()</strong>: 返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello world!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">startsWith</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">endsWith</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">includes</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">o</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello world!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">startsWith</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">endsWith</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">includes</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span></code></pre></div><p>上面代码表示，使用第二个参数 <code>n</code> 时，<code>endsWith</code> 的行为与其他两个方法有所不同。它针对前 <code>n</code> 个字符，而其他两个方法针对从第 <code>n</code> 个位置直到字符串结束。</p><h2 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>repeat()</span></a></h2><p><code>repeat</code> 方法返回一个新字符串，表示将原字符串重复 <code>n</code> 次。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;hellohello&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;&quot;</span></span></code></pre></div><p>参数如果是小数，会被取整。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2.9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;nana&quot;</span></span></code></pre></div><p>如果 <code>repeat</code> 的参数是负数或者 <code>Infinity</code>，会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">Infinity</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// RangeError</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// RangeError</span></span></code></pre></div><p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于 <code>-0</code>，<code>repeat</code> 视同为 0。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">0.9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;&quot;</span></span></code></pre></div><p>参数 <code>NaN</code> 等同于 0。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">NaN</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;&quot;</span></span></code></pre></div><p>如果 <code>repeat</code> 的参数是字符串，则会先转换成数字。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">na</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">repeat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">3</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;nanana&quot;</span></span></code></pre></div><h2 id="padstart-padend" tabindex="-1"><a class="header-anchor" href="#padstart-padend"><span>padStart()，padEnd()</span></a></h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code> 用于头部补全，<code>padEnd()</code> 用于尾部补全。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;ababx&#39;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;abax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padEnd</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;xabab&#39;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padEnd</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;xaba&#39;</span></span></code></pre></div><p>上面代码中，<code>padStart</code> 和 <code>padEnd</code> 一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。</p><p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">xxx</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">xxx</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padEnd</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ab</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;xxx&#39;</span></span></code></pre></div><p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0123456789</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &#39;0123456abc&#39;</span></span></code></pre></div><p>如果省略第二个参数，默认使用空格补全长度。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;   x&#39;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padEnd</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;x   &#39;</span></span></code></pre></div><p><code>padStart</code> 的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;0000000001&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">12</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;0000000012&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">123456</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;0000123456&quot;</span></span></code></pre></div><p>另一个用途是提示字符串格式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">12</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">YYYY-MM-DD</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;YYYY-MM-12&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">09-12</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">padStart</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">YYYY-MM-DD</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;YYYY-09-12&quot;</span></span></code></pre></div><h2 id="matchall" tabindex="-1"><a class="header-anchor" href="#matchall"><span>matchAll()</span></a></h2><p><code>matchAll</code> 方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。</p><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h2><p>传统的 JavaScript 语言，输出模板通常是这样写的(下面使用了 jQuery 的方法)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#result</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">There are &lt;b&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#D8DEE9;">    basket</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">count</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">&lt;/b&gt; </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">items in your basket, </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">&lt;em&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#D8DEE9;">    basket</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">onSale</span><span style="color:#81A1C1;"> +</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;</span><span style="color:#A3BE8C;">&lt;/em&gt; are on sale!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#result</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span></span>
<span class="line"><span style="color:#A3BE8C;">  There are &lt;b&gt;</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">basket</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">count</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&lt;/b&gt; items</span></span>
<span class="line"><span style="color:#A3BE8C;">   in your basket, &lt;em&gt;</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">basket</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">onSale</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&lt;/em&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  are on sale!</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>模板字符串(template string)是增强版的字符串，用反引号(\`)标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 普通字符串</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">In JavaScript &#39;</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">&#39; is a line-feed.</span><span style="color:#ECEFF4;">\`</span><span style="color:#616E88;"> // 多行字符串</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">In JavaScript this is</span></span>
<span class="line"><span style="color:#A3BE8C;"> not legal.</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">string text line 1</span></span>
<span class="line"><span style="color:#A3BE8C;">string text line 2</span><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 字符串中嵌入变量</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Bob</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">  time</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">today</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hello </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">, how are you </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">time</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">?</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> greeting</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#EBCB8B;">\\\`</span><span style="color:#A3BE8C;">Yo</span><span style="color:#EBCB8B;">\\\`</span><span style="color:#A3BE8C;"> World!</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#list</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">html</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span></span>
<span class="line"><span style="color:#A3BE8C;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，所有模板字符串的空格和换行，都是被保留的，比如 <code>&lt;ul&gt;</code> 标签前面会有一个换行。如果您不想要这个换行，可以使用 <code>trim</code> 方法消除它。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#list</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">html</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">  \`</span></span>
<span class="line"><span style="color:#A3BE8C;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;li&gt;first&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;li&gt;second&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">trim</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>模板字符串中嵌入变量，需要将变量名写在<code>\${}</code> 之中。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> authorize</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">user</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> action</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">!</span><span style="color:#D8DEE9;">user</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hasPrivilege</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">action</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    throw</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#616E88;">      // 传统写法为</span></span>
<span class="line"><span style="color:#616E88;">      // &#39;User &#39;</span></span>
<span class="line"><span style="color:#616E88;">      // + user.name</span></span>
<span class="line"><span style="color:#616E88;">      // + &#39; is not authorized to do &#39;</span></span>
<span class="line"><span style="color:#616E88;">      // + action</span></span>
<span class="line"><span style="color:#616E88;">      // + &#39;.&#39;</span></span>
<span class="line"><span style="color:#ECEFF4;">      \`</span><span style="color:#A3BE8C;">User </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">user</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> is not authorized to do </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">action</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">\`</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    )</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> + </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> = </span><span style="color:#81A1C1;">\${</span></span>
<span class="line"><span style="color:#D8DEE9;">  x</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> y</span></span>
<span class="line"><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#616E88;"> // &quot;1 + 2 = 3&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> + </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> = </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;1 + 4 = 5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;3&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板字符串之中还能调用函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> fn</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello World</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">foo </span><span style="color:#81A1C1;">\${</span><span style="color:#88C0D0;">fn</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> bar</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// foo Hello World bar</span></span></code></pre></div><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的 <code>toString</code> 方法。</p><p>如果模板字符串中的变量没有声明，将报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 变量place没有声明</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> msg</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">place</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 报错</span></span></code></pre></div><p>由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hello </span><span style="color:#81A1C1;">\${</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">World</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;Hello World&quot;</span></span></code></pre></div><p>模板字符串甚至还能嵌套。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> tmpl</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">addrs</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> \`</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;table&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  \${</span><span style="color:#D8DEE9;">addrs</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">map</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">      (</span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> \`</span></span>
<span class="line"><span style="color:#A3BE8C;">    &lt;tr&gt;&lt;td&gt;</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">first</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">    &lt;tr&gt;&lt;td&gt;</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">addr</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">last</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">  \`</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">join</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">}</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;/table&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span></span>
<span class="line"><span style="color:#ECEFF4;">  {</span><span style="color:#88C0D0;"> first</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&lt;Jane&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> last</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Bond</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> },</span></span>
<span class="line"><span style="color:#ECEFF4;">  {</span><span style="color:#88C0D0;"> first</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Lars</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> last</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&lt;Croft&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> },</span></span>
<span class="line"><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">tmpl</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &lt;table&gt;</span></span>
<span class="line"><span style="color:#616E88;">//</span></span>
<span class="line"><span style="color:#616E88;">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#616E88;">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#616E88;">//</span></span>
<span class="line"><span style="color:#616E88;">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#616E88;">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#616E88;">//</span></span>
<span class="line"><span style="color:#616E88;">// &lt;/table&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 写法一</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> str</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">return </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`Hello \${name}!\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> func</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Function</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> str</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">func</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Jack</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;Hello Jack!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 写法二</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> str</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">(name) =&gt; \`Hello \${name}!\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> func</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> eval</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">call</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">null</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> str</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">func</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Jack</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;Hello Jack!&quot;</span></span></code></pre></div><h2 id="实例-模板编译" tabindex="-1"><a class="header-anchor" href="#实例-模板编译"><span>实例: 模板编译</span></a></h2><p>下面，我们来看一个通过模板字符串，生成正式模板的实例。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> template</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span></span>
<span class="line"><span style="color:#A3BE8C;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) { %&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;% } %&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码在模板字符串之中，放置了一个常规模板。该模板使用 <code>&lt;%...%&gt;</code> 放置 JavaScript 代码，使用 <code>&lt;%= ... %&gt;</code> 输出 JavaScript 表达式。</p><p>怎么编译这个模板字符串呢?</p><p>一种思路是将其转换为 JavaScript 表达式字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;ul&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> data</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">supplies</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;li&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">data</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">supplies</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;/li&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;/ul&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>这个转换使用正则表达式就行了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> evalExpr</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> /</span><span style="color:#EBCB8B;">&lt;%=</span><span style="color:#ECEFF4;">(</span><span style="color:#EBCB8B;">.</span><span style="color:#81A1C1;">+?</span><span style="color:#ECEFF4;">)</span><span style="color:#EBCB8B;">%&gt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> expr</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> /</span><span style="color:#EBCB8B;">&lt;%</span><span style="color:#ECEFF4;">([</span><span style="color:#EBCB8B;">\\s\\S</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;">+?</span><span style="color:#ECEFF4;">)</span><span style="color:#EBCB8B;">%&gt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">template</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> template</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">evalExpr</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`); </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">  echo( $1 ); </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">  echo(\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">expr</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`); </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;"> $1 </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">  echo(\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">template</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">echo(\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> template</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`);</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>然后，将 <code>template</code> 封装在一个函数里面返回，就可以了。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> script</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">(function parse(data){</span></span>
<span class="line"><span style="color:#A3BE8C;">  let output = &quot;&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A3BE8C;">  function echo(html){</span></span>
<span class="line"><span style="color:#A3BE8C;">    output += html;</span></span>
<span class="line"><span style="color:#A3BE8C;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  \${</span><span style="color:#D8DEE9;">template</span><span style="color:#81A1C1;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A3BE8C;">  return output;</span></span>
<span class="line"><span style="color:#A3BE8C;">})</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9;"> script</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面的内容拼装成一个模板编译函数 <code>compile</code>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> compile</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">template</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> evalExpr</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> /</span><span style="color:#EBCB8B;">&lt;%=</span><span style="color:#ECEFF4;">(</span><span style="color:#EBCB8B;">.</span><span style="color:#81A1C1;">+?</span><span style="color:#ECEFF4;">)</span><span style="color:#EBCB8B;">%&gt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> expr</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> /</span><span style="color:#EBCB8B;">&lt;%</span><span style="color:#ECEFF4;">([</span><span style="color:#EBCB8B;">\\s\\S</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;">+?</span><span style="color:#ECEFF4;">)</span><span style="color:#EBCB8B;">%&gt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">  template</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> template</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">evalExpr</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`); </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">  echo( $1 ); </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">  echo(\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">    .</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">expr</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`); </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;"> $1 </span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">  echo(\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">  template</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">echo(\`</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> template</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">\`);</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> script</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">(function parse(data){</span></span>
<span class="line"><span style="color:#A3BE8C;">    let output = &quot;&quot;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A3BE8C;">    function echo(html){</span></span>
<span class="line"><span style="color:#A3BE8C;">      output += html;</span></span>
<span class="line"><span style="color:#A3BE8C;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    \${</span><span style="color:#D8DEE9;">template</span><span style="color:#81A1C1;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A3BE8C;">    return output;</span></span>
<span class="line"><span style="color:#A3BE8C;">  })</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> script</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>compile</code> 函数的用法如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> parse</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> eval</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">compile</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">template</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">innerHTML</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> parse</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> supplies</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">broom</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">mop</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">cleaner</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">] </span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">//   &lt;ul&gt;</span></span>
<span class="line"><span style="color:#616E88;">//     &lt;li&gt;broom&lt;/li&gt;</span></span>
<span class="line"><span style="color:#616E88;">//     &lt;li&gt;mop&lt;/li&gt;</span></span>
<span class="line"><span style="color:#616E88;">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span>
<span class="line"><span style="color:#616E88;">//   &lt;/ul&gt;</span></span></code></pre></div><h2 id="标签模板" tabindex="-1"><a class="header-anchor" href="#标签模板"><span>标签模板</span></a></h2><p>模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能(tagged template)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">alert</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">123</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"><span style="color:#88C0D0;">alert</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">123</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。</p><p>但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 5</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">tag</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hello </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> world </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"><span style="color:#88C0D0;">tag</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;"> world </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 15</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 50</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，模板字符串前面有一个标识名 <code>tag</code>，它是一个函数。整个表达式的返回值，就是 <code>tag</code> 函数处理模板字符串后的返回值。</p><p>函数 <code>tag</code> 依次会接收到多个参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> tag</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">stringArr</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value2</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> tag</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">stringArr</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">values</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p><code>tag</code> 函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。</p><p><code>tag</code> 函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此 <code>tag</code> 会接受到 <code>value1</code> 和 <code>value2</code> 两个参数。</p><p><code>tag</code> 函数所有参数的实际值如下。</p><ul><li>第一个参数: <code>[&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;]</code></li><li>第二个参数: 15</li><li>第三个参数: 50</li></ul><p>也就是说，<code>tag</code> 函数实际上以下面的形式调用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">tag</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;"> world </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 15</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 50</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>我们可以按照需要编写 <code>tag</code> 函数的代码。下面是 <code>tag</code> 函数的一种写法，以及运行结果。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 5</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> tag</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> v1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> v2</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">s</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">s</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">s</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">v2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">OK</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">tag</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hello </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> world </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;Hello &quot;</span></span>
<span class="line"><span style="color:#616E88;">// &quot; world &quot;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#616E88;">// 15</span></span>
<span class="line"><span style="color:#616E88;">// 50</span></span>
<span class="line"><span style="color:#616E88;">// &quot;OK&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个更复杂的例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> total</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 30</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> msg</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> passthru</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">The total is </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">total</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> (</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">total</span><span style="color:#81A1C1;"> *</span><span style="color:#B48EAD;"> 1.05</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> with tax)</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> passthru</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">literals</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  while</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> literals</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> literals</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#81A1C1;"> arguments</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">      result</span><span style="color:#81A1C1;"> +=</span><span style="color:#81A1C1;"> arguments</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">msg</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;The total is 30 (31.5 with tax)&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子展示了，如何将各个参数按照原来的位置拼合回去。</p><p><code>passthru</code> 函数采用 rest 参数的写法如下。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> passthru</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">literals</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">values</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> output</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">index</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> values</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    output</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> literals</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">index</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> values</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">index</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">  output</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> literals</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">index</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> output</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“标签模板”的一个重要应用，就是过滤 HTML 字符串，防止用户输入恶意内容。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> message</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> SaferHTML</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">&lt;p&gt;</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">sender</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> has sent you a message.&lt;/p&gt;</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> SaferHTML</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">templateData</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> templateData</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#81A1C1;"> arguments</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> arg</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> String</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">arguments</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">    // Escape special characters in the substitution.</span></span>
<span class="line"><span style="color:#D8DEE9;">    s</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> arg</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">/</span><span style="color:#EBCB8B;">&amp;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&amp;amp;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">/</span><span style="color:#EBCB8B;">&lt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&amp;lt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">replace</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">/</span><span style="color:#EBCB8B;">&gt;</span><span style="color:#ECEFF4;">/</span><span style="color:#81A1C1;">g</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&amp;gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">    // Don&#39;t escape special characters in the template.</span></span>
<span class="line"><span style="color:#D8DEE9;">    s</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> templateData</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> s</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>sender</code> 变量往往是用户提供的，经过 <code>SaferHTML</code> 函数处理，里面的特殊字符都会被转义。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> sender</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">&lt;script&gt;alert(&quot;abc&quot;)&lt;/script&gt;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 恶意代码</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> message</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> SaferHTML</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">&lt;p&gt;</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">sender</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> has sent you a message.&lt;/p&gt;</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">message</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &lt;p&gt;&amp;lt;script&amp;gt;alert(&quot;abc&quot;)&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;</span></span></code></pre></div><p>标签模板的另一个应用，就是多语言转换(国际化处理)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">i18n</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Welcome to </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">siteName</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">, you are visitor number </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">visitorNumber</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &quot;欢迎访问xxx，您是第xxxx位访问者!&quot;</span></span></code></pre></div><p>模板字符串本身并不能取代 Mustache 之类的模板库，因为没有条件判断和循环处理功能，但是通过标签函数，您可以自己添加这些功能。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 下面的hashTemplate函数</span></span>
<span class="line"><span style="color:#616E88;">// 是一个自定义的模板处理函数</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> libraryHtml</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> hashTemplate</span><span style="color:#ECEFF4;">\`</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;ul&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">    #for book in </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">myBooks</span><span style="color:#81A1C1;">}</span></span>
<span class="line"><span style="color:#A3BE8C;">      &lt;li&gt;&lt;i&gt;#{book.title}&lt;/i&gt; by #{book.author}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">    #end</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>除此之外，您甚至可以使用标签模板，在 JavaScript 语言之中嵌入其他语言。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">jsx</span><span style="color:#ECEFF4;">\`</span></span>
<span class="line"><span style="color:#A3BE8C;">  &lt;div&gt;</span></span>
<span class="line"><span style="color:#A3BE8C;">    &lt;input</span></span>
<span class="line"><span style="color:#A3BE8C;">      ref=&#39;input&#39;</span></span>
<span class="line"><span style="color:#A3BE8C;">      onChange=&#39;</span><span style="color:#81A1C1;">\${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">handleChange</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&#39;</span></span>
<span class="line"><span style="color:#A3BE8C;">      defaultValue=&#39;</span><span style="color:#81A1C1;">\${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">state</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">&#39; /&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">      \${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">state</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;">}</span></span>
<span class="line"><span style="color:#A3BE8C;">   &lt;/div&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面的代码通过 <code>jsx</code> 函数，将一个 DOM 字符串转为 React 对象。您可以在 GitHub 找到 <code>jsx</code> 函数的<a href="https://gist.github.com/lygaret/a68220defa69174bdec5" target="_blank" rel="noopener noreferrer">具体实现</a>。</p><p>下面则是一个假想的例子，通过 <code>java</code> 函数，在 JavaScript 代码之中运行 Java 代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">java</span><span style="color:#ECEFF4;">\`</span></span>
<span class="line"><span style="color:#A3BE8C;">class HelloWorldApp {</span></span>
<span class="line"><span style="color:#A3BE8C;">  public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#A3BE8C;">    System.out.println(“Hello World!”); // Display the string.</span></span>
<span class="line"><span style="color:#A3BE8C;">  }</span></span>
<span class="line"><span style="color:#A3BE8C;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">HelloWorldApp</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">main</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>模板处理函数的第一个参数(模板字符串数组)，还有一个 <code>raw</code> 属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">123</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// [&quot;123&quot;, raw: Array[1]]</span></span></code></pre></div><p>上面代码中，<code>console.log</code> 接受的参数，实际上是一个数组。该数组有一个 <code>raw</code> 属性，保存的是转义后的原字符串。</p><p>请看下面的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">tag</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">First line</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">Second line</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> tag</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">strings</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">strings</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">raw</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">  // strings.raw[0] 为 &quot;First line\\\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#616E88;">  // 打印输出 &quot;First line\\nSecond line&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，<code>tag</code> 函数的第一个参数 <code>strings</code>，有一个 <code>raw</code> 属性，也指向一个数组。该数组的成员与 <code>strings</code> 数组完全一致。比如，<code>strings</code> 数组是 <code>[&quot;First line\\nSecond line&quot;]</code>，那么 <code>strings.raw</code> 数组就是 <code>[&quot;First line\\\\nSecond line&quot;]</code>。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw 数组会将 <code>\\n</code> 视为 <code>\\\\</code> 和 <code>n</code> 两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。</p><h2 id="string-raw" tabindex="-1"><a class="header-anchor" href="#string-raw"><span>String.raw()</span></a></h2><p>ES6 还为原生的 String 对象，提供了一个 <code>raw</code> 方法。</p><p><code>String.raw</code> 方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义(即斜杠前面再加一个斜杠)的字符串，对应于替换变量后的模板字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">raw</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hi</span><span style="color:#EBCB8B;">\\n</span><span style="color:#81A1C1;">\${</span><span style="color:#B48EAD;">2</span><span style="color:#81A1C1;"> +</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 返回 &quot;Hi\\\\n5!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">raw</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hi</span><span style="color:#EBCB8B;">\\u000A</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 返回 &quot;Hi\\\\u000A!&quot;</span></span></code></pre></div><p>如果原字符串的斜杠已经转义，那么 <code>String.raw</code> 会进行再次转义。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">raw</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hi</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">n</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 返回 &quot;Hi\\\\\\\\n&quot;</span></span></code></pre></div><p><code>String.raw</code> 方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p><p><code>String.raw</code> 方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有 <code>raw</code> 属性的对象，且 <code>raw</code> 属性的值应该是一个数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">raw</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> raw</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">test</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> },</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// &#39;t0e1s2t&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">raw</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> raw</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">t</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">e</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">s</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">t</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">] </span><span style="color:#ECEFF4;">},</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>作为函数，<code>String.raw</code> 的代码实现基本如下。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">String</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">raw</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">strings</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">values</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> output</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">index</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> values</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> index</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    output</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> strings</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">raw</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">index</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> values</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">index</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">  output</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> strings</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">raw</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">index</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> output</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板字符串的限制" tabindex="-1"><a class="header-anchor" href="#模板字符串的限制"><span>模板字符串的限制</span></a></h2><p>前面提到标签模板里面，可以内嵌其他语言。但是，模板字符串默认会将字符串转义，导致无法嵌入其他语言。</p><p>举例来说，标签模板里面可以嵌入 LaTEX 语言。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> latex</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">strings</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> document</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> latex</span><span style="color:#ECEFF4;">\`</span></span>
<span class="line"><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">ewcommand{</span><span style="color:#EBCB8B;">\\f</span><span style="color:#A3BE8C;">un}{</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">extbf{Fun!}}  // 正常工作</span></span>
<span class="line"><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">ewcommand{</span><span style="color:#EBCB8B;">\\u</span><span style="color:#A3BE8C;">nicode}{</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">extbf{Unicode!}} // 报错</span></span>
<span class="line"><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">ewcommand{</span><span style="color:#EBCB8B;">\\x</span><span style="color:#A3BE8C;">erxes}{</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">extbf{King!}} // 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A3BE8C;">Breve over the h goes </span><span style="color:#EBCB8B;">\\u</span><span style="color:#A3BE8C;">{h}ere // 报错</span></span>
<span class="line"><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，变量 <code>document</code> 内嵌的模板字符串，对于 LaTEX 语言来说完全是合法的，但是 JavaScript 引擎会报错。原因就在于字符串的转义。</p><p>模板字符串会将 <code>\\u00FF</code> 和 <code>\\u{42}</code> 当作 Unicode 字符进行转义，所以 <code>\\unicode</code> 解析时报错；而 <code>\\x56</code> 会被当作十六进制字符串转义，所以 <code>\\xerxes</code> 会报错。也就是说，<code>\\u</code> 和 <code>\\x</code> 在 LaTEX 里面有特殊含义，但是 JavaScript 将它们转义了。</p><p>为了解决这个问题，ES2018 <a href="https://tc39.github.io/proposal-template-literal-revision/" target="_blank" rel="noopener noreferrer">放松</a>了对标签模板里面的字符串转义的限制。如果遇到不合法的字符串转义，就返回 <code>undefined</code>，而不是报错，并且从 <code>raw</code> 属性上面可以得到原始字符串。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> tag</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">strs</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  strs</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">===</span><span style="color:#81A1C1;"> undefined;</span></span>
<span class="line"><span style="color:#D8DEE9;">  strs</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">raw</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">unicode and </span><span style="color:#EBCB8B;">\\\\</span><span style="color:#A3BE8C;">u{55}</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#88C0D0;">tag</span><span style="color:#ECEFF4;">\`</span><span style="color:#EBCB8B;">\\u</span><span style="color:#A3BE8C;">nicode and </span><span style="color:#EBCB8B;">\\u{55}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了，JavaScript 引擎将第一个字符设置为 <code>undefined</code>，但是 <code>raw</code> 属性依然可以得到原始字符串，因此 <code>tag</code> 函数还是可以对原字符串进行处理。</p><p>注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> bad</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">bad escape sequence: </span><span style="color:#EBCB8B;">\\u</span><span style="color:#A3BE8C;">nicode</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 报错</span></span></code></pre></div>`,195);function r(E,y){return a(),n("div",null,[t,l(" more "),c])}const F=s(e,[["render",r],["__file","string.html.vue"]]),C=JSON.parse('{"path":"/code/language/js/es6/string.html","title":"字符串的扩展","lang":"zh-CN","frontmatter":{"title":"字符串的扩展","icon":"string","author":"阮一峰","date":"2019-10-21T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"ES6 加强了对 Unicode 的支持，并且扩展了字符串对象。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/es6/string.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"字符串的扩展"}],["meta",{"property":"og:description","content":"ES6 加强了对 Unicode 的支持，并且扩展了字符串对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串的扩展\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"字符的 Unicode 表示法","slug":"字符的-unicode-表示法","link":"#字符的-unicode-表示法","children":[]},{"level":2,"title":"codePointAt()","slug":"codepointat","link":"#codepointat","children":[]},{"level":2,"title":"String.fromCodePoint()","slug":"string-fromcodepoint","link":"#string-fromcodepoint","children":[]},{"level":2,"title":"字符串的遍历器接口","slug":"字符串的遍历器接口","link":"#字符串的遍历器接口","children":[]},{"level":2,"title":"normalize()","slug":"normalize","link":"#normalize","children":[]},{"level":2,"title":"includes(), startsWith(), endsWith()","slug":"includes-startswith-endswith","link":"#includes-startswith-endswith","children":[]},{"level":2,"title":"repeat()","slug":"repeat","link":"#repeat","children":[]},{"level":2,"title":"padStart()，padEnd()","slug":"padstart-padend","link":"#padstart-padend","children":[]},{"level":2,"title":"matchAll()","slug":"matchall","link":"#matchall","children":[]},{"level":2,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]},{"level":2,"title":"实例: 模板编译","slug":"实例-模板编译","link":"#实例-模板编译","children":[]},{"level":2,"title":"标签模板","slug":"标签模板","link":"#标签模板","children":[]},{"level":2,"title":"String.raw()","slug":"string-raw","link":"#string-raw","children":[]},{"level":2,"title":"模板字符串的限制","slug":"模板字符串的限制","link":"#模板字符串的限制","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":9},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":19.46,"words":5838},"filePathRelative":"code/language/js/es6/string.md","localizedDate":"2019年10月21日","excerpt":"<p>ES6 加强了对 Unicode 的支持，并且扩展了字符串对象。</p>\\n","autoDesc":true}');export{F as comp,C as data};
