import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as n,f as a,e,b as o,o as t}from"./app-K4WwjAaR.js";const c={};function r(E,s){return t(),p("div",null,[s[0]||(s[0]=n("p",null,[a("面向对象最重要的概念就是类 (Class) 和实例 (Instance) ，必须牢记类是抽象的模板，比如 "),n("code",null,"Student"),a(" 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。")],-1)),e(" more "),s[1]||(s[1]=o(`<p>仍以 <code>Student</code> 类为例，在 Python 中，定义类是通过 class 关键字:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    pass</span></span></code></pre></div><p>class 后面紧接着是类名，即 <code>Student</code>，类名通常是大写开头的单词，紧接着是(object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用 object 类，这是所有类最终都会继承的类。</p><p>定义好了 <code>Student</code> 类，就可以根据 <code>Student</code> 类创建出 <code>Student</code> 的实例，创建实例是通过 <code>className()</code> 实现的:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">__main__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Student </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">10a67a590</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> Student</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">__main__.Student</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>可以看到，变量 <code>bart</code> 指向的就是一个 Student 的实例，后面的 <code>0x10a67a590</code> 是内存地址，每个 object 的地址都不一样，而 <code>Student</code> 本身则是一个类。</p><p>可以自由地给一个实例变量绑定属性，比如，给实例 <code>bart</code> 绑定一个 <code>name</code> 属性:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Bart Simpson</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Bart Simpson</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的 <strong>init</strong> 方法，在创建实例的时候，就把 <code>name</code>，<code>score</code> 等属性绑上去:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> score</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> score</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>特殊方法 <code>__init__</code> 前后分别有两个下划线!!!</p></div><p>由于 <strong>init</strong> 方法的第一个参数永远是 <code>self</code>，表示创建的实例本身，因此，在 <strong>init</strong> 方法内部，就可以把各种属性绑定到 <code>self</code>，因为 <code>self</code> 就指向创建的实例本身。</p><p>有了 <strong>init</strong> 方法，在创建实例的时候，就不能传入空的参数了，必须传入与 <strong>init</strong> 方法匹配的参数，但 self 不需要传，Python 解释器自己会把实例变量传进去:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Bart Simpson</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 59</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Bart Simpson</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score</span></span>
<span class="line"><span style="color:#B48EAD;">59</span></span></code></pre></div><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量 self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，您仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h2 id="数据封装" tabindex="-1"><a class="header-anchor" href="#数据封装"><span>数据封装</span></a></h2><p>面向对象编程的一个重要特点就是数据封装。在上面的 Student 类中，每个实例就拥有各自的 name 和 score 这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> print_score</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">std</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">: </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">std</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> std</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print_score</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">bart</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Bart Simpson</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 59</span></span></code></pre></div><p>但是，既然 Student 实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在 Student 类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和 Student 类本身是关联起来的，我们称之为类的方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> score</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> score</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> print_score</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">: </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score</span><span style="color:#ECEFF4;">))</span></span></code></pre></div><p>要定义一个方法，除了第一个参数是 self 外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了 self 不用传递，其他参数正常传入:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">print_score</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Bart Simpson</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 59</span></span></code></pre></div><p>这样一来，我们从外部看 Student 类，就只需要知道，创建实例需要给出 name 和 score，而如何打印，都是在 Student 类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><p>封装的另一个好处是可以给 Student 类增加新的方法，比如 get_grade:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> get_grade</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 90</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">A</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">        elif</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 60</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">B</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">        else</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">C</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，get_grade 方法可以直接在实例变量上调用，不需要知道内部实现细节:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> score</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> score</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> get_grade</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 90</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">A</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">        elif</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 60</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">B</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">        else</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">C</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">lisa </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Lisa</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 99</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">bart </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Bart</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 59</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">lisa</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> lisa</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get_grade</span><span style="color:#ECEFF4;">())</span></span>
<span class="line"><span style="color:#616E88;"># Lisa A</span></span>
<span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get_grade</span><span style="color:#ECEFF4;">())</span></span>
<span class="line"><span style="color:#616E88;"># Bart C</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例属性和类属性" tabindex="-1"><a class="header-anchor" href="#实例属性和类属性"><span>实例属性和类属性</span></a></h2><p>由于 Python 是动态语言，根据类创建的实例可以任意绑定属性。</p><p>给实例绑定属性的方法是通过实例变量，或者通过 <code>self</code> 变量:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Bob</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 90</span></span></code></pre></div><p>但是，如果 <code>Student</code> 类本身需要绑定一个属性呢？可以直接在 class 中定义属性，这种属性是类属性，归 <code>Student</code> 类所有:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Student</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Student</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;"> # 创建实例s</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Student</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 打印类的name属性</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Student</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#616E88;"> # 给实例绑定name属性</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Michael</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 但是类属性并未消失，用Student.name仍然可以访问</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Student</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> del</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#616E88;"># 如果删除实例的name属性</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Student</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的例子可以看出，在编写程序的时候，千万<strong>不要对实例属性和类属性使用相同的名字</strong>，因为相同名称的实例属性将屏蔽掉类属性，但是当您删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><ul><li><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p></li><li><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p></li><li><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p></li><li><p>和静态语言不同，Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Bart Simpson</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 59</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> lisa </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Lisa Simpson</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 87</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">age </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 8</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> bart</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">age</span></span>
<span class="line"><span style="color:#B48EAD;">8</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> lisa</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">age</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">AttributeError</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Student</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#88C0D0;"> object</span><span style="color:#D8DEE9FF;"> has no attribute </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">age</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div></li><li><p>实例属性属于各个实例所有，互不干扰；</p></li><li><p>类属性属于类所有，所有实例共享一个属性；</p></li><li><p>不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。</p></li></ul>`,38))])}const i=l(c,[["render",r],["__file","instance.html.vue"]]),d=JSON.parse('{"path":"/code/language/python/oop/instance.html","title":"类和实例","lang":"zh-CN","frontmatter":{"title":"类和实例","author":"廖雪峰","icon":"class","date":"2021-03-28T00:00:00.000Z","category":"Python","description":"面向对象最重要的概念就是类 (Class) 和实例 (Instance) ，必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/python/oop/instance.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"类和实例"}],["meta",{"property":"og:description","content":"面向对象最重要的概念就是类 (Class) 和实例 (Instance) ，必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-14T07:19:43.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2021-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-14T07:19:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类和实例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-14T07:19:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"数据封装","slug":"数据封装","link":"#数据封装","children":[]},{"level":2,"title":"实例属性和类属性","slug":"实例属性和类属性","link":"#实例属性和类属性","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1616944982000,"updatedTime":1720941583000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":2},{"name":"Mister-Hope","email":"zhangbowang1998@gmail.com","commits":1},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":5.98,"words":1794},"filePathRelative":"code/language/python/oop/instance.md","localizedDate":"2021年3月28日","excerpt":"<p>面向对象最重要的概念就是类 (Class) 和实例 (Instance) ，必须牢记类是抽象的模板，比如 <code>Student</code> 类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\\n","autoDesc":true}');export{i as comp,d as data};
