const e=JSON.parse('{"key":"v-5edb8acc","path":"/code/language/typescript/advanced/generics.html","title":"泛型","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"泛型","icon":"generic","category":"TypeScript","description":"泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 简单的例子 首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值: 上例中，我们使用了来定义返回值的类型。 这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/typescript/advanced/generics.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。 简单的例子 首先，我们来实现一个函数 createArray，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值: 上例中，我们使用了来定义返回值的类型。 这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"简单的例子","slug":"简单的例子","link":"#简单的例子","children":[]},{"level":2,"title":"多个类型参数","slug":"多个类型参数","link":"#多个类型参数","children":[]},{"level":2,"title":"泛型约束","slug":"泛型约束","link":"#泛型约束","children":[]},{"level":2,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":2,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":2,"title":"泛型参数的默认类型","slug":"泛型参数的默认类型","link":"#泛型参数的默认类型","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":3},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":4.07,"words":1222},"filePathRelative":"code/language/typescript/advanced/generics.md","localizedDate":"2020年5月4日","excerpt":"<p>泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>\\n","autoDesc":true}');export{e as data};
