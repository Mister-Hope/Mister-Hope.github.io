import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o}from"./app-K4WwjAaR.js";const e={};function p(t,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h2 id="管理修改" tabindex="-1"><a class="header-anchor" href="#管理修改"><span>管理修改</span></a></h2><p>Git 比其他版本控制系统设计得优秀，因为 Git 跟踪并管理的是修改，而非文件。</p><p>您会问，什么是修改? 比如您新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p><p>为什么说 Git 管理的是修改，而不是文件呢? 我们还是做实验。第一步，对 readme.txt 做一个修改，比如加一行内容:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> cat</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> under</span><span style="color:#A3BE8C;"> the</span><span style="color:#A3BE8C;"> GPL.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> has</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> mutable</span><span style="color:#A3BE8C;"> index</span><span style="color:#A3BE8C;"> called</span><span style="color:#A3BE8C;"> stage.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes.</span></span></code></pre></div><p>然后，添加:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> add</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#616E88;"># nothing</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">  On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">  Changes</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed:</span></span>
<span class="line"><span style="color:#ECEFF4;">    (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git reset HEAD &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> unstage</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">        modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span></code></pre></div><p>然后，再修改 readme.txt:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> cat</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> under</span><span style="color:#A3BE8C;"> the</span><span style="color:#A3BE8C;"> GPL.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> has</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> mutable</span><span style="color:#A3BE8C;"> index</span><span style="color:#A3BE8C;"> called</span><span style="color:#A3BE8C;"> stage.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> of</span><span style="color:#A3BE8C;"> files.</span></span></code></pre></div><p>提交:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> commit</span><span style="color:#A3BE8C;"> -m</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git tracks changes</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">master 519219b</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> git tracks changes</span></span>
<span class="line"><span style="color:#88C0D0;"> 1</span><span style="color:#A3BE8C;"> file</span><span style="color:#A3BE8C;"> changed,</span><span style="color:#B48EAD;"> 1</span><span style="color:#A3BE8C;"> insertion</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">+</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>提交后，再看看状态:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> not</span><span style="color:#A3BE8C;"> staged</span><span style="color:#A3BE8C;"> for</span><span style="color:#A3BE8C;"> commit:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git add &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> update</span><span style="color:#A3BE8C;"> what</span><span style="color:#A3BE8C;"> will</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git checkout -- &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> discard</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> in</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> directory</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">no</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> added</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> commit</span><span style="color:#D8DEE9FF;"> (use </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">git add</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> and/or</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git commit -a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span></code></pre></div><p>怎么第二次的修改没有被提交? 我们回顾一下操作过程:</p><p>第一次修改 → <code>git add</code> → 第二次修改 → <code>git commit</code></p><p>您看，我们前面讲了，Git 管理的是修改，当您用 <code>git add</code> 命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code> 只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>提交后，用 <code>git diff HEAD -- readme.txt</code> 命令可以查看工作区和版本库里面最新版本的区别:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> diff</span><span style="color:#A3BE8C;"> HEAD</span><span style="color:#A3BE8C;"> --</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">diff</span><span style="color:#A3BE8C;"> --git</span><span style="color:#A3BE8C;"> a/readme.txt</span><span style="color:#A3BE8C;"> b/readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">index</span><span style="color:#A3BE8C;"> 76d770f..a9c5755</span><span style="color:#B48EAD;"> 100644</span></span>
<span class="line"><span style="color:#88C0D0;">---</span><span style="color:#A3BE8C;"> a/readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">+++</span><span style="color:#A3BE8C;"> b/readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">@@</span><span style="color:#A3BE8C;"> -1,4</span><span style="color:#A3BE8C;"> +1,4</span><span style="color:#A3BE8C;"> @@</span></span>
<span class="line"><span style="color:#88C0D0;"> Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;"> Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> under</span><span style="color:#A3BE8C;"> the</span><span style="color:#A3BE8C;"> GPL.</span></span>
<span class="line"><span style="color:#88C0D0;"> Git</span><span style="color:#A3BE8C;"> has</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> mutable</span><span style="color:#A3BE8C;"> index</span><span style="color:#A3BE8C;"> called</span><span style="color:#A3BE8C;"> stage.</span></span>
<span class="line"><span style="color:#88C0D0;">-Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes.</span></span>
<span class="line"><span style="color:#88C0D0;">+Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> of</span><span style="color:#A3BE8C;"> files.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，第二次修改确实没有被提交。</p><p>那怎么提交第二次修改呢? 您可以继续 <code>git add</code> 再 <code>git commit</code>，也可以别着急提交第一次修改，先 <code>git add</code> 第二次修改，再 <code>git commit</code>，就相当于把两次修改合并后一块提交了:</p><p>第一次修改 → <code>git add</code> → 第二次修改 → <code>git add</code> → <code>git commit</code></p><p>好，现在，把第二次修改提交了，然后开始小结。</p><h3 id="管理小结" tabindex="-1"><a class="header-anchor" href="#管理小结"><span>管理小结</span></a></h3><p>现在，您又理解了 Git 是如何跟踪修改的，每次修改，如果不用 <code>git add</code> 到暂存区，那就不会加入到 <code>commit</code> 中。</p><h2 id="撤消对文件的修改" tabindex="-1"><a class="header-anchor" href="#撤消对文件的修改"><span>撤消对文件的修改</span></a></h2><p>自然，您是不会犯错的。不过现在是凌晨两点，您正在赶一份工作报告，您在 readme.txt 中添加了一行:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> cat</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> under</span><span style="color:#A3BE8C;"> the</span><span style="color:#A3BE8C;"> GPL.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> has</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> mutable</span><span style="color:#A3BE8C;"> index</span><span style="color:#A3BE8C;"> called</span><span style="color:#A3BE8C;"> stage.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> of</span><span style="color:#A3BE8C;"> files.</span></span>
<span class="line"><span style="color:#88C0D0;">My</span><span style="color:#A3BE8C;"> stupid</span><span style="color:#A3BE8C;"> boss</span><span style="color:#A3BE8C;"> still</span><span style="color:#A3BE8C;"> prefers</span><span style="color:#A3BE8C;"> SVN.</span></span></code></pre></div><p>在您准备提交前，一杯咖啡起了作用，您猛然发现了 <code>&#39;stupid boss&#39;</code> 可能会让您丢掉这个月的奖金!</p><p>既然错误发现得很及时，就可以很容易地纠正它。您可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用 <code>git status</code> 查看一下:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> not</span><span style="color:#A3BE8C;"> staged</span><span style="color:#A3BE8C;"> for</span><span style="color:#A3BE8C;"> commit:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git add &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> update</span><span style="color:#A3BE8C;"> what</span><span style="color:#A3BE8C;"> will</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git checkout -- &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> discard</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> in</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> directory</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">no</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> added</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> commit</span><span style="color:#D8DEE9FF;"> (use </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">git add</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> and/or</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git commit -a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span></code></pre></div><p>您可以发现，Git 会告诉您，<code>git checkout -- &lt;file&gt;</code> 可以丢弃工作区的修改:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> checkout</span><span style="color:#A3BE8C;"> --</span><span style="color:#A3BE8C;"> readme.txt</span></span></code></pre></div><p>命令 <code>git checkout -- readme.txt</code> 意思就是，把 readme.txt 文件在工作区的修改全部撤销，这里有两种情况:</p><p>一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p><p>现在，看看 readme.txt 的文件内容:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> cat</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> under</span><span style="color:#A3BE8C;"> the</span><span style="color:#A3BE8C;"> GPL.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> has</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> mutable</span><span style="color:#A3BE8C;"> index</span><span style="color:#A3BE8C;"> called</span><span style="color:#A3BE8C;"> stage.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> of</span><span style="color:#A3BE8C;"> files.</span></span></code></pre></div><p>文件内容果然复原了。</p><p><code>git checkout -- file</code> 命令中的 <code>--</code> 很重要，没有 <code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到 <code>git checkout</code> 命令。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请务必记得 <code>git checkout -- &lt;file&gt;</code> 是一个危险的命令。您对那个文件在本地的任何修改都会消失——Git 会用最近提交的版本覆盖掉它。</p><p>除非您确实清楚不想要对那个文件的本地修改了，否则请不要使用这个命令。</p></div><h2 id="取消暂存的文件" tabindex="-1"><a class="header-anchor" href="#取消暂存的文件"><span>取消暂存的文件</span></a></h2><p>现在假定是凌晨 3 点，您不但写了一些胡话，还 <code>git add</code> 到暂存区了:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> cat</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> version</span><span style="color:#A3BE8C;"> control</span><span style="color:#A3BE8C;"> system.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> free</span><span style="color:#A3BE8C;"> software</span><span style="color:#A3BE8C;"> distributed</span><span style="color:#A3BE8C;"> under</span><span style="color:#A3BE8C;"> the</span><span style="color:#A3BE8C;"> GPL.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> has</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> mutable</span><span style="color:#A3BE8C;"> index</span><span style="color:#A3BE8C;"> called</span><span style="color:#A3BE8C;"> stage.</span></span>
<span class="line"><span style="color:#88C0D0;">Git</span><span style="color:#A3BE8C;"> tracks</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> of</span><span style="color:#A3BE8C;"> files.</span></span>
<span class="line"><span style="color:#88C0D0;">My</span><span style="color:#A3BE8C;"> stupid</span><span style="color:#A3BE8C;"> boss</span><span style="color:#A3BE8C;"> still</span><span style="color:#A3BE8C;"> prefers</span><span style="color:#A3BE8C;"> SVN.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> add</span><span style="color:#A3BE8C;"> readme.txt</span></span></code></pre></div><p>庆幸的是，在 <code>commit</code> 之前，您发现了这个问题。用 <code>git status</code> 查看一下，修改只是添加到了暂存区，还没有提交:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git reset HEAD &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> unstage</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span></code></pre></div><p>Git 同样告诉我们，用命令 <code>git reset HEAD &lt;file&gt;</code> 可以把暂存区的修改撤销掉(unstage)，重新放回工作区:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> reset</span><span style="color:#A3BE8C;"> HEAD</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"><span style="color:#88C0D0;">Unstaged</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> after</span><span style="color:#A3BE8C;"> reset:</span></span>
<span class="line"><span style="color:#88C0D0;">M</span><span style="color:#A3BE8C;">    readme.txt</span></span></code></pre></div><p><code>git reset</code> 命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用 <code>HEAD</code> 时，表示当前的指针(最新的版本)。</p><p>再用 <code>git status</code> 查看一下，现在暂存区是干净的，工作区有修改:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> not</span><span style="color:#A3BE8C;"> staged</span><span style="color:#A3BE8C;"> for</span><span style="color:#A3BE8C;"> commit:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git add &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> update</span><span style="color:#A3BE8C;"> what</span><span style="color:#A3BE8C;"> will</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git checkout -- &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> discard</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> in</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> directory</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    modified:</span><span style="color:#A3BE8C;">   readme.txt</span></span></code></pre></div><p>还记得如何丢弃工作区的修改吗?</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> checkout</span><span style="color:#A3BE8C;"> --</span><span style="color:#A3BE8C;"> readme.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">nothing</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> commit,</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> tree</span><span style="color:#A3BE8C;"> clean</span></span></code></pre></div><p>整个世界终于清静了!</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>那么如果您想要丢弃工作区和暂存区全部更改呢? 不要忘了 <code>HEAD</code> 就是当前指针，所以</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> reset</span><span style="color:#A3BE8C;"> --hard</span><span style="color:#A3BE8C;"> HEAD</span></span></code></pre></div><p>就是丢弃工作区与暂存区的全部文件啦。</p></div><p>现在，假设您不但改错了东西，还从暂存区提交到了版本库，怎么办呢? 还记得版本回退一节吗? 可以回退到上一个版本。不过，这是有条件的，就是您还没有把自己的本地版本库推送到远程。还记得 Git 是分布式版本控制系统吗? 我们后面会讲到远程版本库，一旦您把 <code>stupid boss</code> 提交推送到远程版本库，您就真的惨了……</p><h3 id="撤销小结" tabindex="-1"><a class="header-anchor" href="#撤销小结"><span>撤销小结</span></a></h3><p>场景 1: 当您改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- file</code>。</p><p>场景 2: 当您不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;file&gt;</code>，就回到了场景 1，第二步按场景 1 操作。</p><p>场景 3: 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><hr><h2 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件"><span>删除文件</span></a></h2><h3 id="如何删除文件" tabindex="-1"><a class="header-anchor" href="#如何删除文件"><span>如何删除文件</span></a></h3><p>在 Git 中，删除也是一个修改操作，我们实战一下，先添加一个新文件 test.txt 到 Git 并且提交:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> add</span><span style="color:#A3BE8C;"> test.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> commit</span><span style="color:#A3BE8C;"> -m</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">add test.txt</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">master b84166e</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> add test.txt</span></span>
<span class="line"><span style="color:#88C0D0;"> 1</span><span style="color:#A3BE8C;"> file</span><span style="color:#A3BE8C;"> changed,</span><span style="color:#B48EAD;"> 1</span><span style="color:#A3BE8C;"> insertion</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">+</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;"> create</span><span style="color:#A3BE8C;"> mode</span><span style="color:#B48EAD;"> 100644</span><span style="color:#A3BE8C;"> test.txt</span></span></code></pre></div><p>一般情况下，您通常直接在文件管理器中把没用的文件删了，或者用 <code>rm</code> 命令删了:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">rm</span><span style="color:#A3BE8C;"> test.txt</span></span></code></pre></div><p>这个时候，Git 知道您删除了文件，因此，工作区和版本库就不一致了，<code>git status</code> 命令会立刻告诉您哪些文件被删除了:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> status</span></span>
<span class="line"><span style="color:#88C0D0;">On</span><span style="color:#A3BE8C;"> branch</span><span style="color:#A3BE8C;"> master</span></span>
<span class="line"><span style="color:#88C0D0;">Changes</span><span style="color:#A3BE8C;"> not</span><span style="color:#A3BE8C;"> staged</span><span style="color:#A3BE8C;"> for</span><span style="color:#A3BE8C;"> commit:</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git add/rm &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> update</span><span style="color:#A3BE8C;"> what</span><span style="color:#A3BE8C;"> will</span><span style="color:#A3BE8C;"> be</span><span style="color:#A3BE8C;"> committed</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#88C0D0;">use</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git checkout -- &lt;file&gt;...</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> discard</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> in</span><span style="color:#A3BE8C;"> working</span><span style="color:#A3BE8C;"> directory</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    deleted:</span><span style="color:#A3BE8C;">    test.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">no</span><span style="color:#A3BE8C;"> changes</span><span style="color:#A3BE8C;"> added</span><span style="color:#A3BE8C;"> to</span><span style="color:#A3BE8C;"> commit</span><span style="color:#D8DEE9FF;"> (use </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">git add</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;"> and/or</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">git commit -a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span></code></pre></div><p>现在您有两个选择，一是确实要从版本库中删除该文件，那就用命令 <code>git rm</code> 删掉，并且 <code>git commit</code>:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> rm</span><span style="color:#A3BE8C;"> test.txt</span></span>
<span class="line"><span style="color:#88C0D0;">rm</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">test.txt</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> git</span><span style="color:#A3BE8C;"> commit</span><span style="color:#A3BE8C;"> -m</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">remove test.txt</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">master d46f35e</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;"> remove test.txt</span></span>
<span class="line"><span style="color:#88C0D0;"> 1</span><span style="color:#A3BE8C;"> file</span><span style="color:#A3BE8C;"> changed,</span><span style="color:#B48EAD;"> 1</span><span style="color:#A3BE8C;"> deletion</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">-</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;"> delete</span><span style="color:#A3BE8C;"> mode</span><span style="color:#B48EAD;"> 100644</span><span style="color:#A3BE8C;"> test.txt</span></span></code></pre></div><p>现在，文件就从版本库中被删除了。</p><h3 id="撤销删除" tabindex="-1"><a class="header-anchor" href="#撤销删除"><span>撤销删除</span></a></h3><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本:</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> checkout</span><span style="color:#A3BE8C;"> --</span><span style="color:#A3BE8C;"> test.txt</span></span></code></pre></div><p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h3 id="删除小结" tabindex="-1"><a class="header-anchor" href="#删除小结"><span>删除小结</span></a></h3><p>命令 <code>git rm</code> 用于删除一个文件。如果一个文件已经被提交到版本库，那么您永远不用担心误删，但是要小心，您只能恢复文件到最新版本，您会丢失最近一次提交后您修改的内容。</p>`,78)]))}const i=a(e,[["render",p],["__file","change.html.vue"]]),y=JSON.parse('{"path":"/software/git/change.html","title":"修改管理","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"修改管理","icon":"change","order":8,"author":"廖雪峰","category":"Git","tag":["Git","软件"],"copyright":"Copyright by 廖雪峰 Edited by Mr.Hope","description":"管理修改 Git 比其他版本控制系统设计得优秀，因为 Git 跟踪并管理的是修改，而非文件。 您会问，什么是修改? 比如您新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。 为什么说 Git 管理的是修改，而不是文件呢? 我们还是做实验。第一步，对 r...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/software/git/change.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"修改管理"}],["meta",{"property":"og:description","content":"管理修改 Git 比其他版本控制系统设计得优秀，因为 Git 跟踪并管理的是修改，而非文件。 您会问，什么是修改? 比如您新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。 为什么说 Git 管理的是修改，而不是文件呢? 我们还是做实验。第一步，对 r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"软件"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"修改管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"管理修改","slug":"管理修改","link":"#管理修改","children":[{"level":3,"title":"管理小结","slug":"管理小结","link":"#管理小结","children":[]}]},{"level":2,"title":"撤消对文件的修改","slug":"撤消对文件的修改","link":"#撤消对文件的修改","children":[]},{"level":2,"title":"取消暂存的文件","slug":"取消暂存的文件","link":"#取消暂存的文件","children":[{"level":3,"title":"撤销小结","slug":"撤销小结","link":"#撤销小结","children":[]}]},{"level":2,"title":"删除文件","slug":"删除文件","link":"#删除文件","children":[{"level":3,"title":"如何删除文件","slug":"如何删除文件","link":"#如何删除文件","children":[]},{"level":3,"title":"撤销删除","slug":"撤销删除","link":"#撤销删除","children":[]},{"level":3,"title":"删除小结","slug":"删除小结","link":"#删除小结","children":[]}]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":10},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":2}]},"readingTime":{"minutes":7.86,"words":2357},"filePathRelative":"software/git/change.md","localizedDate":"2020年5月4日","excerpt":"","autoDesc":true}');export{i as comp,y as data};
