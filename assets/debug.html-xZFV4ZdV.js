import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as s,c as i,d as e,e as a,a as r,b as c}from"./app-W9Dk-dRG.js";const d="/assets/configure-debug-PdbPbiLa.gif",l="/assets/node-debug-xhFVQaLi.gif",g="/assets/debug-data-inspection-mtUUeJla.gif",p={},h=e("h2",{id:"配置调试器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置调试器"},[e("span",null,"配置调试器")])],-1),_=e("code",null,"Ctrl + Shift + P",-1),f=e("strong",null,"调试: 打开 launch.json",-1),u=e("code",null,"launch.json",-1),b={href:"https://code.visualstudio.com/docs/editor/debugging",target:"_blank",rel:"noopener noreferrer"},m=c('<figure><img src="'+d+'" alt="配置调试" tabindex="0" loading="lazy"><figcaption>配置调试</figcaption></figure><h2 id="断点并逐步执行" tabindex="-1"><a class="header-anchor" href="#断点并逐步执行"><span>断点并逐步执行</span></a></h2><p>在行号旁边放置断点。使用 <strong>调试</strong> 小部件向前导航。</p><figure><img src="'+l+'" alt="调试" tabindex="0" loading="lazy"><figcaption>调试</figcaption></figure><h2 id="数据检查" tabindex="-1"><a class="header-anchor" href="#数据检查"><span>数据检查</span></a></h2><p>在 <strong>运行</strong> 面板和控制台中检查变量。</p><figure><img src="'+g+'" alt="数据检查" tabindex="0" loading="lazy"><figcaption>数据检查</figcaption></figure><h2 id="内嵌值" tabindex="-1"><a class="header-anchor" href="#内嵌值"><span>内嵌值</span></a></h2><p>您可以设置 <code>&quot;debug.inlineValues&quot;: true</code> 在调试器中内联查看变量值。此功能开销很大，并且可能会减慢步进速度，因此默认情况下禁用此功能。</p><h2 id="log-points" tabindex="-1"><a class="header-anchor" href="#log-points"><span>Log Points</span></a></h2><p>日志点的行为很像断点，但它们不会在命中时暂停调试器，而是在控制台中记录一条消息。日志点对于调试无法修改或暂停的生产服务器时注入日志特别有用。</p><p>使用左侧编辑器装订线中的 <strong>添加日志点</strong> 命令添加日志点，该日志点将显示为 🔸 形状的图标。日志消息是纯文本，但可以包含要在花括号(&#39;{}&#39;)中计算的表达式。</p>',12);function x(N,V){const n=t("ExternalLinkIcon");return s(),i("div",null,[h,e("p",null,[a("打开命令面板("),_,a(")，然后选择 "),f,a("，这将提示您选择与项目(Node.js，Python，C ++等)匹配的环境。这将生成一个 "),u,a(" 文件。Node.js 支持是内置的，其他环境要求安装适当的语言扩展。有关更多详细信息，请参见 "),e("a",b,[a("调试文档"),r(n)]),a("。")]),m])}const P=o(p,[["render",x],["__file","debug.html.vue"]]);export{P as default};
