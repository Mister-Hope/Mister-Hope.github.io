import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as l,e as p,b as o,o as e}from"./app-K4WwjAaR.js";const t={};function r(c,s){return e(),n("div",null,[s[0]||(s[0]=l("p",null,"如果给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或 tuple，这种遍历我们称为迭代(Iteration)。",-1)),p(" more "),s[1]||(s[1]=o(`<p>在 Python 中，迭代是通过 <code>for ... in</code> 来完成的，而很多语言比如 C 语言，迭代 list 是通过下标完成的，比如 Java 代码:</p><div class="language-java" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">for</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">i</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    n </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> list</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">i</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>可以看出，Python 的 for 循环抽象程度要高于 C 的 for 循环，因为 Python 的 for 循环不仅可以用在 list 或 tuple 上，还可以作用在其他可迭代对象上。</p><p>list 这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如 dict 就可以迭代:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> d </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">c</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> key </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> d</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">a</span></span>
<span class="line"><span style="color:#D8DEE9FF;">c</span></span>
<span class="line"><span style="color:#D8DEE9FF;">b</span></span></code></pre></div><p>因为 dict 的存储不是按照 list 的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p><p>默认情况下，dict 迭代的是 key。如果要迭代 value，可以用 <code>for value in d.values()</code>，如果要同时迭代 key 和 value，可以用 for k, v in d.items()。</p><p>由于字符串也是可迭代对象，因此，也可以作用于 for 循环:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> ch </span><span style="color:#81A1C1;">in</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">ABC</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">ch</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">A</span></span>
<span class="line"><span style="color:#D8DEE9FF;">B</span></span>
<span class="line"><span style="color:#D8DEE9FF;">C</span></span></code></pre></div><p>所以，当我们使用 for 循环时，只要作用于一个可迭代对象，for 循环就可以正常运行，而我们不太关心该对象究竟是 list 还是其他数据类型。</p><p>那么，如何判断一个对象是可迭代对象呢? 方法是通过 collections 模块的 Iterable 类型判断:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> from</span><span style="color:#D8DEE9FF;"> collections </span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> Iterable</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Iterable</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # str是否可迭代</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">],</span><span style="color:#D8DEE9FF;"> Iterable</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # list是否可迭代</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">123</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Iterable</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # 整数是否可迭代</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span></code></pre></div><p>最后一个小问题，如果要对 list 实现类似 Java 那样的下标循环怎么办? Python 内置的 <code>enumerate</code> 函数可以把一个 list 变成索引-元素对，这样就可以在 for 循环中同时迭代索引和元素本身:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> i</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> value </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> enumerate</span><span style="color:#ECEFF4;">([</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">A</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">B</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">C</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">]):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">i</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> value</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;"> A</span></span>
<span class="line"><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;"> B</span></span>
<span class="line"><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;"> C</span></span></code></pre></div><p>上面的 for 循环里，同时引用了两个变量，在 Python 里是很常见的，比如下面的代码:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> y </span><span style="color:#81A1C1;">in</span><span style="color:#ECEFF4;"> [(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">),</span><span style="color:#ECEFF4;"> (</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">),</span><span style="color:#ECEFF4;"> (</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#ECEFF4;">)]:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> y</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#B48EAD;">1</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#B48EAD;">2</span><span style="color:#B48EAD;"> 4</span></span>
<span class="line"><span style="color:#B48EAD;">3</span><span style="color:#B48EAD;"> 9</span></span></code></pre></div><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>任何可迭代对象都可以作用于 for 循环，包括我们自定义的数据类型，只要符合迭代条件，就可以使用 for 循环。</p>`,18))])}const i=a(t,[["render",r],["__file","iteration.html.vue"]]),F=JSON.parse('{"path":"/code/language/python/advance/iteration.html","title":"迭代","lang":"zh-CN","frontmatter":{"title":"迭代","icon":"refresh","author":"廖雪峰","date":"2020-05-28T00:00:00.000Z","category":"Python","description":"如果给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或 tuple，这种遍历我们称为迭代(Iteration)。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/python/advance/iteration.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"迭代"}],["meta",{"property":"og:description","content":"如果给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或 tuple，这种遍历我们称为迭代(Iteration)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2020-05-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"迭代\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":4},{"name":"Mister-Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"code/language/python/advance/iteration.md","localizedDate":"2020年5月28日","excerpt":"<p>如果给定一个 list 或 tuple，我们可以通过 for 循环来遍历这个 list 或 tuple，这种遍历我们称为迭代(Iteration)。</p>\\n","autoDesc":true}');export{i as comp,F as data};
