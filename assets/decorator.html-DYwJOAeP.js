import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,b as l}from"./app-DBDndcYm.js";const o={},p=l(`<h2 id="类的修饰" tabindex="-1"><a class="header-anchor" href="#类的修饰"><span>类的修饰</span></a></h2><p>许多面向对象的语言都有修饰器(Decorator)函数，用来修改类的行为。目前，有一个<a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noopener noreferrer">提案</a>将这项功能，引入了 ECMAScript。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@testable</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyTestableClass</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> testable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  target</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">MyTestableClass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>@testable</code> 就是一个修饰器。它修改了 <code>MyTestableClass</code> 这个类的行为，为它加上了静态属性 <code>isTestable</code>。<code>testable</code> 函数的参数 <code>target</code> 是 <code>MyTestableClass</code> 类本身。</p><p>基本上，修饰器的行为就是下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@decorator</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> A</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> A</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#D8DEE9;">A</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> decorator</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">A</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">||</span><span style="color:#D8DEE9;"> A</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>也就是说，修饰器是一个对类进行处理的函数。修饰器函数的第一个参数，就是所要修饰的目标类。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> testable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，<code>testable</code> 函数的参数 <code>target</code>，就是会被修饰的类。</p><p>如果觉得一个参数不够用，可以在修饰器外面再封装一层函数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> testable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    target</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> isTestable</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@testable</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyTestableClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#D8DEE9;">MyTestableClass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@testable</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">false</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#D8DEE9;">MyClass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，修饰器 <code>testable</code> 可以接受参数，这就等于可以修改修饰器的行为。</p><p>注意，修饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，修饰器能在编译阶段运行代码。也就是说，修饰器本质就是编译时执行的函数。</p><p>前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的 <code>prototype</code> 对象操作。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> testable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#8FBCBB;">  target</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@testable</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyTestableClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyTestableClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">isTestable</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p>上面代码中，修饰器函数 <code>testable</code> 是在目标类的 <code>prototype</code> 对象上添加属性，因此就可以在实例上调用。</p><p>下面是另外一个例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// mixins.js</span></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> mixins</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    Object</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">assign</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">target</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">list</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// main.js</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> mixins</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./mixins</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> Foo</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@mixins</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">Foo</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;foo&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码通过修饰器 <code>mixins</code>，把 <code>Foo</code> 对象的方法添加到了 <code>MyClass</code> 的实例上面。可以用 <code>Object.assign()</code> 模拟这个功能。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> Foo</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">Object</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">assign</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">MyClass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Foo</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;foo&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际开发中，React 与 Redux 库结合使用时，常常需要写成下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyReactComponent</span><span style="color:#81A1C1;"> extends</span><span style="color:#D8DEE9FF;"> React</span><span style="color:#ECEFF4;">.</span><span style="color:#8FBCBB;font-weight:bold;">Component</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> default</span><span style="color:#88C0D0;"> connect</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">mapStateToProps</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> mapDispatchToProps</span><span style="color:#D8DEE9FF;">)(</span><span style="color:#D8DEE9;">MyReactComponent</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>有了装饰器，就可以改写上面的代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@connect</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">mapStateToProps</span><span style="color:#ECEFF4;">,</span><span style="color:#D08770;"> mapDispatchToProps</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> default</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> MyReactComponent</span><span style="color:#81A1C1;"> extends</span><span style="color:#D8DEE9FF;"> React</span><span style="color:#ECEFF4;">.</span><span style="color:#8FBCBB;font-weight:bold;">Component</span><span style="color:#ECEFF4;"> {}</span></span></code></pre></div><p>相对来说，后一种写法看上去更容易理解。</p><h2 id="方法的修饰" tabindex="-1"><a class="header-anchor" href="#方法的修饰"><span>方法的修饰</span></a></h2><p>修饰器不仅可以修饰类，还可以修饰类的属性。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Person</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @readonly</span></span>
<span class="line"><span style="color:#88C0D0;">  name</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> \`</span><span style="color:#81A1C1;">\${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">first</span><span style="color:#81A1C1;">}</span><span style="color:#81A1C1;"> \${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">last</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，修饰器 <code>readonly</code> 用来修饰“类”的 <code>name</code> 方法。</p><p>修饰器函数 <code>readonly</code> 一共可以接受三个参数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> readonly</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // descriptor对象原来的值如下</span></span>
<span class="line"><span style="color:#616E88;">  // {</span></span>
<span class="line"><span style="color:#616E88;">  //   value: specifiedFunction,</span></span>
<span class="line"><span style="color:#616E88;">  //   enumerable: false,</span></span>
<span class="line"><span style="color:#616E88;">  //   configurable: true,</span></span>
<span class="line"><span style="color:#616E88;">  //   writable: true</span></span>
<span class="line"><span style="color:#616E88;">  // };</span></span>
<span class="line"><span style="color:#D8DEE9;">  descriptor</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">writable</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">readonly</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 类似于</span></span>
<span class="line"><span style="color:#D8DEE9;">Object</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">defineProperty</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">Person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修饰器第一个参数是类的原型对象，上例是 <code>Person.prototype</code>，修饰器的本意是要“修饰”类的实例，但是这个时候实例还没生成，所以只能去修饰原型(这不同于类的修饰，那种情况时 <code>target</code> 参数指的是类本身)；第二个参数是所要修饰的属性名，第三个参数是该属性的描述对象。</p><p>另外，上面代码说明，修饰器(readonly)会修改属性的描述对象(descriptor)，然后被修改的描述对象再用来定义属性。</p><p>下面是另一个例子，修改属性描述对象的 <code>enumerable</code> 属性，使得该属性不可遍历。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Person</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @nonenumerable</span></span>
<span class="line"><span style="color:#81A1C1;">  get</span><span style="color:#88C0D0;"> kidCount</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">children</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> nonenumerable</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  descriptor</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">enumerable</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的 <code>@log</code> 修饰器，可以起到输出日志的作用。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Math</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @log</span></span>
<span class="line"><span style="color:#88C0D0;">  add</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> log</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> oldValue</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">  descriptor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">value</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Calling </span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;"> with</span><span style="color:#ECEFF4;">\`</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> arguments</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> oldValue</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">apply</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> arguments</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> math</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Math</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// passed parameters should get logged now</span></span>
<span class="line"><span style="color:#D8DEE9;">math</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>@log</code> 修饰器的作用就是在执行原始的操作之前，执行一次 <code>console.log</code>，从而达到输出日志的目的。</p><p>修饰器有注释的作用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@testable</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Person</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @readonly</span></span>
<span class="line"><span style="color:#D08770;">  @nonenumerable</span></span>
<span class="line"><span style="color:#88C0D0;">  name</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> \`</span><span style="color:#81A1C1;">\${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">first</span><span style="color:#81A1C1;">}</span><span style="color:#81A1C1;"> \${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">last</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>从上面代码中，我们一眼就能看出，<code>Person</code> 类是可测试的，而 <code>name</code> 方法是只读和不可枚举的。</p><p>下面是使用 Decorator 写法的<a href="https://github.com/ionic-team/stencil" target="_blank" rel="noopener noreferrer">组件</a>，看上去一目了然。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@Component</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  tag</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">my-component</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  styleUrl</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">my-component.scss</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> MyComponent</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @Prop</span><span style="color:#D8DEE9FF;">() first</span><span style="color:#81A1C1;">:</span><span style="color:#81A1C1;"> string;</span></span>
<span class="line"><span style="color:#D08770;">  @Prop</span><span style="color:#D8DEE9FF;">() last</span><span style="color:#81A1C1;">:</span><span style="color:#81A1C1;"> string;</span></span>
<span class="line"><span style="color:#D08770;">  @State</span><span style="color:#D8DEE9FF;">() isVisible</span><span style="color:#81A1C1;">:</span><span style="color:#81A1C1;"> boolean</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">  render</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9FF;"> (</span></span>
<span class="line"><span style="color:#81A1C1;">      &lt;p&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        Hello, my name is </span><span style="color:#81A1C1;">{this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">first</span><span style="color:#81A1C1;">}</span><span style="color:#81A1C1;"> {this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">last</span><span style="color:#81A1C1;">}</span></span>
<span class="line"><span style="color:#81A1C1;">      &lt;/p&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    )</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果同一个方法有多个修饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> dec</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">id</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">evaluated</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> id</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> property</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">executed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> id</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Example</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @dec</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D08770;">  @dec</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#88C0D0;">  method</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// evaluated 1</span></span>
<span class="line"><span style="color:#616E88;">// evaluated 2</span></span>
<span class="line"><span style="color:#616E88;">// executed 2</span></span>
<span class="line"><span style="color:#616E88;">// executed 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，外层修饰器 <code>@dec(1)</code> 先进入，但是内层修饰器 <code>@dec(2)</code> 先执行。</p><p>除了注释，修饰器还能用来类型检查。所以，对于类来说，这项功能相当有用。从长期来看，它将是 JavaScript 代码静态分析的重要工具。</p><h2 id="修饰器不能用于函数的原因" tabindex="-1"><a class="header-anchor" href="#修饰器不能用于函数的原因"><span>修饰器不能用于函数的原因</span></a></h2><p>修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> counter</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#88C0D0;"> add</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  counter</span><span style="color:#81A1C1;">++;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@add</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面的代码，意图是执行后 <code>counter</code> 等于 1，但是实际上结果是 <code>counter</code> 等于 0。因为函数提升，使得实际执行的代码是下面这样。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@add</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> counter</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> add</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">counter</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">add</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  counter</span><span style="color:#81A1C1;">++;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是另一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> readOnly</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">some-decorator</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@readOnly</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码也有问题，因为实际执行是下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> readOnly</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@readOnly</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">readOnly</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">some-decorator</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>总之，由于存在函数提升，使得修饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。</p><p>另一方面，如果一定要修饰函数，可以采用高阶函数的形式直接执行。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> doSomething</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">name</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> name</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> loggingDecorator</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">wrapped</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Starting</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> wrapped</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">apply</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> arguments</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Finished</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> wrapped</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> loggingDecorator</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">doSomething</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="core-decorators-js" tabindex="-1"><a class="header-anchor" href="#core-decorators-js"><span>core-decorators.js</span></a></h2><p><a href="https://github.com/jayphelps/core-decorators.js" target="_blank" rel="noopener noreferrer">core-decorators.js</a>是一个第三方模块，提供了几个常见的修饰器，通过它可以更好地理解修饰器。</p><ol><li><p>@autobind</p><p><code>autobind</code> 修饰器使得方法中的 <code>this</code> 对象，绑定原始对象。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> autobind</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">core-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Person</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @autobind</span></span>
<span class="line"><span style="color:#88C0D0;">  getPerson</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> this;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> getPerson</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> person</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">getPerson</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">getPerson</span><span style="color:#D8DEE9FF;">() </span><span style="color:#81A1C1;">===</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@readonly</p><p><code>readonly</code> 修饰器使得属性或方法不可写。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> readonly</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">core-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Meal</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @readonly</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  entree </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">steak</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> dinner</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Meal</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">dinner</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">entree</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">salmon</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Cannot assign to read only property &#39;entree&#39; of [object Object]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@override</p><p><code>override</code> 修饰器检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> override</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">core-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Parent</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  speak</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">first</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> second</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Child</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> Parent</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @override</span></span>
<span class="line"><span style="color:#88C0D0;">  speak</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#616E88;">  // SyntaxError: Child#speak() does not properly override Parent#speak(first, second)</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Child</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> Parent</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @override</span></span>
<span class="line"><span style="color:#88C0D0;">  speaks</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#616E88;">  // SyntaxError: No descriptor matching Child#speaks() was found on the prototype chain.</span></span>
<span class="line"><span style="color:#616E88;">  //</span></span>
<span class="line"><span style="color:#616E88;">  //   Did you mean &quot;speak&quot;?</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@deprecate (别名@deprecated)</p><p><code>deprecate</code> 或 <code>deprecated</code> 修饰器在控制台显示一条警告，表示该方法将废除。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> deprecate</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">core-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Person</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @deprecate</span></span>
<span class="line"><span style="color:#88C0D0;">  facepalm</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">  @deprecate</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">We stopped facepalming</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#88C0D0;">  facepalmHard</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">  @deprecate</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">We stopped facepalming</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    url</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">https://knowyourmeme.com/memes/facepalm</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#88C0D0;">  facepalmHarder</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">person</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">facepalm</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// DEPRECATION Person#facepalm: This function will be removed in future versions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">person</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">facepalmHard</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// DEPRECATION Person#facepalmHard: We stopped facepalming</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">person</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">facepalmHarder</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// DEPRECATION Person#facepalmHarder: We stopped facepalming</span></span>
<span class="line"><span style="color:#616E88;">//</span></span>
<span class="line"><span style="color:#616E88;">//     See https://knowyourmeme.com/memes/facepalm for more details.</span></span>
<span class="line"><span style="color:#616E88;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@suppressWarnings</p><p><code>suppressWarnings</code> 修饰器抑制 <code>deprecated</code> 修饰器导致的 <code>console.warn()</code> 调用。但是，异步代码发出的调用除外。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> suppressWarnings</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">core-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Person</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @deprecated</span></span>
<span class="line"><span style="color:#88C0D0;">  facepalm</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">  @suppressWarnings</span></span>
<span class="line"><span style="color:#88C0D0;">  facepalmWithoutWarning</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">facepalm</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> person</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Person</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">person</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">facepalmWithoutWarning</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// no warning is logged</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="使用修饰器实现自动发布事件" tabindex="-1"><a class="header-anchor" href="#使用修饰器实现自动发布事件"><span>使用修饰器实现自动发布事件</span></a></h2><p>我们可以使用修饰器，使得对象的方法被调用时，自动发出一个事件。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> postal</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">postal/lib/postal.lodash</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> default</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> publish</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">topic</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> channel</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> channelName</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> channel</span><span style="color:#81A1C1;"> ||</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> msgChannel</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> postal</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">channel</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">channelName</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">  msgChannel</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">subscribe</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">topic</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">v</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">频道: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> channelName</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">事件: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> topic</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">数据: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> v</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> fn</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> descriptor</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">    descriptor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">value</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      let</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> fn</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">apply</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> arguments</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">      msgChannel</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">publish</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">topic</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码定义了一个名为 <code>publish</code> 的修饰器，它通过改写 <code>descriptor.value</code>，使得原方法被调用时，会自动发出一个事件。它使用的事件“发布/订阅”库是<a href="https://github.com/postaljs/postal.js" target="_blank" rel="noopener noreferrer">Postal.js</a>。</p><p>它的用法如下。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// index.js</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#8FBCBB;"> publish</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./publish</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> FooComponent</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D08770;">  @publish</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo.some.message</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">component</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#88C0D0;">  someMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> my</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#D08770;">  @publish</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo.some.other</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#88C0D0;">  anotherMethod</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">    // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> foo</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> FooComponent</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">someMethod</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">anotherMethod</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以后，只要调用 <code>someMethod</code> 或者 <code>anotherMethod</code>，就会自动发出一个事件。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> bash-node</span><span style="color:#A3BE8C;"> index.js</span></span>
<span class="line"><span style="color:#88C0D0;">频道:</span><span style="color:#A3BE8C;">  component</span></span>
<span class="line"><span style="color:#88C0D0;">事件:</span><span style="color:#A3BE8C;">  foo.some.message</span></span>
<span class="line"><span style="color:#88C0D0;">数据:</span><span style="color:#A3BE8C;">  {</span><span style="color:#A3BE8C;"> my:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">频道:</span><span style="color:#A3BE8C;">  /</span></span>
<span class="line"><span style="color:#88C0D0;">事件:</span><span style="color:#A3BE8C;">  foo.some.other</span></span>
<span class="line"><span style="color:#88C0D0;">数据:</span><span style="color:#A3BE8C;">  undefined</span></span></code></pre></div><h2 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin"><span>Mixin</span></a></h2><p>在修饰器的基础上，可以实现 <code>Mixin</code> 模式。所谓 <code>Mixin</code> 模式，就是对象继承的一种替代方案，中文译为“混入”(mix in)，意为在一个对象之中混入另外一个对象的方法。</p><p>请看下面的例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> Foo</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">Object</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">assign</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">MyClass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Foo</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;foo&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码之中，对象 <code>Foo</code> 有一个 <code>foo</code> 方法，通过 <code>Object.assign</code> 方法，可以将 <code>foo</code> 方法“混入”<code>MyClass</code> 类，导致 <code>MyClass</code> 的实例 <code>obj</code> 对象都具有 <code>foo</code> 方法。这就是“混入”模式的一个简单实现。</p><p>下面，我们部署一个通用脚本 <code>mixins.js</code>，将 Mixin 写成一个修饰器。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> mixins</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">target</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    Object</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">assign</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">target</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">list</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>然后，就可以使用上面这个修饰器，为类“混入”各种方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> mixins</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./mixins</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> Foo</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@mixins</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">Foo</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;foo&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>mixins</code> 这个修饰器，实现了在 <code>MyClass</code> 类上面“混入”<code>Foo</code> 对象的 <code>foo</code> 方法。</p><p>不过，上面的方法会改写 <code>MyClass</code> 类的 <code>prototype</code> 对象，如果不喜欢这一点，也可以通过类的继承实现 Mixin。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> MyBaseClass</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  /* ... */</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码中，<code>MyClass</code> 继承了 <code>MyBaseClass</code>。如果我们想在 <code>MyClass</code> 里面“混入”一个 <code>foo</code> 方法，一个办法是在 <code>MyClass</code> 和 <code>MyBaseClass</code> 之间插入一个混入类，这个类具有 <code>foo</code> 方法，并且继承了 <code>MyBaseClass</code> 的所有方法，然后 <code>MyClass</code> 再继承这个类。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#88C0D0;"> MyMixin</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">superclass</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  class</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> superclass</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo from MyMixin</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，<code>MyMixin</code> 是一个混入类生成器，接受 <code>superclass</code> 作为参数，然后返回一个继承 <code>superclass</code> 的子类，该子类包含一个 <code>foo</code> 方法。</p><p>接着，目标类再去继承这个混入类，就达到了“混入”<code>foo</code> 方法的目的。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#81A1C1;"> extends</span><span style="color:#88C0D0;"> MyMixin</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">MyBaseClass</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">  /* ... */</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;foo from MyMixin&quot;</span></span></code></pre></div><p>如果需要“混入”多个方法，就生成多个混入类。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#81A1C1;"> extends</span><span style="color:#88C0D0;"> Mixin1</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">Mixin2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">MyBaseClass</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">  /* ... */</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>这种写法的一个好处，是可以调用 <code>super</code>，因此可以避免在“混入”过程中覆盖父类的同名方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#88C0D0;"> Mixin1</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">superclass</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  class</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> superclass</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo from Mixin1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">super</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">foo</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">super</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#88C0D0;"> Mixin2</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">superclass</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  class</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> superclass</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">      console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo from Mixin2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">super</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">foo</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">super</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> S</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo from S</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> C</span><span style="color:#81A1C1;"> extends</span><span style="color:#88C0D0;"> Mixin1</span><span style="color:#D8DEE9FF;">(</span><span style="color:#88C0D0;">Mixin2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">S</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo from C</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    super</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，每一次<code>混入</code>发生时，都调用了父类的 <code>super.foo</code> 方法，导致父类的同名方法没有被覆盖，行为被保留了下来。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">new</span><span style="color:#88C0D0;"> C</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// foo from C</span></span>
<span class="line"><span style="color:#616E88;">// foo from Mixin1</span></span>
<span class="line"><span style="color:#616E88;">// foo from Mixin2</span></span>
<span class="line"><span style="color:#616E88;">// foo from S</span></span></code></pre></div><h2 id="trait" tabindex="-1"><a class="header-anchor" href="#trait"><span>Trait</span></a></h2><p>Trait 也是一种修饰器，效果与 Mixin 类似，但是提供更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等等。</p><p>下面采用<a href="https://github.com/CocktailJS/traits-decorator" target="_blank" rel="noopener noreferrer">traits-decorator</a>这个第三方模块作为例子。这个模块提供的 <code>traits</code> 修饰器，不仅可以接受对象，还可以接受 ES6 类作为参数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> traits</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">traits-decorator</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> TFoo</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> TBar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  bar</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@traits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">TFoo</span><span style="color:#ECEFF4;">,</span><span style="color:#D08770;"> TBar</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // foo</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">bar</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // bar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，通过 <code>traits</code> 修饰器，在 <code>MyClass</code> 类上面“混入”了 <code>TFoo</code> 类的 <code>foo</code> 方法和 <code>TBar</code> 对象的 <code>bar</code> 方法。</p><p>Trait 不允许“混入”同名方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> traits</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">traits-decorator</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> TFoo</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> TBar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  bar</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@traits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">TFoo</span><span style="color:#ECEFF4;">,</span><span style="color:#D08770;"> TBar</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#616E88;">// 报错</span></span>
<span class="line"><span style="color:#616E88;">// throw new Error(&#39;Method named: &#39; + methodName + &#39; is defined twice.&#39;);</span></span>
<span class="line"><span style="color:#616E88;">//        ^</span></span>
<span class="line"><span style="color:#616E88;">// Error: Method named: foo is defined twice.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>TFoo</code> 和 <code>TBar</code> 都有 <code>foo</code> 方法，结果 <code>traits</code> 修饰器报错。</p><p>一种解决方法是排除 <code>TBar</code> 的 <code>foo</code> 方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> traits</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> excludes</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">traits-decorator</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> TFoo</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> TBar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  bar</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@traits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">TFoo</span><span style="color:#ECEFF4;">,</span><span style="color:#D08770;"> TBar</span><span style="color:#D8DEE9FF;">::</span><span style="color:#D08770;">excludes</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // foo</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">bar</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // bar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码使用绑定运算符(::)在 <code>TBar</code> 上排除 <code>foo</code> 方法，混入时就不会报错了。</p><p>另一种方法是为 <code>TBar</code> 的 <code>foo</code> 方法起一个别名。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> traits</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> alias</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">traits-decorator</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> TFoo</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> TBar</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  bar</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#88C0D0;">  foo</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D08770;">@traits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">TFoo</span><span style="color:#ECEFF4;">,</span><span style="color:#D08770;"> TBar</span><span style="color:#D8DEE9FF;">::</span><span style="color:#D08770;">alias</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aliasFoo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> MyClass</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">foo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // foo</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">aliasFoo</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // foo</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">bar</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // bar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码为 <code>TBar</code> 的 <code>foo</code> 方法起了别名 <code>aliasFoo</code>，于是 <code>MyClass</code> 也可以混入 <code>TBar</code> 的 <code>foo</code> 方法了。</p><p><code>alias</code> 和 <code>excludes</code> 方法，可以结合起来使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@traits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D08770;">TExample</span><span style="color:#D8DEE9FF;">::</span><span style="color:#D08770;">excludes</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)::</span><span style="color:#D08770;">alias</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> baz</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">exampleBaz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">))</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span></code></pre></div><p>上面代码排除<code>了TExample</code> 的 <code>foo</code> 方法和 <code>bar</code> 方法，为 <code>baz</code> 方法起了别名 <code>exampleBaz</code>。</p><p><code>as</code> 方法则为上面的代码提供了另一种写法。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D08770;">@traits</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#D08770;">  TExample</span><span style="color:#D8DEE9FF;">::</span><span style="color:#D08770;">as</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> excludes</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> alias</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> baz</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">exampleBaz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyClass</span><span style="color:#ECEFF4;"> {}</span></span></code></pre></div><h2 id="babel-转码器的支持" tabindex="-1"><a class="header-anchor" href="#babel-转码器的支持"><span>Babel 转码器的支持</span></a></h2><p>目前，Babel 转码器已经支持 Decorator。</p><p>首先，安装 <code>babel-core</code> 和 <code>babel-plugin-transform-decorators</code>。由于后者包括在 <code>babel-preset-stage-0</code> 之中，所以改为安装 <code>babel-preset-stage-0</code> 亦可。</p><div class="language-sh" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> babel-core</span><span style="color:#A3BE8C;"> babel-plugin-transform-decorators</span></span></code></pre></div><p>然后，设置配置文件 <code>.babelrc</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">plugins</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">: [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">transform-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>这时，Babel 就可以对 Decorator 转码了。</p><p>脚本中打开的命令如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">babel</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">transform</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">code</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> plugins</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">transform-decorators</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">] </span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>Babel 的官方网站提供一个<a href="https://babeljs.io/repl/" target="_blank" rel="noopener noreferrer">在线转码器</a>，只要勾选 Experimental，就能支持 Decorator 的在线转码。</p>`,122),e=[p];function c(r,t){return n(),a("div",null,e)}const y=s(o,[["render",c],["__file","decorator.html.vue"]]),d=JSON.parse('{"path":"/code/language/js/es6/decorator.html","title":"修饰器","lang":"zh-CN","frontmatter":{"title":"修饰器","icon":"at","author":"阮一峰","date":"2019-10-23T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"类的修饰 许多面向对象的语言都有修饰器(Decorator)函数，用来修改类的行为。目前，有一个提案将这项功能，引入了 ECMAScript。 上面代码中，@testable 就是一个修饰器。它修改了 MyTestableClass 这个类的行为，为它加上了静态属性 isTestable。testable 函数的参数 target 是 MyTestab...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/es6/decorator.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"修饰器"}],["meta",{"property":"og:description","content":"类的修饰 许多面向对象的语言都有修饰器(Decorator)函数，用来修改类的行为。目前，有一个提案将这项功能，引入了 ECMAScript。 上面代码中，@testable 就是一个修饰器。它修改了 MyTestableClass 这个类的行为，为它加上了静态属性 isTestable。testable 函数的参数 target 是 MyTestab..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"修饰器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"类的修饰","slug":"类的修饰","link":"#类的修饰","children":[]},{"level":2,"title":"方法的修饰","slug":"方法的修饰","link":"#方法的修饰","children":[]},{"level":2,"title":"修饰器不能用于函数的原因","slug":"修饰器不能用于函数的原因","link":"#修饰器不能用于函数的原因","children":[]},{"level":2,"title":"core-decorators.js","slug":"core-decorators-js","link":"#core-decorators-js","children":[]},{"level":2,"title":"使用修饰器实现自动发布事件","slug":"使用修饰器实现自动发布事件","link":"#使用修饰器实现自动发布事件","children":[]},{"level":2,"title":"Mixin","slug":"mixin","link":"#mixin","children":[]},{"level":2,"title":"Trait","slug":"trait","link":"#trait","children":[]},{"level":2,"title":"Babel 转码器的支持","slug":"babel-转码器的支持","link":"#babel-转码器的支持","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":6},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":11.41,"words":3422},"filePathRelative":"code/language/js/es6/decorator.md","localizedDate":"2019年10月23日","excerpt":"","autoDesc":true}');export{y as comp,d as data};
