import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as p,f as a,a as o,w as r,e as t,b as c,r as i,o as d}from"./app-BMeR4ubx.js";const y={};function E(D,s){const n=i("RouteLink");return d(),e("div",null,[p("p",null,[s[1]||(s[1]=a("该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 ")),o(n,{to:"/code/language/dart/samples/cheatsheet.html"},{default:r(()=>s[0]||(s[0]=[a("Dart 概要")])),_:1}),s[2]||(s[2]=a("。"))]),t(" more "),s[3]||(s[3]=c(`<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World</span></a></h2><p>每个应用都有 <code>main()</code> 函数。要在控制台上显示文本，可以使用顶级 <code>print()</code> 函数:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">void</span><span style="color:#88C0D0;"> main</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Hello, World!&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>即使在类型安全的 Dart 代码中，由于类型推断，大多数变量也不需要显式类型:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> name </span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;"> &#39;Voyager I&#39;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> year </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1977</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> antennaDiameter </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 3.7</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> flybyObjects </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#A3BE8C;">&#39;Jupiter&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#A3BE8C;"> &#39;Saturn&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#A3BE8C;"> &#39;Uranus&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#A3BE8C;"> &#39;Neptune&#39;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> image </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#A3BE8C;">  &#39;tags&#39;</span><span style="color:#81A1C1;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#A3BE8C;">&#39;saturn&#39;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#A3BE8C;">  &#39;url&#39;</span><span style="color:#81A1C1;">:</span><span style="color:#A3BE8C;"> &#39;//path/to/saturn.jpg&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#variables" target="_blank" rel="noopener noreferrer">阅读有关 Dart 中变量的更多信息</a>，包括默认值，<code>final</code> 和 <code>const</code> 关键字以及静态类型。</p><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><p>Dart 支持通常的控制语句:</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> (year </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 2001</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;21st century&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">} </span><span style="color:#81A1C1;">else</span><span style="color:#81A1C1;"> if</span><span style="color:#D8DEE9FF;"> (year </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#B48EAD;"> 1901</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;20th century&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> object </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> flybyObjects) {</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(object)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#8FBCBB;">int</span><span style="color:#D8DEE9FF;"> month </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> month </span><span style="color:#81A1C1;">&lt;=</span><span style="color:#B48EAD;"> 12</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> month</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(month)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">while</span><span style="color:#D8DEE9FF;"> (year </span><span style="color:#81A1C1;">&lt;</span><span style="color:#B48EAD;"> 2016</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  year </span><span style="color:#81A1C1;">+=</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="https://dart.dev/guides/language/language-tour#control-flow-statements" target="_blank" rel="noopener noreferrer">阅读有关 Dart 中控制流语句的更多信息</a>，包括 <code>break</code> 和 <code>continue</code>，<code>switch</code> 和 <code>case</code>，和 <code>assert</code>。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p><a href="https://dart.dev/guides/language/effective-dart/design#types" target="_blank" rel="noopener noreferrer">我们建议</a> 指定每个函数的参数和返回值的类型:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">int</span><span style="color:#88C0D0;"> fibonacci</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">int</span><span style="color:#D8DEE9FF;"> n) {</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#D8DEE9FF;"> (n </span><span style="color:#81A1C1;">==</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;"> ||</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">==</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> n</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#88C0D0;"> fibonacci</span><span style="color:#D8DEE9FF;">(n </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span><span style="color:#88C0D0;"> fibonacci</span><span style="color:#D8DEE9FF;">(n </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> result </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> fibonacci</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">20</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>简写 <code>=&gt;</code>(箭头)语法对于包含单个语句的函数很方便。当将匿名函数作为参数传递时，此语法特别有用:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">flybyObjects</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">where</span><span style="color:#D8DEE9FF;">((name) </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">contains</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;turn&#39;</span><span style="color:#D8DEE9FF;">))</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forEach</span><span style="color:#D8DEE9FF;">(print)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>除了显示匿名函数(<code>where()</code> 的参数)之外，此代码还显示您可以将函数用作参数: 顶级 <code>print()</code> 函数是 <code>forEach()</code> 的参数。</p><p><a href="https://dart.dev/guides/language/language-tour#functions" target="_blank" rel="noopener noreferrer">阅读有关</a> Dart 中函数的更多信息，包括可选参数，默认参数值和词法范围。</p><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><p>Dart 注释通常以开头 <code>//</code>。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// This is a normal, one-line comment.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">/// This is a documentation comment, used to document libraries,</span></span>
<span class="line"><span style="color:#616E88;">/// classes, and their members. Tools like IDEs and dartdoc treat</span></span>
<span class="line"><span style="color:#616E88;">/// doc comments specially.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">/*Comments like these are also supported.*/</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#comments" target="_blank" rel="noopener noreferrer">阅读有关</a> Dart 中注释的更多信息，包括文档工具的工作方式。</p><h2 id="导入" tabindex="-1"><a class="header-anchor" href="#导入"><span>导入</span></a></h2><p>要访问其他库中定义的 API，请使用 <code>import</code>。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// Importing core libraries</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#A3BE8C;"> &#39;dart:math&#39;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// Importing libraries from external packages</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#A3BE8C;"> &#39;package:test/test.dart&#39;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// Importing files</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#A3BE8C;"> &#39;path/to/my_other_file.dart&#39;</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#libraries-and-visibility" target="_blank" rel="noopener noreferrer">阅读有关</a> Dart 中库和可见性的更多信息，包括库前缀 <code>show</code> 和 <code>hide</code>，以及通过 <code>deferred</code> 关键字的延迟加载。</p><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><p>这是一个具有三个属性，两个构造函数和一个方法的类的示例。其中一个属性不能直接设置，因此是使用 <code>getter</code> 方法(而不是变量)定义的。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Spacecraft</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#8FBCBB;">  String</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#8FBCBB;">  DateTime</span><span style="color:#D8DEE9FF;"> launchDate</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // Constructor, with syntactic sugar for assignment to members.</span></span>
<span class="line"><span style="color:#8FBCBB;">  Spacecraft</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">launchDate) {</span></span>
<span class="line"><span style="color:#616E88;">    // Initialization code goes here.</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // Named constructor that forwards to the default one.</span></span>
<span class="line"><span style="color:#8FBCBB;">  Spacecraft</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">unlaunched</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;"> name) </span><span style="color:#81A1C1;">:</span><span style="color:#81A1C1;"> this</span><span style="color:#D8DEE9FF;">(name</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> null</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">  int</span><span style="color:#81A1C1;"> get</span><span style="color:#D8DEE9FF;"> launchYear </span><span style="color:#81A1C1;">=&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      launchDate</span><span style="color:#81A1C1;">?</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">year</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // read-only non-final property</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">  // Method.</span></span>
<span class="line"><span style="color:#81A1C1;">  void</span><span style="color:#88C0D0;"> describe</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Spacecraft: </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">name</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (launchDate </span><span style="color:#81A1C1;">!=</span><span style="color:#81A1C1;"> null</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#8FBCBB;">      int</span><span style="color:#D8DEE9FF;"> years </span><span style="color:#81A1C1;">=</span></span>
<span class="line"><span style="color:#8FBCBB;">          DateTime</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">now</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">difference</span><span style="color:#D8DEE9FF;">(launchDate)</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">inDays </span><span style="color:#81A1C1;">~/</span></span>
<span class="line"><span style="color:#B48EAD;">              365</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">      print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Launched: </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">launchYear</span><span style="color:#A3BE8C;"> (</span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">years</span><span style="color:#A3BE8C;"> years ago)&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    } </span><span style="color:#81A1C1;">else</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">      print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Unlaunched&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用这样的 <code>Spacecraft</code> 类:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> voyager </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> Spacecraft</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Voyager I&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> DateTime</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1977</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">voyager</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">describe</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> voyager3 </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> Spacecraft</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">unlaunched</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Voyager III&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">voyager3</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">describe</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#classes" target="_blank" rel="noopener noreferrer">阅读有关</a> Dart 中类的更多信息，包括初始化列表，可选 <code>new</code> 和 <code>const</code>，重定向构造函数，<code>factory</code> 构造函数，getter，setter 等。</p><h2 id="遗产" tabindex="-1"><a class="header-anchor" href="#遗产"><span>遗产</span></a></h2><p>Dart 具有单一继承。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Orbiter</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;"> Spacecraft</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#8FBCBB;">  double</span><span style="color:#D8DEE9FF;"> altitude</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#8FBCBB;">  Orbiter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> DateTime</span><span style="color:#D8DEE9FF;"> launchDate</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">altitude)</span></span>
<span class="line"><span style="color:#81A1C1;">      :</span><span style="color:#81A1C1;"> super</span><span style="color:#D8DEE9FF;">(name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> launchDate)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#extending-a-class" target="_blank" rel="noopener noreferrer">阅读有关</a> 扩展类，可选 <code>@override</code> 注释等的更多信息。</p><h2 id="混入" tabindex="-1"><a class="header-anchor" href="#混入"><span>混入</span></a></h2><p>Mixins 是在多个类层次结构中重用代码的一种方式。以下类可以充当 mixin:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Piloted</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#8FBCBB;">  int</span><span style="color:#D8DEE9FF;"> astronauts </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  void</span><span style="color:#88C0D0;"> describeCrew</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Number of astronauts: </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">astronauts</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p>要将 mixin 的功能添加到类中，只需使用 mixin 扩展类即可。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> PilotedCraft</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;"> Spacecraft</span><span style="color:#81A1C1;"> with</span><span style="color:#8FBCBB;"> Piloted</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ···</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p><code>PilotedCraft</code> 现在具有 <code>astronauts</code> 字段和 <code>describeCrew()</code> 方法。</p><p><a href="https://dart.dev/guides/language/language-tour#adding-features-to-a-class-mixins" target="_blank" rel="noopener noreferrer">阅读有关</a> mixin 的更多信息。</p><h2 id="接口和抽象类" tabindex="-1"><a class="header-anchor" href="#接口和抽象类"><span>接口和抽象类</span></a></h2><p>Dart 没有 <code>interface</code> 关键字。相反，所有类都隐式定义一个接口。因此，您可以实现任何类。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MockSpaceship</span><span style="color:#81A1C1;"> implements</span><span style="color:#8FBCBB;"> Spacecraft</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ···</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#implicit-interfaces" target="_blank" rel="noopener noreferrer">阅读有关</a> 隐式接口的更多信息。</p><p>您可以创建要由具体类扩展(或实现)的抽象类。抽象类可以包含抽象方法(具有空主体)。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">abstract</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Describable</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  void</span><span style="color:#88C0D0;"> describe</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">  void</span><span style="color:#88C0D0;"> describeWithEmphasis</span><span style="color:#D8DEE9FF;">() {</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;=========&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">    describe</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;=========&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p>任何扩展类 <code>Describable</code> 都具有 <code>describeWithEmphasis()</code> 方法，该方法调用扩展程序的实现 <code>describe()</code>。</p><p><a href="https://dart.dev/guides/language/language-tour#abstract-classes" target="_blank" rel="noopener noreferrer">阅读有关</a> 抽象类和方法的更多信息。</p><h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h2><p>避免陷入回调地狱，您可以使用 <code>async</code> 和 <code>await</code> 来提高代码的可读性。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9FF;"> oneSecond </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> Duration</span><span style="color:#D8DEE9FF;">(seconds</span><span style="color:#81A1C1;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// ···</span></span>
<span class="line"><span style="color:#8FBCBB;">Future</span><span style="color:#D8DEE9FF;">&lt;</span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;">&gt; </span><span style="color:#88C0D0;">printWithDelay</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;"> message) </span><span style="color:#81A1C1;">async</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  await</span><span style="color:#8FBCBB;"> Future</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">delayed</span><span style="color:#D8DEE9FF;">(oneSecond)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(message)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p>上面的方法等效于:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">Future</span><span style="color:#D8DEE9FF;">&lt;</span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;">&gt; </span><span style="color:#88C0D0;">printWithDelay</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;"> message) {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#8FBCBB;"> Future</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">delayed</span><span style="color:#D8DEE9FF;">(oneSecond)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">((_) {</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#D8DEE9FF;">(message)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  })</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p>如下例所示，<code>async</code> 和 <code>await</code> 有助于使异步代码易于阅读。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">Future</span><span style="color:#D8DEE9FF;">&lt;</span><span style="color:#81A1C1;">void</span><span style="color:#D8DEE9FF;">&gt; </span><span style="color:#88C0D0;">createDescriptions</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">Iterable</span><span style="color:#D8DEE9FF;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;">&gt; objects) </span><span style="color:#81A1C1;">async</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> object </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> objects) {</span></span>
<span class="line"><span style="color:#81A1C1;">    try</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">      var</span><span style="color:#D8DEE9FF;"> file </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> File</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">object</span><span style="color:#A3BE8C;">.txt&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">await</span><span style="color:#D8DEE9FF;"> file</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">exists</span><span style="color:#D8DEE9FF;">()) {</span></span>
<span class="line"><span style="color:#81A1C1;">        var</span><span style="color:#D8DEE9FF;"> modified </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> file</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lastModified</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#A3BE8C;">            &#39;File for </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">object</span><span style="color:#A3BE8C;"> already exists. It was modified on </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">modified</span><span style="color:#A3BE8C;">.&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">        continue;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      }</span></span>
<span class="line"><span style="color:#81A1C1;">      await</span><span style="color:#D8DEE9FF;"> file</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">create</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">      await</span><span style="color:#D8DEE9FF;"> file</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">writeAsString</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Start describing </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">object</span><span style="color:#A3BE8C;"> in this file.&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    } </span><span style="color:#81A1C1;">on</span><span style="color:#8FBCBB;"> IOException</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (e) {</span></span>
<span class="line"><span style="color:#88C0D0;">      print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Cannot create description for </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">object</span><span style="color:#A3BE8C;">: </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">e</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用 <code>async*</code>，它为您提供了一种很好的，易于阅读的方式来构建流。</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">Stream</span><span style="color:#D8DEE9FF;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;">&gt; </span><span style="color:#88C0D0;">report</span><span style="color:#D8DEE9FF;">(</span><span style="color:#8FBCBB;">Spacecraft</span><span style="color:#D8DEE9FF;"> craft</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> Iterable</span><span style="color:#D8DEE9FF;">&lt;</span><span style="color:#8FBCBB;">String</span><span style="color:#D8DEE9FF;">&gt; objects) </span><span style="color:#81A1C1;">async*</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> object </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> objects) {</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#8FBCBB;"> Future</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">delayed</span><span style="color:#D8DEE9FF;">(oneSecond)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#A3BE8C;"> &#39;</span><span style="color:#A3BE8C;">\${</span><span style="color:#D8DEE9;">craft</span><span style="color:#A3BE8C;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#A3BE8C;">}</span><span style="color:#A3BE8C;"> flies by </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">object</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p><a href="https://dart.dev/guides/language/language-tour#asynchrony-support" target="_blank" rel="noopener noreferrer">阅读更多</a> 关于异步支持，包括 <code>async</code> 功能 <code>Future</code>，<code>Stream</code> 和异步循环(await for)。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><p>要引发异常，请使用 <code>throw</code>:</p><div class="language-dart" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> (astronauts </span><span style="color:#81A1C1;">==</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">) {</span></span>
<span class="line"><span style="color:#81A1C1;">  throw</span><span style="color:#8FBCBB;"> StateError</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;No astronauts.&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre></div><p>要捕获异常，请使用 <code>try</code> 带有 <code>on</code> 或 <code>catch</code>(或两者)的语句:</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" data-title="dart" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">try</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9FF;"> object </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> flybyObjects) {</span></span>
<span class="line"><span style="color:#81A1C1;">    var</span><span style="color:#D8DEE9FF;"> description </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> await</span><span style="color:#8FBCBB;"> File</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">object</span><span style="color:#A3BE8C;">.txt&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">readAsString</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#D8DEE9FF;">(description)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">} </span><span style="color:#81A1C1;">on</span><span style="color:#8FBCBB;"> IOException</span><span style="color:#81A1C1;"> catch</span><span style="color:#D8DEE9FF;"> (e) {</span></span>
<span class="line"><span style="color:#88C0D0;">  print</span><span style="color:#D8DEE9FF;">(</span><span style="color:#A3BE8C;">&#39;Could not describe object: </span><span style="color:#A3BE8C;">$</span><span style="color:#D8DEE9;">e</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">} </span><span style="color:#81A1C1;">finally</span><span style="color:#D8DEE9FF;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  flybyObjects</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">clear</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的代码是异步的； <code>try</code> 适用于同步代码和 <code>async</code> 函数中的代码。</p><p>阅读有关异常的更多信息，包括堆栈跟踪 <code>rethrow</code>，和错误与异常之间的区别。</p><h2 id="其他话题" tabindex="-1"><a class="header-anchor" href="#其他话题"><span>其他话题</span></a></h2><p>更多的代码示例在 <a href="https://dart.dev/guides/language/language-tour" target="_blank" rel="noopener noreferrer">语言示例</a> 和 <a href="https://dart.dev/guides/libraries/library-tour" target="_blank" rel="noopener noreferrer">库示例</a> 中。另请参阅 <a href="https://api.dart.dev/" target="_blank" rel="noopener noreferrer">Dart API 参考</a>， 其中通常包含示例。</p>`,70))])}const h=l(y,[["render",E],["__file","samples.html.vue"]]),u=JSON.parse('{"path":"/code/language/dart/samples/samples.html","title":"dart 语言范例","lang":"zh-CN","frontmatter":{"title":"dart 语言范例","icon":"discover","date":"2020-05-30T00:00:00.000Z","category":"dart","description":"该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 Dart 概要。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/dart/samples/samples.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"dart 语言范例"}],["meta",{"property":"og:description","content":"该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 Dart 概要。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:published_time","content":"2020-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dart 语言范例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"导入","slug":"导入","link":"#导入","children":[]},{"level":2,"title":"类","slug":"类","link":"#类","children":[]},{"level":2,"title":"遗产","slug":"遗产","link":"#遗产","children":[]},{"level":2,"title":"混入","slug":"混入","link":"#混入","children":[]},{"level":2,"title":"接口和抽象类","slug":"接口和抽象类","link":"#接口和抽象类","children":[]},{"level":2,"title":"异步","slug":"异步","link":"#异步","children":[]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[]},{"level":2,"title":"其他话题","slug":"其他话题","link":"#其他话题","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":3}]},"readingTime":{"minutes":5,"words":1501},"filePathRelative":"code/language/dart/samples/samples.md","localizedDate":"2020年5月30日","excerpt":"<p>该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 <a href=\\"/code/language/dart/samples/cheatsheet.html\\" target=\\"_blank\\">Dart 概要</a>。</p>\\n","autoDesc":true}');export{h as comp,u as data};
