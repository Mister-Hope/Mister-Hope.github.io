import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as l,o as p}from"./app-CkdqTO5V.js";const o={};function e(c,s){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="编程风格" tabindex="-1"><a class="header-anchor" href="#编程风格"><span>编程风格</span></a></h1><p>本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。</p><p>多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">Airbnb</a> 公司的 JavaScript 风格规范。</p><h2 id="块级作用域" tabindex="-1"><a class="header-anchor" href="#块级作用域"><span>块级作用域</span></a></h2><ol><li><p><code>let</code> 取代 <code>var</code></p><p>ES6 提出了两个新的声明变量的命令: <code>let</code> 和 <code>const</code>。其中，<code>let</code> 完全可以取代 <code>var</code>，因为两者语义相同，而且 <code>let</code> 没有副作用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">use strict</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#B48EAD;"> 10</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码如果用 <code>var</code> 替代 <code>let</code>，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code> 命令做不到这一点。</p><p><code>var</code> 命令存在变量提升效用，<code>let</code> 命令没有这个问题。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">use strict</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // ReferenceError</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上面代码如果使用 <code>var</code> 替代 <code>let</code>，<code>console.log</code> 那一行就不会报错，而是会输出 <code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p><p>所以，建议不再使用 <code>var</code> 命令，而是使用 <code>let</code> 命令取代。</p></li><li><p>全局常量和线程安全</p><p>在 <code>let</code> 和 <code>const</code> 之间，建议优先使用 <code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</p><p><code>const</code> 优于 <code>let</code> 有几个原因。一个是 <code>const</code> 可以提醒阅读程序的人，这个变量不应该改变；另一个是 <code>const</code> 比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对 <code>const</code> 进行优化，所以多使用 <code>const</code>，有利于提高程序的运行效率，也就是说 <code>let</code> 和 <code>const</code> 的本质区别，其实是编译器内部的处理不同。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">  b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">  c</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// best</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>const</code> 声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p><p>所有的函数都应该设置为常量。</p><p>长远来看，JavaScript 可能会有多线程的实现(比如 Intel 公司的 River Trail 那一类的项目)，这时 <code>let</code> 表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p></li></ol><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">foobar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// acceptable</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">foobar</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">foobar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> \`</span><span style="color:#A3BE8C;">foo</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">\`</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解构赋值" tabindex="-1"><a class="header-anchor" href="#解构赋值"><span>解构赋值</span></a></h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> first</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> second</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">first</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> second</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> getFullName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">user</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> firstName</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> user</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">firstName</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> lastName</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> user</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">lastName</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> getFullName</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">obj</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> firstName</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> lastName</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// best</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> getFullName</span><span style="color:#ECEFF4;">({</span><span style="color:#D8DEE9;"> firstName</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> lastName</span><span style="color:#ECEFF4;"> })</span><span style="color:#ECEFF4;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> processInput</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">left</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> right</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> top</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bottom</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> processInput</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> left</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> right</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> top</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bottom</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> left</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> right</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> processInput</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">input</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> k1</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v1</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> k2</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v2</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  k1</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  k2</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v2</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> k1</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v1</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> k2</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v2</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  k1</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  k2</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> v2</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用 <code>Object.assign</code> 方法。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// if reshape unavoidable</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">Object</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">assign</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  id</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">San Francisco</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#D8DEE9FF;">[</span><span style="color:#88C0D0;">getKey</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">enabled</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)] </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> true;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  id</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">San Francisco</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  [getKey(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">enabled</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#88C0D0;">)]</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，对象 <code>obj</code> 的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建 <code>obj</code> 的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p><p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> ref</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">some value</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> atom</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  ref</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> ref</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">  value</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">  addValue</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">value</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> atom</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> atom</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  ref</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">  value</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">  addValue</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> atom</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">value</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>使用扩展运算符(...)拷贝数组。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> len</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> items</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> itemsCopy</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> len</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  itemsCopy</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> items</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> itemsCopy</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">items</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Array.from 方法，将类似数组的对象转为数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> foo</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">querySelectorAll</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> nodes</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Array</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">foo</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>立即执行函数可以写成箭头函数的形式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Welcome to the Internet.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 this。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// best</span></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> *</span><span style="color:#D8DEE9;"> x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数取代 <code>Function.prototype.bind</code>，不应再用 self/_this/that 绑定 this。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> self</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> this;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> boundMethod</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">params</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> method</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">apply</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> params</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// acceptable</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> boundMethod</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> method</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">bind</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// best</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#88C0D0;"> boundMethod</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">params</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> method</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">apply</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> params</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> divide</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> option</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> divide</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> option</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {})</span><span style="color:#ECEFF4;"> {}</span></span></code></pre></div><p>不要在函数体内使用 arguments 变量，使用 rest 运算符 <code>...</code> 代替。因为 rest 运算符显式表明您想要获取参数，而且 arguments 是一个类似数组的对象，而 rest 运算符可以提供一个真正的数组。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> concatenateAll</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> args</span><span style="color:#81A1C1;"> =</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">slice</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">call</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">arguments</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> args</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> concatenateAll</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">args</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> args</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用默认值语法设置函数参数的默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> handleThings</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">opts</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  opts</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> opts</span><span style="color:#81A1C1;"> ||</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> handleThings</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">opts</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {})</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><h2 id="map-结构" tabindex="-1"><a class="header-anchor" href="#map-结构"><span>Map 结构</span></a></h2><p>注意区分 Object 和 Map，只有模拟现实世界的实体对象时，才使用 Object。如果只是需要 <code>key: value</code> 的数据结构，使用 Map 结构。因为 Map 有内建的遍历机制。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> map</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">arr</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> key</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> map</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">keys</span><span style="color:#D8DEE9FF;">()) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">key</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> map</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">values</span><span style="color:#D8DEE9FF;">()) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> item</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> map</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">entries</span><span style="color:#D8DEE9FF;">()) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">item</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> item</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class"><span>Class</span></a></h2><p>总是用 Class，取代需要 prototype 的操作。因为 Class 的写法更简洁，更易于理解。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> Queue</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">contents</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">contents</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#8FBCBB;">Queue</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pop</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">splice</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Queue</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  constructor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">contents</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#81A1C1;">...</span><span style="color:#D8DEE9;">contents</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#88C0D0;">  pop</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    const</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">splice</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>extends</code> 实现继承，因为这样更简单，不会有破坏 <code>instanceof</code> 运算的危险。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> inherits</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">inherits</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> PeekableQueue</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">contents</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  Queue</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">apply</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> contents</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#88C0D0;">inherits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">PeekableQueue</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Queue</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#8FBCBB;">PeekableQueue</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">peek</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> PeekableQueue</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;font-weight:bold;"> Queue</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  peek</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">_queue</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h2><p>首先，Module 语法是 JavaScript 模块的标准写法，坚持使用这种写法。使用 <code>import</code> 取代 <code>require</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> moduleA</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">moduleA</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> func1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> moduleA</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">func1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> func2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> moduleA</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">func2</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#ECEFF4;"> {</span><span style="color:#8FBCBB;"> func1</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> func2</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">moduleA</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>使用 <code>export</code> 取代 <code>module.exports</code>。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// commonJS的写法</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> React</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">react</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> Breadcrumbs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> React</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">createClass</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  render</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> &lt;nav</span><span style="color:#81A1C1;"> /&gt;;</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">module</span><span style="color:#ECEFF4;">.</span><span style="color:#8FBCBB;">exports</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Breadcrumbs</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// ES6的写法</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#8FBCBB;"> React</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">react</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Breadcrumbs</span><span style="color:#81A1C1;"> extends</span><span style="color:#D8DEE9FF;"> React</span><span style="color:#ECEFF4;">.</span><span style="color:#8FBCBB;font-weight:bold;">Component</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  render</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> &lt;nav</span><span style="color:#81A1C1;"> /&gt;;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> default</span><span style="color:#D8DEE9;"> Breadcrumbs</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果模块只有一个输出值，就使用 <code>export default</code>，如果模块有多个输出值，就不使用 <code>export default</code>，<code>export default</code> 与普通的 <code>export</code> 不要同时使用。</p><p>不要在模块输入中使用通配符。因为这样可以确保您的模块之中，有一个默认输出(export default)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// bad</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#81A1C1;"> *</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> myObject</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./importModule</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// good</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#8FBCBB;"> myObject</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">./importModule</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> makeStyleGuide</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> default</span><span style="color:#D8DEE9;"> makeStyleGuide</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> StyleGuide</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  es6</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {},</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> default</span><span style="color:#D8DEE9;"> StyleGuide</span><span style="color:#81A1C1;">;</span></span></code></pre></div><h2 id="eslint-的使用" tabindex="-1"><a class="header-anchor" href="#eslint-的使用"><span>ESLint 的使用</span></a></h2><p>ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。</p><p>首先，安装 ESLint。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> i</span><span style="color:#A3BE8C;"> -g</span><span style="color:#A3BE8C;"> eslint</span></span></code></pre></div><p>然后，安装 Airbnb 语法规则，以及 import、a11y、react 插件。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> i</span><span style="color:#A3BE8C;"> -g</span><span style="color:#A3BE8C;"> eslint-config-airbnb</span></span>
<span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> i</span><span style="color:#A3BE8C;"> -g</span><span style="color:#A3BE8C;"> eslint-plugin-import</span><span style="color:#A3BE8C;"> eslint-plugin-jsx-a11y</span><span style="color:#A3BE8C;"> eslint-plugin-react</span></span></code></pre></div><p>最后，在项目的根目录下新建一个 <code>.eslintrc</code> 文件，配置 ESLint。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#ECEFF4;">  &quot;</span><span style="color:#A3BE8C;">extends</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">: </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">eslint-config-airbnb</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>现在就可以检查，当前项目的代码是否符合预设的规则。</p><p><code>index.js</code> 文件的代码如下。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> unusued</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">I have no purpose!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> greet</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> message</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello, World!</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">  alert</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">message</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">greet</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>使用 ESLint 检查这个文件，就会报出错误。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> eslint</span><span style="color:#A3BE8C;"> index.js</span></span>
<span class="line"><span style="color:#88C0D0;">index.js</span></span>
<span class="line"><span style="color:#88C0D0;">  1:1</span><span style="color:#A3BE8C;">  error</span><span style="color:#A3BE8C;">  Unexpected</span><span style="color:#A3BE8C;"> var,</span><span style="color:#A3BE8C;"> use</span><span style="color:#A3BE8C;"> let</span><span style="color:#A3BE8C;"> or</span><span style="color:#A3BE8C;"> const</span><span style="color:#A3BE8C;"> instead</span><span style="color:#A3BE8C;">          no-var</span></span>
<span class="line"><span style="color:#88C0D0;">  1:5</span><span style="color:#A3BE8C;">  error</span><span style="color:#A3BE8C;">  unusued</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> defined</span><span style="color:#A3BE8C;"> but</span><span style="color:#A3BE8C;"> never</span><span style="color:#A3BE8C;"> used</span><span style="color:#A3BE8C;">                 no-unused-vars</span></span>
<span class="line"><span style="color:#88C0D0;">  4:5</span><span style="color:#A3BE8C;">  error</span><span style="color:#A3BE8C;">  Expected</span><span style="color:#A3BE8C;"> indentation</span><span style="color:#A3BE8C;"> of</span><span style="color:#B48EAD;"> 2</span><span style="color:#A3BE8C;"> characters</span><span style="color:#A3BE8C;"> but</span><span style="color:#A3BE8C;"> found</span><span style="color:#B48EAD;"> 4</span><span style="color:#A3BE8C;">  indent</span></span>
<span class="line"><span style="color:#88C0D0;">  4:5</span><span style="color:#A3BE8C;">  error</span><span style="color:#A3BE8C;">  Unexpected</span><span style="color:#A3BE8C;"> var,</span><span style="color:#A3BE8C;"> use</span><span style="color:#A3BE8C;"> let</span><span style="color:#A3BE8C;"> or</span><span style="color:#A3BE8C;"> const</span><span style="color:#A3BE8C;"> instead</span><span style="color:#A3BE8C;">          no-var</span></span>
<span class="line"><span style="color:#88C0D0;">  5:5</span><span style="color:#A3BE8C;">  error</span><span style="color:#A3BE8C;">  Expected</span><span style="color:#A3BE8C;"> indentation</span><span style="color:#A3BE8C;"> of</span><span style="color:#B48EAD;"> 2</span><span style="color:#A3BE8C;"> characters</span><span style="color:#A3BE8C;"> but</span><span style="color:#A3BE8C;"> found</span><span style="color:#B48EAD;"> 4</span><span style="color:#A3BE8C;">  indent</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">✖</span><span style="color:#B48EAD;"> 5</span><span style="color:#A3BE8C;"> problems</span><span style="color:#D8DEE9FF;"> (5 </span><span style="color:#A3BE8C;">errors,</span><span style="color:#B48EAD;"> 0</span><span style="color:#A3BE8C;"> warnings</span><span style="color:#D8DEE9FF;">)</span></span></code></pre></div><p>上面代码说明，原文件有五个错误，其中两个是不应该使用 <code>var</code> 命令，而要使用 <code>let</code> 或 <code>const</code>；一个是定义了变量，却没有使用；另外两个是行首缩进为 4 个空格，而不是规定的 2 个空格。</p>`,78)]))}const i=n(o,[["render",e],["__file","style.html.vue"]]),E=JSON.parse('{"path":"/code/language/js/es6/style.html","title":"编程风格","lang":"zh-CN","frontmatter":{"icon":"style","author":"阮一峰","date":"2019-10-23T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"编程风格 本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。 多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 Airbnb 公司的 JavaScript 风格规范。 块级作用域 let 取代 var ES6 提出了两个新的声明变量的命令: let 和 c...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/es6/style.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"编程风格"}],["meta",{"property":"og:description","content":"编程风格 本章探讨如何将 ES6 的新语法，运用到编码实践之中，与传统的 JavaScript 语法结合在一起，写出合理的、易于阅读和维护的代码。 多家公司和组织已经公开了它们的风格规范，下面的内容主要参考了 Airbnb 公司的 JavaScript 风格规范。 块级作用域 let 取代 var ES6 提出了两个新的声明变量的命令: let 和 c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-12T05:50:30.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-12T05:50:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"编程风格\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-12T05:50:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[]},{"level":2,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":2,"title":"解构赋值","slug":"解构赋值","link":"#解构赋值","children":[]},{"level":2,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"Map 结构","slug":"map-结构","link":"#map-结构","children":[]},{"level":2,"title":"Class","slug":"class","link":"#class","children":[]},{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[]},{"level":2,"title":"ESLint 的使用","slug":"eslint-的使用","link":"#eslint-的使用","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644645030000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":6}]},"readingTime":{"minutes":8.2,"words":2459},"filePathRelative":"code/language/js/es6/style.md","localizedDate":"2019年10月23日","excerpt":"","autoDesc":true}');export{i as comp,E as data};
