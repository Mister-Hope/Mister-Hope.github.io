import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as i,d as s,e as n,a,w as r,f as u,b as e}from"./app-DeXa62Oh.js";const k={},d=e(`<h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World</span></a></h2><p>每个应用都有 <code>main()</code> 函数。要在控制台上显示文本，可以使用顶级 <code>print()</code> 函数:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello, World!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>即使在类型安全的 Dart 代码中，由于类型推断，大多数变量也不需要显式类型:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Voyager I&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">1977</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> antennaDiameter <span class="token operator">=</span> <span class="token number">3.7</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> flybyObjects <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Jupiter&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Saturn&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Uranus&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Neptune&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;tags&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;saturn&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;url&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;//path/to/saturn.jpg&#39;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,6),g={href:"https://dart.dev/guides/language/language-tour#variables",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"final",-1),h=s("code",null,"const",-1),v=e(`<h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><p>Dart 支持通常的控制语句:</p><div class="language-dart line-numbers-mode" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;=</span> <span class="token number">2001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;21st century&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;=</span> <span class="token number">1901</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;20th century&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> object <span class="token keyword">in</span> flybyObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>int month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> month <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">2016</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  year <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),b={href:"https://dart.dev/guides/language/language-tour#control-flow-statements",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"break",-1),y=s("code",null,"continue",-1),_=s("code",null,"switch",-1),w=s("code",null,"case",-1),x=s("code",null,"assert",-1),D=s("h2",{id:"函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#函数"},[s("span",null,"函数")])],-1),S={href:"https://dart.dev/guides/language/effective-dart/design#types",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code>int <span class="token function">fibonacci</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>简写 <code>=&gt;</code>(箭头)语法对于包含单个语句的函数很方便。当将匿名函数作为参数传递时，此语法特别有用:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code>flybyObjects<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;turn&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>除了显示匿名函数(<code>where()</code> 的参数)之外，此代码还显示您可以将函数用作参数: 顶级 <code>print()</code> 函数是 <code>forEach()</code> 的参数。</p>`,4),I={href:"https://dart.dev/guides/language/language-tour#functions",target:"_blank",rel:"noopener noreferrer"},T=e(`<h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><p>Dart 注释通常以开头 <code>//</code>。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token comment">// This is a normal, one-line comment.</span>

<span class="token comment">/// This is a documentation comment, used to document libraries,</span>
<span class="token comment">/// classes, and their members. Tools like IDEs and dartdoc treat</span>
<span class="token comment">/// doc comments specially.</span>

<span class="token comment">/*Comments like these are also supported.*/</span>
</code></pre></div>`,3),$={href:"https://dart.dev/guides/language/language-tour#comments",target:"_blank",rel:"noopener noreferrer"},C=e(`<h2 id="导入" tabindex="-1"><a class="header-anchor" href="#导入"><span>导入</span></a></h2><p>要访问其他库中定义的 API，请使用 <code>import</code>。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token comment">// Importing core libraries</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// Importing libraries from external packages</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:test/test.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// Importing files</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;path/to/my_other_file.dart&#39;</span></span><span class="token punctuation">;</span>
</code></pre></div>`,3),F={href:"https://dart.dev/guides/language/language-tour#libraries-and-visibility",target:"_blank",rel:"noopener noreferrer"},N=s("code",null,"show",-1),M=s("code",null,"hide",-1),E=s("code",null,"deferred",-1),O=e(`<h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><p>这是一个具有三个属性，两个构造函数和一个方法的类的示例。其中一个属性不能直接设置，因此是使用 <code>getter</code> 方法(而不是变量)定义的。</p><div class="language-dart line-numbers-mode" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Spacecraft</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token class-name">DateTime</span> launchDate<span class="token punctuation">;</span>

  <span class="token comment">// Constructor, with syntactic sugar for assignment to members.</span>
  <span class="token class-name">Spacecraft</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>launchDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Initialization code goes here.</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Named constructor that forwards to the default one.</span>
  <span class="token class-name">Spacecraft</span><span class="token punctuation">.</span><span class="token function">unlaunched</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  int <span class="token keyword">get</span> launchYear <span class="token operator">=</span><span class="token operator">&gt;</span>
      launchDate<span class="token operator">?</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span> <span class="token comment">// read-only non-final property</span>

  <span class="token comment">// Method.</span>
  <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Spacecraft: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">name</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>launchDate <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      int years <span class="token operator">=</span>
          <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span>launchDate<span class="token punctuation">)</span><span class="token punctuation">.</span>inDays <span class="token operator">~/</span>
              <span class="token number">365</span><span class="token punctuation">;</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Launched: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">launchYear</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">years</span></span><span class="token string"> years ago)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Unlaunched&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用这样的 <code>Spacecraft</code> 类:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">var</span> voyager <span class="token operator">=</span> <span class="token class-name">Spacecraft</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Voyager I&#39;</span></span><span class="token punctuation">,</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">1977</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
voyager<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> voyager3 <span class="token operator">=</span> <span class="token class-name">Spacecraft</span><span class="token punctuation">.</span><span class="token function">unlaunched</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Voyager III&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
voyager3<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,5),H={href:"https://dart.dev/guides/language/language-tour#classes",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"new",-1),V=s("code",null,"const",-1),W=s("code",null,"factory",-1),A=e(`<h2 id="遗产" tabindex="-1"><a class="header-anchor" href="#遗产"><span>遗产</span></a></h2><p>Dart 具有单一继承。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Orbiter</span> <span class="token keyword">extends</span> <span class="token class-name">Spacecraft</span> <span class="token punctuation">{</span>
  double altitude<span class="token punctuation">;</span>
  <span class="token class-name">Orbiter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">DateTime</span> launchDate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>altitude<span class="token punctuation">)</span>
      <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> launchDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),Z={href:"https://dart.dev/guides/language/language-tour#extending-a-class",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"@override",-1),L=e(`<h2 id="混入" tabindex="-1"><a class="header-anchor" href="#混入"><span>混入</span></a></h2><p>Mixins 是在多个类层次结构中重用代码的一种方式。以下类可以充当 mixin:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Piloted</span> <span class="token punctuation">{</span>
  int astronauts <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">describeCrew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Number of astronauts: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">astronauts</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要将 mixin 的功能添加到类中，只需使用 mixin 扩展类即可。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PilotedCraft</span> <span class="token keyword">extends</span> <span class="token class-name">Spacecraft</span> <span class="token keyword">with</span> <span class="token class-name">Piloted</span> <span class="token punctuation">{</span>
  <span class="token comment">// ···</span>
<span class="token punctuation">}</span>
</code></pre></div><p><code>PilotedCraft</code> 现在具有 <code>astronauts</code> 字段和 <code>describeCrew()</code> 方法。</p>`,6),R={href:"https://dart.dev/guides/language/language-tour#adding-features-to-a-class-mixins",target:"_blank",rel:"noopener noreferrer"},B=e(`<h2 id="接口和抽象类" tabindex="-1"><a class="header-anchor" href="#接口和抽象类"><span>接口和抽象类</span></a></h2><p>Dart 没有 <code>interface</code> 关键字。相反，所有类都隐式定义一个接口。因此，您可以实现任何类。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MockSpaceship</span> <span class="token keyword">implements</span> <span class="token class-name">Spacecraft</span> <span class="token punctuation">{</span>
  <span class="token comment">// ···</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),J={href:"https://dart.dev/guides/language/language-tour#implicit-interfaces",target:"_blank",rel:"noopener noreferrer"},U=e(`<p>您可以创建要由具体类扩展(或实现)的抽象类。抽象类可以包含抽象方法(具有空主体)。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Describable</span> <span class="token punctuation">{</span>
  <span class="token keyword">void</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">describeWithEmphasis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;=========&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;=========&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>任何扩展类 <code>Describable</code> 都具有 <code>describeWithEmphasis()</code> 方法，该方法调用扩展程序的实现 <code>describe()</code>。</p>`,3),Y={href:"https://dart.dev/guides/language/language-tour#abstract-classes",target:"_blank",rel:"noopener noreferrer"},q=e(`<h2 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h2><p>避免陷入回调地狱，您可以使用 <code>async</code> 和 <code>await</code> 来提高代码的可读性。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">const</span> oneSecond <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ···</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">printWithDelay</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>oneSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>上面的方法等效于:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">printWithDelay</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>oneSecond<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>如下例所示，<code>async</code> 和 <code>await</code> 有助于使异步代码易于阅读。</p><div class="language-dart line-numbers-mode" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">createDescriptions</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> objects<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> object <span class="token keyword">in</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> modified <span class="token operator">=</span> <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print</span><span class="token punctuation">(</span>
            <span class="token string-literal"><span class="token string">&#39;File for </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string"> already exists. It was modified on </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">modified</span></span><span class="token string">.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">writeAsString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Start describing </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string"> in this file.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">IOException</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Cannot create description for </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用 <code>async*</code>，它为您提供了一种很好的，易于阅读的方式来构建流。</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token class-name">Spacecraft</span> craft<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> objects<span class="token punctuation">)</span> <span class="token keyword">async*</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> object <span class="token keyword">in</span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>oneSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> <span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">craft<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string"> flies by </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,9),G={href:"https://dart.dev/guides/language/language-tour#asynchrony-support",target:"_blank",rel:"noopener noreferrer"},K=s("code",null,"async",-1),Q=s("code",null,"Future",-1),X=s("code",null,"Stream",-1),nn=e(`<h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><p>要引发异常，请使用 <code>throw</code>:</p><div class="language-dart" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>astronauts <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token class-name">StateError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;No astronauts.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要捕获异常，请使用 <code>try</code> 带有 <code>on</code> 或 <code>catch</code>(或两者)的语句:</p><div class="language-dart line-numbers-mode" data-ext="dart" data-title="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> object <span class="token keyword">in</span> flybyObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> description <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">object</span></span><span class="token string">.txt&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">IOException</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Could not describe object: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  flybyObjects<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的代码是异步的； <code>try</code> 适用于同步代码和 <code>async</code> 函数中的代码。</p><p>阅读有关异常的更多信息，包括堆栈跟踪 <code>rethrow</code>，和错误与异常之间的区别。</p><h2 id="其他话题" tabindex="-1"><a class="header-anchor" href="#其他话题"><span>其他话题</span></a></h2>`,8),sn={href:"https://dart.dev/guides/language/language-tour",target:"_blank",rel:"noopener noreferrer"},an={href:"https://dart.dev/guides/libraries/library-tour",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://api.dart.dev/",target:"_blank",rel:"noopener noreferrer"};function en(pn,on){const o=p("RouteLink"),t=p("ExternalLinkIcon");return l(),i("div",null,[s("p",null,[n("该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 "),a(o,{to:"/code/language/dart/samples/cheatsheet.html"},{default:r(()=>[n("Dart 概要")]),_:1}),n("。")]),u(" more "),d,s("p",null,[s("a",g,[n("阅读有关 Dart 中变量的更多信息"),a(t)]),n("，包括默认值，"),m,n(" 和 "),h,n(" 关键字以及静态类型。")]),v,s("p",null,[s("a",b,[n("阅读有关 Dart 中控制流语句的更多信息"),a(t)]),n("，包括 "),f,n(" 和 "),y,n("，"),_,n(" 和 "),w,n("，和 "),x,n("。")]),D,s("p",null,[s("a",S,[n("我们建议"),a(t)]),n(" 指定每个函数的参数和返回值的类型:")]),j,s("p",null,[s("a",I,[n("阅读有关"),a(t)]),n(" Dart 中函数的更多信息，包括可选参数，默认参数值和词法范围。")]),T,s("p",null,[s("a",$,[n("阅读有关"),a(t)]),n(" Dart 中注释的更多信息，包括文档工具的工作方式。")]),C,s("p",null,[s("a",F,[n("阅读有关"),a(t)]),n(" Dart 中库和可见性的更多信息，包括库前缀 "),N,n(" 和 "),M,n("，以及通过 "),E,n(" 关键字的延迟加载。")]),O,s("p",null,[s("a",H,[n("阅读有关"),a(t)]),n(" Dart 中类的更多信息，包括初始化列表，可选 "),P,n(" 和 "),V,n("，重定向构造函数，"),W,n(" 构造函数，getter，setter 等。")]),A,s("p",null,[s("a",Z,[n("阅读有关"),a(t)]),n(" 扩展类，可选 "),z,n(" 注释等的更多信息。")]),L,s("p",null,[s("a",R,[n("阅读有关"),a(t)]),n(" mixin 的更多信息。")]),B,s("p",null,[s("a",J,[n("阅读有关"),a(t)]),n(" 隐式接口的更多信息。")]),U,s("p",null,[s("a",Y,[n("阅读有关"),a(t)]),n(" 抽象类和方法的更多信息。")]),q,s("p",null,[s("a",G,[n("阅读更多"),a(t)]),n(" 关于异步支持，包括 "),K,n(" 功能 "),Q,n("，"),X,n(" 和异步循环(await for)。")]),nn,s("p",null,[n("更多的代码示例在 "),s("a",sn,[n("语言示例"),a(t)]),n(" 和 "),s("a",an,[n("库示例"),a(t)]),n(" 中。另请参阅 "),s("a",tn,[n("Dart API 参考"),a(t)]),n("， 其中通常包含示例。")])])}const rn=c(k,[["render",en],["__file","samples.html.vue"]]),un=JSON.parse('{"path":"/code/language/dart/samples/samples.html","title":"dart 语言范例","lang":"zh-CN","frontmatter":{"title":"dart 语言范例","icon":"discover","date":"2020-05-30T00:00:00.000Z","category":"dart","description":"该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 Dart 概要。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/dart/samples/samples.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"dart 语言范例"}],["meta",{"property":"og:description","content":"该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 Dart 概要。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2020-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"dart 语言范例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[]},{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"导入","slug":"导入","link":"#导入","children":[]},{"level":2,"title":"类","slug":"类","link":"#类","children":[]},{"level":2,"title":"遗产","slug":"遗产","link":"#遗产","children":[]},{"level":2,"title":"混入","slug":"混入","link":"#混入","children":[]},{"level":2,"title":"接口和抽象类","slug":"接口和抽象类","link":"#接口和抽象类","children":[]},{"level":2,"title":"异步","slug":"异步","link":"#异步","children":[]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[]},{"level":2,"title":"其他话题","slug":"其他话题","link":"#其他话题","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":3}]},"readingTime":{"minutes":5,"words":1501},"filePathRelative":"code/language/dart/samples/samples.md","localizedDate":"2020年5月30日","excerpt":"<p>该章内容并不全面，只是为喜欢通过示例学习的人们简要介绍了该语言。您可能还需要查看语言和库导览，或 <a href=\\"/code/language/dart/samples/cheatsheet.html\\" target=\\"_blank\\">Dart 概要</a>。</p>\\n","autoDesc":true}');export{rn as comp,un as data};
