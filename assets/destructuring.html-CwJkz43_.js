import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o}from"./app-BMeR4ubx.js";const p={};function e(c,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h1 id="变量的解构赋值" tabindex="-1"><a class="header-anchor" href="#变量的解构赋值"><span>变量的解构赋值</span></a></h1><h2 id="数组的解构赋值" tabindex="-1"><a class="header-anchor" href="#数组的解构赋值"><span>数组的解构赋值</span></a></h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring)。</p><p>以前，为变量赋值，只能直接指定值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>ES6 允许写成下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> [[</span><span style="color:#D8DEE9;">bar</span><span style="color:#ECEFF4;">],</span><span style="color:#D8DEE9;"> baz</span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> [[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">bar</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span>
<span class="line"><span style="color:#D8DEE9;">baz</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [,</span><span style="color:#ECEFF4;"> ,</span><span style="color:#D8DEE9;"> third</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bar</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">baz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">third</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;baz&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> ,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">head</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">tail</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">head</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">tail</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> ...</span><span style="color:#D8DEE9;">z</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;a&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined</span></span>
<span class="line"><span style="color:#D8DEE9;">z</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果解构不成功，变量的值就等于 <code>undefined</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">bar</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>以上两种情况都属于解构不成功，<code>foo</code> 的值都会等于 <code>undefined</code>。</p><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">b</span><span style="color:#ECEFF4;">],</span><span style="color:#D8DEE9;"> d</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">b</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span>
<span class="line"><span style="color:#D8DEE9;">d</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 4</span></span></code></pre></div><p>上面两个例子，都属于不完全解构，但是可以成功。</p><p>如果等号的右边不是数组(或者严格地说，不是可遍历的结构，参见《Iterator》一章)，那么将会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 报错</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> NaN;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> undefined;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> null;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口(前五个表达式)，要么本身就不具备 Iterator 接口(最后一个表达式)。</p><p>对于 Set 结构，也可以使用数组的解构赋值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> z</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Set</span><span style="color:#D8DEE9FF;">([</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">c</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;a&quot;</span></span></code></pre></div><p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function*</span><span style="color:#88C0D0;"> fibs</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  while</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">true</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    [</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">first</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> second</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> third</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> fourth</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> fifth</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> sixth</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> fibs</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">sixth</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>fibs</code> 是一个 Generator 函数(参见《Generator 函数》一章)，原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值"><span>默认值</span></a></h3><p>解构赋值允许指定默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // x=&#39;a&#39;, y=&#39;b&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">b</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> undefined</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // x=&#39;a&#39;, y=&#39;b&#39;</span></span></code></pre></div><p>注意，ES6 内部使用严格相等运算符(<code>===</code>)，判断一个位置是否有值。所以，只有当一个数组成员严格等于 <code>undefined</code>，默认值才会生效。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#81A1C1;">undefined</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#81A1C1;">null</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // null</span></span></code></pre></div><p>上面代码中，如果一个数组成员是 <code>null</code>，默认值就不会生效，因为 <code>null</code> 不严格等于 <code>undefined</code>。</p><p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，因为 <code>x</code> 能取到值，所以函数 <code>f</code> 根本不会执行。上面的代码其实等价于下面的代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> ([</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">][</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">===</span><span style="color:#81A1C1;"> undefined</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  x</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> f</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  x</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">][</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // x=1; y=1</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // x=2; y=2</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // x=1; y=2</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // ReferenceError: y is not defined</span></span></code></pre></div><p>上面最后一个表达式之所以会报错，是因为 <code>x</code> 用 <code>y</code> 做默认值时，<code>y</code> 还没有声明。</p><h2 id="对象的解构赋值" tabindex="-1"><a class="header-anchor" href="#对象的解构赋值"><span>对象的解构赋值</span></a></h2><p>解构不仅可以用于数组，还可以用于对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> foo</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bar</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bbb</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">bar</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;bbb&quot;</span></span></code></pre></div><p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> bar</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> foo</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bbb</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">bar</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;bbb&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> baz</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bbb</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">baz</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined</span></span></code></pre></div><p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于 <code>undefined</code>。</p><p>如果变量名与属性名不一致，必须写成下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> baz</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bbb</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">baz</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;aaa&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> first</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> last</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> first</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> f</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> last</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> l</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">f</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;hello&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">l</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;world&#39;</span></span></code></pre></div><p>这实际上说明，对象的解构赋值是下面形式的简写(参见《对象的扩展》一章)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> foo</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> bar</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bbb</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> baz</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">aaa</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bbb</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">baz</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;aaa&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // error: foo is not defined</span></span></code></pre></div><p>上面代码中，<code>foo</code> 是匹配的模式，<code>baz</code> 才是变量。真正被赋值的是变量 <code>baz</code>，而不是模式 <code>foo</code>。</p><p>与数组一样，解构也可以用于嵌套结构的对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  p</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">World</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  p</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;"> }],</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;World&quot;</span></span></code></pre></div><p>注意，这时 <code>p</code> 是模式，不是变量，因此不会被赋值。如果 <code>p</code> 也要作为变量赋值，可以写成下面这样。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  p</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">World</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  p</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  p</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;"> }],</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;World&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">p</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&quot;Hello&quot;, {y: &quot;World&quot;}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是另一个例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> node</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  loc</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    start</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">      line</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">      column</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">    },</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  loc</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  loc</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> start</span><span style="color:#ECEFF4;"> },</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  loc</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    start</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> line</span><span style="color:#ECEFF4;"> },</span></span>
<span class="line"><span style="color:#ECEFF4;">  },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> node</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">line</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">loc</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Object {start: Object}</span></span>
<span class="line"><span style="color:#D8DEE9;">start</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Object {line: 1, column: 5}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码有三次解构赋值，分别是对 <code>loc</code>、<code>start</code>、<code>line</code> 三个属性的解构赋值。注意，最后一次对 <code>line</code> 属性的解构赋值之中，只有 <code>line</code> 是变量，<code>loc</code> 和 <code>start</code> 都是模式，不是变量。</p><p>下面是嵌套赋值的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> obj</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> obj</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">prop</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> arr</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> foo</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 123</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">obj</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // {prop:123}</span></span>
<span class="line"><span style="color:#D8DEE9;">arr</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [true]</span></span></code></pre></div><p>对象的解构也可以指定默认值。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">y</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> message</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> msg</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Something went wrong</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">msg</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;Something went wrong&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认值生效的条件是，对象的属性值严格等于 <code>undefined</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> undefined</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> null</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // null</span></span></code></pre></div><p>上面代码中，属性 <code>x</code> 等于 <code>null</code>，因为 <code>null</code> 与 <code>undefined</code> 不严格相等，所以是个有效的赋值，导致默认值 <code>3</code> 不会生效。</p><p>如果解构失败，变量的值等于 <code>undefined</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> foo</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> bar</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">baz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">foo</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined</span></span></code></pre></div><p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 报错</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  foo</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> bar</span><span style="color:#ECEFF4;"> },</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> baz</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">baz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，等号左边对象的 <code>foo</code> 属性，对应一个子对象。该子对象的 <code>bar</code> 属性，解构时会报错。原因很简单，因为 <code>foo</code> 这时等于 <code>undefined</code>，再取子属性就会报错，请看下面的代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> _tmp</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> baz</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">baz</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">_tmp</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">foo</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">bar</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 报错</span></span></code></pre></div><p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 错误的写法</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;">x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// SyntaxError: syntax error</span></span></code></pre></div><p>上面代码的写法会报错，因为 JavaScript 引擎会将 <code>{x}</code> 理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 正确的写法</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p><p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{}</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#81A1C1;">true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{}</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [])</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p><p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> log</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> sin</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> cos</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> Math</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码将 <code>Math</code> 对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p><p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> first</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">arr</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> last</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">first</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 1</span></span>
<span class="line"><span style="color:#D8DEE9;">last</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span></code></pre></div><p>上面代码对数组进行对象解构。数组 <code>arr</code> 的 <code>0</code> 键对应的值是 <code>1</code>，<code>[arr.length - 1]</code> 就是 <code>2</code> 键，对应的值是 <code>3</code>。方括号这种写法，属于“属性名表达式”(参见《对象的扩展》一章)。</p><h2 id="字符串的解构赋值" tabindex="-1"><a class="header-anchor" href="#字符串的解构赋值"><span>字符串的解构赋值</span></a></h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> e</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;h&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">b</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;e&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;l&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">d</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;l&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">e</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;o&quot;</span></span></code></pre></div><p>类似数组的对象都有一个 <code>length</code> 属性，因此还可以对这个属性解构赋值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> length</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> len</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">len</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 5</span></span></code></pre></div><h2 id="数值和布尔值的解构赋值" tabindex="-1"><a class="header-anchor" href="#数值和布尔值的解构赋值"><span>数值和布尔值的解构赋值</span></a></h2><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> toString</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> s</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 123</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#81A1C1;"> ===</span><span style="color:#8FBCBB;"> Number</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">toString</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> toString</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> s</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true;</span></span>
<span class="line"><span style="color:#D8DEE9;">s</span><span style="color:#81A1C1;"> ===</span><span style="color:#8FBCBB;"> Boolean</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">toString</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p>上面代码中，数值和布尔值的包装对象都有 <code>toString</code> 属性，因此变量 <code>s</code> 都能取到值。</p><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于 <code>undefined</code> 和 <code>null</code> 无法转为对象，所以对它们进行解构赋值，都会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> prop</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> undefined;</span><span style="color:#616E88;"> // TypeError</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> prop</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> null;</span><span style="color:#616E88;"> // TypeError</span></span></code></pre></div><h2 id="函数参数的解构赋值" tabindex="-1"><a class="header-anchor" href="#函数参数的解构赋值"><span>函数参数的解构赋值</span></a></h2><p>函数的参数也可以使用解构赋值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> add</span><span style="color:#ECEFF4;">([</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">])</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span></code></pre></div><p>上面代码中，函数 <code>add</code> 的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量 <code>x</code> 和 <code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是 <code>x</code> 和 <code>y</code>。</p><p>下面是另一个例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">[</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  [</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">([</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">])</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// [ 3, 7 ]</span></span></code></pre></div><p>函数参数的解构也可以使用默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> move</span><span style="color:#ECEFF4;">({</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {})</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [3, 8]</span></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [3, 0]</span></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [0, 0]</span></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [0, 0]</span></span></code></pre></div><p>上面代码中，函数 <code>move</code> 的参数是一个对象，通过对这个对象进行解构，得到变量 <code>x</code> 和 <code>y</code> 的值。如果解构失败，<code>x</code> 和 <code>y</code> 等于默认值。</p><p>注意，下面的写法会得到不一样的结果。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> move</span><span style="color:#ECEFF4;">({</span><span style="color:#D8DEE9;"> x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;"> })</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [3, 8]</span></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [3, undefined]</span></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [undefined, undefined]</span></span>
<span class="line"><span style="color:#88C0D0;">move</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [0, 0]</span></span></code></pre></div><p>上面代码是为函数 <code>move</code> 的参数指定默认值，而不是为变量 <code>x</code> 和 <code>y</code> 指定默认值，所以会得到与前一种写法不同的结果。</p><p><code>undefined</code> 就会触发函数参数的默认值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> undefined</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">yes</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// [ 1, &#39;yes&#39;, 3 ]</span></span></code></pre></div><h2 id="圆括号问题" tabindex="-1"><a class="header-anchor" href="#圆括号问题"><span>圆括号问题</span></a></h2><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到(或解析不到)等号才能知道。</p><p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p><p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p><h3 id="不能使用圆括号的情况" tabindex="-1"><a class="header-anchor" href="#不能使用圆括号的情况"><span>不能使用圆括号的情况</span></a></h3><p>以下三种解构赋值不得使用圆括号。</p><p>(1)变量声明语句</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 全部报错</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;">x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">c</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;">(x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> c</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">): </span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9FF;"> o</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;"> p</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> p</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> o</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> p</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;"> }</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p><p>(2)函数参数</p><p>函数参数也属于变量声明，因此不能带有圆括号。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 报错</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">([</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">z</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">])</span><span style="color:#ECEFF4;"> {</span><span style="color:#81A1C1;"> return</span><span style="color:#D8DEE9;"> z</span><span style="color:#81A1C1;">;</span><span style="color:#ECEFF4;"> }</span></span>
<span class="line"><span style="color:#616E88;">// 报错</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">([</span><span style="color:#D8DEE9;">z</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">])</span><span style="color:#ECEFF4;"> {</span><span style="color:#81A1C1;"> return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;">;</span><span style="color:#ECEFF4;"> }</span></span></code></pre></div><p>(3)赋值语句的模式</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 全部报错</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> p</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> a</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> p</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 42</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码将整个模式放在圆括号之中，导致报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 报错</span></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> p</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> a</span><span style="color:#ECEFF4;"> },</span><span style="color:#ECEFF4;"> {</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#ECEFF4;">{},</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码将一部分模式放在圆括号之中，导致报错。</p><h3 id="可以使用圆括号的情况" tabindex="-1"><a class="header-anchor" href="#可以使用圆括号的情况"><span>可以使用圆括号的情况</span></a></h3><p>可以使用圆括号的情况只有一种: 赋值语句的非模式部分，可以使用圆括号。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">b</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 正确</span></span>
<span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> p</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> d</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 正确</span></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">parseInt</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">prop</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 正确</span></span></code></pre></div><p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是 <code>p</code>，而不是 <code>d</code>；第三行语句与第一行语句的性质一致。</p><h2 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h2><p>变量的解构赋值用途很多。</p><ol><li><p>交换变量的值</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 2</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">y</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> x</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码交换变量 <code>x</code> 和 <code>y</code> 的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p></li><li><p>从函数返回多个值</p><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 返回一个数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> example</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> example</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 返回一个对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> example</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">    foo</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">    bar</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> foo</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bar</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> example</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数参数的定义</p><p>解构赋值可以方便地将一组参数与变量名对应起来。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 参数是一组有次序的值</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">([</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> z</span><span style="color:#ECEFF4;">])</span><span style="color:#ECEFF4;"> {</span><span style="color:#81A1C1;"> ...</span><span style="color:#ECEFF4;"> }</span></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 参数是一组无次序的值</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> f</span><span style="color:#ECEFF4;">({</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> z</span><span style="color:#ECEFF4;">})</span><span style="color:#ECEFF4;"> {</span><span style="color:#81A1C1;"> ...</span><span style="color:#ECEFF4;"> }</span></span>
<span class="line"><span style="color:#88C0D0;">f</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;">z</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> y</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> x</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div></li><li><p>提取 JSON 数据</p><p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> jsonData</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  id</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 42</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  status</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">OK</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  data</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">867</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5309</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> id</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> status</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> data</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> number</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> jsonData</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">id</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> status</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> number</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 42, &quot;OK&quot;, [867, 5309]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码可以快速提取 JSON 数据的值。</p></li><li><p>函数参数的默认值</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">jQuery</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">ajax</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span></span>
<span class="line"><span style="color:#D8DEE9;">  url</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  {</span></span>
<span class="line"><span style="color:#D8DEE9;">    async</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    beforeSend</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {},</span></span>
<span class="line"><span style="color:#D8DEE9;">    cache</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    complete</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {},</span></span>
<span class="line"><span style="color:#D8DEE9;">    crossDomain</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    global</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#616E88;">    // ... more config</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {},</span></span>
<span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // ... do stuff</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指定参数的默认值，就避免了在函数体内部再写 <code>let foo = config.foo || &#39;default foo&#39;;</code> 这样的语句。</p></li><li><p>遍历 Map 结构</p><p>任何部署了 Iterator 接口的对象，都可以用 <code>for...of</code> 循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> map</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Map</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">map</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">set</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">first</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">map</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">set</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">second</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">key</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> map</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">key</span><span style="color:#81A1C1;"> +</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;"> is </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;">// first is hello</span></span>
<span class="line"><span style="color:#616E88;">// second is world</span></span></code></pre></div><p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 获取键名</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;">key</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> map</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 获取键值</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#ECEFF4;"> [,</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> map</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">  // ...</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div></li><li><p>输入模块的指定方法</p><p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> SourceMapConsumer</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> SourceNode</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> require</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">source-map</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div></li></ol>`,134)]))}const E=a(p,[["render",e],["__file","destructuring.html.vue"]]),y=JSON.parse('{"path":"/code/language/js/es6/destructuring.html","title":"变量的解构赋值","lang":"zh-CN","frontmatter":{"icon":"structure","author":"阮一峰","date":"2019-10-21T00:00:00.000Z","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"变量的解构赋值 数组的解构赋值 基本用法 ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring)。 以前，为变量赋值，只能直接指定值。 ES6 允许写成下面这样。 上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。 本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/es6/destructuring.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"变量的解构赋值"}],["meta",{"property":"og:description","content":"变量的解构赋值 数组的解构赋值 基本用法 ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构(Destructuring)。 以前，为变量赋值，只能直接指定值。 ES6 允许写成下面这样。 上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。 本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2019-10-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"变量的解构赋值\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"数组的解构赋值","slug":"数组的解构赋值","link":"#数组的解构赋值","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"默认值","slug":"默认值","link":"#默认值","children":[]}]},{"level":2,"title":"对象的解构赋值","slug":"对象的解构赋值","link":"#对象的解构赋值","children":[]},{"level":2,"title":"字符串的解构赋值","slug":"字符串的解构赋值","link":"#字符串的解构赋值","children":[]},{"level":2,"title":"数值和布尔值的解构赋值","slug":"数值和布尔值的解构赋值","link":"#数值和布尔值的解构赋值","children":[]},{"level":2,"title":"函数参数的解构赋值","slug":"函数参数的解构赋值","link":"#函数参数的解构赋值","children":[]},{"level":2,"title":"圆括号问题","slug":"圆括号问题","link":"#圆括号问题","children":[{"level":3,"title":"不能使用圆括号的情况","slug":"不能使用圆括号的情况","link":"#不能使用圆括号的情况","children":[]},{"level":3,"title":"可以使用圆括号的情况","slug":"可以使用圆括号的情况","link":"#可以使用圆括号的情况","children":[]}]},{"level":2,"title":"用途","slug":"用途","link":"#用途","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":6},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":13.26,"words":3979},"filePathRelative":"code/language/js/es6/destructuring.md","localizedDate":"2019年10月21日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
