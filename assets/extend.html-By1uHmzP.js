import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,e as p,b as e,o}from"./app-BMeR4ubx.js";const t="/assets/js-proto-CesjY4mL.png",r="/assets/js-proto-extend-CfLz7sEg.png",c={};function i(y,s){return o(),l("div",null,[s[0]||(s[0]=n("p",null,"在传统的基于 Class 的语言如 Java、C++ 中，继承的本质是扩展一个已有的 Class，并生成新的 Subclass。",-1)),s[1]||(s[1]=n("p",null,"由于这类语言严格区分类和实例，继承实际上是类型的扩展。但是，JavaScript 由于采用原型继承，我们无法直接扩展一个 Class，因为根本不存在 Class 这种类型。",-1)),p(" more "),s[2]||(s[2]=e(`<p>但是办法还是有的。我们先回顾 Student 构造函数:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> props</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;"> ||</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Unnamed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hello</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  alert</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">\${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>以及 Student 的原型链:</p><figure><img src="`+t+`" alt="js-proto" tabindex="0" loading="lazy"><figcaption>js-proto</figcaption></figure><p>现在，我们要基于 <code>Student</code> 扩展出 <code>PrimaryStudent</code>，可以先定义出 <code>PrimaryStudent</code>:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> PrimaryStudent</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // 调用Student构造函数，绑定this变量:</span></span>
<span class="line"><span style="color:#D8DEE9;">  Student</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">call</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> props</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> props</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;"> ||</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>但是，调用了 <code>Student</code> 构造函数不等于继承了 <code>Student</code>，<code>PrimaryStudent</code> 创建的对象的原型是:</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Object.prototype ----&gt; null</span></span></code></pre></div><p>必须想办法把原型链修改为:</p><div class="language-text" data-highlighter="shiki" data-ext="text" data-title="text" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>new PrimaryStudent() ----&gt; PrimaryStudent.prototype ----&gt; Student.prototype ----&gt; Object.prototype ----&gt; null</span></span></code></pre></div><p>这样，原型链对了，继承关系就对了。新的基于 <code>PrimaryStudent</code> 创建的对象不但能调用 <code>PrimaryStudent.prototype</code> 定义的方法，也可以调用 <code>Student.prototype</code> 定义的方法。</p><p>如果您想用最简单粗暴的方法这么干:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">PrimaryStudent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>是不行的! 如果这样的话，<code>PrimaryStudent</code> 和 <code>Student</code> 共享一个原型对象，那还要定义 <code>PrimaryStudent</code> 干啥?</p><p>我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向 <code>Student.prototype</code>。为了实现这一点，参考发明 JSON 的道格拉斯的代码，中间对象可以用一个空函数 <code>F</code> 来实现:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// PrimaryStudent构造函数:</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> PrimaryStudent</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  Student</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">call</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> props</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> props</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;"> ||</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 空函数F:</span></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> F</span><span style="color:#ECEFF4;">()</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 把F的原型指向Student.prototype:</span></span>
<span class="line"><span style="color:#8FBCBB;">F</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype:</span></span>
<span class="line"><span style="color:#8FBCBB;">PrimaryStudent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> F</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 把PrimaryStudent原型的构造函数修复为PrimaryStudent:</span></span>
<span class="line"><span style="color:#8FBCBB;">PrimaryStudent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">constructor </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> PrimaryStudent</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 继续在PrimaryStudent原型(就是new F()对象)上定义方法:</span></span>
<span class="line"><span style="color:#8FBCBB;">PrimaryStudent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getGrade</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 创建xiaoming:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> xiaoming</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> PrimaryStudent</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">  name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">小明</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">  grade</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">xiaoming</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;小明&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">xiaoming</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 验证原型:</span></span>
<span class="line"><span style="color:#D8DEE9;">xiaoming</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__proto__ </span><span style="color:#81A1C1;">===</span><span style="color:#8FBCBB;"> PrimaryStudent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">xiaoming</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__proto__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__proto__ </span><span style="color:#81A1C1;">===</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 验证继承关系:</span></span>
<span class="line"><span style="color:#D8DEE9;">xiaoming</span><span style="color:#81A1C1;"> instanceof</span><span style="color:#D8DEE9FF;"> PrimaryStudent</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">xiaoming</span><span style="color:#81A1C1;"> instanceof</span><span style="color:#D8DEE9FF;"> Student</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用一张图来表示新的原型链:</p><figure><img src="`+r+`" alt="js-proto-extend" tabindex="0" loading="lazy"><figcaption>js-proto-extend</figcaption></figure><p>注意，函数 <code>F</code> 仅用于桥接，我们仅创建了一个 <code>new F()</code> 实例，而且，没有改变原有的 <code>Student</code> 定义的原型链。</p><p>如果把继承这个动作用一个 <code>inherits()</code> 函数封装起来，还可以隐藏 <code>F</code> 的定义，并简化代码:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> inherits</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">Child</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Parent</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  const</span><span style="color:#88C0D0;"> F</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">  F</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> Parent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#8FBCBB;">  Child</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> F</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#8FBCBB;">  Child</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">constructor </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> Child</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>这个 <code>inherits()</code> 函数可以复用:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> props</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;"> ||</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Unnamed</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">Student</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hello</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  alert</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#81A1C1;">\${</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">name</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">!</span><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> PrimaryStudent</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  Student</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">call</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">this</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> props</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> props</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;"> ||</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 实现原型继承链:</span></span>
<span class="line"><span style="color:#88C0D0;">inherits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">PrimaryStudent</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> Student</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 绑定其他方法到PrimaryStudent原型:</span></span>
<span class="line"><span style="color:#8FBCBB;">PrimaryStudent</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">prototype</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getGrade</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">grade</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原型继承小结" tabindex="-1"><a class="header-anchor" href="#原型继承小结"><span>原型继承小结</span></a></h2><p>JavaScript 的原型继承实现方式就是:</p><ol><li><p>定义新的构造函数，并在内部用 <code>call()</code> 调用希望“继承”的构造函数，并绑定 <code>this</code>；</p></li><li><p>借助中间函数 <code>F</code> 实现原型链继承，最好通过封装的 <code>inherits</code> 函数完成；</p></li><li><p>继续在新的构造函数的原型上定义新方法。</p></li></ol>`,26))])}const F=a(c,[["render",i],["__file","extend.html.vue"]]),C=JSON.parse('{"path":"/code/language/js/object/extend.html","title":"原型继承","lang":"zh-CN","frontmatter":{"title":"原型继承","icon":"extend","date":"2019-10-10T00:00:00.000Z","category":"JavaScript","description":"在传统的基于 Class 的语言如 Java、C++ 中，继承的本质是扩展一个已有的 Class，并生成新的 Subclass。 由于这类语言严格区分类和实例，继承实际上是类型的扩展。但是，JavaScript 由于采用原型继承，我们无法直接扩展一个 Class，因为根本不存在 Class 这种类型。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/object/extend.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"原型继承"}],["meta",{"property":"og:description","content":"在传统的基于 Class 的语言如 Java、C++ 中，继承的本质是扩展一个已有的 Class，并生成新的 Subclass。 由于这类语言严格区分类和实例，继承实际上是类型的扩展。但是，JavaScript 由于采用原型继承，我们无法直接扩展一个 Class，因为根本不存在 Class 这种类型。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:published_time","content":"2019-10-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型继承\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-10T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"原型继承小结","slug":"原型继承小结","link":"#原型继承小结","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":5}]},"readingTime":{"minutes":2.7,"words":810},"filePathRelative":"code/language/js/object/extend.md","localizedDate":"2019年10月10日","excerpt":"<p>在传统的基于 Class 的语言如 Java、C++ 中，继承的本质是扩展一个已有的 Class，并生成新的 Subclass。</p>\\n<p>由于这类语言严格区分类和实例，继承实际上是类型的扩展。但是，JavaScript 由于采用原型继承，我们无法直接扩展一个 Class，因为根本不存在 Class 这种类型。</p>\\n","autoDesc":true}');export{F as comp,C as data};
