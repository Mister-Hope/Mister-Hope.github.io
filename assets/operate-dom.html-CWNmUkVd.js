import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as l,d as o,e as s,b as p}from"./app-DHOHoluL.js";const e={},t=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"章节过时"),s("p",null,"目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。")],-1),c=p(`<p>jQuery 的选择器很强大，用起来又简单又灵活，但是搞了这么久，我拿到了 jQuery 对象，到底要干什么?</p><p>答案当然是操作对应的 DOM 节点啦!</p><p>回顾一下修改 DOM 的 CSS、文本、设置 HTML 有多么麻烦，而且有的浏览器只有 innerHTML，有的浏览器支持 innerText，有了 jQuery 对象，不需要考虑浏览器差异了，全部统一操作!</p><h2 id="修改-text-和-html" tabindex="-1"><a class="header-anchor" href="#修改-text-和-html"><span>修改 Text 和 HTML</span></a></h2><p>jQuery 对象的 <code>text()</code> 和 <code>html()</code> 方法分别获取节点的文本和原始 HTML 文本，例如，如下的 HTML 结构:</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">&lt;!-- HTML结构 --&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;ul</span><span style="color:#8FBCBB;"> id</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">test-ul</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">JavaScript</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">book</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Java </span><span style="color:#81A1C1;">&amp;</span><span style="color:#EBCB8B;">amp</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9FF;"> JavaScript</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/ul&gt;</span></span></code></pre></div><p>分别获取文本和 HTML:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-ul li[name=book]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;Java &amp; JavaScript&#39;</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-ul li[name=book]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">html</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;Java &amp;amp; JavaScript&#39;</span></span></code></pre></div><p>如何设置文本或 HTML ? jQuery 的 API 设计非常巧妙: 无参数调用 <code>text()</code> 是获取文本，传入参数就变成设置文本，HTML 也是类似操作，自己动手试试:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">use strict</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> j1</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-ul li.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> j2</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-ul li[name=book]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">j1</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">html</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">&lt;span style=&quot;color: red&quot;&gt;JavaScript&lt;/span&gt;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">j2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">JavaScript &amp; ECMAScript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><div class="language-md" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">JavaScript</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Java &amp; JavaScript</span></span></code></pre></div><p>一个 jQuery 对象可以包含 0 个或任意个 DOM 对象，它的方法实际上会作用在对应的每个 DOM 节点上。在上面的例子中试试:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-ul li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">JS</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 是不是两个节点都变成了JS?</span></span></code></pre></div><p>所以 jQuery 对象的另一个好处是我们可以执行一个操作，作用在对应的一组 DOM 节点上。即使选择器没有返回任何 DOM 节点，调用 jQuery 对象的方法仍然不会报错:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 如果不存在 id 为 not-exist 的节点:</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#not-exist</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">text</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 代码不报错，没有节点被设置为&#39;Hello&#39;</span></span></code></pre></div><p>这意味着 jQuery 帮您免去了许多 if 语句。</p><h2 id="修改-css" tabindex="-1"><a class="header-anchor" href="#修改-css"><span>修改 CSS</span></a></h2><p>jQuery 对象有“批量操作”的特点，这用于修改 CSS 实在是太方便了。考虑下面的 HTML 结构:</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">&lt;!-- HTML 结构 --&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;ul</span><span style="color:#8FBCBB;"> id</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">test-css</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;&lt;span&gt;</span><span style="color:#D8DEE9FF;">JavaScript</span><span style="color:#81A1C1;">&lt;/span&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;&lt;span&gt;</span><span style="color:#D8DEE9FF;">Java</span><span style="color:#81A1C1;">&lt;/span&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;&lt;span&gt;</span><span style="color:#D8DEE9FF;">Python</span><span style="color:#81A1C1;">&lt;/span&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;&lt;span&gt;</span><span style="color:#D8DEE9FF;">Swift</span><span style="color:#81A1C1;">&lt;/span&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;&lt;span&gt;</span><span style="color:#D8DEE9FF;">Scheme</span><span style="color:#81A1C1;">&lt;/span&gt;&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/ul&gt;</span></span></code></pre></div><p>要高亮显示动态语言，调用 jQuery 对象的 <code>css(&#39;name&#39;, &#39;value&#39;)</code> 方法，我们用一行语句实现:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">use strict</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-css li.dy&gt;span</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">css</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">background-color</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">#ffd351</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">css</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">color</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><div class="language-md" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">JavaScript</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Java</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Python</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Swift</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Scheme</span></span></code></pre></div><p>注意，jQuery 对象的所有方法都返回一个 jQuery 对象(可能是新的也可能是自身)，这样我们可以进行链式调用，非常方便。</p><p>jQuery 对象的 <code>css()</code> 方法可以这么用:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> div</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-div</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">css</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">color</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;#000033&#39;, 获取CSS属性</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">css</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">color</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">#336699</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 设置CSS属性</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">css</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">color</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 清除CSS属性</span></span></code></pre></div><p>为了和 JavaScript 保持一致，CSS 属性可以用 <code>&#39;background-color&#39;</code> 和 <code>&#39;backgroundColor&#39;</code> 两种格式。</p><p><code>css()</code> 方法将作用于 DOM 节点的 style 属性，具有最高优先级。如果要修改 class 属性，可以用 jQuery 提供的下列方法:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> div</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-div</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hasClass</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">highlight</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false， class是否包含highlight</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">addClass</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">highlight</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 添加highlight这个class</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">removeClass</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">highlight</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 删除highlight这个class</span></span></code></pre></div><h2 id="显示和隐藏-dom" tabindex="-1"><a class="header-anchor" href="#显示和隐藏-dom"><span>显示和隐藏 DOM</span></a></h2><p>要隐藏一个 DOM，我们可以设置 CSS 的 <code>display</code> 属性为 <code>none</code>，利用 <code>css()</code> 方法就可以实现。不过，要显示这个 DOM 就需要恢复原有的 <code>display</code> 属性，这就得先记下来原有的 <code>display</code> 属性到底是 <code>block</code> 还是 <code>inline</code> 还是别的值。</p><p>考虑到显示和隐藏 DOM 元素使用非常普遍，jQuery 直接提供 <code>show()</code> 和 <code>hide()</code> 方法，我们不用关心它是如何修改 display 属性的，总之它能正常工作:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">a[target=_blank]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hide</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 隐藏</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">show</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 显示</span></span></code></pre></div><p>注意，隐藏 DOM 节点并未改变 DOM 树的结构，它只影响 DOM 节点的显示。这和删除 DOM 节点是不同的。</p><h2 id="获取-dom-信息" tabindex="-1"><a class="header-anchor" href="#获取-dom-信息"><span>获取 DOM 信息</span></a></h2><p>利用 jQuery 对象的若干方法，我们直接可以获取 DOM 的高宽等信息，而无需针对不同浏览器编写特定代码:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 浏览器可视窗口大小:</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">window</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">width</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 800</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">window</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">height</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 600</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// HTML 文档大小:</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">document</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">width</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 800</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">document</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">height</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 某个 div 的大小:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> div</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-div</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">width</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 600</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">height</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 300</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">width</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">400</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 设置 CSS 属性 width: 400px，是否生效要看 CSS 是否有效</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">height</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">200px</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 设置 CSS 属性 height: 200px，是否生效要看 CSS 是否有效</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>attr()</code> 和 <code>removeAttr()</code> 方法用于操作 DOM 节点的属性:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// &lt;div id=&quot;test-div&quot; name=&quot;Test&quot; start=&quot;1&quot;&gt;...&lt;/div&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> div</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-div</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">attr</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">data</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined, 属性不存在</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">attr</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;Test&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">attr</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // div 的 name 属性变为 &#39;Hello&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">removeAttr</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 删除 name 属性</span></span>
<span class="line"><span style="color:#D8DEE9;">div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">attr</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // undefined</span></span></code></pre></div><p><code>prop()</code> 方法和 <code>attr()</code> 类似，但是 HTML5 规定有一种属性在 DOM 节点中可以没有值，只有出现与不出现两种，例如:</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;input</span><span style="color:#8FBCBB;"> id</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">test-radio</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> type</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">radio</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">test</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> checked</span><span style="color:#8FBCBB;"> value</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> /&gt;</span></span></code></pre></div><p>等价于:</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;input</span><span style="color:#8FBCBB;"> id</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">test-radio</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> type</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">radio</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">test</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> checked</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">checked</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#8FBCBB;"> value</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> /&gt;</span></span></code></pre></div><p><code>attr()</code> 和 <code>prop()</code> 对于属性 <code>checked</code> 处理有所不同:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> radio</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-radio</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">radio</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">attr</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">checked</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;checked&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">radio</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prop</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">checked</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p><code>prop()</code> 返回值更合理一些。不过，用 <code>is()</code> 方法判断更好:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> radio</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-radio</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">radio</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">is</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">:checked</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p>类似的属性还有 <code>selected</code>，处理时最好用 <code>is(&#39;:selected&#39;)</code>。</p><h2 id="操作表单" tabindex="-1"><a class="header-anchor" href="#操作表单"><span>操作表单</span></a></h2><p>对于表单元素，jQuery 对象统一提供 <code>val()</code> 方法获取和设置对应的 <code>value</code> 属性:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">/*</span></span>
<span class="line"><span style="color:#616E88;">    &lt;input id=&quot;test-input&quot; name=&quot;email&quot; value=&quot;&quot;&gt;</span></span>
<span class="line"><span style="color:#616E88;">    &lt;select id=&quot;test-select&quot; name=&quot;city&quot;&gt;</span></span>
<span class="line"><span style="color:#616E88;">        &lt;option value=&quot;BJ&quot; selected&gt;Beijing&lt;/option&gt;</span></span>
<span class="line"><span style="color:#616E88;">        &lt;option value=&quot;SH&quot;&gt;Shanghai&lt;/option&gt;</span></span>
<span class="line"><span style="color:#616E88;">        &lt;option value=&quot;SZ&quot;&gt;Shenzhen&lt;/option&gt;</span></span>
<span class="line"><span style="color:#616E88;">    &lt;/select&gt;</span></span>
<span class="line"><span style="color:#616E88;">    &lt;textarea id=&quot;test-textarea&quot;&gt;Hello&lt;/textarea&gt;</span></span>
<span class="line"><span style="color:#616E88;">*/</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> input</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-input</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">  select</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-select</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">  textarea</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#test-textarea</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">val</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;test&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">input</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">val</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">abc@example.com</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 文本框的内容已变为 abc@example.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">select</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">val</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;BJ&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">select</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">val</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">SH</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 选择框已变为 Shanghai</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">textarea</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">val</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &#39;Hello&#39;</span></span>
<span class="line"><span style="color:#D8DEE9;">textarea</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">val</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hi</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 文本区域已更新为 &#39;Hi&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，一个 <code>val()</code> 就统一了各种输入框的取值和赋值的问题。</p>`,51);function r(E,y){return n(),l("div",null,[t,o(" more "),c])}const d=a(e,[["render",r],["__file","operate-dom.html.vue"]]),C=JSON.parse('{"path":"/code/website/jQuery/operate-dom.html","title":"操作 DOM","lang":"zh-CN","frontmatter":{"title":"操作 DOM","icon":"operate","date":"2019-11-03T00:00:00.000Z","category":"jQuery","description":"章节过时 目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/website/jQuery/operate-dom.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"操作 DOM"}],["meta",{"property":"og:description","content":"章节过时 目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-12T05:50:30.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2019-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-12T05:50:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作 DOM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-12T05:50:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"修改 Text 和 HTML","slug":"修改-text-和-html","link":"#修改-text-和-html","children":[]},{"level":2,"title":"修改 CSS","slug":"修改-css","link":"#修改-css","children":[]},{"level":2,"title":"显示和隐藏 DOM","slug":"显示和隐藏-dom","link":"#显示和隐藏-dom","children":[]},{"level":2,"title":"获取 DOM 信息","slug":"获取-dom-信息","link":"#获取-dom-信息","children":[]},{"level":2,"title":"操作表单","slug":"操作表单","link":"#操作表单","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644645030000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":5.01,"words":1503},"filePathRelative":"code/website/jQuery/operate-dom.md","localizedDate":"2019年11月3日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">章节过时</p>\\n<p>目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。</p>\\n</div>\\n","autoDesc":true}');export{d as comp,C as data};
