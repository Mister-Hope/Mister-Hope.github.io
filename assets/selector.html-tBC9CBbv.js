import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as o,d as p,e as s,f as a,b as e}from"./app-DHOHoluL.js";const t={},c=s("p",null,[a("选择器是 jQuery 的核心。一个选择器写出来类似 "),s("code",null,"$('#dom-id')"),a("。")],-1),r=e(`<p>为什么 jQuery 要发明选择器? 回顾一下 DOM 操作中我们经常使用的代码:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 按ID查找:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getElementById</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">dom-id</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 按tag查找:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> divs</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getElementsByTagName</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">div</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 查找&lt;p class=&quot;red&quot;&gt;:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> ps</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">getElementsByTagName</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">p</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// 过滤出class=&quot;red&quot;:</span></span>
<span class="line"><span style="color:#616E88;">// TODO:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 查找&lt;table class=&quot;green&quot;&gt;里面的所有&lt;tr&gt;:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> table</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> ...</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> table</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">children</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">    // TODO: 过滤出&lt;tr&gt;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些代码实在太繁琐了，并且，在层级关系中，例如，查找 <code>&lt;table class=&quot;green&quot;&gt;</code> 里面的所有 <code>&lt;tr&gt;</code>，一层循环实际上是错的，因为 <code>&lt;table&gt;</code> 的标准写法是:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;table&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;tbody&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;tr&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      ...</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;/tr&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;tr&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">      ...</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;/tr&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;/tbody&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/table&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很多时候，需要递归查找所有子节点。</p><p>jQuery 的选择器就是帮助我们快速定位到一个或多个 DOM 节点。</p><h2 id="简单选择器" tabindex="-1"><a class="header-anchor" href="#简单选择器"><span>简单选择器</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>jQuery 的选择器特别像 CSS 的选择器</p></div><h3 id="按-id-查找" tabindex="-1"><a class="header-anchor" href="#按-id-查找"><span>按 ID 查找</span></a></h3><p>如果某个 DOM 节点有 id 属性，利用 jQuery 查找如下:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 查找&lt;div id=&quot;abc&quot;&gt;:</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> div</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#abc</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>注意，<code>#abc</code> 以 <code>#</code> 开头。返回的对象是 jQuery 对象。</p><p>什么是 jQuery 对象? jQuery 对象类似数组，它的每个元素都是一个引用了 DOM 节点的对象。</p><p>以上面的查找为例，如果 id 为 <code>abc</code> 的 <code>&lt;div&gt;</code> 存在，返回的 jQuery 对象如下:</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">[</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;div</span><span style="color:#8FBCBB;"> id</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">abc</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">...</span><span style="color:#81A1C1;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">]</span></span></code></pre></div><p>如果 id 为 abc 的 <code>&lt;div&gt;</code> 不存在，返回的 jQuery 对象如下:</p><p><code>[]</code></p><p>总之 jQuery 的选择器不会返回 <code>undefined</code> 或者 <code>null</code>，这样的好处是您不必在下一行判断 <code>if (div === undefined)</code>。</p><p>jQuery 对象和 DOM 对象之间可以互相转化:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> div</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#abc</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // jQuery对象</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> divDom</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> div</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 假设存在div，获取第1个DOM元素</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> another</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">divDom</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 重新把DOM包装为jQuery对象</span></span></code></pre></div><p>通常情况下您不需要获取 DOM 对象，直接使用 jQuery 对象更加方便。如果您拿到了一个 DOM 对象，那可以简单地调用 <code>$(aDomObject)</code> 把它变成 jQuery 对象，这样就可以方便地使用 jQuery 的 API 了。</p><h3 id="按-tag-查找" tabindex="-1"><a class="header-anchor" href="#按-tag-查找"><span>按 tag 查找</span></a></h3><p>按 tag 查找只需要写上 tag 名称就可以了:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> ps</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">p</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 返回所有 &lt;p&gt; 节点</span></span>
<span class="line"><span style="color:#D8DEE9;">ps</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 数一数页面有多少个 &lt;p&gt; 节点</span></span></code></pre></div><h3 id="按-class-查找" tabindex="-1"><a class="header-anchor" href="#按-class-查找"><span>按 class 查找</span></a></h3><p>按 class 查找注意在 class 名称前加一个 <code>.</code>:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 所有节点包含 \`class=&quot;red&quot;\` 都将返回</span></span>
<span class="line"><span style="color:#616E88;">// 例如:</span></span>
<span class="line"><span style="color:#616E88;">// &lt;div class=&quot;red&quot;&gt;...&lt;/div&gt;</span></span>
<span class="line"><span style="color:#616E88;">// &lt;p class=&quot;green red&quot;&gt;...&lt;/p&gt;</span></span></code></pre></div><p>通常很多节点有多个 <strong>class</strong>，我们可以查找同时包含 <code>red</code> 和 <code>green</code> 的节点:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.red.green</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 注意没有空格!</span></span>
<span class="line"><span style="color:#616E88;">// 符合条件的节点:</span></span>
<span class="line"><span style="color:#616E88;">// &lt;div class=&quot;red green&quot;&gt;...&lt;/div&gt;</span></span>
<span class="line"><span style="color:#616E88;">// &lt;div class=&quot;blue green red&quot;&gt;...&lt;/div&gt;</span></span></code></pre></div><h3 id="按属性查找" tabindex="-1"><a class="header-anchor" href="#按属性查找"><span>按属性查找</span></a></h3><p>一个 DOM 节点除了 id 和 class 外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> email</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">[name=email]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出 \`&lt;??? name=&quot;email&quot;&gt;\`</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> passwordInput</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">[type=password]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出 \`&lt;??? type=&quot;password&quot;&gt;\`</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">[items=&quot;A B&quot;]</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出 \`&lt;??? items=&quot;A B&quot;&gt;\`</span></span></code></pre></div><p>当属性的值包含空格等特殊字符时，需要用双引号括起来。</p><p>按属性查找还可以使用前缀查找或者后缀查找:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> icons</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">[name^=icon]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出所有name属性值以icon开头的DOM</span></span>
<span class="line"><span style="color:#616E88;">// 例如: name=&quot;icon-1&quot;, name=&quot;icon-2&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> names</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">[name$=with]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出所有 name 属性值以 with 结尾的 DOM</span></span>
<span class="line"><span style="color:#616E88;">// 例如: name=&quot;startswith&quot;, name=&quot;endswith&quot;</span></span></code></pre></div><p>这个方法尤其适合通过 class 属性查找，且不受 class 包含多个名称的影响:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> icons</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">[class^=&quot;icon-&quot;]</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出所有 class 包含至少一个以 \`icon-\` 开头的DOM</span></span>
<span class="line"><span style="color:#616E88;">// 例如: class=&quot;icon-clock&quot;, class=&quot;abc icon-home&quot;</span></span></code></pre></div><h3 id="组合查找" tabindex="-1"><a class="header-anchor" href="#组合查找"><span>组合查找</span></a></h3><p>组合查找就是把上述简单选择器组合起来使用。如果我们查找 <code>$(&#39;[name=email]&#39;)</code>，很可能把表单外的 <code>&lt;div name=&quot;email&quot;&gt;</code> 也找出来，但我们只希望查找 <code>&lt;input&gt;</code>，就可以这么写:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> emailInput</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">input[name=email]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 不会找出 &lt;div name=&quot;email&quot;&gt;</span></span></code></pre></div><p>同样的，根据 tag 和 class 来组合查找也很常见:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> tr</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">tr.red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 找出 &lt;tr class=&quot;red ...&quot;&gt;...&lt;/tr&gt;</span></span></code></pre></div><h2 id="多项选择器" tabindex="-1"><a class="header-anchor" href="#多项选择器"><span>多项选择器</span></a></h2><p>多项选择器就是把多个选择器用，组合起来一块选:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">p,div</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 把 &lt;p&gt; 和 &lt;div&gt; 选出来</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">p.red,p.green</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 把 &lt;p class=&quot;red&quot;&gt; 和 &lt;p class=&quot;green&quot;&gt; 都选出来</span></span></code></pre></div><p>要注意的是，选出来的元素是按照它们在 HTML 中出现的顺序排列的，而且不会有重复元素。例如，<code>&lt;p class=&quot;red green&quot;&gt;</code> 不会被上面的 <code>$(&#39;p.red,p.green&#39;)</code> 选择两次。</p><h2 id="层级选择器" tabindex="-1"><a class="header-anchor" href="#层级选择器"><span>层级选择器</span></a></h2><p>除了基本的选择器外，jQuery 的层级选择器更加灵活，也更强大。</p><p>因为 DOM 的结构就是层级结构，所以我们经常要根据层级关系进行选择。</p><h3 id="层级选择器-descendant-selector" tabindex="-1"><a class="header-anchor" href="#层级选择器-descendant-selector"><span>层级选择器 (Descendant Selector)</span></a></h3><p>如果两个 DOM 元素具有层级关系，就可以用 <code>$(&#39;ancestor descendant&#39;)</code> 来选择，层级之间用空格隔开。例如:</p><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">&lt;!-- HTML结构 --&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;div</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">testing</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;ul</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang-javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">JavaScript</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang-python</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Python</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">    &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang-lua</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Lua</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;/ul&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/div&gt;</span></span></code></pre></div><p>要选出 JavaScript，可以用层级选择器:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li.lang-javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">div.testing li.lang-javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</span></span></code></pre></div><p>因为 <code>&lt;div&gt;</code> 和 <code>&lt;ul&gt;</code> 都是 <code>&lt;li&gt;</code> 的祖先节点，所以上面两种方式都可以选出相应的 <code>&lt;li&gt;</code> 节点。</p><p>要选择所有的 <code>&lt;li&gt;</code> 节点，用:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>这种层级选择器相比单个的选择器好处在于，它缩小了选择范围，因为首先要定位父节点，才能选择相应的子节点，这样避免了页面其他不相关的元素。</p><p>例如:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">form[name=upload] input</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>就把选择范围限定在 <code>name</code> 属性为 <code>upload</code> 的表单里。如果页面有很多表单，其他表单的 <code>&lt;input&gt;</code> 不会被选择。</p><p>多层选择也是允许的:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">form.test p input</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 在 form 表单选择被 &lt;p&gt; 包含的 &lt;input&gt;</span></span></code></pre></div><h2 id="子选择器-child-selector" tabindex="-1"><a class="header-anchor" href="#子选择器-child-selector"><span>子选择器(Child Selector)</span></a></h2><p>子选择器 <code>$(&#39;parent&gt;child&#39;)</code> 类似层级选择器，但是限定了层级关系必须是父子关系，就是 <code>&lt;child&gt;</code> 节点必须是 <code>&lt;parent&gt;</code> 节点的直属子节点。还是以上面的例子:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang&gt;li.lang-javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 可以选出 [&lt;li class=&quot;lang-javascript&quot;&gt;JavaScript&lt;/li&gt;]</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">div.testing&gt;li.lang-javascript</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [], 无法选出，因为 &lt;div&gt; 和 &lt;li&gt; 不构成父子关系</span></span></code></pre></div><h2 id="过滤器-filter" tabindex="-1"><a class="header-anchor" href="#过滤器-filter"><span>过滤器(Filter)</span></a></h2><p>过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 选出JavaScript、Python和Lua 3个节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li:first-child</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 仅选出JavaScript</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li:last-child</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 仅选出Lua</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li:nth-child(2)</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 选出第N个元素，N从1开始</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li:nth-child(even)</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 选出序号为偶数的元素</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li:nth-child(odd)</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 选出序号为奇数的元素</span></span></code></pre></div><h2 id="表单相关" tabindex="-1"><a class="header-anchor" href="#表单相关"><span>表单相关</span></a></h2><p>针对表单元素，jQuery 还有一组特殊的选择器:</p><ul><li><p><code>:input</code>: 可以选择 <code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>，<code>&lt;select&gt;</code> 和 <code>&lt;button&gt;</code>；</p></li><li><p><code>:file</code>: 可以选择 <code>&lt;input type=&quot;file&quot;&gt;</code>，和 <code>input[type=file]</code> 一样；</p></li><li><p><code>:checkbox</code>: 可以选择复选框，和 <code>input[type=checkbox]</code> 一样；</p></li><li><p><code>:radio</code>: 可以选择单选框，和 <code>input[type=radio]</code> 一样；</p></li><li><p><code>:focus</code>: 可以选择当前输入焦点的元素，例如把光标放到一个 <code>&lt;input&gt;</code> 上，用<code>$(&#39;input:focus&#39;)</code> 就可以选出；</p></li><li><p><code>:checked</code>: 选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如<code>$(&#39;input[type=radio]:checked&#39;)</code>；</p></li><li><p><code>:enabled</code>: 可以选择可以正常输入的 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code> 等，也就是没有灰掉的输入；</p></li><li><p><code>:disabled</code>: 和 <code>:enabled</code> 正好相反，选择那些不能输入的。</p></li></ul><p>此外，jQuery 还有很多有用的选择器，例如，选出可见的或隐藏的元素:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">div:visible</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 所有可见的 div</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">div:hidden</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 所有隐藏的 div</span></span></code></pre></div><h2 id="查找和过滤" tabindex="-1"><a class="header-anchor" href="#查找和过滤"><span>查找和过滤</span></a></h2><p>通常情况下选择器可以直接定位到我们想要的元素，但是，当我们拿到一个 jQuery 对象后，还可以以这个对象为基准，进行查找和过滤。</p><h3 id="查找" tabindex="-1"><a class="header-anchor" href="#查找"><span>查找</span></a></h3><p>最常见的查找是在某个节点的所有子节点中查找，使用 <code>find()</code> 方法，它本身又接收一个任意的选择器。例如如下的 HTML 结构:</p><div class="language-md" data-highlighter="shiki" data-ext="md" data-title="md" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">JavaScript</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Python</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Swift</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Scheme</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Haskell</span></span></code></pre></div><div class="language-html" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">&lt;!-- HTML结构 --&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;ul</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">lang</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">js dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">JavaScript</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Python</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> id</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">swift</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Swift</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> class</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Scheme</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">  &lt;li</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">haskell</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">Haskell</span><span style="color:#81A1C1;">&lt;/li&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;/ul&gt;</span></span></code></pre></div><p>用 <code>find()</code> 查找:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> ul</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 &lt;ul&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> dy</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> ul</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">find</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 JavaScript, Python, Scheme</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> swf</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> ul</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">find</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#swift</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 Swift</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> hsk</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> ul</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">find</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">[name=haskell]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 Haskell</span></span></code></pre></div><p>如果要从当前节点开始向上查找，使用 <code>parent()</code> 方法:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> swf</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#swift</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 Swift</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> parent</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> swf</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parent</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 Swift 的上层节点 &lt;ul&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> swf</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">parent</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.red</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 获得 Swift 的上层节点 &lt;ul&gt;，同时传入过滤条件。如果 ul 不符合条件，返回空 jQuery 对象</span></span></code></pre></div><p>对于位于同一层级的节点，可以通过 <code>next()</code> 和 <code>prev()</code> 方法，例如:</p><p>当我们已经拿到 Swift 节点后:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> swift</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">#swift</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">swift</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Scheme</span></span>
<span class="line"><span style="color:#D8DEE9;">swift</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">next</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">[name=haskell]</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 空的 jQuery 对象，因为 Swift 的下一个元素 Scheme 不符合条件 [name=haskell]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">swift</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prev</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Python</span></span>
<span class="line"><span style="color:#D8DEE9;">swift</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">prev</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Python，因为 Python 同时符合过滤器条件 .dy</span></span></code></pre></div><h3 id="过滤" tabindex="-1"><a class="header-anchor" href="#过滤"><span>过滤</span></a></h3><p>和函数式编程的 <code>map</code>、<code>filter</code> 类似，jQuery 对象也有类似的方法。</p><p><code>filter()</code> 方法可以过滤掉不符合选择器条件的节点:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> langs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 拿到 JavaScript, Python, Swift, Scheme 和 Haskell</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> langs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">filter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">.dy</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 拿到 JavaScript, Python, Scheme</span></span></code></pre></div><p>或者传入一个函数，要特别注意函数内部的 <code>this</code> 被绑定为 DOM 对象，不是 jQuery 对象:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> langs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 拿到JavaScript, Python, Swift, Scheme和Haskell</span></span>
<span class="line"><span style="color:#D8DEE9;">langs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">filter</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">innerHTML</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">indexOf</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">S</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">===</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 返回 S 开头的节点</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 拿到 Swift, Scheme</span></span></code></pre></div><p><code>map()</code> 方法把一个 jQuery 对象包含的若干 DOM 节点转化为其他对象:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> langs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 拿到 JavaScript, Python, Swift, Scheme 和 Haskell</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> arr</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> langs</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">function</span><span style="color:#ECEFF4;"> ()</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">innerHTML</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">  .</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 用 get() 拿到包含 string 的 Array: [&#39;JavaScript&#39;, &#39;Python&#39;, &#39;Swift&#39;, &#39;Scheme&#39;, &#39;Haskell&#39;]</span></span></code></pre></div><p>此外，一个 jQuery 对象如果包含了不止一个 DOM 节点，<code>first()</code>、<code>last()</code> 和 <code>slice()</code> 方法可以返回一个新的 jQuery 对象，把不需要的 DOM 节点去掉:</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> langs</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> $</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">ul.lang li</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 拿到 JavaScript, Python, Swift, Scheme 和 Haskell</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> js</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> langs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">first</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // JavaScript，相当于 $(&#39;ul.lang li:first-child&#39;)</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> haskell</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> langs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">last</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Haskell, 相当于 $(&#39;ul.lang li:last-child&#39;)</span></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> sub</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> langs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">slice</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Swift, Scheme, 参数和数组的 slice() 方法一致</span></span></code></pre></div>`,97);function i(y,E){return n(),o("div",null,[c,p(" more "),r])}const C=l(t,[["render",i],["__file","selector.html.vue"]]),D=JSON.parse(`{"path":"/code/website/jQuery/selector.html","title":"选择器","lang":"zh-CN","frontmatter":{"icon":"list","title":"选择器","date":"2019-11-03T00:00:00.000Z","category":"jQuery","description":"选择器是 jQuery 的核心。一个选择器写出来类似 $('#dom-id')。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/website/jQuery/selector.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"选择器"}],["meta",{"property":"og:description","content":"选择器是 jQuery 的核心。一个选择器写出来类似 $('#dom-id')。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2019-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"选择器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"简单选择器","slug":"简单选择器","link":"#简单选择器","children":[{"level":3,"title":"按 ID 查找","slug":"按-id-查找","link":"#按-id-查找","children":[]},{"level":3,"title":"按 tag 查找","slug":"按-tag-查找","link":"#按-tag-查找","children":[]},{"level":3,"title":"按 class 查找","slug":"按-class-查找","link":"#按-class-查找","children":[]},{"level":3,"title":"按属性查找","slug":"按属性查找","link":"#按属性查找","children":[]},{"level":3,"title":"组合查找","slug":"组合查找","link":"#组合查找","children":[]}]},{"level":2,"title":"多项选择器","slug":"多项选择器","link":"#多项选择器","children":[]},{"level":2,"title":"层级选择器","slug":"层级选择器","link":"#层级选择器","children":[{"level":3,"title":"层级选择器 (Descendant Selector)","slug":"层级选择器-descendant-selector","link":"#层级选择器-descendant-selector","children":[]}]},{"level":2,"title":"子选择器(Child Selector)","slug":"子选择器-child-selector","link":"#子选择器-child-selector","children":[]},{"level":2,"title":"过滤器(Filter)","slug":"过滤器-filter","link":"#过滤器-filter","children":[]},{"level":2,"title":"表单相关","slug":"表单相关","link":"#表单相关","children":[]},{"level":2,"title":"查找和过滤","slug":"查找和过滤","link":"#查找和过滤","children":[{"level":3,"title":"查找","slug":"查找","link":"#查找","children":[]},{"level":3,"title":"过滤","slug":"过滤","link":"#过滤","children":[]}]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":5}]},"readingTime":{"minutes":8.58,"words":2574},"filePathRelative":"code/website/jQuery/selector.md","localizedDate":"2019年11月3日","excerpt":"<p>选择器是 jQuery 的核心。一个选择器写出来类似 <code>$('#dom-id')</code>。</p>\\n","autoDesc":true}`);export{C as comp,D as data};
