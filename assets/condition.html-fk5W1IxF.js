import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as p,c,d as t,e as n,f as s,a as r,w as i,b as a}from"./app-DBDndcYm.js";const d={},y=n("p",null,"本章介绍 Bash 脚本的条件判断语法。",-1),E=a(`<h2 id="if-结构" tabindex="-1"><a class="header-anchor" href="#if-结构"><span>if 结构</span></a></h2><p><code>if</code> 是最常用的条件判断结构，只有符合给定条件时，才会执行指定的命令。它的语法如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#88C0D0;"> commands</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  commands</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">elif commands</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  commands...</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">else</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  commands</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre></div><p>这个命令分成三个部分: <code>if</code>、<code>elif</code> 和 <code>else</code>。其中，后两个部分是可选的。</p><p><code>if</code> 关键字后面是主要的判断条件，<code>elif</code> 用来添加在主条件不成立时的其他判断条件，<code>else</code> 则是所有条件都不成立时要执行的部分。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#88C0D0;"> test</span><span style="color:#D8DEE9;"> $USER</span><span style="color:#A3BE8C;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Hello foo.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">You are not foo.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre></div><p>上面的例子中，判断条件是环境变量 <code>$USER</code> 是否等于 <code>foo</code>，如果等于就输出 <code>Hello foo.</code>，否则输出其他内容。</p><p><code>if</code> 和 <code>then</code> 写在同一行时，需要分号分隔。分号是 Bash 的命令分隔符。它们也可以写成两行，这时不需要分号。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#88C0D0;"> true</span></span>
<span class="line"><span style="color:#81A1C1;">then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#88C0D0;"> false</span></span>
<span class="line"><span style="color:#81A1C1;">then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">it is false</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#616E88;"> # 本行不会执行</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre></div><p>上面的例子中，<code>true</code> 和 <code>false</code> 是两个特殊命令，前者代表操作成功，后者代表操作失败。<code>if true</code> 意味着命令部分总是会执行，<code>if false</code> 意味着命令部分永远不会执行。</p><p>除了多行的写法，<code>if</code> 结构也可以写成单行。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#81A1C1;"> true</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">hello</span><span style="color:#A3BE8C;"> world</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#81A1C1;"> false</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">It&#39;s true.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span></code></pre></div><p>注意，<code>if</code> 关键字后面也可以是一条命令，该条命令执行成功(返回值 <code>0</code>)，就意味着判断条件成立。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#A3BE8C;"> echo</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hi</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">hi</span></span>
<span class="line"><span style="color:#88C0D0;">hello</span><span style="color:#A3BE8C;"> world</span></span></code></pre></div><p>上面命令中，<code>if</code> 后面是一条命令 <code>echo &#39;hi&#39;</code>。该命令会执行，如果返回值是 <code>0</code>，则执行 <code>then</code> 的部分。</p><p><code>if</code> 后面可以跟任意数量的命令。这时，所有命令都会执行，但是判断真伪只看最后一个命令，即使前面所有命令都失败，只要最后一个命令返回 <code>0</code>，就会执行 <code>then</code> 的部分。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#81A1C1;"> false</span><span style="color:#81A1C1;">;</span><span style="color:#88C0D0;"> true</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">hello</span><span style="color:#A3BE8C;"> world</span></span></code></pre></div><p>上面例子中，<code>if</code> 后面有两条命令 (<code>false;true;</code>)，第二条命令 (<code>true</code>) 决定了 <code>then</code> 的部分是否会执行。</p><p><code>elif</code> 部分可以有多个。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#A3BE8C;"> -n</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">输入一个 1 到 3 之间的数字(包含两端)&gt; </span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">read</span><span style="color:#A3BE8C;"> character</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$character</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">1</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">elif</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$character</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#B48EAD;"> 2</span></span>
<span class="line"><span style="color:#81A1C1;">elif</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$character</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">3</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#B48EAD;"> 3</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#A3BE8C;"> 输入不符合要求</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，如果用户输入 <code>3</code>，就会连续判断 3 次。</p><h2 id="test-命令" tabindex="-1"><a class="header-anchor" href="#test-命令"><span>test 命令</span></a></h2><p><code>if</code> 结构的判断条件，一般使用 <code>test</code> 命令，有三种形式。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 写法一</span></span>
<span class="line"><span style="color:#88C0D0;">test</span><span style="color:#A3BE8C;"> expression</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 写法二</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;"> expression </span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 写法三</span></span>
<span class="line"><span style="color:#ECEFF4;">[[</span><span style="color:#D8DEE9FF;"> expression </span><span style="color:#ECEFF4;">]]</span></span></code></pre></div><p>上面三种形式是等价的，但是第三种形式还支持正则判断，前两种不支持。</p><p>上面的 <code>expression</code> 是一个表达式。这个表达式为真，<code>test</code> 命令执行成功(返回值为 <code>0</code>)；表达式为伪，<code>test</code> 命令执行失败(返回值为 <code>1</code>)。注意，第二种和第三种写法，<code>[</code> 和 <code>]</code> 与内部的表达式之间必须有空格。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> test</span><span style="color:#A3BE8C;"> -f</span><span style="color:#A3BE8C;"> /etc/hosts</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> echo</span><span style="color:#81A1C1;"> $?</span></span>
<span class="line"><span style="color:#88C0D0;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#D8DEE9FF;"> [ </span><span style="color:#A3BE8C;">-f</span><span style="color:#A3BE8C;"> /etc/hosts</span><span style="color:#A3BE8C;"> ]</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;">  echo</span><span style="color:#81A1C1;"> $?</span></span>
<span class="line"><span style="color:#88C0D0;">0</span></span></code></pre></div><p>上面的例子中，<code>test</code> 命令采用两种写法，判断 <code>/etc/hosts</code> 文件是否存在，这两种写法是等价的。命令执行后，返回值为 <code>0</code>，表示该文件确实存在。</p><p>实际上，<code>[</code> 这个字符是 <code>test</code> 命令的一种简写形式，可以看作是一个独立的命令，这解释了为什么它后面必须有空格。</p><p>下面把 <code>test</code> 命令的三种形式，用在 <code>if</code> 结构中，判断一个文件是否存在。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># 写法一</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#88C0D0;"> test</span><span style="color:#A3BE8C;"> -e</span><span style="color:#A3BE8C;"> /tmp/foo.txt</span><span style="color:#81A1C1;"> ;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Found foo.txt</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 写法二</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -e</span><span style="color:#D8DEE9FF;"> /tmp/foo.txt </span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> ;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Found foo.txt</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 写法三</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [[</span><span style="color:#81A1C1;"> -e</span><span style="color:#D8DEE9FF;"> /tmp/foo.txt </span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;"> ;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Found foo.txt</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断表达式" tabindex="-1"><a class="header-anchor" href="#判断表达式"><span>判断表达式</span></a></h2><p><code>if</code> 关键字后面，跟的是一个命令。这个命令可以是 <code>test</code> 命令，也可以是其他命令。命令的返回值为 <code>0</code> 表示判断成立，否则表示不成立。因为这些命令主要是为了得到返回值，所以可以视为表达式。</p><p>常用的判断表达式有下面这些。</p><h3 id="文件判断" tabindex="-1"><a class="header-anchor" href="#文件判断"><span>文件判断</span></a></h3><p>以下表达式用来判断文件状态。</p><ul><li><code>[ -a file ]</code>: 如果 file 存在，则为 <code>true</code>。</li><li><code>[ -b file ]</code>: 如果 file 存在并且是一个块(设备)文件，则为 <code>true</code>。</li><li><code>[ -c file ]</code>: 如果 file 存在并且是一个字符(设备)文件，则为 <code>true</code>。</li><li><code>[ -d file ]</code>: 如果 file 存在并且是一个目录，则为 <code>true</code>。</li><li><code>[ -e file ]</code>: 如果 file 存在，则为 <code>true</code>。</li><li><code>[ -f file ]</code>: 如果 file 存在并且是一个普通文件，则为 <code>true</code>。</li><li><code>[ -g file ]</code>: 如果 file 存在并且设置了组 ID，则为 <code>true</code>。</li><li><code>[ -G file ]</code>: 如果 file 存在并且属于有效的组 ID，则为 <code>true</code>。</li><li><code>[ -h file ]</code>: 如果 file 存在并且是符号链接，则为 <code>true</code>。</li><li><code>[ -k file ]</code>: 如果 file 存在并且设置了它的“sticky bit”，则为 <code>true</code>。</li><li><code>[ -L file ]</code>: 如果 file 存在并且是一个符号链接，则为 <code>true</code>。</li><li><code>[ -N file ]</code>: 如果 file 存在并且自上次读取后已被修改，则为 <code>true</code>。</li><li><code>[ -O file ]</code>: 如果 file 存在并且属于有效的用户 ID，则为 <code>true</code>。</li><li><code>[ -p file ]</code>: 如果 file 存在并且是一个命名管道，则为 <code>true</code>。</li><li><code>[ -r file ]</code>: 如果 file 存在并且可读(当前用户有可读权限)，则为 <code>true</code>。</li><li><code>[ -s file ]</code>: 如果 file 存在且其长度大于零，则为 <code>true</code>。</li><li><code>[ -S file ]</code>: 如果 file 存在且是一个网络 socket，则为 <code>true</code>。</li><li><code>[ -t fd ]</code>: 如果 fd 是一个文件描述符，并且重定向到终端，则为 <code>true</code>。这可以用来判断是否重定向了标准输入／输出错误。</li><li><code>[ -u file ]</code>: 如果 file 存在并且设置了 setuid 位，则为 <code>true</code>。</li><li><code>[ -w file ]</code>: 如果 file 存在并且可写(当前用户拥有可写权限)，则为 <code>true</code>。</li><li><code>[ -x file ]</code>: 如果 file 存在并且可执行(有效用户有执行／搜索权限)，则为 <code>true</code>。</li><li><code>[ file1 -nt file2 ]</code>: 如果 FILE1 比 FILE2 的更新时间最近，或者 FILE1 存在而 FILE2 不存在，则为 <code>true</code>。</li><li><code>[ file1 -ot file2 ]</code>: 如果 FILE1 比 FILE2 的更新时间更旧，或者 FILE2 存在而 FILE1 不存在，则为 <code>true</code>。</li><li><code>[ FILE1 -ef FILE2 ]</code>: 如果 FILE1 和 FILE2 引用相同的设备和 inode 编号，则为 <code>true</code>。</li></ul><p>下面是一个示例。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">FILE</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">~/.bashrc</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -e</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -f</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#A3BE8C;"> is a regular file.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -d</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#A3BE8C;"> is a directory.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -r</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#A3BE8C;"> is readable.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -w</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#A3BE8C;"> is writable.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -x</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#A3BE8C;"> is executable/searchable.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$FILE</span><span style="color:#A3BE8C;"> does not exist</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>$FILE</code> 要放在双引号之中。这样可以防止 <code>$FILE</code> 为空，因为这时 <code>[ -e ]</code> 会判断为真。而放在双引号之中，返回的就总是一个空字符串，<code>[ -e &quot;&quot; ]</code> 会判断为伪。</p><h3 id="字符串判断" tabindex="-1"><a class="header-anchor" href="#字符串判断"><span>字符串判断</span></a></h3><p>以下表达式用来判断字符串。</p><ul><li><code>[ string ]</code>: 如果 <code>string</code> 不为空(长度大于 0)，则判断为真。</li><li><code>[ -n string ]</code>: 如果字符串 <code>string</code> 的长度大于零，则判断为真。</li><li><code>[ -z string ]</code>: 如果字符串 <code>string</code> 的长度为零，则判断为真。</li><li><code>[ string1 = string2 ]</code>: 如果 <code>string1</code> 和 <code>string2</code> 相同，则判断为真。</li><li><code>[ string1 == string2 ]</code> 等同于 <code>[ string1 = string2 ]</code>。</li><li><code>[ string1 != string2 ]</code>: 如果 <code>string1</code> 和 <code>string2</code> 不相同，则判断为真。</li><li><code>[ string1 &#39;&gt;&#39; string2 ]</code>: 如果按照字典顺序 <code>string1</code> 排列在 <code>string2</code> 之后，则判断为真。</li><li><code>[ string1 &#39;&lt;&#39; string2 ]</code>: 如果按照字典顺序 <code>string1</code> 排列在 <code>string2</code> 之前，则判断为真。</li></ul><p>注意，<code>test</code> 命令内部的 <code>&gt;</code> 和 <code>&lt;</code>，必须用引号引起来(或者是用反斜杠转义)。否则，它们会被 shell 解释为重定向操作符。</p><p>下面是一个示例。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">ANSWER</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">maybe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -z</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$ANSWER</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">There is no answer.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$ANSWER</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">yes</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">The answer is YES.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">elif</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$ANSWER</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">no</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">The answer is NO.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">elif</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$ANSWER</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">maybe</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">The answer is MAYBE.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">The answer is UNKNOWN.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，首先确定 <code>$ANSWER</code> 字符串是否为空。如果为空，就终止脚本，并把退出状态设为 <code>1</code>。注意，这里的 <code>echo</code> 命令把错误信息 <code>There is no answer.</code> 重定向到标准错误，这是处理错误信息的常用方法。如果 <code>$ANSWER</code> 字符串不为空，就判断它的值是否等于 <code>yes</code>、<code>no</code> 或者 <code>maybe</code>。</p><p>注意，字符串判断时，变量要放在双引号之中，比如 <code>[ -n &quot;$COUNT&quot; ]</code>，否则变量替换成字符串以后，<code>test</code> 命令可能会报错，提示参数过多。另外，如果不放在双引号之中，变量为空时，命令会变成 <code>[ -n ]</code>，这时会判断为真。如果放在双引号之中，<code>[ -n &quot;&quot; ]</code> 就判断为伪。</p><h3 id="整数判断" tabindex="-1"><a class="header-anchor" href="#整数判断"><span>整数判断</span></a></h3><p>下面的表达式用于判断整数。</p><ul><li><code>[ integer1 -eq integer2 ]</code>: 如果 <code>integer1</code> 等于 <code>integer2</code>，则为 <code>true</code>。</li><li><code>[ integer1 -ne integer2 ]</code>: 如果 <code>integer1</code> 不等于 <code>integer2</code>，则为 <code>true</code>。</li><li><code>[ integer1 -le integer2 ]</code>: 如果 <code>integer1</code> 小于或等于 <code>integer2</code>，则为 <code>true</code>。</li><li><code>[ integer1 -lt integer2 ]</code>: 如果 <code>integer1</code> 小于 <code>integer2</code>，则为 <code>true</code>。</li><li><code>[ integer1 -ge integer2 ]</code>: 如果 <code>integer1</code> 大于或等于 <code>integer2</code>，则为 <code>true</code>。</li><li><code>[ integer1 -gt integer2 ]</code>: 如果 <code>integer1</code> 大于 <code>integer2</code>，则为 <code>true</code>。</li></ul><p>下面是一个用法的例子。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> -z</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is empty.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;"> $INT</span><span style="color:#81A1C1;"> -eq</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is zero.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9;"> $INT</span><span style="color:#81A1C1;"> -lt</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is negative.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  else</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is positive.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;"> $((</span><span style="color:#88C0D0;">INT</span><span style="color:#A3BE8C;"> %</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;"> -eq</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is even.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  else</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is odd.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，先判断变量 <code>$INT</code> 是否为空，然后判断是否为 <code>0</code>，接着判断正负，最后通过求余数判断奇偶。</p><h3 id="正则判断" tabindex="-1"><a class="header-anchor" href="#正则判断"><span>正则判断</span></a></h3><p><code>[[ expression ]]</code> 这种判断形式，支持正则表达式。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">[[</span><span style="color:#D8DEE9FF;"> string1 </span><span style="color:#81A1C1;">=~</span><span style="color:#D8DEE9FF;"> regex </span><span style="color:#ECEFF4;">]]</span></span></code></pre></div><p>上面的语法中，<code>regex</code> 是一个正则表示式，<code>=~</code> 是正则比较运算符。</p><p>下面是一个例子。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [[</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =~</span><span style="color:#D8DEE9FF;"> ^-</span><span style="color:#81A1C1;">?</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">0-9</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;">+$ </span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is an integer.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 0</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is not an integer.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，先判断变量 <code>INT</code> 的字符串形式，是否满足 <code>^-?[0-9]+$</code> 的正则模式，如果满足就表明它是一个整数。</p><h3 id="test-判断的逻辑运算" tabindex="-1"><a class="header-anchor" href="#test-判断的逻辑运算"><span>test 判断的逻辑运算</span></a></h3><p>通过逻辑运算，可以把多个 <code>test</code> 判断表达式结合起来，创造更复杂的判断。三种逻辑运算 <code>AND</code>，<code>OR</code>，和 <code>NOT</code>，都有自己的专用符号。</p><ul><li><code>AND</code> 运算: 符号 <code>&amp;&amp;</code>，也可使用参数 <code>-a</code>。</li><li><code>OR</code> 运算: 符号 <code>||</code>，也可使用参数 <code>-o</code>。</li><li><code>NOT</code> 运算: 符号 <code>!</code>。</li></ul><p>下面是一个 <code>AND</code> 的例子，判断整数是否在某个范围之内。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">MIN_VAL</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">1</span></span>
<span class="line"><span style="color:#D8DEE9;">MAX_VAL</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">100</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [[</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =~</span><span style="color:#D8DEE9FF;"> ^-</span><span style="color:#81A1C1;">?</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">0-9</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;">+$ </span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> [[</span><span style="color:#D8DEE9;"> $INT</span><span style="color:#81A1C1;"> -ge</span><span style="color:#D8DEE9;"> $MIN_VAL</span><span style="color:#81A1C1;"> &amp;&amp;</span><span style="color:#D8DEE9;"> $INT</span><span style="color:#81A1C1;"> -le</span><span style="color:#D8DEE9;"> $MAX_VAL</span><span style="color:#ECEFF4;"> ]]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#A3BE8C;"> is within </span><span style="color:#D8DEE9;">$MIN_VAL</span><span style="color:#A3BE8C;"> to </span><span style="color:#D8DEE9;">$MAX_VAL</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  else</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#A3BE8C;"> is out of range.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is not an integer.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，<code>&amp;&amp;</code> 用来连接两个判断条件: 大于等于 <code>$MIN_VAL</code>，并且小于等于 <code>$MAX_VAL</code>。</p><p>使用否定操作符 <code>!</code> 时，最好用圆括号确定转义的范围。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#81A1C1;"> !</span><span style="color:#EBCB8B;"> \\(</span><span style="color:#D8DEE9;"> $INT</span><span style="color:#81A1C1;"> -ge</span><span style="color:#D8DEE9;"> $MIN_VAL</span><span style="color:#81A1C1;"> -a</span><span style="color:#D8DEE9;"> $INT</span><span style="color:#81A1C1;"> -le</span><span style="color:#D8DEE9;"> $MAX_VAL</span><span style="color:#EBCB8B;"> \\)</span><span style="color:#ECEFF4;"> ]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#A3BE8C;"> is outside </span><span style="color:#D8DEE9;">$MIN_VAL</span><span style="color:#A3BE8C;"> to </span><span style="color:#D8DEE9;">$MAX_VAL</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#A3BE8C;"> is in range.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre></div><p>上面例子中，<code>test</code> 命令内部使用的圆括号，必须使用引号或者转义，否则会被 Bash 解释。</p><h3 id="算术判断" tabindex="-1"><a class="header-anchor" href="#算术判断"><span>算术判断</span></a></h3><p>Bash 还提供了 <code>((...))</code> 作为算术条件，进行算术运算的判断。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> ((</span><span style="color:#B48EAD;">3</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">true</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre></div><p>上面代码执行后，会打印出 <code>true</code>。</p><p>注意，算术判断不需要使用 <code>test</code> 命令，而是直接使用 <code>((...))</code> 结构。这个结构的返回值，决定了判断的真伪。</p><p>如果算术计算的结果是非零值，则表示判断成立。这一点跟命令的返回值正好相反，需要小心。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#D8DEE9FF;"> ((1))</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">It is true.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">It</span><span style="color:#A3BE8C;"> is</span><span style="color:#81A1C1;"> true</span><span style="color:#A3BE8C;">.</span></span>
<span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#D8DEE9FF;"> ((0))</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">It is true.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> else</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">it is false.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">It</span><span style="color:#A3BE8C;"> is</span><span style="color:#81A1C1;"> false</span><span style="color:#A3BE8C;">.</span></span></code></pre></div><p>上面例子中，<code>((1))</code> 表示判断成立，<code>((0))</code> 表示判断不成立。</p><p>算术条件 <code>((...))</code> 也可以用于变量赋值。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#D8DEE9FF;"> (( </span><span style="color:#A3BE8C;">foo</span><span style="color:#A3BE8C;"> =</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;"> ))</span><span style="color:#81A1C1;">;then</span><span style="color:#D8DEE9FF;"> echo </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">foo is </span><span style="color:#D8DEE9;">$foo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">foo</span><span style="color:#A3BE8C;"> is</span><span style="color:#B48EAD;"> 5</span></span></code></pre></div><p>上面例子中，<code>(( foo = 5 ))</code> 完成了两件事情。首先把 <code>5</code> 赋值给变量 <code>foo</code>，然后根据返回值 <code>5</code>，判断条件为真。</p><p>注意，赋值语句返回等号右边的值，如果返回的是 <code>0</code>，则判断为假。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> if</span><span style="color:#D8DEE9FF;"> (( </span><span style="color:#A3BE8C;">foo</span><span style="color:#A3BE8C;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;"> ))</span><span style="color:#81A1C1;">;then</span><span style="color:#D8DEE9FF;"> echo </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">It is true.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;else</span><span style="color:#D8DEE9FF;"> echo </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">It is false.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> fi</span></span>
<span class="line"><span style="color:#88C0D0;">It</span><span style="color:#A3BE8C;"> is</span><span style="color:#81A1C1;"> false</span><span style="color:#A3BE8C;">.</span></span></code></pre></div><p>下面是用算术条件改写的数值判断脚本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;">=</span><span style="color:#A3BE8C;">-5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [[</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$INT</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> =~</span><span style="color:#D8DEE9FF;"> ^-</span><span style="color:#81A1C1;">?</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">0-9</span><span style="color:#ECEFF4;">]</span><span style="color:#D8DEE9FF;">+$ </span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#81A1C1;">  if</span><span style="color:#ECEFF4;"> ((</span><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;"> ==</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is zero.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">  else</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#ECEFF4;"> ((</span><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">))</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">      echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is negative.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">    else</span></span>
<span class="line"><span style="color:#88C0D0;">      echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is positive.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">    fi</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#ECEFF4;"> ((</span><span style="color:#D8DEE9FF;"> ((</span><span style="color:#D8DEE9;">INT</span><span style="color:#81A1C1;"> %</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">))</span><span style="color:#D8DEE9FF;"> == 0))</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">      echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is even.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">    else</span></span>
<span class="line"><span style="color:#88C0D0;">      echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is odd.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">    fi</span></span>
<span class="line"><span style="color:#81A1C1;">  fi</span></span>
<span class="line"><span style="color:#81A1C1;">else</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">INT is not an integer.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85),C=n("code",null,"((...))",-1),F=a(`<h3 id="普通命令的逻辑运算" tabindex="-1"><a class="header-anchor" href="#普通命令的逻辑运算"><span>普通命令的逻辑运算</span></a></h3><p>如果 <code>if</code> 结构使用的不是 <code>test</code> 命令，而是普通命令，比如上一节的 <code>((...))</code> 算术运算，或者 <code>test</code> 命令与普通命令混用，那么可以使用 Bash 的命令控制操作符 <code>&amp;&amp;</code>(AND)和 <code>||</code>(OR)，进行多个命令的逻辑运算。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">command1</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> command2</span></span>
<span class="line"><span style="color:#88C0D0;">command1</span><span style="color:#81A1C1;"> ||</span><span style="color:#88C0D0;"> command2</span></span></code></pre></div><p>对于 <code>&amp;&amp;</code> 操作符，先执行 <code>command1</code>，只有 <code>command1</code> 执行成功后， 才会执行 <code>command2</code>。对于 <code>||</code> 操作符，先执行 <code>command1</code>，只有 <code>command1</code> 执行失败后， 才会执行 <code>command2</code>。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">mkdir</span><span style="color:#A3BE8C;"> temp</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> cd</span><span style="color:#A3BE8C;"> temp</span></span></code></pre></div><p>上面的命令会创建一个名为 <code>temp</code> 的目录，执行成功后，才会执行第二个命令，进入这个目录。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#81A1C1;"> -d</span><span style="color:#D8DEE9FF;"> temp </span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> ||</span><span style="color:#88C0D0;"> mkdir</span><span style="color:#A3BE8C;"> temp</span></span></code></pre></div><p>上面的命令会测试目录 <code>temp</code> 是否存在，如果不存在，就会执行第二个命令，创建这个目录。这种写法非常有助于在脚本中处理错误。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#81A1C1;"> !</span><span style="color:#81A1C1;"> -d</span><span style="color:#D8DEE9FF;"> temp </span><span style="color:#ECEFF4;">]</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> exit</span><span style="color:#B48EAD;"> 1</span></span></code></pre></div><p>上面的命令中，如果 <code>temp</code> 子目录不存在，脚本会终止，并且返回值为 <code>1</code>。</p><p>下面就是 <code>if</code> 与 <code>&amp;&amp;</code> 结合使用的写法。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9FF;"> condition </span><span style="color:#ECEFF4;">]</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9FF;"> condition </span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  command</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre></div><p>下面是一个示例。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#! /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">filename</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;">$1</span></span>
<span class="line"><span style="color:#D8DEE9;">word1</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;">$2</span></span>
<span class="line"><span style="color:#D8DEE9;">word2</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;">$3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#88C0D0;"> grep</span><span style="color:#D8DEE9;"> $word1</span><span style="color:#D8DEE9;"> $filename</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> grep</span><span style="color:#D8DEE9;"> $word2</span><span style="color:#D8DEE9;"> $filename</span></span>
<span class="line"><span style="color:#81A1C1;">then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$word1</span><span style="color:#A3BE8C;"> and </span><span style="color:#D8DEE9;">$word2</span><span style="color:#A3BE8C;"> are both in </span><span style="color:#D8DEE9;">$filename</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子只有在指定文件里面，同时存在搜索词 <code>word1</code> 和 <code>word2</code>，就会执行 <code>if</code> 的命令部分。</p><p>下面的示例演示如何将一个 <code>&amp;&amp;</code> 判断表达式，改写成对应的 <code>if</code> 结构。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">[[</span><span style="color:#81A1C1;"> -d</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$dir_name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]]</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> cd</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$dir_name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> &amp;&amp;</span><span style="color:#88C0D0;"> rm</span><span style="color:#81A1C1;"> *</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#ECEFF4;"> [[</span><span style="color:#81A1C1;"> !</span><span style="color:#81A1C1;"> -d</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$dir_name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;"> ]]</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">No such directory: &#39;</span><span style="color:#D8DEE9;">$dir_name</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#81A1C1;"> !</span><span style="color:#88C0D0;"> cd</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$dir_name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Cannot cd to &#39;</span><span style="color:#D8DEE9;">$dir_name</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#81A1C1;"> !</span><span style="color:#88C0D0;"> rm</span><span style="color:#81A1C1;"> *</span><span style="color:#81A1C1;">;</span><span style="color:#81A1C1;"> then</span></span>
<span class="line"><span style="color:#88C0D0;">  echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">File deletion failed. Check results</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> &gt;&amp;2</span></span>
<span class="line"><span style="color:#88C0D0;">  exit</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="case-结构" tabindex="-1"><a class="header-anchor" href="#case-结构"><span>case 结构</span></a></h2><p><code>case</code> 结构用于多值判断，可以为每个值指定对应的命令，跟包含多个 <code>elif</code> 的 <code>if</code> 结构等价，但是语义更好。它的语法如下。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9FF;"> expression </span><span style="color:#81A1C1;">in</span></span>
<span class="line"><span style="color:#EBCB8B;">  pattern</span><span style="color:#81A1C1;"> )</span></span>
<span class="line"><span style="color:#88C0D0;">    commands</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  pattern</span><span style="color:#81A1C1;"> )</span></span>
<span class="line"><span style="color:#88C0D0;">    commands</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  ...</span></span>
<span class="line"><span style="color:#81A1C1;">esac</span></span></code></pre></div><p>上面代码中，<code>expression</code> 是一个表达式，<code>pattern</code> 是表达式的值或者一个模式，可以有多条，用来匹配多个值，每条以两个分号 (<code>;</code>) 结尾。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#A3BE8C;"> -n</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">输入一个 1 到 3 之间的数字(包含两端)&gt; </span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">read</span><span style="color:#A3BE8C;"> character</span></span>
<span class="line"><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9;"> $character</span><span style="color:#81A1C1;"> in</span></span>
<span class="line"><span style="color:#EBCB8B;">  1</span><span style="color:#81A1C1;"> )</span><span style="color:#88C0D0;"> echo</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">    ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  2</span><span style="color:#81A1C1;"> )</span><span style="color:#88C0D0;"> echo</span><span style="color:#B48EAD;"> 2</span></span>
<span class="line"><span style="color:#81A1C1;">    ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  3</span><span style="color:#81A1C1;"> )</span><span style="color:#88C0D0;"> echo</span><span style="color:#B48EAD;"> 3</span></span>
<span class="line"><span style="color:#81A1C1;">    ;;</span></span>
<span class="line"><span style="color:#81A1C1;">  * )</span><span style="color:#88C0D0;"> echo</span><span style="color:#A3BE8C;"> 输入不符合要求</span></span>
<span class="line"><span style="color:#81A1C1;">esac</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，最后一条匹配语句的模式是 <code>*</code>，这个通配符可以匹配其他字符和没有输入字符的情况，类似 <code>if</code> 的 <code>else</code> 部分。</p><p>下面是另一个例子。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">OS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">$(</span><span style="color:#88C0D0;">uname</span><span style="color:#A3BE8C;"> -s</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">case</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#D8DEE9;">$OS</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> in</span></span>
<span class="line"><span style="color:#EBCB8B;">  FreeBSD</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">This is FreeBSD</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  Darwin</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">This is Mac OSX</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  AIX</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">This is AIX</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  Minix</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">This is Minix</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#EBCB8B;">  Linux</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">This is Linux</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#81A1C1;">  *)</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Failed to identify this OS</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span></span>
<span class="line"><span style="color:#81A1C1;">esac</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子判断当前是什么操作系统。</p><p><code>case</code> 的匹配模式可以使用各种通配符，下面是一些例子。</p><ul><li><code>a)</code>: 匹配 <code>a</code>。</li><li><code>a|b)</code>: 匹配 <code>a</code> 或 <code>b</code>。</li><li><code>[[:alpha:]])</code>: 匹配单个字母。</li><li><code>???)</code>: 匹配 3 个字符的单词。</li><li><code>*.txt)</code>: 匹配 <code>.txt</code> 结尾。</li><li><code>*)</code>: 匹配任意输入，通过作为 <code>case</code> 结构的最后一个模式。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">echo</span><span style="color:#A3BE8C;"> -n</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">输入一个字母或数字 &gt; </span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">read</span><span style="color:#A3BE8C;"> character</span></span>
<span class="line"><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9;"> $character</span><span style="color:#81A1C1;"> in</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:lower:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#ECEFF4;"> |</span><span style="color:#ECEFF4;"> [</span><span style="color:#EBCB8B;">[:upper:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;"> )</span><span style="color:#88C0D0;"> echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">输入了字母 </span><span style="color:#D8DEE9;">$character</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">                              ;;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">0-9</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> )</span><span style="color:#88C0D0;">                     echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">输入了数字 </span><span style="color:#D8DEE9;">$character</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">                              ;;</span></span>
<span class="line"><span style="color:#81A1C1;">  * )</span><span style="color:#88C0D0;">                         echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">输入不符合要求</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">esac</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中，使用通配符 <code>[[:lower:]] | [[:upper:]]</code> 匹配字母，<code>[0-9]</code> 匹配数字。</p><p>Bash 4.0 之前，<code>case</code> 结构只能匹配一个条件，然后就会退出 <code>case</code> 结构。Bash 4.0 之后，允许匹配多个条件，这时可以用 <code>;;&amp;</code> 终止每个条件块。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">#!/bin/bash</span></span>
<span class="line"><span style="color:#616E88;"># test.sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">read</span><span style="color:#A3BE8C;"> -n</span><span style="color:#B48EAD;"> 1</span><span style="color:#A3BE8C;"> -p</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Type a character &gt; </span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#88C0D0;">echo</span></span>
<span class="line"><span style="color:#81A1C1;">case</span><span style="color:#D8DEE9;"> $REPLY</span><span style="color:#81A1C1;"> in</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:upper:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is upper case.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:lower:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is lower case.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:alpha:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is alphabetic.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:digit:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is a digit.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:graph:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is a visible character.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:punct:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is a punctuation symbol.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:space:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">    echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is a whitespace character.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#ECEFF4;">  [</span><span style="color:#EBCB8B;">[:xdigit:</span><span style="color:#ECEFF4;">]</span><span style="color:#EBCB8B;">]</span><span style="color:#81A1C1;">)</span><span style="color:#88C0D0;">   echo</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">&#39;</span><span style="color:#D8DEE9;">$REPLY</span><span style="color:#A3BE8C;">&#39; is a hexadecimal digit.</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> ;;</span><span style="color:#EBCB8B;">&amp;</span></span>
<span class="line"><span style="color:#81A1C1;">esac</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的脚本，会得到下面的结果。</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">$</span><span style="color:#A3BE8C;"> test.sh</span></span>
<span class="line"><span style="color:#88C0D0;">Type</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> character</span><span style="color:#81A1C1;"> &gt;</span><span style="color:#A3BE8C;"> a</span></span>
<span class="line"><span style="color:#88C0D0;">&#39;a&#39;</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> lower</span><span style="color:#A3BE8C;"> case.</span></span>
<span class="line"><span style="color:#88C0D0;">&#39;a&#39;</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> alphabetic.</span></span>
<span class="line"><span style="color:#88C0D0;">&#39;a&#39;</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> visible</span><span style="color:#A3BE8C;"> character.</span></span>
<span class="line"><span style="color:#88C0D0;">&#39;a&#39;</span><span style="color:#A3BE8C;"> is</span><span style="color:#A3BE8C;"> a</span><span style="color:#A3BE8C;"> hexadecimal</span><span style="color:#A3BE8C;"> digit.</span></span></code></pre></div><p>可以看到条件语句结尾添加了 <code>;;&amp;</code> 以后，在匹配一个条件之后，并没有退出 <code>case</code> 结构，而是继续判断下一个条件。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2><ul><li><a href="http://linuxcommand.org/tlcl.php" target="_blank" rel="noopener noreferrer">The Linux command-line</a>, William Shotts</li><li><a href="https://www.pcwdld.com/linux-commands-cheat-sheet" target="_blank" rel="noopener noreferrer">Linux Commands Cheat Sheet</a> (一个很简短的 CheatSheet)</li></ul>`,37);function u(h,v){const l=o("RouteLink");return p(),c("div",null,[y,t(" more "),E,n("p",null,[s("只要是算术表达式，都能用于 "),C,s(" 语法，详见 "),r(l,{to:"/linux/bash/arithmetic.html"},{default:i(()=>[s("Bash 的算术运算")]),_:1}),s(" 一章。")]),F])}const b=e(d,[["render",u],["__file","condition.html.vue"]]),D=JSON.parse('{"path":"/linux/bash/condition.html","title":"条件判断","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"条件判断","icon":"condition","author":"阮一峰","category":"Linux","tag":["Bash"],"copyright":"本教程采用<a href=\\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">知识共享 署名-相同方式共享 3.0协议</a>","description":"本章介绍 Bash 脚本的条件判断语法。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/linux/bash/condition.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"条件判断"}],["meta",{"property":"og:description","content":"本章介绍 Bash 脚本的条件判断语法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:tag","content":"Bash"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"条件判断\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"if 结构","slug":"if-结构","link":"#if-结构","children":[]},{"level":2,"title":"test 命令","slug":"test-命令","link":"#test-命令","children":[]},{"level":2,"title":"判断表达式","slug":"判断表达式","link":"#判断表达式","children":[{"level":3,"title":"文件判断","slug":"文件判断","link":"#文件判断","children":[]},{"level":3,"title":"字符串判断","slug":"字符串判断","link":"#字符串判断","children":[]},{"level":3,"title":"整数判断","slug":"整数判断","link":"#整数判断","children":[]},{"level":3,"title":"正则判断","slug":"正则判断","link":"#正则判断","children":[]},{"level":3,"title":"test 判断的逻辑运算","slug":"test-判断的逻辑运算","link":"#test-判断的逻辑运算","children":[]},{"level":3,"title":"算术判断","slug":"算术判断","link":"#算术判断","children":[]},{"level":3,"title":"普通命令的逻辑运算","slug":"普通命令的逻辑运算","link":"#普通命令的逻辑运算","children":[]}]},{"level":2,"title":"case 结构","slug":"case-结构","link":"#case-结构","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":9},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":13.92,"words":4175},"filePathRelative":"linux/bash/condition.md","localizedDate":"2020年5月4日","excerpt":"<p>本章介绍 Bash 脚本的条件判断语法。</p>\\n","autoDesc":true}');export{b as comp,D as data};
