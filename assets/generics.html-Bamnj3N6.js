import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as a,e as c,b as l,f as n,a as o,w as e,r as y,o as E}from"./app-BMeR4ubx.js";const i={};function F(C,s){const p=y("RouteLink");return E(),r("div",null,[s[5]||(s[5]=a("p",null,"泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。",-1)),c(" more "),s[6]||(s[6]=l(`<h2 id="简单的例子" tabindex="-1"><a class="header-anchor" href="#简单的例子"><span>简单的例子</span></a></h2><p>首先，我们来实现一个函数 <code>createArray</code>，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> createArray</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> any</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">any</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre></div>`,3)),a("p",null,[s[1]||(s[1]=n("上例中，我们使用了")),o(p,{to:"/code/language/typescript/basics/type-of-array.html#%E6%95%B0%E7%BB%84%E6%B3%9B%E5%9E%8B"},{default:e(()=>s[0]||(s[0]=[n("之前提到过的数组泛型")])),_:1}),s[2]||(s[2]=n("来定义返回值的类型。"))]),s[7]||(s[7]=l(`<p>这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型:</p><p><code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 <code>value</code> 的类型。</p><p>这时候，泛型就派上用场了:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> createArray</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#D8DEE9FF;">[] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">string</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre></div><p>上例中，我们在函数名后添加了 <code>&lt;T&gt;</code>，其中 <code>T</code> 用来指代任意输入的类型，在后面的输入 <code>value: T</code> 和输出 <code>Array&lt;T&gt;</code> 中即可使用了。</p><p>接着在调用的时候，可以指定它具体的类型为 <code>string</code>。当然，也可以不手动指定，而让类型推论自动推算出来:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> createArray</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#D8DEE9FF;">[] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre></div><h2 id="多个类型参数" tabindex="-1"><a class="header-anchor" href="#多个类型参数"><span>多个类型参数</span></a></h2><p>定义泛型的时候，可以一次定义多个类型参数:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> swap</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> U</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">tuple</span><span style="color:#81A1C1;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> U</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#8FBCBB;">U</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> T</span><span style="color:#D8DEE9FF;">] </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#D8DEE9;">tuple</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> tuple</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">swap</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">7</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">seven</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;seven&#39;, 7]</span></span></code></pre></div><p>上例中，我们定义了一个 <code>swap</code> 函数，用来交换输入的元组。</p><h2 id="泛型约束" tabindex="-1"><a class="header-anchor" href="#泛型约束"><span>泛型约束</span></a></h2><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> loggingIdentity</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">arg</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">arg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> arg</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// index.ts(2,19): error TS2339: Property &#39;length&#39; does not exist on type &#39;T&#39;.</span></span></code></pre></div><p>上例中，泛型 <code>T</code> 不一定包含属性 <code>length</code>，所以编译的时候报错了。</p><p>这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 <code>length</code> 属性的变量。这就是泛型约束:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> Lengthwise</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> loggingIdentity</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;"> Lengthwise</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">arg</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">arg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> arg</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>上例中，我们使用了 <code>extends</code> 约束了泛型 <code>T</code> 必须符合接口 <code>Lengthwise</code> 的形状，也就是必须包含 <code>length</code> 属性。</p><p>此时如果调用 <code>loggingIdentity</code> 的时候，传入的 <code>arg</code> 不包含 <code>length</code>，那么在编译阶段就会报错了:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> Lengthwise</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> loggingIdentity</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;"> Lengthwise</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">arg</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">arg</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">length</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> arg</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">loggingIdentity</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">7</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// index.ts(10,17): error TS2345: Argument of type &#39;7&#39; is not assignable to parameter of type &#39;Lengthwise&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个类型参数之间也可以互相约束:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> copyFields</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#81A1C1;"> extends</span><span style="color:#8FBCBB;"> U</span><span style="color:#ECEFF4;">,</span><span style="color:#8FBCBB;"> U</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">target</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> source</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> U</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> id</span><span style="color:#81A1C1;"> in</span><span style="color:#D8DEE9;"> source</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    target</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">id</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> (&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#D8DEE9FF;">&gt;</span><span style="color:#D8DEE9;">source</span><span style="color:#D8DEE9FF;">)[</span><span style="color:#D8DEE9;">id</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> target</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> a</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> c</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;"> }</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">copyFields</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 10</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 20</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，我们使用了两个类型参数，其中要求 <code>T</code> 继承 <code>U</code>，这样就保证了 <code>U</code> 上不会出现 <code>T</code> 中不存在的字段。</p><h2 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口"><span>泛型接口</span></a></h2>`,24)),a("p",null,[o(p,{to:"/code/language/typescript/basics/type-of-function.html#%E6%8E%A5%E5%8F%A3%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89"},{default:e(()=>s[3]||(s[3]=[n("之前学习过")])),_:1}),s[4]||(s[4]=n("，可以使用接口的方式来定义一个函数需要符合的形状:"))]),s[8]||(s[8]=l(`<div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> SearchFunc</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#D8DEE9;">source</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> subString</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> mySearch</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> SearchFunc</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">mySearch</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">source</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> subString</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> source</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">search</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">subString</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">!==</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">1</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>当然也可以使用含有泛型的接口来定义函数的形状:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> CreateArrayFunc</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">  &lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> createArray</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> CreateArrayFunc</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> &lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#D8DEE9FF;">[] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步，我们可以把泛型参数提前到接口名上:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> CreateArrayFunc</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#ECEFF4;">  (</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> createArray</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> CreateArrayFunc</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">any</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> &lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#D8DEE9FF;">[] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">createArray</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">x</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // [&#39;x&#39;, &#39;x&#39;, &#39;x&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，此时在使用泛型接口的时候，需要定义泛型的类型。</p><h2 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h2><p>与泛型接口类似，泛型也可以用于类的类型定义中:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> GenericNumber</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  zeroValue</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">  add</span><span style="color:#81A1C1;">:</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#8FBCBB;"> T</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> myGenericNumber</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> GenericNumber</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">number</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">myGenericNumber</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">zeroValue</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">myGenericNumber</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">x</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> x</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型参数的默认类型" tabindex="-1"><a class="header-anchor" href="#泛型参数的默认类型"><span>泛型参数的默认类型</span></a></h2><p>在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> createArray</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#81A1C1;"> =</span><span style="color:#8FBCBB;"> string</span><span style="color:#ECEFF4;">&gt;(</span><span style="color:#D8DEE9;">length</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Array</span><span style="color:#ECEFF4;">&lt;</span><span style="color:#8FBCBB;">T</span><span style="color:#ECEFF4;">&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  let</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> T</span><span style="color:#D8DEE9FF;">[] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> length</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    result</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="http://www.typescriptlang.org/docs/handbook/generics.html" target="_blank" rel="noopener noreferrer">Generics</a>(<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/generics.html" target="_blank" rel="noopener noreferrer">中文版</a>)</li><li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html#generic-parameter-defaults" target="_blank" rel="noopener noreferrer">Generic parameter defaults</a></li></ul>`,14))])}const B=t(i,[["render",F],["__file","generics.html.vue"]]),A=JSON.parse('{"path":"/code/language/typescript/advanced/generics.html","title":"泛型","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"泛型","icon":"generic","category":"TypeScript","description":"泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/typescript/advanced/generics.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"简单的例子","slug":"简单的例子","link":"#简单的例子","children":[]},{"level":2,"title":"多个类型参数","slug":"多个类型参数","link":"#多个类型参数","children":[]},{"level":2,"title":"泛型约束","slug":"泛型约束","link":"#泛型约束","children":[]},{"level":2,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":2,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":2,"title":"泛型参数的默认类型","slug":"泛型参数的默认类型","link":"#泛型参数的默认类型","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":3},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":4.07,"words":1222},"filePathRelative":"code/language/typescript/advanced/generics.md","localizedDate":"2020年5月4日","excerpt":"<p>泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>\\n","autoDesc":true}');export{B as comp,A as data};
