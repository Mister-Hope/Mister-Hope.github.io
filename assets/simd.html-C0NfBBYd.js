import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o}from"./app-BGIrljxn.js";const p={};function e(t,s){return o(),n("div",null,s[0]||(s[0]=[l(`<h1 id="simd" tabindex="-1"><a class="header-anchor" href="#simd"><span>SIMD</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>SIMD(发音<code>/sim-dee/</code>)是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，您可以看做这是一种不同的运算执行模式。与它相对的是 SISD(“Single Instruction/Single Data”)，即“单指令，单数据”。</p><p>SIMD 的含义是使用一个指令，完成多个数据的运算；SISD 的含义是使用一个指令，完成单个数据的运算，这是 JavaScript 的默认运算模式。显而易见，SIMD 的执行效率要高于 SISD，所以被广泛用于 3D 图形运算、物理模拟等运算量超大的项目之中。</p><p>为了理解 SIMD，请看下面的例子。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> []</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> a</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> a</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> a</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9;"> a</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">[</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">c</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Array[6, 8, 10, 12]</span></span></code></pre></div><p>上面代码中，数组 <code>a</code> 和 <code>b</code> 的对应成员相加，结果放入数组 <code>c</code>。它的运算模式是依次处理每个数组成员，一共有四个数组成员，所以需要运算 4 次。</p><p>如果采用 SIMD 模式，只要运算一次就够了。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // Float32x4[6, 8, 10, 12]</span></span></code></pre></div><p>上面代码之中，数组 <code>a</code> 和 <code>b</code> 的四个成员的各自相加，只用一条指令就完成了。因此，速度比上一种写法提高了 4 倍。</p><p>一次 SIMD 运算，可以处理多个数据，这些数据被称为“通道”(lane)。上面代码中，一次运算了四个数据，因此就是四个通道。</p><p>SIMD 通常用于矢量运算。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">  v</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> w</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> 〈</span><span style="color:#D8DEE9;">v1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> …</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> vn</span><span style="color:#D8DEE9FF;">〉</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> 〈</span><span style="color:#D8DEE9;">w1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> …</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> wn</span><span style="color:#D8DEE9FF;">〉</span></span>
<span class="line"><span style="color:#81A1C1;">        =</span><span style="color:#D8DEE9FF;"> 〈</span><span style="color:#D8DEE9;">v1</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;">w1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> …</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> vn</span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9;">wn</span><span style="color:#D8DEE9FF;">〉</span></span></code></pre></div><p>上面代码中，<code>v</code> 和 <code>w</code> 是两个多元矢量。它们的加运算，在 SIMD 下是一个指令、而不是 n 个指令完成的，这就大大提高了效率。这对于 3D 动画、图像处理、信号处理、数值处理、加密等运算是非常重要的。比如，Canvas 的 <code>getImageData()</code> 会将图像文件读成一个二进制数组，SIMD 就很适合对于这种数组的处理。</p><p>总的来说，SIMD 是数据并行处理(parallelism)的一种手段，可以加速一些运算密集型操作的速度。将来与 WebAssembly 结合以后，可以让 JavaScript 达到二进制代码的运行速度。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>SIMD 提供 12 种数据类型，总长度都是 128 个二进制位。</p><ul><li>Float32x4: 四个 32 位浮点数</li><li>Float64x2: 两个 64 位浮点数</li><li>Int32x4: 四个 32 位整数</li><li>Int16x8: 八个 16 位整数</li><li>Int8x16: 十六个 8 位整数</li><li>Uint32x4: 四个无符号的 32 位整数</li><li>Uint16x8: 八个无符号的 16 位整数</li><li>Uint8x16: 十六个无符号的 8 位整数</li><li>Bool32x4: 四个 32 位布尔值</li><li>Bool16x8: 八个 16 位布尔值</li><li>Bool8x16: 十六个 8 位布尔值</li><li>Bool64x2: 两个 64 位布尔值</li></ul><p>每种数据类型被 <code>x</code> 符号分隔成两部分，后面的部分表示通道数，前面的部分表示每个通道的宽度和类型。比如，<code>Float32x4</code> 就表示这个值有 4 个通道，每个通道是一个 32 位浮点数。</p><p>每个通道之中，可以放置四种数据。</p><ul><li>浮点数(float，比如 1.0)</li><li>带符号的整数(Int，比如-1)</li><li>无符号的整数(Uint，比如 1)</li><li>布尔值(Bool，包含 <code>true</code> 和 <code>false</code> 两种值)</li></ul><p>每种 SIMD 的数据类型都是一个函数方法，可以传入参数，生成对应的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，变量 <code>a</code> 就是一个 128 位、包含四个 32 位浮点数(即四个通道)的值。</p><p>注意，这些数据类型方法都不是构造函数，前面不能加 <code>new</code>，否则会报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> v</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// TypeError: SIMD.Float32x4 is not a constructor</span></span></code></pre></div><h2 id="静态方法-数学运算" tabindex="-1"><a class="header-anchor" href="#静态方法-数学运算"><span>静态方法: 数学运算</span></a></h2><p>每种数据类型都有一系列运算符，支持基本的数学运算。</p><h3 id="simd-type-abs-simd-type-neg" tabindex="-1"><a class="header-anchor" href="#simd-type-abs-simd-type-neg"><span>SIMD.%type%.abs()，SIMD.%type%.neg()</span></a></h3><p><code>abs</code> 方法接受一个 SIMD 值作为参数，将它的每个通道都转成绝对值，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> NaN</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">abs</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 2, 0, NaN]</span></span></code></pre></div><p><code>neg</code> 方法接受一个 SIMD 值作为参数，将它的每个通道都转成负值，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">neg</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 2, -3, -0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">NaN</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float64x2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">neg</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float64x2[NaN, -Infinity]</span></span></code></pre></div><h3 id="simd-type-add-simd-type-addsaturate" tabindex="-1"><a class="header-anchor" href="#simd-type-add-simd-type-addsaturate"><span>SIMD.%type%.add()，SIMD.%type%.addSaturate()</span></a></h3><p><code>add</code> 方法接受两个 SIMD 值作为参数，将它们的每个通道相加，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 10.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 15.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 20.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>上面代码中，经过加法运算，新的 SIMD 值为 <code>(6.0, 12.0, 18.0. 24.0)</code>。</p><p><code>addSaturate</code> 方法跟 <code>add</code> 方法的作用相同，都是两个通道相加，但是溢出的处理不一致。对于 <code>add</code> 方法，如果两个值相加发生溢出，溢出的二进制位会被丢弃; <code>addSaturate</code> 方法则是返回该数据类型的最大值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Uint16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">65533</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 65534</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 65535</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 65535</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Uint16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5000</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Uint16x8</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">addSaturate</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Uint16x8[65534, 65535, 65535, 65535, 2, 2, 2, 2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">32765</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 32766</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 32767</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 32767</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5000</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int16x8</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">addSaturate</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int16x8[32766, 32767, 32767, 32767, 2, 2, 2, 2]</span></span></code></pre></div><p>上面代码中，<code>Uint16</code> 的最大值是 65535，<code>Int16</code> 的最大值是 32767。一旦发生溢出，就返回这两个值。</p><p>注意，<code>Uint32x4</code> 和 <code>Int32x4</code> 这两种数据类型没有 <code>addSaturate</code> 方法。</p><h3 id="simd-type-sub-simd-type-subsaturate" tabindex="-1"><a class="header-anchor" href="#simd-type-sub-simd-type-subsaturate"><span>SIMD.%type%.sub()，SIMD.%type%.subSaturate()</span></a></h3><p><code>sub</code> 方法接受两个 SIMD 值作为参数，将它们的每个通道相减，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">sub</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[-4, -5, 0, 1]</span></span></code></pre></div><p><code>subSaturate</code> 方法跟 <code>sub</code> 方法的作用相同，都是两个通道相减，但是溢出的处理不一致。对于 <code>sub</code> 方法，如果两个值相减发生溢出，溢出的二进制位会被丢弃; <code>subSaturate</code> 方法则是返回该数据类型的最小值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Uint16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Uint16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Uint16x8</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">subSaturate</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Uint16x8[0, 0, 0, 0, 0, 0, 0, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">100</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int16x8</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">32767</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int16x8</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">subSaturate</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int16x8[-32768, 0, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre></div><p>上面代码中，<code>Uint16</code> 的最小值是 <code>0</code>，<code>Int16</code> 的最小值是 <code>-32678</code>。一旦运算发生溢出，就返回最小值。</p><h3 id="simd-type-mul-simd-type-div-simd-type-sqrt" tabindex="-1"><a class="header-anchor" href="#simd-type-mul-simd-type-div-simd-type-sqrt"><span>SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()</span></a></h3><p><code>mul</code> 方法接受两个 SIMD 值作为参数，将它们的每个通道相乘，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">mul</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[-3, -6, 9, 12]</span></span></code></pre></div><p><code>div</code> 方法接受两个 SIMD 值作为参数，将它们的每个通道相除，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">div</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[0.5, 0.5, 0.5, 0.5]</span></span></code></pre></div><p><code>sqrt</code> 方法接受一个 SIMD 值作为参数，求出每个通道的平方根，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float64x2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">sqrt</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float64x2[2, 2.8284271247461903]</span></span></code></pre></div><h3 id="simd-floattype-reciprocalapproximation" tabindex="-1"><a class="header-anchor" href="#simd-floattype-reciprocalapproximation"><span>SIMD.%FloatType%.reciprocalApproximation()</span></a></h3><p><code>reciprocalApproximation</code> 方法接受一个 SIMD 值作为参数，求出每个通道的倒数(<code>1 / x</code>)，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reciprocalApproximation</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 0.5, 0.3333333432674408, 0.25]</span></span></code></pre></div><h3 id="simd-type-reciprocalsqrtapproximation" tabindex="-1"><a class="header-anchor" href="#simd-type-reciprocalsqrtapproximation"><span>SIMD.%type%.reciprocalSqrtApproximation()</span></a></h3><p><code>reciprocalSqrtApproximation</code> 方法接受一个 SIMD 值作为参数，求出每个通道的平方根的倒数(<code>1 / (x^0.5)</code>)，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">reciprocalSqrtApproximation</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 0.7071067690849304, 0.5773502588272095, 0.5]</span></span></code></pre></div><p>注意，只有浮点数的数据类型才有这两个方法。</p><h3 id="simd-integertype-shiftleftbyscalar" tabindex="-1"><a class="header-anchor" href="#simd-integertype-shiftleftbyscalar"><span>SIMD.%IntegerType%.shiftLeftByScalar()</span></a></h3><p><code>shiftLeftByScalar</code> 方法接受一个 SIMD 值作为参数，然后将每个通道的值左移指定的位数，作为一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shiftLeftByScalar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[2, 4, 8, 16]</span></span></code></pre></div><p>如果左移后，新的值超出了当前数据类型的位数，溢出的部分会被丢弃。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> ix4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> jx4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shiftLeftByScalar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ix4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 32</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[0, 0, 0, 0]</span></span></code></pre></div><p>注意，只有整数的数据类型才有这个方法。</p><h3 id="simd-integertype-shiftrightbyscalar" tabindex="-1"><a class="header-anchor" href="#simd-integertype-shiftrightbyscalar"><span>SIMD.%IntegerType%.shiftRightByScalar()</span></a></h3><p><code>shiftRightByScalar</code> 方法接受一个 SIMD 值作为参数，然后将每个通道的值右移指定的位数，返回一个新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shiftRightByScalar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[0, 1, 2, -4]</span></span></code></pre></div><p>如果原来通道的值是带符号的值，则符号位保持不变，不受右移影响。如果是不带符号位的值，则右移后头部会补 <code>0</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Uint32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Uint32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shiftRightByScalar</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Uint32x4[0, 1, 2, 2147483644]</span></span></code></pre></div><p>上面代码中，<code>-8</code> 右移一位变成了 <code>2147483644</code>，是因为对于 32 位无符号整数来说，<code>-8</code> 的二进制形式是 <code>11111111111111111111111111111000</code>，右移一位就变成了 <code>01111111111111111111111111111100</code>，相当于 <code>2147483644</code>。</p><p>注意，只有整数的数据类型才有这个方法。</p><h2 id="静态方法-通道处理" tabindex="-1"><a class="header-anchor" href="#静态方法-通道处理"><span>静态方法: 通道处理</span></a></h2><h3 id="simd-type-check" tabindex="-1"><a class="header-anchor" href="#simd-type-check"><span>SIMD.%type%.check()</span></a></h3><p><code>check</code> 方法用于检查一个值是否为当前类型的 SIMD 值。如果是的，就返回这个值，否则就报错。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">check</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 2, 3, 9]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">check</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 报错</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">check</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 报错</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">check</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">hello world</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 报错</span></span></code></pre></div><h3 id="simd-type-extractlane-simd-type-replacelane" tabindex="-1"><a class="header-anchor" href="#simd-type-extractlane-simd-type-replacelane"><span>SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()</span></a></h3><p><code>extractLane</code> 方法用于返回给定通道的值。它接受两个参数，分别是 SIMD 值和通道编号。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extractLane</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // 3</span></span></code></pre></div><p><code>replaceLane</code> 方法用于替换指定通道的值，并返回一个新的 SIMD 值。它接受三个参数，分别是原来的 SIMD 值、通道编号和新的通道值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">replaceLane</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 42</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 2, 42, 4]</span></span></code></pre></div><h3 id="simd-type-load" tabindex="-1"><a class="header-anchor" href="#simd-type-load"><span>SIMD.%type%.load()</span></a></h3><p><code>load</code> 方法用于从二进制数组读入数据，生成一个新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Int32Array</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Int32Array</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[3, 4, 5, 6]</span></span></code></pre></div><p><code>load</code> 方法接受两个参数: 一个二进制数组和开始读取的位置(从 0 开始)。如果位置不合法(比如 <code>-1</code> 或者超出二进制数组的大小)，就会抛出一个错误。</p><p>这个方法还有三个变种 <code>load1()</code>、<code>load2()</code>、<code>load3()</code>，表示从指定位置开始，只加载一个通道、二个通道、三个通道的值。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 格式</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">tarray</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load1</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">tarray</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">tarray</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load3</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">tarray</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 实例</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Int32Array</span><span style="color:#D8DEE9FF;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">])</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load1</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1, 0, 0, 0]</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1, 2, 0, 0]</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load3</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1, 2, 3,0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="simd-type-store" tabindex="-1"><a class="header-anchor" href="#simd-type-store"><span>SIMD.%type%.store()</span></a></h3><p><code>store</code> 方法用于将一个 SIMD 值，写入一个二进制数组。它接受三个参数，分别是二进制数组、开始写入的数组位置、SIMD 值。它返回写入值以后的二进制数组。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t1</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Int32Array</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> v1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">store</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> v1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32Array[1, 2, 3, 4, 0, 0, 0, 0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t2</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Int32Array</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> v2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">store</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> v2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32Array[0, 0, 1, 2, 3, 4, 0, 0]</span></span></code></pre></div><p>上面代码中，<code>t1</code> 是一个二进制数组，<code>v1</code> 是一个 SIMD 值，只有四个通道。所以写入 <code>t1</code> 以后，只有前四个位置有值，后四个位置都是 0。而 <code>t2</code> 是从 2 号位置开始写入，所以前两个位置和后两个位置都是 0。</p><p>这个方法还有三个变种 <code>store1()</code>、<code>store2()</code> 和 <code>store3()</code>，表示只写入一个通道、二个通道和三个通道的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> tarray</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Int32Array</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> value</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">store1</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">tarray</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32Array[1, 0, 0, 0, 0, 0, 0, 0]</span></span></code></pre></div><h3 id="simd-type-splat" tabindex="-1"><a class="header-anchor" href="#simd-type-splat"><span>SIMD.%type%.splat()</span></a></h3><p><code>splat</code> 方法返回一个新的 SIMD 值，该值的所有通道都会设成同一个预先给定的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">splat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[3, 3, 3, 3]</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float64x2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">splat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float64x2[3, 3]</span></span></code></pre></div><p>如果省略参数，所有整数型的 SIMD 值都会设定 <code>0</code>，浮点型的 SIMD 值都会设成 <code>NaN</code>。</p><h3 id="simd-type-swizzle" tabindex="-1"><a class="header-anchor" href="#simd-type-swizzle"><span>SIMD.%type%.swizzle()</span></a></h3><p><code>swizzle</code> 方法返回一个新的 SIMD 值，重新排列原有的 SIMD 值的通道顺序。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">swizzle</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[2,3,1,4]</span></span></code></pre></div><p>上面代码中，<code>swizzle</code> 方法的第一个参数是原有的 SIMD 值，后面的参数对应将要返回的 SIMD 值的四个通道。它的意思是新的 SIMD 的四个通道，依次是原来 SIMD 值的 1 号通道、2 号通道、0 号通道、3 号通道。由于 SIMD 值最多可以有 16 个通道，所以 <code>swizzle</code> 方法除了第一个参数以外，最多还可以接受 16 个参数。</p><p>下面是另一个例子。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1.0, 2.0, 3.0, 4.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">swizzle</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1.0, 1.0, 2.0, 2.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">swizzle</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[4.0, 4.0, 4.0, 4.0]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">swizzle</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[4.0, 3.0, 2.0, 1.0]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="simd-type-shuffle" tabindex="-1"><a class="header-anchor" href="#simd-type-shuffle"><span>SIMD.%type%.shuffle()</span></a></h3><p><code>shuffle</code> 方法从两个 SIMD 值之中取出指定通道，返回一个新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">shuffle</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[2, 6, 8, 3]</span></span></code></pre></div><p>上面代码中，<code>a</code> 和 <code>b</code> 一共有 8 个通道，依次编号为 0 到 7。<code>shuffle</code> 根据编号，取出相应的通道，返回一个新的 SIMD 值。</p><h2 id="静态方法-比较运算" tabindex="-1"><a class="header-anchor" href="#静态方法-比较运算"><span>静态方法: 比较运算</span></a></h2><h3 id="simd-type-equal-simd-type-notequal" tabindex="-1"><a class="header-anchor" href="#simd-type-equal-simd-type-notequal"><span>SIMD.%type%.equal()，SIMD.%type%.notEqual()</span></a></h3><p><code>equal</code> 方法用来比较两个 SIMD 值 <code>a</code> 和 <code>b</code> 的每一个通道，根据两者是否精确相等(<code>a === b</code>)，得到一个布尔值。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。<code>notEqual</code> 方法则是比较两个通道是否不相等(<code>a !== b</code>)。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">equal</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[true, false, false, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">notEqual</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[false, true, true, false]</span></span></code></pre></div><h3 id="simd-type-greaterthan-simd-type-greaterthanorequal" tabindex="-1"><a class="header-anchor" href="#simd-type-greaterthan-simd-type-greaterthanorequal"><span>SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()</span></a></h3><p><code>greatThan</code> 方法用来比较两个 SIMD 值 <code>a</code> 和 <code>b</code> 的每一个通道，如果在该通道中，<code>a</code> 较大就得到 <code>true</code>，否则得到 <code>false</code>。最后，所有通道的比较结果，组成一个新的 SIMD 值，作为掩码返回。<code>greaterThanOrEqual</code> 则是比较 <code>a</code> 是否大于等于 <code>b</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 11</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">greaterThan</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[false, true, false, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">greaterThanOrEqual</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[true, true, false, true]</span></span></code></pre></div><h3 id="simd-type-lessthan-simd-type-lessthanorequal" tabindex="-1"><a class="header-anchor" href="#simd-type-lessthan-simd-type-lessthanorequal"><span>SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()</span></a></h3><p><code>lessThan</code> 方法用来比较两个 SIMD 值 <code>a</code> 和 <code>b</code> 的每一个通道，如果在该通道中，<code>a</code> 较小就得到 <code>true</code>，否则得到 <code>false</code>。最后，所有通道的比较结果，会组成一个新的 SIMD 值，作为掩码返回。<code>lessThanOrEqual</code> 方法则是比较 <code>a</code> 是否等于 <code>b</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 11</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lessThan</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[false, true, true, false]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lessThanOrEqual</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[true, true, true, false]</span></span></code></pre></div><h3 id="simd-type-select" tabindex="-1"><a class="header-anchor" href="#simd-type-select"><span>SIMD.%type%.select()</span></a></h3><p><code>select</code> 方法通过掩码生成一个新的 SIMD 值。它接受三个参数，分别是掩码和两个 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> mask</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Bool32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">select</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">mask</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1, 6, 7, 4]</span></span></code></pre></div><p>上面代码中，<code>select</code> 方法接受掩码和两个 SIMD 值作为参数。当某个通道对应的掩码为 <code>true</code> 时，会选择第一个 SIMD 值的对应通道，否则选择第二个 SIMD 值的对应通道。</p><p>这个方法通常与比较运算符结合使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 12</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 50</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> mask</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lessThan</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Bool32x4[false, false, true, true]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> result</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">select</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">mask</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[0, 6, 3, 4]</span></span></code></pre></div><p>上面代码中，先通过 <code>lessThan</code> 方法生成一个掩码，然后通过 <code>select</code> 方法生成一个由每个通道的较小值组成的新的 SIMD 值。</p><h3 id="simd-booleantype-alltrue-simd-booleantype-anytrue" tabindex="-1"><a class="header-anchor" href="#simd-booleantype-alltrue-simd-booleantype-anytrue"><span>SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()</span></a></h3><p><code>allTrue</code> 方法接受一个 SIMD 值作为参数，然后返回一个布尔值，表示该 SIMD 值的所有通道是否都为 <code>true</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Bool32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Bool32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Bool32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">allTrue</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Bool32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">allTrue</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span></code></pre></div><p><code>anyTrue</code> 方法则是只要有一个通道为 <code>true</code>，就返回 <code>true</code>，否则返回 <code>false</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Bool32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Bool32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> true</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> false</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Bool32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">anyTrue</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Bool32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">anyTrue</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><p>注意，只有四种布尔值数据类型(<code>Bool32x4</code>、<code>Bool16x8</code>、<code>Bool8x16</code>、<code>Bool64x2</code>)才有这两个方法。</p><p>这两个方法通常与比较运算符结合使用。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> ax4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> bx4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> ix4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">lessThan</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ax4</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bx4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b1</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">allTrue</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ix4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b2</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">anyTrue</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ix4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span></code></pre></div><h3 id="simd-type-min-simd-type-minnum" tabindex="-1"><a class="header-anchor" href="#simd-type-min-simd-type-minnum"><span>SIMD.%type%.min()，SIMD.%type%.minNum()</span></a></h3><p><code>min</code> 方法接受两个 SIMD 值作为参数，将两者的对应通道的较小值，组成一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5.2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5.5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">min</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[-1, -4, 3, 5.2]</span></span></code></pre></div><p>如果有一个通道的值是 <code>NaN</code>，则会优先返回 <code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">NaN</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1337</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 42</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float64x2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">min</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float64x2[NaN, 42]</span></span></code></pre></div><p><code>minNum</code> 方法与 <code>min</code> 的作用一模一样，唯一的区别是如果有一个通道的值是 <code>NaN</code>，则会优先返回另一个通道的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> ax4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> NaN</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> NaN</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> bx4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> NaN</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> cx4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">min</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ax4</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bx4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1.0, 1.0, NaN, NaN]</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> dx4</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">minNum</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">ax4</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bx4</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[1.0, 1.0, 3.0, NaN]</span></span></code></pre></div><h3 id="simd-type-max-simd-type-maxnum" tabindex="-1"><a class="header-anchor" href="#simd-type-max-simd-type-maxnum"><span>SIMD.%type%.max()，SIMD.%type%.maxNum()</span></a></h3><p><code>max</code> 方法接受两个 SIMD 值作为参数，将两者的对应通道的较大值，组成一个新的 SIMD 值返回。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5.2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> -</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5.5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">max</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float32x4[0, -2, 6, 5.5]</span></span></code></pre></div><p>如果有一个通道的值是 <code>NaN</code>，则会优先返回 <code>NaN</code>。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">NaN</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1337</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 42</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float64x2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">max</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float64x2[NaN, Infinity]</span></span></code></pre></div><p><code>maxNum</code> 方法与 <code>max</code> 的作用一模一样，唯一的区别是如果有一个通道的值是 <code>NaN</code>，则会优先返回另一个通道的值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> c</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">NaN</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> Infinity</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float64x2</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1337</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 42</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float64x2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">maxNum</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">c</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> d</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Float64x2[1337, Infinity]</span></span></code></pre></div><h2 id="静态方法-位运算" tabindex="-1"><a class="header-anchor" href="#静态方法-位运算"><span>静态方法: 位运算</span></a></h2><h3 id="simd-type-and-simd-type-or-simd-type-xor-simd-type-not" tabindex="-1"><a class="header-anchor" href="#simd-type-and-simd-type-or-simd-type-xor-simd-type-not"><span>SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()</span></a></h3><p><code>and</code> 方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制 <code>AND</code> 运算(<code>&amp;</code>)后得到的新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">and</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1, 0, 4, 0]</span></span></code></pre></div><p>上面代码中，以通道 <code>0</code> 为例，<code>1</code> 的二进制形式是 <code>0001</code>，<code>5</code> 的二进制形式是 <code>01001</code>，所以进行 <code>AND</code> 运算以后，得到 <code>0001</code>。</p><p><code>or</code> 方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制 <code>OR</code> 运算(<code>|</code>)后得到的新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">or</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[5, 7, 5, 13]</span></span></code></pre></div><p><code>xor</code> 方法接受两个 SIMD 值作为参数，返回两者对应的通道进行二进制”异或“运算(<code>^</code>)后得到的新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">xor</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> b</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[4, 7, 1, 13]</span></span></code></pre></div><p><code>not</code> 方法接受一个 SIMD 值作为参数，返回每个通道进行二进制”否“运算(<code>~</code>)后得到的新的 SIMD 值。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Int32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">not</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">a</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[-2, -3, -5, -9]</span></span></code></pre></div><p>上面代码中，<code>1</code> 的否运算之所以得到 <code>-2</code>，是因为在计算机内部，负数采用”2 的补码“这种形式进行表示。也就是说，整数 <code>n</code> 的负数形式 <code>-n</code>，是对每一个二进制位取反以后，再加上 1。因此，直接取反就相当于负数形式再减去 1，比如 <code>1</code> 的负数形式是 <code>-1</code>，再减去 1，就得到了 <code>-2</code>。</p><h2 id="静态方法-数据类型转换" tabindex="-1"><a class="header-anchor" href="#静态方法-数据类型转换"><span>静态方法: 数据类型转换</span></a></h2><p>SIMD 提供以下方法，用来将一种数据类型转为另一种数据类型。</p><ul><li><code>SIMD.%type%.fromFloat32x4()</code></li><li><code>SIMD.%type%.fromFloat32x4Bits()</code></li><li><code>SIMD.%type%.fromFloat64x2Bits()</code></li><li><code>SIMD.%type%.fromInt32x4()</code></li><li><code>SIMD.%type%.fromInt32x4Bits()</code></li><li><code>SIMD.%type%.fromInt16x8Bits()</code></li><li><code>SIMD.%type%.fromInt8x16Bits()</code></li><li><code>SIMD.%type%.fromUint32x4()</code></li><li><code>SIMD.%type%.fromUint32x4Bits()</code></li><li><code>SIMD.%type%.fromUint16x8Bits()</code></li><li><code>SIMD.%type%.fromUint8x16Bits()</code></li></ul><p>带有 <code>Bits</code> 后缀的方法，会原封不动地将二进制位拷贝到新的数据类型；不带后缀的方法，则会进行数据类型转换。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromFloat32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromFloat32x4Bits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int32x4[1065353216, 1073741824, 1077936128, 1082130432]</span></span></code></pre></div><p>上面代码中，<code>fromFloat32x4</code> 是将浮点数转为整数，然后存入新的数据类型；<code>fromFloat32x4Bits</code> 则是将二进制位原封不动地拷贝进入新的数据类型，然后进行解读。</p><p><code>Bits</code> 后缀的方法，还可以用于通道数目不对等的拷贝。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> t</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3.0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Int16x8</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">fromFloat32x4Bits</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">t</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#616E88;">// Int16x8[0, 16256, 0, 16384, 0, 16448, 0, 16512]</span></span></code></pre></div><p>上面代码中，原始 SIMD 值 <code>t</code> 是 4 通道的，而目标值是 8 通道的。</p><p>如果数据转换时，原通道的数据大小，超过了目标通道的最大宽度，就会报错。</p><h2 id="实例方法" tabindex="-1"><a class="header-anchor" href="#实例方法"><span>实例方法</span></a></h2><h3 id="simd-type-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#simd-type-prototype-tostring"><span>SIMD.%type%.prototype.toString()</span></a></h3><p><code>toString</code> 方法返回一个 SIMD 值的字符串形式。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> a</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">Float32x4</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">11</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 22</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 33</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 44</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">a</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">toString</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // &quot;SIMD.Float32x4(11, 22, 33, 44)&quot;</span></span></code></pre></div><h2 id="实例-求平均值" tabindex="-1"><a class="header-anchor" href="#实例-求平均值"><span>实例: 求平均值</span></a></h2><p>正常模式下，计算 <code>n</code> 个值的平均值，需要运算 <code>n</code> 次。</p><div class="language-js" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> average</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> list</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> sum</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0.0</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    sum</span><span style="color:#81A1C1;"> +=</span><span style="color:#D8DEE9;"> list</span><span style="color:#D8DEE9FF;">[</span><span style="color:#D8DEE9;">i</span><span style="color:#D8DEE9FF;">]</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> sum</span><span style="color:#81A1C1;"> /</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>使用 SIMD，可以将计算次数减少到 <code>n</code> 次的四分之一。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">function</span><span style="color:#88C0D0;"> average</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> list</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> sum</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">splat</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">0.0</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">var</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 0</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> +=</span><span style="color:#B48EAD;"> 4</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    sum</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">sum</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">list</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> i</span><span style="color:#D8DEE9FF;">))</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#81A1C1;">  var</span><span style="color:#D8DEE9;"> total</span><span style="color:#81A1C1;"> =</span></span>
<span class="line"><span style="color:#D8DEE9;">    SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extractLane</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">sum</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span></span>
<span class="line"><span style="color:#D8DEE9;">    SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extractLane</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">sum</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span></span>
<span class="line"><span style="color:#D8DEE9;">    SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extractLane</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">sum</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">+</span></span>
<span class="line"><span style="color:#D8DEE9;">    SIMD</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">Float32x4</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">extractLane</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">sum</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">  return</span><span style="color:#D8DEE9;"> total</span><span style="color:#81A1C1;"> /</span><span style="color:#D8DEE9;"> n</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码先是每隔四位，将所有的值读入一个 SIMD，然后立刻累加。然后，得到累加值四个通道的总和，再除以 <code>n</code> 就可以了。</p>`,180)]))}const E=a(p,[["render",e],["__file","simd.html.vue"]]),y=JSON.parse('{"path":"/code/language/js/es6/simd.html","title":"SIMD","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","icon":"process","author":"阮一峰","category":"JavaScript","copyright":"此部分博客采用 <a href=\\"http://creativecommons.org/licenses/by-nc/4.0/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\">“保持署名—非商用”创意共享4.0许可证</a>","description":"SIMD 概述 SIMD(发音/sim-dee/)是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，您可以看做这是一种不同的运算执行模式。与它相对的是 SISD(“Single Instruction/Single Data”)，即“单指令，单...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/js/es6/simd.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"SIMD"}],["meta",{"property":"og:description","content":"SIMD 概述 SIMD(发音/sim-dee/)是“Single Instruction/Multiple Data”的缩写，意为“单指令，多数据”。它是 JavaScript 操作 CPU 对应指令的接口，您可以看做这是一种不同的运算执行模式。与它相对的是 SISD(“Single Instruction/Single Data”)，即“单指令，单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"阮一峰"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SIMD\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"阮一峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"静态方法: 数学运算","slug":"静态方法-数学运算","link":"#静态方法-数学运算","children":[{"level":3,"title":"SIMD.%type%.abs()，SIMD.%type%.neg()","slug":"simd-type-abs-simd-type-neg","link":"#simd-type-abs-simd-type-neg","children":[]},{"level":3,"title":"SIMD.%type%.add()，SIMD.%type%.addSaturate()","slug":"simd-type-add-simd-type-addsaturate","link":"#simd-type-add-simd-type-addsaturate","children":[]},{"level":3,"title":"SIMD.%type%.sub()，SIMD.%type%.subSaturate()","slug":"simd-type-sub-simd-type-subsaturate","link":"#simd-type-sub-simd-type-subsaturate","children":[]},{"level":3,"title":"SIMD.%type%.mul()，SIMD.%type%.div()，SIMD.%type%.sqrt()","slug":"simd-type-mul-simd-type-div-simd-type-sqrt","link":"#simd-type-mul-simd-type-div-simd-type-sqrt","children":[]},{"level":3,"title":"SIMD.%FloatType%.reciprocalApproximation()","slug":"simd-floattype-reciprocalapproximation","link":"#simd-floattype-reciprocalapproximation","children":[]},{"level":3,"title":"SIMD.%type%.reciprocalSqrtApproximation()","slug":"simd-type-reciprocalsqrtapproximation","link":"#simd-type-reciprocalsqrtapproximation","children":[]},{"level":3,"title":"SIMD.%IntegerType%.shiftLeftByScalar()","slug":"simd-integertype-shiftleftbyscalar","link":"#simd-integertype-shiftleftbyscalar","children":[]},{"level":3,"title":"SIMD.%IntegerType%.shiftRightByScalar()","slug":"simd-integertype-shiftrightbyscalar","link":"#simd-integertype-shiftrightbyscalar","children":[]}]},{"level":2,"title":"静态方法: 通道处理","slug":"静态方法-通道处理","link":"#静态方法-通道处理","children":[{"level":3,"title":"SIMD.%type%.check()","slug":"simd-type-check","link":"#simd-type-check","children":[]},{"level":3,"title":"SIMD.%type%.extractLane()，SIMD.%type%.replaceLane()","slug":"simd-type-extractlane-simd-type-replacelane","link":"#simd-type-extractlane-simd-type-replacelane","children":[]},{"level":3,"title":"SIMD.%type%.load()","slug":"simd-type-load","link":"#simd-type-load","children":[]},{"level":3,"title":"SIMD.%type%.store()","slug":"simd-type-store","link":"#simd-type-store","children":[]},{"level":3,"title":"SIMD.%type%.splat()","slug":"simd-type-splat","link":"#simd-type-splat","children":[]},{"level":3,"title":"SIMD.%type%.swizzle()","slug":"simd-type-swizzle","link":"#simd-type-swizzle","children":[]},{"level":3,"title":"SIMD.%type%.shuffle()","slug":"simd-type-shuffle","link":"#simd-type-shuffle","children":[]}]},{"level":2,"title":"静态方法: 比较运算","slug":"静态方法-比较运算","link":"#静态方法-比较运算","children":[{"level":3,"title":"SIMD.%type%.equal()，SIMD.%type%.notEqual()","slug":"simd-type-equal-simd-type-notequal","link":"#simd-type-equal-simd-type-notequal","children":[]},{"level":3,"title":"SIMD.%type%.greaterThan()，SIMD.%type%.greaterThanOrEqual()","slug":"simd-type-greaterthan-simd-type-greaterthanorequal","link":"#simd-type-greaterthan-simd-type-greaterthanorequal","children":[]},{"level":3,"title":"SIMD.%type%.lessThan()，SIMD.%type%.lessThanOrEqual()","slug":"simd-type-lessthan-simd-type-lessthanorequal","link":"#simd-type-lessthan-simd-type-lessthanorequal","children":[]},{"level":3,"title":"SIMD.%type%.select()","slug":"simd-type-select","link":"#simd-type-select","children":[]},{"level":3,"title":"SIMD.%BooleanType%.allTrue()，SIMD.%BooleanType%.anyTrue()","slug":"simd-booleantype-alltrue-simd-booleantype-anytrue","link":"#simd-booleantype-alltrue-simd-booleantype-anytrue","children":[]},{"level":3,"title":"SIMD.%type%.min()，SIMD.%type%.minNum()","slug":"simd-type-min-simd-type-minnum","link":"#simd-type-min-simd-type-minnum","children":[]},{"level":3,"title":"SIMD.%type%.max()，SIMD.%type%.maxNum()","slug":"simd-type-max-simd-type-maxnum","link":"#simd-type-max-simd-type-maxnum","children":[]}]},{"level":2,"title":"静态方法: 位运算","slug":"静态方法-位运算","link":"#静态方法-位运算","children":[{"level":3,"title":"SIMD.%type%.and()，SIMD.%type%.or()，SIMD.%type%.xor()，SIMD.%type%.not()","slug":"simd-type-and-simd-type-or-simd-type-xor-simd-type-not","link":"#simd-type-and-simd-type-or-simd-type-xor-simd-type-not","children":[]}]},{"level":2,"title":"静态方法: 数据类型转换","slug":"静态方法-数据类型转换","link":"#静态方法-数据类型转换","children":[]},{"level":2,"title":"实例方法","slug":"实例方法","link":"#实例方法","children":[{"level":3,"title":"SIMD.%type%.prototype.toString()","slug":"simd-type-prototype-tostring","link":"#simd-type-prototype-tostring","children":[]}]},{"level":2,"title":"实例: 求平均值","slug":"实例-求平均值","link":"#实例-求平均值","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":5},{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1}]},"readingTime":{"minutes":17.88,"words":5364},"filePathRelative":"code/language/js/es6/simd.md","localizedDate":"2020年5月4日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
