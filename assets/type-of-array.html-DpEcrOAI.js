import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as t,c as p,d,e as a,f as s,a as n,w as l,b as e}from"./app-C6d_tW6U.js";const c={},k=a("p",null,"在 TypeScript 中，数组类型有多种定义方式，比较灵活。",-1),h=e(`<h2 id="「类型-方括号」表示法" tabindex="-1"><a class="header-anchor" href="#「类型-方括号」表示法"><span>「类型 + 方括号」表示法</span></a></h2><p>最简单的方法是使用「类型 + 方括号」来表示数组:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> fibonacci</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>数组的项中<strong>不允许</strong>出现其他的类型:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> fibonacci</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> fibonacci</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#E5C07B;">fibonacci</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;">push</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;8&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Argument of type &#39;&quot;8&quot;&#39; is not assignable to parameter of type &#39;number&#39;.</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，<code>push</code> 方法只允许传入 <code>number</code> 类型的参数，但是却传了一个 <code>&quot;8&quot;</code> 类型的参数，所以报错了。这里 <code>&quot;8&quot;</code> 是一个字符串字面量类型，会在后续章节中详细介绍。</p><h2 id="数组泛型" tabindex="-1"><a class="header-anchor" href="#数组泛型"><span>数组泛型</span></a></h2><p>我们也可以使用数组泛型(Array Generic) <code>Array&lt;elemType&gt;</code> 来表示数组:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> fibonacci</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Array</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="color:#005CC5;--shiki-dark:#E5C07B;">number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">&gt; </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),B=e(`<h2 id="用接口表示数组" tabindex="-1"><a class="header-anchor" href="#用接口表示数组"><span>用接口表示数组</span></a></h2><p>接口也可以用来描述数组:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> NumberArray</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  [</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> fibonacci</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> NumberArray</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">1</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">2</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">3</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">5</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>NumberArray</code> 表示: 只要索引的类型是数字时，那么值的类型必须是数字。</p><p>虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。</p><p>不过有一种情况例外，那就是它常用来表示类数组。</p><h2 id="类数组" tabindex="-1"><a class="header-anchor" href="#类数组"><span>类数组</span></a></h2><p>类数组(Array-like Object)不是数组类型，比如 <code>arguments</code>:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> args</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;--shiki-dark:#7F848E;font-style:inherit;--shiki-dark-font-style:italic;">// Type &#39;IArguments&#39; is missing the following properties from type &#39;number[]&#39;: pop, push, concat, join, and 24 more.</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，<code>arguments</code> 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> args</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">    [</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#E06C75;">    length</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">    callee</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  } </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 <code>length</code> 和 <code>callee</code> 两个属性。</p><p>事实上常用的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">function</span><span style="color:#6F42C1;--shiki-dark:#61AFEF;"> sum</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">  let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> args</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> IArguments</span><span style="color:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> arguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>IArguments</code> 是 TypeScript 中定义好了的类型，它实际上就是:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> IArguments</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">  [</span><span style="color:#E36209;--shiki-dark:#E06C75;font-style:inherit;--shiki-dark-font-style:italic;">index</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">]</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> any</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E36209;--shiki-dark:#E06C75;">  length</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> number</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#6F42C1;--shiki-dark:#61AFEF;">  callee</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#6F42C1;--shiki-dark:#E5C07B;"> Function</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),y=e('<h2 id="any-在数组中的应用" tabindex="-1"><a class="header-anchor" href="#any-在数组中的应用"><span>any 在数组中的应用</span></a></h2><p>一个比较常见的做法是，用 <code>any</code> 表示数组中允许出现任意类型:</p><div class="language-ts line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki shiki-themes github-light one-dark-pro vp-code" style="background-color:#fff;--shiki-dark-bg:#282c34;color:#24292e;--shiki-dark:#abb2bf;" tabindex="0"><code><span class="line"><span style="color:#D73A49;--shiki-dark:#C678DD;">let</span><span style="color:#24292E;--shiki-dark:#E06C75;"> list</span><span style="color:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="color:#005CC5;--shiki-dark:#E5C07B;"> any</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">[] </span><span style="color:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;xcatliu&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="color:#005CC5;--shiki-dark:#D19A66;">25</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">, { </span><span style="color:#24292E;--shiki-dark:#E06C75;">website</span><span style="color:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="color:#032F62;--shiki-dark:#98C379;">&quot;http://xcatliu.com&quot;</span><span style="color:#24292E;--shiki-dark:#ABB2BF;"> }];</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="http://www.typescriptlang.org/docs/handbook/basic-types.html#array" target="_blank" rel="noopener noreferrer">Basic Types # Array</a>(<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#%E6%95%B0%E7%BB%84" target="_blank" rel="noopener noreferrer">中文版</a>)</li><li><a href="http://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types" target="_blank" rel="noopener noreferrer">Interfaces # Indexable Types</a>(<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Interfaces.html#%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener noreferrer">中文版</a>)</li></ul>',5);function u(m,b){const i=o("RouteLink");return t(),p("div",null,[k,d(" more "),h,a("p",null,[s("关于泛型，可以参考"),n(i,{to:"/code/language/typescript/advanced/generics.html"},{default:l(()=>[s("泛型")]),_:1}),s("一章。")]),B,a("p",null,[s("关于内置对象，可以参考"),n(i,{to:"/code/language/typescript/basics/built-in-objects.html"},{default:l(()=>[s("内置对象")]),_:1}),s("一章。")]),y])}const E=r(c,[["render",u],["__file","type-of-array.html.vue"]]),g=JSON.parse('{"path":"/code/language/typescript/basics/type-of-array.html","title":"数组的类型","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"数组的类型","icon":"array","category":"TypeScript","description":"在 TypeScript 中，数组类型有多种定义方式，比较灵活。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/typescript/basics/type-of-array.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"数组的类型"}],["meta",{"property":"og:description","content":"在 TypeScript 中，数组类型有多种定义方式，比较灵活。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数组的类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"「类型 + 方括号」表示法","slug":"「类型-方括号」表示法","link":"#「类型-方括号」表示法","children":[]},{"level":2,"title":"数组泛型","slug":"数组泛型","link":"#数组泛型","children":[]},{"level":2,"title":"用接口表示数组","slug":"用接口表示数组","link":"#用接口表示数组","children":[]},{"level":2,"title":"类数组","slug":"类数组","link":"#类数组","children":[]},{"level":2,"title":"any 在数组中的应用","slug":"any-在数组中的应用","link":"#any-在数组中的应用","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1},{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":2.24,"words":673},"filePathRelative":"code/language/typescript/basics/type-of-array.md","localizedDate":"2020年5月4日","excerpt":"<p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p>\\n","autoDesc":true}');export{E as comp,g as data};
