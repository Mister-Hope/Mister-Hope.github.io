import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as e,f as a,e as l,b as p,o as t}from"./app-K4WwjAaR.js";const r={};function c(i,s){return t(),o("div",null,[s[0]||(s[0]=e("p",null,[a("JavaScript 中有很多"),e("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects",target:"_blank",rel:"noopener noreferrer"},"内置对象"),a("，它们可以直接在 TypeScript 中当做定义好了的类型。")],-1)),s[1]||(s[1]=e("p",null,"内置对象是指根据标准在全局作用域(Global)上存在的对象。这里的标准是指 ECMAScript 和其他环境(比如 DOM)的标准。",-1)),l(" more "),s[2]||(s[2]=p(`<h2 id="ecmascript-的内置对象" tabindex="-1"><a class="header-anchor" href="#ecmascript-的内置对象"><span>ECMAScript 的内置对象</span></a></h2><p>ECMAScript 标准提供的内置对象有:</p><p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p><p>我们可以在 TypeScript 中将变量定义为这些类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> b</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Boolean</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Boolean</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> e</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Error</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Error</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Error occurred</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> d</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> Date</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> new</span><span style="color:#88C0D0;"> Date</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> r</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> RegExp</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> /[</span><span style="color:#EBCB8B;">a-z</span><span style="color:#ECEFF4;">]/</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>更多的内置对象，可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener noreferrer">MDN 的文档</a>。</p><p>而他们的定义文件，则在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener noreferrer">TypeScript 核心库的定义文件</a>中。</p><h2 id="dom-和-bom-的内置对象" tabindex="-1"><a class="header-anchor" href="#dom-和-bom-的内置对象"><span>DOM 和 BOM 的内置对象</span></a></h2><p>DOM 和 BOM 提供的内置对象有:</p><p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p><p>TypeScript 中会经常用到这些类型:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> body</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> HTMLElement</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">body</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> allDiv</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> NodeList</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">querySelectorAll</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">div</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#D8DEE9;">document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">addEventListener</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">click</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> MouseEvent</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  // Do something</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre></div><p>它们的定义文件同样在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener noreferrer">TypeScript 核心库的定义文件</a>中。</p><h2 id="typescript-核心库的定义文件" tabindex="-1"><a class="header-anchor" href="#typescript-核心库的定义文件"><span>TypeScript 核心库的定义文件</span></a></h2><p><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener noreferrer">TypeScript 核心库的定义文件</a>中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p><p>当您在使用一些常用的方法的时候，TypeScript 实际上已经帮您做了很多类型判断的工作了，比如:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">Math</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pow</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">2</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// index.ts(1,14): error TS2345: Argument of type &#39;string&#39; is not assignable to parameter of type &#39;number&#39;.</span></span></code></pre></div><p>上面的例子中，<code>Math.pow</code> 必须接受两个 <code>number</code> 类型的参数。事实上 <code>Math.pow</code> 的类型定义如下:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> Math</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">  /**</span></span>
<span class="line"><span style="color:#616E88;">   * Returns the value of a base expression taken to a specified power.</span></span>
<span class="line"><span style="color:#616E88;">   * </span><span style="color:#ECEFF4;">@</span><span style="color:#81A1C1;">param</span><span style="color:#D8DEE9;"> x</span><span style="color:#616E88;"> The base value of the expression.</span></span>
<span class="line"><span style="color:#616E88;">   * </span><span style="color:#ECEFF4;">@</span><span style="color:#81A1C1;">param</span><span style="color:#D8DEE9;"> y</span><span style="color:#616E88;"> The exponent value of the expression.</span></span>
<span class="line"><span style="color:#616E88;">   */</span></span>
<span class="line"><span style="color:#88C0D0;">  pow</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">x</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> y</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> number</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre></div><p>再举一个 DOM 中的例子:</p><div class="language-ts" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9;">document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">addEventListener</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">click</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">targetCurrent</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// index.ts(2,17): error TS2339: Property &#39;targetCurrent&#39; does not exist on type &#39;MouseEvent&#39;.</span></span></code></pre></div><p>上面的例子中，<code>addEventListener</code> 方法是在 TypeScript 核心库中定义的:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">interface</span><span style="color:#8FBCBB;"> Document</span></span>
<span class="line"><span style="color:#81A1C1;">  extends</span><span style="color:#8FBCBB;font-weight:bold;"> Node</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#8FBCBB;font-weight:bold;">    GlobalEventHandlers</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#8FBCBB;font-weight:bold;">    NodeSelector</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#8FBCBB;font-weight:bold;">    DocumentEvent</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">  addEventListener</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">    type</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> string</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#88C0D0;">    listener</span><span style="color:#81A1C1;">:</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">ev</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> MouseEvent</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#8FBCBB;"> any</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    useCapture</span><span style="color:#81A1C1;">?:</span><span style="color:#8FBCBB;"> boolean</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">  )</span><span style="color:#81A1C1;">:</span><span style="color:#8FBCBB;"> void</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以 <code>e</code> 被推断成了 <code>MouseEvent</code>，而 <code>MouseEvent</code> 是没有 <code>targetCurrent</code> 属性的，所以报错了。</p><p>注意，TypeScript 核心库的定义中不包含 Node.js 部分。</p><h2 id="用-typescript-写-node-js" tabindex="-1"><a class="header-anchor" href="#用-typescript-写-node-js"><span>用 TypeScript 写 Node.js</span></a></h2><p>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件:</p><div class="language-bash" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> @types/node</span><span style="color:#A3BE8C;"> --save-dev</span></span></code></pre></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener noreferrer">内置对象</a></li><li><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib" target="_blank" rel="noopener noreferrer">TypeScript 核心库的定义文件</a></li></ul>`,30))])}const E=n(r,[["render",c],["__file","built-in-objects.html.vue"]]),C=JSON.parse('{"path":"/code/language/typescript/basics/built-in-objects.html","title":"内置对象","lang":"zh-CN","frontmatter":{"date":"2020-05-04T00:00:00.000Z","title":"内置对象","icon":"object","category":"TypeScript","description":"JavaScript 中有很多[内置对象][]，它们可以直接在 TypeScript 中当做定义好了的类型。 内置对象是指根据标准在全局作用域(Global)上存在的对象。这里的标准是指 ECMAScript 和其他环境(比如 DOM)的标准。","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/typescript/basics/built-in-objects.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"内置对象"}],["meta",{"property":"og:description","content":"JavaScript 中有很多[内置对象][]，它们可以直接在 TypeScript 中当做定义好了的类型。 内置对象是指根据标准在全局作用域(Global)上存在的对象。这里的标准是指 ECMAScript 和其他环境(比如 DOM)的标准。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内置对象\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"ECMAScript 的内置对象","slug":"ecmascript-的内置对象","link":"#ecmascript-的内置对象","children":[]},{"level":2,"title":"DOM 和 BOM 的内置对象","slug":"dom-和-bom-的内置对象","link":"#dom-和-bom-的内置对象","children":[]},{"level":2,"title":"TypeScript 核心库的定义文件","slug":"typescript-核心库的定义文件","link":"#typescript-核心库的定义文件","children":[]},{"level":2,"title":"用 TypeScript 写 Node.js","slug":"用-typescript-写-node-js","link":"#用-typescript-写-node-js","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","email":"mister-hope@outlook.com","commits":1},{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":2.05,"words":614},"filePathRelative":"code/language/typescript/basics/built-in-objects.md","localizedDate":"2020年5月4日","excerpt":"<p>JavaScript 中有很多[内置对象][]，它们可以直接在 TypeScript 中当做定义好了的类型。</p>\\n<p>内置对象是指根据标准在全局作用域(Global)上存在的对象。这里的标准是指 ECMAScript 和其他环境(比如 DOM)的标准。</p>\\n","autoDesc":true}');export{E as comp,C as data};
