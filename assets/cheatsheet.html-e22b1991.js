import{_ as n,X as s,Y as a,a1 as t,$ as p,a3 as e}from"./framework-a91f7991.js";const o={},c=p("p",null,"Dart 语言旨在让其他语言的编码人员易于学习，但具有一些独特功能。",-1),l=e(`<h2 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h2><p>要将表达式的值放在字符串中，请使用 <code>\${expression}</code>。如果表达式是标识符，则可以省略 <code>{}</code>。</p><p>以下是一些使用字符串插值的示例:</p><table><thead><tr><th>串</th><th>结果</th></tr></thead><tbody><tr><td><code>&#39;\\\${3 + 2}&#39;</code></td><td><code>&#39;5&#39;</code></td></tr><tr><td><code>&#39;\\\${&quot;word&quot;.toUpperCase()}&#39;</code></td><td><code>&#39;WORD&#39;</code></td></tr><tr><td><code>&#39;$myObject&#39;</code></td><td><code>myObject.toString()</code> 的值</td></tr></tbody></table><h2 id="空感知运算符" tabindex="-1"><a class="header-anchor" href="#空感知运算符" aria-hidden="true">#</a> 空感知运算符</h2><p>Dart 提供了一些方便的运算符来处理可能为 null 的值。一种是 <code>??=</code> 赋值运算符，它仅在该变量当前为 null 时才为该变量赋值:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>int a<span class="token punctuation">;</span> <span class="token comment">// The initial value of a is null.</span>
a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- Prints 3.</span>

a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- Still prints 3.</span>
</code></pre></div><p>另一个可识别空值的运算符是 <code>??</code>，只有左侧表达式的值为 null，它将求值并在其右侧返回表达式，否则它将在返回左侧表达式:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- Prints 1.</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- Prints 12.</span>
</code></pre></div><h2 id="受控的属性访问" tabindex="-1"><a class="header-anchor" href="#受控的属性访问" aria-hidden="true">#</a> 受控的属性访问</h2><p>为了保护对可能为空的对象的属性或方法的访问，请在点 <code>.</code> 之前添加问号 <code>?</code>:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>myObject<span class="token operator">?</span><span class="token punctuation">.</span>someProperty
</code></pre></div><p>上面的代码等效于以下代码:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span>myObject <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> myObject<span class="token punctuation">.</span>someProperty <span class="token punctuation">:</span> <span class="token keyword">null</span>
</code></pre></div><p>您可以在单个表达式中将多个 <code>?.</code> 链接在一起:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>myObject<span class="token operator">?</span><span class="token punctuation">.</span>someProperty<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>如果 <code>myObject</code> 或 <code>myObject.someProperty</code> 为 null，则代码返回 null(并且从不调用 <code>someMethod()</code>) 。</p><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>Dart 内置了对列表，地图和集合的支持。您可以使用文字创建它们:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> aListOfStrings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> aSetOfStrings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> aMapOfStringsToInts <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;one&#39;</span></span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;two&#39;</span></span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;three&#39;</span></span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>Dart 的类型推断可以为您为这些变量分配类型。在这种情况下，推断的类型 <code>List&lt;String&gt;</code>， <code>Set&lt;String&gt;</code> 和 <code>Map&lt;String, int&gt;</code>。</p><p>或者您可以自己指定类型:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> aListOfInts <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> aSetOfInts <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> aMapOfIntToDouble <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">,</span> double<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>当您想使用子类型的内容初始化列表但仍然希望列表为 <code>List&lt;BaseType&gt;</code> 时，指定类型很方便:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> aListOfBaseType <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BaseType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="箭头语法" tabindex="-1"><a class="header-anchor" href="#箭头语法" aria-hidden="true">#</a> 箭头语法</h2><p>您可能已经在 Dart 代码中看到了该符号 <code>=&gt;</code>。此箭头语法是一种定义函数的方法，该函数将在其右侧执行表达式并返回其值。</p><p>例如，考虑这个对 <code>List</code> 类的 <code>any()</code> 方法的调用:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>bool hasEmpty <span class="token operator">=</span> aListOfStrings<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> s<span class="token punctuation">.</span>isEmpty<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这是编写该代码的一种更简单的方法:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>bool hasEmpty <span class="token operator">=</span> aListOfStrings<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="级联" tabindex="-1"><a class="header-anchor" href="#级联" aria-hidden="true">#</a> 级联</h2><p>要对同一对象执行一系列操作，请使用级联(<code>..</code>)。我们都看到过这样的表达式:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>myObject<span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>它调用 <code>myObject</code> 上的 <code>someMethod()</code> ，和表达的结果是的返回值 <code>someMethod()</code>。</p><p>这是带有级联的相同表达式:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>myObject<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>尽管它仍然调用 <code>myObject</code> 上的 <code>someMethod()</code> ，但表达式的结果不是返回值，而是对 <code>myObject</code> 的引用。使用级联，可以将原本需要单独语句的操作链接在一起。例如，考虑以下代码:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> button <span class="token operator">=</span> <span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>使用层叠时，代码变得更短，并且您不需要 <code>button</code> 变量:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;#confirm&#39;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Confirm&#39;</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span>classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;important&#39;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Confirmed!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="getter-和-setter" tabindex="-1"><a class="header-anchor" href="#getter-和-setter" aria-hidden="true">#</a> Getter 和 Setter</h2><p>只要您对一个字段进行特殊的控制要求，就可以定义 getter 和 setter。</p><p>例如，您可以确保属性的值有效:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  int _aProperty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  int <span class="token keyword">get</span> aProperty <span class="token operator">=</span><span class="token operator">&gt;</span> _aProperty<span class="token punctuation">;</span>

  <span class="token keyword">set</span> <span class="token function">aProperty</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _aProperty <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以使用 getter 来定义计算属性:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> _values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">addValue</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// A computed property.</span>
  int <span class="token keyword">get</span> count <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可选的位置参数" tabindex="-1"><a class="header-anchor" href="#可选的位置参数" aria-hidden="true">#</a> 可选的位置参数</h2><p>Dart 具有两种函数参数: 基于位置的和具名的。位置参数是您可能熟悉的一种:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>int <span class="token function">sumUp</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">,</span> int c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ···</span>
  int total <span class="token operator">=</span> <span class="token function">sumUp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>使用 Dart，您可以将这些位置参数包装在方括号中，以使其成为可选参数:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int <span class="token function">sumUpToFive</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> <span class="token punctuation">[</span>int b<span class="token punctuation">,</span> int c<span class="token punctuation">,</span> int d<span class="token punctuation">,</span> int e<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  int sum <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> b<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> c<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> d<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> e<span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ···</span>
  int total <span class="token operator">=</span> <span class="token function">sumUpToFive</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  int otherTotal <span class="token operator">=</span> <span class="token function">sumUpToFive</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选的位置参数始终位于函数的参数列表的最后。除非您提供另一个默认值，否则它们的默认值为 null:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code>int <span class="token function">sumUpToFive</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> <span class="token punctuation">[</span>int b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> int c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> int d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> int e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// ···</span>
<span class="token punctuation">}</span>
<span class="token comment">// ···</span>
  int newTotal <span class="token operator">=</span> <span class="token function">sumUpToFive</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>newTotal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- prints 15</span>
</code></pre></div><h2 id="可选的命名参数" tabindex="-1"><a class="header-anchor" href="#可选的命名参数" aria-hidden="true">#</a> 可选的命名参数</h2><p>使用大括号语法，可以定义具有名称的可选参数。</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">String</span> suffix<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>&#39;$firstName $lastName $<span class="token punctuation">{</span>suffix <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">}</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ···</span>
  <span class="token function">printName</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Avinash&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Gupta&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printName</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Poshmeister&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Moneybuckets&#39;</span></span><span class="token punctuation">,</span> suffix<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;IV&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如您所料，默认情况下，这些参数的值为 null，但是您可以提供默认值:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstName<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">String</span> suffix <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">firstName</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">lastName</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">suffix</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>函数不能同时具有可选的位置参数和可选的命名参数。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><p>Dart 代码可以引发并捕获异常。与 Java 相反，Dart 的所有异常都是未经检查的异常。方法需要制订它们可能引发哪些异常，您也不被强制捕获任何异常。</p><p>Dart 提供 <code>Exception</code> 和 <code>Error</code> 类型，但是您可以抛出任何非 null 对象:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Something bad happened.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&#39;Waaaaaaah!&#39;</span></span><span class="token punctuation">;</span>
</code></pre></div><p>使用 <code>try</code>，<code>on</code> 以及 <code>catch</code> 处理异常时的关键字:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">OutOfLlamasException</span> <span class="token punctuation">{</span>
  <span class="token comment">// A specific exception</span>
  <span class="token function">buyMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">on</span> <span class="token class-name">Exception</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Anything else that is an exception</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Unknown exception: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// No specified type, handles all</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Something really unknown: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>try</code> 的作用和大多数其他语言一样。使用 <code>on</code> 关键字按类型过滤特定的异常，并使用 <code>catch</code> 关键字获取对异常对象的引用。</p><p>如果您不能完全处理该异常，请使用 <code>rethrow</code> 关键字传播该异常:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;I was just trying to breed llamas!.&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">rethrow</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>要执行代码(无论是否引发异常)，请使用 <code>finally</code>:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">breedMoreLlamas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... handle exception ...</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">// Always clean up, even if an exception is thrown.</span>
  <span class="token function">cleanLlamaStalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="在构造函数种使用-this" tabindex="-1"><a class="header-anchor" href="#在构造函数种使用-this" aria-hidden="true">#</a> 在构造函数种使用 <code>this</code></h2><p>Dart 提供了一个方便的快捷方式，用于将值分配给构造函数中的属性: <code>this.propertyName</code> 在声明构造函数时使用:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyColor</span> <span class="token punctuation">{</span>
  int red<span class="token punctuation">;</span>
  int green<span class="token punctuation">;</span>
  int blue<span class="token punctuation">;</span>

  <span class="token class-name">MyColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> color <span class="token operator">=</span> <span class="token class-name">MyColor</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>该技术也适用于命名参数。属性名称成为参数的名称:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">MyColor</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token class-name">MyColor</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> color <span class="token operator">=</span> <span class="token class-name">MyColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>对于可选参数，默认值可以按预期运行:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MyColor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>green <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// or</span>
<span class="token class-name">MyColor</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>green <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>blue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="初始化列表" tabindex="-1"><a class="header-anchor" href="#初始化列表" aria-hidden="true">#</a> 初始化列表</h2><p>有时在实现构造函数时，需要在构造函数主体执行之前进行一些设置。例如，在构造函数主体执行之前，final 字段必须具有值。您可以在构造函数的签名及其主体之间的初始化器列表中执行此操作:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> num<span class="token punctuation">&gt;</span></span> json<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> x <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;x&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      y <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;y&#39;</span></span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;In Point.fromJson(): (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>初始化器列表也是放置断言的方便位置，断言仅在开发期间运行:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">NonNegativePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">:</span> <span class="token keyword">assert</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">assert</span><span class="token punctuation">(</span>y <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;I just made a NonNegativePoint: (</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">x</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">y</span></span><span class="token string">)&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="命名构造函数" tabindex="-1"><a class="header-anchor" href="#命名构造函数" aria-hidden="true">#</a> 命名构造函数</h2><p>为了允许类具有多个构造函数，Dart 支持命名构造函数:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  double x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

  <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用命名构造函数，请使用其全名调用它:</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> myPoint <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">.</span><span class="token function">origin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="工厂构造函数" tabindex="-1"><a class="header-anchor" href="#工厂构造函数" aria-hidden="true">#</a> 工厂构造函数</h2><p>Dart 支持工厂构造函数，该构造函数可以返回子类型，甚至可以返回 null。要创建工厂构造函数，请使用 <code>factory</code> 关键字:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
  <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">factory</span> <span class="token class-name">Shape</span><span class="token punctuation">.</span><span class="token function">fromTypeName</span><span class="token punctuation">(</span><span class="token class-name">String</span> typeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;square&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>typeName <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;circle&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;I don\\&#39;t recognize </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">typeName</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重定向构造函数" tabindex="-1"><a class="header-anchor" href="#重定向构造函数" aria-hidden="true">#</a> 重定向构造函数</h2><p>有时，构造函数的唯一目的是重定向到同一类中的另一个构造函数。重定向构造函数的主体为空，构造函数调用出现在冒号(<code>:</code>)之后。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Automobile</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> make<span class="token punctuation">;</span>
  <span class="token class-name">String</span> model<span class="token punctuation">;</span>
  int mpg<span class="token punctuation">;</span>

  <span class="token comment">// The main constructor for this class.</span>
  <span class="token class-name">Automobile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>make<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mpg<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Delegates to the main constructor.</span>
  <span class="token class-name">Automobile</span><span class="token punctuation">.</span><span class="token function">hybrid</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">,</span> <span class="token class-name">String</span> model<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Delegates to a named constructor</span>
  <span class="token class-name">Automobile</span><span class="token punctuation">.</span><span class="token function">fancyHybrid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hybrid</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Futurecar&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;Mark 2&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="const-构造函数" tabindex="-1"><a class="header-anchor" href="#const-构造函数" aria-hidden="true">#</a> const 构造函数</h2><p>如果您的类产生了永不改变的对象，则可以使这些对象具有编译时常量。为此，请定义一个 <code>const</code> 构造函数，并确保所有实例变量都是最终变量。</p><div class="language-dart" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">ImmutablePoint</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">final</span> int x<span class="token punctuation">;</span>
  <span class="token keyword">final</span> int y<span class="token punctuation">;</span>

  <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token class-name">ImmutablePoint</span> origin <span class="token operator">=</span> <span class="token class-name">ImmutablePoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,97);function u(i,k){return s(),a("div",null,[c,t(" more "),l])}const d=n(o,[["render",u],["__file","cheatsheet.html.vue"]]);export{d as default};
