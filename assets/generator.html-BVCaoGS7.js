import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as n,e as p,b as o,o as e}from"./app-K4WwjAaR.js";const t={};function c(r,s){return e(),l("div",null,[s[0]||(s[0]=n("p",null,"通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。",-1)),s[1]||(s[1]=n("p",null,"所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢? 这样就不必创建完整的 list，从而节省大量的空间。在 Python 中，这种一边循环一边计算的机制，称为生成器: generator。",-1)),p(" more "),s[2]||(s[2]=o(`<p>要创建一个 generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个 generator:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> L </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> [</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">)]</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> L</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 16</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 25</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 36</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 49</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 64</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 81</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> g </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> g</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">generator </span><span style="color:#88C0D0;">object</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">genexpr</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">1022ef630</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>创建 <code>L</code> 和 <code>g</code> 的区别仅在于最外层的 <code>[]</code> 和 <code>()</code>，L 是一个 list，而 g 是一个 generator。</p><p>我们可以直接打印出 list 的每一个元素，但我们怎么打印出 generator 的每一个元素呢?</p><p>如果要一个一个打印出来，可以通过 <code>next()</code> 函数获得 generator 的下一个返回值:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">4</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">9</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">16</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">25</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">36</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">49</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">64</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">81</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">StopIteration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们讲过，generator 保存的是算法，每次调用 <code>next(g)</code>，就计算出 <code>g</code> 的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出 <code>StopIteration</code> 的错误。</p><p>当然，上面这种不断调用 <code>next(g)</code> 实在是太变态了，正确的方法是使用 for 循环，因为 generator 也是可迭代对象:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> g </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">x </span><span style="color:#81A1C1;">*</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> g</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#B48EAD;">0</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">4</span></span>
<span class="line"><span style="color:#B48EAD;">9</span></span>
<span class="line"><span style="color:#B48EAD;">16</span></span>
<span class="line"><span style="color:#B48EAD;">25</span></span>
<span class="line"><span style="color:#B48EAD;">36</span></span>
<span class="line"><span style="color:#B48EAD;">49</span></span>
<span class="line"><span style="color:#B48EAD;">64</span></span>
<span class="line"><span style="color:#B48EAD;">81</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，我们创建了一个 generator 后，基本上永远不会调用 <code>next()</code>，而是通过 for 循环来迭代它，并且不需要关心 <code>StopIteration</code> 的错误。</p><p>Generator 非常强大。如果推算的算法比较复杂，用类似列表生成式的 for 循环无法实现的时候，还可以用函数来实现。</p><p>比如，著名的斐波拉契数列(Fibonacci)，除第一个和第二个数外，任意一个数都可由前两个数相加得到:</p><p>1, 1, 2, 3, 5, 8, 13, 21, 34, ...</p><p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">max</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    n</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">    while</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">&lt;</span><span style="color:#88C0D0;"> max</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">b</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        n </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">+</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">done</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>注意，赋值语句:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span></span></code></pre></div><p>相当于:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">t </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">)</span><span style="color:#616E88;"> # t是一个tuple</span></span>
<span class="line"><span style="color:#D8DEE9FF;">a </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> t</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> t</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>但不必显式写出临时变量 <code>t</code> 就可以赋值。</p><p>上面的函数可以输出斐波那契数列的前 N 个数:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">6</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#B48EAD;">8</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">done</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>仔细观察，可以看出，<code>fib</code> 函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似 generator。</p><p>也就是说，上面的函数和 generator 仅一步之遥。要把 fib 函数变成 generator，只需要把 <code>print(b)</code> 改为 <code>yield b</code> 就可以了:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">max</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    n</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">    while</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">&lt;</span><span style="color:#88C0D0;"> max</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">        yield</span><span style="color:#D8DEE9FF;"> b</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        n </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">+</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">done</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>这就是定义 generator 的另一种方法。如果一个函数定义中包含 <code>yield</code> 关键字，那么这个函数就不再是一个普通函数，而是一个 generator:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">6</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">generator </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> fib at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">104feaaa0</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>这里，最难理解的就是 generator 和函数的执行流程不一样。函数是顺序执行，遇到 <code>return</code> 语句或者最后一行函数语句就返回。而变成 generator 的函数，在每次调用 <code>next()</code> 的时候执行，遇到 <code>yield</code> 语句返回，再次执行时从上次返回的 <code>yield</code> 语句处继续执行。</p><p>举个简单的例子，定义一个 generator，依次返回数字 1，3，5:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> odd</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">step 1</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">step 2</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">step 3</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">    yield</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>调用该 generator 时，首先要生成一个 generator 对象，然后用 <code>next()</code> 函数不断获得下一个返回值:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> o </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> odd</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">o</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">step </span><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">o</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">step </span><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">o</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">step </span><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">o</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">StopIteration</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>odd</code> 不是普通函数，而是 generator，在执行过程中，遇到 <code>yield</code> 就中断，下次又继续执行。执行 3 次 <code>yield</code> 后，已经没有 <code>yield</code> 可以执行了，所以，第 4 次调用 <code>next(o)</code> 就报错。</p><p>回到 fib 的例子，我们在循环过程中不断调用 <code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p><p>同样的，把函数改成 generator 后，我们基本上从来不会用 <code>next()</code> 来获取下一个返回值，而是直接使用 for 循环来迭代:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">6</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#B48EAD;">8</span></span></code></pre></div><p>但是用 for 循环调用 generator 时，发现拿不到 generator 的 <code>return</code> 语句的返回值。如果想要拿到返回值，必须捕获 <code>StopIteration</code> 错误，返回值包含在 <code>StopIteration</code> 的 value 中:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> g </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">6</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> while</span><span style="color:#81A1C1;"> True</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">try</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         x </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> next</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">g:</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> x</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">except</span><span style="color:#8FBCBB;"> StopIteration</span><span style="color:#81A1C1;"> as</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Generator return value:</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> e</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">value</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">break</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 2</span></span>
<span class="line"><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 3</span></span>
<span class="line"><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 5</span></span>
<span class="line"><span style="color:#D8DEE9FF;">g</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 8</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Generator </span><span style="color:#81A1C1;">return</span><span style="color:#D8DEE9FF;"> value</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于如何捕获错误，后面的错误处理还会详细讲解。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h2><p>Generator 是非常强大的工具，在 Python 中，可以简单地把列表生成式改成 generator，也可以通过函数实现复杂逻辑的 generator。</p><p>要理解 generator 的工作原理，它是在 for 循环的过程中不断计算出下一个元素，并在适当的条件结束 for 循环。对于函数改成的 generator 来说，遇到 <code>return</code> 语句或者执行到函数体最后一行语句，就是结束 generator 的指令，for 循环随之结束。</p><p>请注意区分普通函数和 generator 函数，普通函数调用直接返回结果:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> r </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> abs</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">6</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> r</span></span>
<span class="line"><span style="color:#B48EAD;">6</span></span></code></pre></div><p>Generator 函数的“调用”实际返回一个 generator 对象:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> g </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> fib</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">6</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> g</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">generator </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> fib at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">1022ef948</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div>`,46))])}const y=a(t,[["render",c],["__file","generator.html.vue"]]),F=JSON.parse('{"path":"/code/language/python/advance/generator.html","title":"生成器","lang":"zh-CN","frontmatter":{"title":"生成器","icon":"cycle","author":"廖雪峰","date":"2020-05-29T00:00:00.000Z","category":"Python","description":"通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。 所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢? 这样就不必创建完整的 li...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/python/advance/generator.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"生成器"}],["meta",{"property":"og:description","content":"通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。 所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢? 这样就不必创建完整的 li..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2020-05-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-05-29T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1591204114000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":6},{"name":"Mister-Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":5.5,"words":1650},"filePathRelative":"code/language/python/advance/generator.md","localizedDate":"2020年5月29日","excerpt":"<p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含 100 万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>\\n<p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢? 这样就不必创建完整的 list，从而节省大量的空间。在 Python 中，这种一边循环一边计算的机制，称为生成器: generator。</p>\\n","autoDesc":true}');export{y as comp,F as data};
