import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o as p}from"./app-K4WwjAaR.js";const o={};function e(t,s){return p(),n("div",null,s[0]||(s[0]=[l(`<p>看到类似 <code>__slots__</code> 这种形如 <code>__xxx__</code> 的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。</p><p><code>__slots__</code> 我们已经知道怎么用了，<code>__len__()</code> 方法我们也知道是为了能让 class 作用于 <code>len()</code> 函数。</p><p>除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p><h2 id="str" tabindex="-1"><a class="header-anchor" href="#str"><span><code>__str__</code></span></a></h2><p>我们先定义一个 Student 类，打印一个实例:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">__main__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Student </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">109afb190</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>打印出一堆 <code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p><p>怎么才能打印得好看呢？只需要定义好 <code>__str__()</code> 方法，返回一个好看的字符串就可以了:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> __str__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...         </span><span style="color:#81A1C1;">return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Student object (name: </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">)</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Student </span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Michael</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p><p>但是细心的朋友会发现直接敲变量不用 <code>print</code>，打印出来的实例还是不好看:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">__main__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Student </span><span style="color:#88C0D0;">object</span><span style="color:#D8DEE9FF;"> at </span><span style="color:#81A1C1;">0x</span><span style="color:#B48EAD;">109afb310</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p>这是因为直接显示变量调用的不是 <code>__str__()</code>，而是 <code>__repr__()</code>，两者的区别是 <code>__str__()</code> 返回用户看到的字符串，而 <code>__repr__()</code> 返回程序开发者看到的字符串，也就是说，<code>__repr__()</code> 是为调试服务的。</p><p>解决办法是再定义一个 <code>__repr__()</code>。但是通常 <code>__str__()</code> 和 <code>__repr__()</code> 代码都是一样的，所以，有个偷懒的写法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __str__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Student object (name=</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">)</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span></span>
<span class="line"><span style="color:#88C0D0;">    __repr__</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> __str__</span></span>
<span class="line"><span style="color:#88C0D0;">__iter__</span></span></code></pre></div><p>如果一个类想被用于 <code>for ... in</code> 循环，类似 list 或 tuple 那样，就必须实现一个 <code>__iter__()</code> 方法，该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的 <code>__next__()</code> 方法拿到循环的下一个值，直到遇到 <code>StopIteration</code> 错误时退出循环。</p><p>我们以斐波那契数列为例，写一个 <code>Fib</code> 类，可以作用于 for 循环:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Fib</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#616E88;"> # 初始化两个计数器a，b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __iter__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#81A1C1;"> self</span><span style="color:#616E88;"> # 实例本身就是迭代对象，故返回自己</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __next__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">a</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">b </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">b</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">a </span><span style="color:#81A1C1;">+</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">b </span><span style="color:#616E88;"># 计算下一个值</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">a </span><span style="color:#81A1C1;">&gt;</span><span style="color:#B48EAD;"> 100000</span><span style="color:#ECEFF4;">:</span><span style="color:#616E88;"> # 退出循环的条件</span></span>
<span class="line"><span style="color:#81A1C1;">            raise</span><span style="color:#8FBCBB;"> StopIteration</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">a </span><span style="color:#616E88;"># 返回下一个值</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，试试把 <code>Fib</code> 实例作用于 for 循环:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> Fib</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#B48EAD;">5</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#B48EAD;">46368</span></span>
<span class="line"><span style="color:#B48EAD;">75025</span></span>
<span class="line"><span style="color:#88C0D0;">__getitem__</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Fib</code> 实例虽然能作用于 for 循环，看起来和 <code>list</code> 有点像，但是，把它当成 <code>list</code> 来使用还是不行，比如，取第 5 个元素:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> Fib</span><span style="color:#ECEFF4;">()[</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">TypeError</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Fib</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#88C0D0;"> object</span><span style="color:#D8DEE9FF;"> does </span><span style="color:#81A1C1;">not</span><span style="color:#D8DEE9FF;"> support indexing</span></span></code></pre></div><p>要表现得像 list 那样按照下标取出元素，需要实现 <code>__getitem__()</code> 方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Fib</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getitem__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> n</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#D8DEE9FF;"> a</span></span></code></pre></div><p>现在，就可以按下标访问数列的任意一项了:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Fib</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#B48EAD;">1</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#B48EAD;">3</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#B48EAD;">89</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">100</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#B48EAD;">573147844013817084101</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是 <code>list</code> 有个神奇的切片方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> list</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">100</span><span style="color:#ECEFF4;">))[</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 6</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 7</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 9</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>对于 Fib 却报错。原因是 <code>__getitem__()</code> 传入的参数可能是一个 <code>int</code>，也可能是一个切片对象 <code>slice</code>，所以要做判断:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Fib</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getitem__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> n</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> int</span><span style="color:#ECEFF4;">):</span><span style="color:#616E88;"> # n是索引</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#81A1C1;">            for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#D8DEE9FF;"> a</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> slice</span><span style="color:#ECEFF4;">):</span><span style="color:#616E88;"> # n是切片</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            start </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> n</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">start</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            stop </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> n</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">stop</span></span>
<span class="line"><span style="color:#81A1C1;">            if</span><span style="color:#D8DEE9FF;"> start </span><span style="color:#81A1C1;">is</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                start </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            L </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#81A1C1;">            for</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">stop</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">                if</span><span style="color:#D8DEE9FF;"> x </span><span style="color:#81A1C1;">&gt;=</span><span style="color:#D8DEE9FF;"> start</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                    L</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">a</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#D8DEE9FF;"> L</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在试试 <code>Fib</code> 的切片:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Fib</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[:</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 13</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 21</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 34</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 55</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>但是没有对 step 参数作处理:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> f</span><span style="color:#ECEFF4;">[:</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">2</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 13</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 21</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 34</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 55</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 89</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>也没有对负数作处理，所以，要正确实现一个 <code>__getitem__()</code> 还是有很多工作要做的。</p><p>此外，如果把对象看成 dict，<code>__getitem__()</code> 的参数也可能是一个可以作 <code>key</code> 的 <code>object</code>，例如 <code>str</code>。</p><p>与之对应的是 <code>__setitem__()</code> 方法，把对象视作 <code>list</code> 或 <code>dict</code> 来对集合赋值。最后，还有一个 <code>__delitem__()</code> 方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和 Python 自带的 <code>list</code>、<code>tuple</code>、<code>dict</code> 没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h2 id="getattr" tabindex="-1"><a class="header-anchor" href="#getattr"><span><code>__getattr__</code></span></a></h2><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义 <code>Student</code> 类:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>调用 <code>name</code> 属性，没问题，但是，调用不存在的 <code>score</code> 属性，就有问题了:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Michael</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  ...</span></span>
<span class="line"><span style="color:#8FBCBB;">AttributeError</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Student</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#88C0D0;"> object</span><span style="color:#D8DEE9FF;"> has no attribute </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">score</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>错误信息很清楚地告诉我们，没有找到 <code>score</code> 这个 <code>attribute</code>。</p><p>要避免这个错误，除了可以加上一个 <code>score</code> 属性外，Python 还有另一个机制，那就是写一个 <code>__getattr__()</code> 方法，动态返回一个属性。修改如下:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getattr__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> attr</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#D8DEE9FF;"> attr</span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">score</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#B48EAD;"> 99</span></span></code></pre></div><p>当调用不存在的属性时，比如 <code>score</code>，Python 解释器会试图调用 <code>__getattr__(self, &#39;score&#39;)</code> 来尝试获得属性，这样，我们就有机会返回 <code>score</code> 的值:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">score</span></span>
<span class="line"><span style="color:#B48EAD;">99</span></span></code></pre></div><p>返回函数也是完全可以的:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getattr__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> attr</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#D8DEE9FF;"> attr</span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">age</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> lambda</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 25</span></span></code></pre></div><p>只是调用方式要变为:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">age</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#B48EAD;">25</span></span></code></pre></div><p>注意，只有在没有找到属性的情况下，才调用 <code>__getattr__</code>，已有的属性，比如 <code>name</code>，不会在 <code>__getattr__</code> 中查找。</p><p>此外，注意到任意调用如 <code>s.abc</code> 都会返回 <code>None</code>，这是因为我们定义的 <code>__getattr__</code> 默认返回就是 <code>None</code>。要让 class 只响应特定的几个属性，我们就要按照约定，抛出 <code>AttributeError</code> 的错误:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getattr__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> attr</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#D8DEE9FF;"> attr</span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">age</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> lambda</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 25</span></span>
<span class="line"><span style="color:#81A1C1;">        raise</span><span style="color:#8FBCBB;"> AttributeError</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#EBCB8B;">\\&#39;</span><span style="color:#A3BE8C;">Student</span><span style="color:#EBCB8B;">\\&#39;</span><span style="color:#A3BE8C;"> object has no attribute </span><span style="color:#EBCB8B;">\\&#39;%s\\&#39;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#D8DEE9FF;"> attr</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p><p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p><p>举个例子:</p><p>现在很多网站都搞 REST API，比如新浪微博、豆瓣啥的，调用 API 的 URL 类似:</p><ul><li><code>http://api.server/user/friends</code></li><li><code>http://api.server/user/timeline/list</code></li></ul><p>如果要写 SDK，给每个 URL 对应的 API 都写一个方法，那得累死，而且，API 一旦改动，SDK 也要改。</p><p>利用完全动态的 <code>__getattr__</code>，我们可以写出一个链式调用:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Chain</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> path</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;&#39;</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">_path </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getattr__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> path</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> Chain</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">/</span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">_path</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> path</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __str__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">_path</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">    __repr__</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> __str__</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试试:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> Chain</span><span style="color:#ECEFF4;">().</span><span style="color:#D8DEE9FF;">status</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">user</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">timeline</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">list</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">/status/user/timeline/list</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>这样，无论 API 怎么变，SDK 都可以根据 URL 实现完全动态的调用，而且，不随 API 的增加而改变!</p><p>还有些 REST API 会把参数放到 URL 中，比如 GitHub 的 API:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">GET </span><span style="color:#81A1C1;">/</span><span style="color:#D8DEE9FF;">users</span><span style="color:#81A1C1;">/</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;">user</span><span style="color:#81A1C1;">/</span><span style="color:#D8DEE9FF;">repos</span></span></code></pre></div><p>调用时，需要把 <code>:user</code> 替换为实际用户名。如果我们能写出这样的链式调用:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">Chain</span><span style="color:#ECEFF4;">().</span><span style="color:#88C0D0;">users</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">).</span><span style="color:#D8DEE9FF;">repos</span></span></code></pre></div><p>就可以非常方便地调用 API 了。有兴趣的童鞋可以试试写出来。</p><h2 id="call" tabindex="-1"><a class="header-anchor" href="#call"><span><code>__call__</code></span></a></h2><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用 <code>instance.method()</code> 来调用。能不能直接在实例本身上调用呢？在 Python 中，答案是肯定的。</p><p>任何类，只需要定义一个 <code>__call__()</code> 方法，就可以直接对实例进行调用。请看示例:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __call__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">My name is </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>调用方式如下:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> s </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Student</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> s</span><span style="color:#ECEFF4;">()</span><span style="color:#616E88;"> # self参数不要传入</span></span>
<span class="line"><span style="color:#D8DEE9FF;">My name </span><span style="color:#81A1C1;">is</span><span style="color:#D8DEE9FF;"> Michael</span><span style="color:#ECEFF4;">.</span></span></code></pre></div><p><code>__call__()</code> 还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以您完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p><p>如果您把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p><p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个 Callable 对象，比如函数和我们上面定义的带有 <code>__call__()</code> 的类实例:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> callable</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">Student</span><span style="color:#ECEFF4;">())</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> callable</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">max</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> callable</span><span style="color:#ECEFF4;">([</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 3</span><span style="color:#ECEFF4;">])</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> callable</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">None</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> callable</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">str</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>callable()</code> 函数，我们就可以判断一个对象是否是“可调用”对象。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>更多可定制的方法，请参考 <a href="http://docs.python.org/3/reference/datamodel.html#special-method-names" target="_blank" rel="noopener noreferrer">Python 的官方文档</a>。</p></div>`,83)]))}const E=a(o,[["render",e],["__file","customize.html.vue"]]),y=JSON.parse('{"path":"/code/language/python/oop/customize.html","title":"定制类","lang":"zh-CN","frontmatter":{"title":"定制类","author":"廖雪峰","icon":"customize","date":"2021-03-28T00:00:00.000Z","category":"Python","description":"看到类似 __slots__ 这种形如 __xxx__ 的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。 __slots__ 我们已经知道怎么用了，__len__() 方法我们也知道是为了能让 class 作用于 len() 函数。 除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。 __st...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/python/oop/customize.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"定制类"}],["meta",{"property":"og:description","content":"看到类似 __slots__ 这种形如 __xxx__ 的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。 __slots__ 我们已经知道怎么用了，__len__() 方法我们也知道是为了能让 class 作用于 len() 函数。 除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。 __st..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2021-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"定制类\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"__str__","slug":"str","link":"#str","children":[]},{"level":2,"title":"__getattr__","slug":"getattr","link":"#getattr","children":[]},{"level":2,"title":"__call__","slug":"call","link":"#call","children":[]}],"git":{"createdTime":1616944982000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":2},{"name":"Mister-Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":7.38,"words":2215},"filePathRelative":"code/language/python/oop/customize.md","localizedDate":"2021年3月28日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
