import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as i,b as l,f as t,a,w as p,r as h,o as k}from"./app-CXoE_Ak6.js";const r={},g={id:"文件组成",tabindex:"-1"},B={class:"header-anchor",href:"#文件组成"},A={id:"目录结构",tabindex:"-1"},u={class:"header-anchor",href:"#目录结构"},y={id:"允许上传的文件",tabindex:"-1"},m={class:"header-anchor",href:"#允许上传的文件"},c={id:"小程序配置-app-json",tabindex:"-1"},F={class:"header-anchor",href:"#小程序配置-app-json"},x={id:"页面配置-page-json",tabindex:"-1"},b={class:"header-anchor",href:"#页面配置-page-json"},f={id:"工具配置-project-config-json",tabindex:"-1"},v={class:"header-anchor",href:"#工具配置-project-config-json"},E={class:"hint-container info"},C={id:"wxml-模板",tabindex:"-1"},j={class:"header-anchor",href:"#wxml-模板"},S={id:"动态绑定",tabindex:"-1"},q={class:"header-anchor",href:"#动态绑定"},w={id:"wxss-样式",tabindex:"-1"},M={class:"header-anchor",href:"#wxss-样式"},W={id:"js-逻辑交互",tabindex:"-1"},J={class:"header-anchor",href:"#js-逻辑交互"};function T(X,s){const n=h("Badge"),e=h("RouteLink");return k(),d("div",null,[i("h2",g,[i("a",B,[i("span",null,[s[0]||(s[0]=t("文件组成 ")),a(n,{text:"重要",type:"error"})])])]),s[31]||(s[31]=i("p",null,"小程序的代码由四种文件组成:",-1)),s[32]||(s[32]=i("ul",null,[i("li",null,[i("code",null,".json"),t(" 后缀的 JSON 配置文件，主要用作小程序配置")]),i("li",null,[i("code",null,".wxml"),t(" 后缀的 WXML 模板文件，为视图层，相当于 HTML")]),i("li",null,[i("code",null,".wxss"),t(" 后缀的 WXSS 样式文件，为样式部分，相当于 CSS")]),i("li",null,[i("code",null,".js"),t(" 后缀的 JS 脚本逻辑文件，为脚本部分，处理小程序逻辑与行为")])],-1)),i("h2",A,[i("a",u,[i("span",null,[s[1]||(s[1]=t("目录结构 ")),a(n,{text:"重要",type:"error"})])])]),s[33]||(s[33]=l('<p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。</p><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录:</p><table><thead><tr><th>文件</th><th>必需</th><th>作用</th></tr></thead><tbody><tr><td>app.js</td><td>是</td><td>小程序逻辑</td></tr><tr><td>app.json</td><td>是</td><td>小程序公共配置</td></tr><tr><td>app.wxss</td><td>否</td><td>小程序公共样式表</td></tr></tbody></table><p>一个小程序页面由四个文件组成:</p><table><thead><tr><th>文件</th><th>必需</th><th>作用</th></tr></thead><tbody><tr><td>js</td><td>是</td><td>页面逻辑</td></tr><tr><td>wxml</td><td>是</td><td>页面结构</td></tr><tr><td>json</td><td>否</td><td>页面配置</td></tr><tr><td>wxss</td><td>否</td><td>页面样式表</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">注意</p><p>为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</p><p>这样开发者工具会自动将它们视作一个小程序页面的不同代码部分。</p></div>',6)),i("h3",y,[i("a",m,[i("span",null,[s[2]||(s[2]=t("允许上传的文件 ")),a(n,{text:"不重要",type:"grey"})])])]),s[34]||(s[34]=l('<p>见页脚<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="json-配置" tabindex="-1"><a class="header-anchor" href="#json-配置"><span>JSON 配置</span></a></h2><p>JSON 是一种数据格式，<strong>在小程序中，JSON 负责描述小程序的静态配置，负责配置项目、小程序整体和每个页面。</strong></p><p>我们可以看到在项目的根目录有一个 <code>app.json</code> 和 <code>project.config.json</code>，此外在 <code>pages/logs</code> 目录下还有一个 <code>logs.json</code>。下面是它们的用途说明。</p>',4)),i("h3",c,[i("a",F,[i("span",null,[s[3]||(s[3]=t("小程序配置 app.json ")),a(n,{text:"重要",type:"error"})])])]),s[35]||(s[35]=l(`<p>app.json 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。QuickStart 项目里边的 app.json 配置内容如下:</p><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;pages&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pages/index/index&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pages/logs/logs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;window&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;backgroundTextStyle&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;light&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;navigationBarBackgroundColor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#fff&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;navigationBarTitleText&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;WeChat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    &quot;navigationBarTextStyle&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;black&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><ul><li><p><code>pages</code> 字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前您的小程序页面定义在哪个目录。</p></li><li><p><code>window</code> 字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</p></li></ul>`,3)),i("p",null,[s[5]||(s[5]=t("其他配置项可以参考文档 ")),a(e,{to:"/code/mini-app/guide/config/app-config.html"},{default:p(()=>s[4]||(s[4]=[t("全局配置")])),_:1}),s[6]||(s[6]=t("。"))]),i("h3",x,[i("a",b,[i("span",null,[s[7]||(s[7]=t("页面配置 page.json ")),a(n,{text:"简单了解"})])])]),s[36]||(s[36]=i("p",null,[t("这里的 "),i("code",null,"page.json"),t(" 其实用来表示小程序页面相关的配置。")],-1)),s[37]||(s[37]=i("p",null,[t("如果您整个小程序的风格是蓝色调，那么您可以在 "),i("code",null,"app.json"),t(" 里边声明顶部颜色是蓝色即可。实际您可能希望小程序里边的每个页面都有不一样的色调来区分不同功能模块，"),i("code",null,"page.json"),t(" 就提供了定义每个页面的一些属性的能力。")],-1)),i("p",null,[s[9]||(s[9]=t("配置项可以参考文档 ")),a(e,{to:"/code/mini-app/guide/config/page-config.html"},{default:p(()=>s[8]||(s[8]=[t("页面配置")])),_:1}),s[10]||(s[10]=t("。"))]),i("h3",f,[i("a",v,[i("span",null,[s[11]||(s[11]=t("工具配置 project.config.json ")),a(n,{text:"不重要",type:"grey"})])])]),s[38]||(s[38]=i("p",null,"通常大家在使用一个工具的时候，都会针对各自喜好做一些个性化配置，例如界面颜色、编译配置等等，当您换了另外一台电脑重新安装工具的时候，您还要重新配置。",-1)),s[39]||(s[39]=i("p",null,"考虑到这点，小程序开发者工具在每个项目的根目录都会生成一个 project.config.json，您在工具上做的任何配置都会写入到这个文件，当您重新安装工具或者换电脑工作时，您只要载入同一个项目的代码包，开发者工具就自动会帮您恢复到当时您开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项。",-1)),s[40]||(s[40]=i("p",null,[t("其他配置项细节可以参考文档 "),i("a",{href:"https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html",target:"_blank",rel:"noopener noreferrer"},"开发者工具的配置"),t("。")],-1)),i("div",E,[s[14]||(s[14]=i("p",{class:"hint-container-title"},"相关信息",-1)),i("p",null,[s[13]||(s[13]=t("更多 JSON 相关教程，请查看 ")),a(e,{to:"/code/language/json/"},{default:p(()=>s[12]||(s[12]=[t("JSON 教程")])),_:1})])]),i("h2",C,[i("a",j,[i("span",null,[s[15]||(s[15]=t("WXML 模板 ")),a(n,{text:"重要",type:"error"})])])]),s[41]||(s[41]=l(`<p>在小程序中 WXML 充当的就是类似 HTML 的角色。打开 <code>pages/index/index.wxml</code>，您会看到以下的内容:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;container&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;userinfo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> wx:if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{{!hasUserInfo &amp;&amp; canIUse}}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; 获取头像昵称 &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wx:else&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">image</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{{userInfo.avatarUrl}}&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> background-size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cover&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;userinfo-nickname&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{userInfo.nickName}}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">block</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;usermotto&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user-motto&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{motto}}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 HTML 非常相似，WXML 由标签、属性等等构成。但是也有很多不一样的地方，我们来一一阐述一下:</p><ul><li><p>自己的一套标签名称</p><blockquote><p>e.g.: 小程序把最常见的 <code>&lt;span /&gt;</code> 改成了 <code>&lt;text /&gt;</code>，<code>&lt;div /&gt;</code> 改成了 <code>&lt;view /&gt;</code></p></blockquote></li></ul>`,4)),s[42]||(s[42]=i("div",null,[i("ul",null,[i("li",null,[t("多了一些 "),i("code",{"v-pre":""},"wx:if"),t(" 这样的属性以及 "),i("code",{"v-pre":""},"{{ }}"),t(" 这样的表达式")])])],-1)),s[43]||(s[43]=i("p",null,"由于小程序不允许用户进行 DOM 操作，所以小程序在编译的时候就要编译好整个的 DOM 结构。",-1)),s[44]||(s[44]=i("p",null,"小程序下通过提供动态绑定、条件渲染与循环渲染帮助您去动态改变编译好的 DOM 结构。",-1)),i("p",null,[s[17]||(s[17]=t("更详细的文档可以参考 ")),a(e,{to:"/code/mini-app/guide/view/wxml.html"},{default:p(()=>s[16]||(s[16]=[t("WXML")])),_:1}),s[18]||(s[18]=t(" 。"))]),i("h2",S,[i("a",q,[i("span",null,[s[19]||(s[19]=t("动态绑定 ")),a(n,{text:"重要",type:"error"})])])]),s[45]||(s[45]=l('<p>动态绑定负责把 JS 的变量映射绑定到 WXML 上，也就是说负责把逻辑层的变量显示在视图层的具体位置。</p><p>WXML:</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{msg}}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>JS 只需要管理状态即可:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span></code></pre></div>',5)),s[46]||(s[46]=i("div",null,[i("p",null,[t("通过 "),i("code",{"v-pre":""},"{{ }}"),t(" 的语法把一个变量绑定到界面上，我们称为数据绑定。仅仅通过数据绑定还不够完整的描述状态和界面的关系，还需要 "),i("code",{"v-pre":""},"if"),t(" / "),i("code",{"v-pre":""},"else"),t(", "),i("code",{"v-pre":""},"for"),t(" 等控制能力，在小程序里边，这些控制能力都用 "),i("code",{"v-pre":""},"wx:"),t(" 开头的属性来表达。")])],-1)),i("h2",w,[i("a",M,[i("span",null,[s[20]||(s[20]=t("WXSS 样式 ")),a(n,{text:"重要",type:"error"})])])]),s[47]||(s[47]=l('<p>WXSS 具有 CSS 大部分的特性，也做了一些扩充和修改。</p><ul><li><p>新增了尺寸单位。WXSS 在底层支持新的尺寸单位 rpx ，规定屏幕宽 750 rpx。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。</p><p>所以 Mr.Hope 并不建议使用 rpx 单位。</p></div></li><li><p>提供了全局的样式和局部样式。</p><p>和前边 <code>app.json</code>, <code>page.json</code> 的概念相同，您可以写一个 <code>app.wxss</code> 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 <code>page.wxss</code> 仅对当前页面生效。</p></li><li><p>此外 WXSS 仅支持部分 CSS 选择器</p></li></ul>',2)),i("p",null,[s[22]||(s[22]=t("更详细的文档可以参考 ")),a(e,{to:"/code/mini-app/guide/view/wxss.html"},{default:p(()=>s[21]||(s[21]=[t("WXSS")])),_:1}),s[23]||(s[23]=t("。"))]),i("h2",W,[i("a",J,[i("span",null,[s[24]||(s[24]=t("JS 逻辑交互 ")),a(n,{text:"重要",type:"error"})])])]),s[48]||(s[48]=l(`<p>小程序仅仅只有界面展示是不够的，还需要和用户做交互: 响应用户的点击、获取用户的位置等等。小程序通过 JS 脚本文件来处理用户的操作。</p><div class="language-xml" data-highlighter="shiki" data-ext="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ msg }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bindtap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;clickMe&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;点击我&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre></div><p>点击 button 按钮的时候，我们希望把界面上 <code>msg</code> 显示成 <code>&quot;Hello World&quot;</code>，于是我们在 button 上声明一个属性: <code>bindtap</code> ，在 JS 文件里边声明了 <code>clickMe</code> 方法来响应这次点击操作:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  clickMe</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre></div>`,4)),i("p",null,[s[26]||(s[26]=t("响应用户的操作就是这么简单，更详细的事件可以参考文档 ")),a(e,{to:"/code/mini-app/guide/view/event.html"},{default:p(()=>s[25]||(s[25]=[t("WXML - 事件")])),_:1}),s[27]||(s[27]=t(" 。"))]),s[49]||(s[49]=i("p",null,[t("此外您还可以在 JS 中调用小程序提供的丰富的 API，利用这些 API 可以很方便的调起微信提供的能力，例如获取用户信息、本地存储、微信支付等。在前边的 QuickStart 例子中，在 "),i("code",null,"pages/index/index.js"),t(" 就调用了 "),i("code",null,"wx.getUserInfo"),t(" 获取微信用户的头像和昵称，最后通过 "),i("code",null,"setData"),t(" 把获取到的信息显示到界面上。")],-1)),i("p",null,[s[29]||(s[29]=t("更多 API 可以参考文档 ")),a(e,{to:"/code/mini-app/guide/service/api/"},{default:p(()=>s[28]||(s[28]=[t("小程序的 API")])),_:1}),s[30]||(s[30]=t(" 。"))]),s[50]||(s[50]=l('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>在项目目录中，以下文件会经过编译，因此上传之后无法直接访问到: <code>.js</code>、<code>app.json</code>、<code>.wxml</code>、<code>*.wxss</code>(其中 <code>wxml</code> 和 <code>wxss</code> 文件仅针对在 <code>app.json</code> 中配置了的页面)。除此之外，只有后缀名在白名单内的文件可以被上传。具体白名单列表如下:</p><ul><li>wxs</li><li>png</li><li>jpg</li><li>jpeg</li><li>gif</li><li>svg</li><li>json</li><li>cer</li><li>mp3</li><li>aac</li><li>m4a</li><li>mp4</li><li>wav</li><li>ogg</li><li>silk</li></ul><a href="#footnote-ref1" class="footnote-backref">↩︎</a></li></ol></section>',2))])}const D=o(r,[["render",T]]),H=JSON.parse('{"path":"/code/mini-app/guide/file-structure.html","title":"代码构成","lang":"zh-CN","frontmatter":{"date":"2020-10-09T00:00:00.000Z","title":"代码构成","icon":"tree","category":"小程序","description":"文件组成 小程序的代码由四种文件组成: .json 后缀的 JSON 配置文件，主要用作小程序配置 .wxml 后缀的 WXML 模板文件，为视图层，相当于 HTML .wxss 后缀的 WXSS 样式文件，为样式部分，相当于 CSS .js 后缀的 JS 脚本逻辑文件，为脚本部分，处理小程序逻辑与行为 目录结构 小程序包含一个描述整体程序的 app ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码构成\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-10-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-25T17:47:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.com/code/mini-app/guide/file-structure.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"代码构成"}],["meta",{"property":"og:description","content":"文件组成 小程序的代码由四种文件组成: .json 后缀的 JSON 配置文件，主要用作小程序配置 .wxml 后缀的 WXML 模板文件，为视图层，相当于 HTML .wxss 后缀的 WXSS 样式文件，为样式部分，相当于 CSS .js 后缀的 JS 脚本逻辑文件，为脚本部分，处理小程序逻辑与行为 目录结构 小程序包含一个描述整体程序的 app ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T17:47:26.000Z"}],["meta",{"property":"article:published_time","content":"2020-10-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-25T17:47:26.000Z"}],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"git":{"createdTime":1591204114000,"updatedTime":1706204846000,"contributors":[{"name":"Mr.Hope","username":"","email":"zhangbowang1998@gmail.com","commits":12}]},"readingTime":{"minutes":6.6,"words":1981},"filePathRelative":"code/mini-app/guide/file-structure.md","excerpt":"","autoDesc":true}');export{D as comp,H as data};
