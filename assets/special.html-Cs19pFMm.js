import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,b as l}from"./app-DBDndcYm.js";const p={},o=l(`<h2 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span><code>type()</code></span></a></h2><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。</p><p>比方说我们要定义一个 <code>Hello</code> 的 class，就写一个 <code>hello.py</code> 模块:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Hello</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> hello</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>当 Python 解释器载入 <code>hello</code> 模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个 <code>Hello</code> 的 class 对象，测试如下:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> from</span><span style="color:#D8DEE9FF;"> hello </span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> Hello</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> h </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Hello</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> h</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hello</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Hello</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> world</span><span style="color:#ECEFF4;">.</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Hello</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">type</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">h</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello.Hello</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span></code></pre></div><p><code>type()</code> 函数可以查看一个类型或变量的类型，<code>Hello</code> 是一个 class，它的类型就是 type，而 <code>h</code> 是一个实例，它的类型就是 <code>class Hello</code>。</p><p>我们说 class 的定义是运行时动态创建的，而创建 class 的方法就是使用 <code>type()</code> 函数。</p><p><code>type()</code> 函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过 <code>type()</code> 函数创建出 Hello 类，而无需通过 <code>class Hello(object)...</code> 的定义:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> fn</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">world</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">):</span><span style="color:#616E88;"> # 先定义函数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello, </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">.</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> Hello </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">,),</span><span style="color:#88C0D0;"> dict</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">hello</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">fn</span><span style="color:#ECEFF4;">))</span><span style="color:#616E88;"> # 创建Hello class</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> h </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Hello</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> h</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">hello</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Hello</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> world</span><span style="color:#ECEFF4;">.</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Hello</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">type</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">h</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;class</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">__main__.Hello</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要创建一个 class 对象，<code>type()</code> 函数依次传入 3 个参数:</p><ol><li>class 的名称；</li><li>继承的父类集合，注意 Python 支持多重继承，如果只有一个父类，别忘了 <code>tuple</code> 的单元素写法；</li><li>class 的方法名称与函数绑定，这里我们把函数 <code>fn</code> 绑定到方法名 <code>hello</code> 上。</li></ol><p>通过 <code>type()</code> 函数创建的类和直接写 class 是完全一样的，因为 Python 解释器遇到 class 定义时，仅仅是扫描一下 class 定义的语法，然后调用 <code>type()</code> 函数创建出 class。</p><p>正常情况下，我们都用 <code>class Xxx...</code> 来定义类，但是，<code>type()</code> 函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。</p><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum"><span>Enum</span></a></h2><p><code>Enum</code> 可以把一组相关常量定义在一个 class 中，且 class 不可变，而且成员可以直接比较。</p><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份:</p><div class="language-" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span>JAN = 1</span></span>
<span class="line"><span>FEB = 2</span></span>
<span class="line"><span>MAR = 3</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>NOV = 11</span></span>
<span class="line"><span>DEC = 12</span></span></code></pre></div><p>好处是简单，缺点是类型是 <code>int</code>，并且仍然是变量。</p><p>更好的方法是为这样的枚举类型定义一个 class 类型，然后，每个常量都是 class 的一个唯一实例。Python 提供了 <code>Enum</code> 类来实现这个功能:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">from</span><span style="color:#D8DEE9FF;"> enum </span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> Enum</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">Month </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> Enum</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Month</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Jan</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Feb</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Mar</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Apr</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">May</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Jun</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Jul</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Aug</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Sep</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Oct</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Nov</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Dec</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">))</span></span></code></pre></div><p>这样我们就获得了 <code>Month</code> 类型的枚举类，可以直接使用 <code>Month.Jan</code> 来引用一个常量，或者枚举它的所有成员:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> member </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> Month</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__members__</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">items</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">=&gt;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> member</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">,</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> member</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">value</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p><code>value</code> 属性则是自动赋给成员的 <code>int</code> 常量，默认从 <code>1</code> 开始计数。</p><p>如果需要更精确地控制枚举类型，可以从 <code>Enum</code> 派生出自定义类:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">from</span><span style="color:#D8DEE9FF;"> enum </span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> Enum</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> unique</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">unique</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Weekday</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;font-weight:bold;">Enum</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Sun </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 0</span><span style="color:#616E88;"> # Sun的value被设定为0</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Mon </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Tue </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 2</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Wed </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 3</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Thu </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 4</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Fri </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 5</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    Sat </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@unique</code> 装饰器可以帮助我们检查保证没有重复值。</p><p>访问这些枚举类型可以有若干种方法:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> day1 </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Mon</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">day1</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Mon</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Tue</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Tue</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Tue</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">])</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Tue</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Tue</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">value</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">2</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">day1 </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Mon</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">day1 </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Tue</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">False</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">Weekday</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Mon</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">day1 </span><span style="color:#81A1C1;">==</span><span style="color:#88C0D0;"> Weekday</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#88C0D0;"> Weekday</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">7</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  ...</span></span>
<span class="line"><span style="color:#8FBCBB;">ValueError</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 7</span><span style="color:#81A1C1;"> is</span><span style="color:#81A1C1;"> not</span><span style="color:#D8DEE9FF;"> a valid Weekday</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> member </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__members__</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">items</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...     </span><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">=&gt;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> member</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Sun </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Sun</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Mon </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Mon</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Tue </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Tue</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Wed </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Wed</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Thu </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Thu</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Fri </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Fri</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Sat </span><span style="color:#81A1C1;">=&gt;</span><span style="color:#D8DEE9FF;"> Weekday</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">Sat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，既可以用成员名称引用枚举常量，又可以直接根据 <code>value</code> 的值获得枚举常量。</p><h2 id="metaclass" tabindex="-1"><a class="header-anchor" href="#metaclass"><span>metaclass</span></a></h2><p>除了使用 <code>type()</code> 动态创建类以外，要控制类的创建行为，还可以使用 metaclass。</p><p>metaclass 是 Python 中非常具有魔术性的对象，它可以改变类创建时的行为。这种强大的功能使用起来务必小心。</p><p>metaclass，直译为元类，简单的解释就是: 当我们定义了类以后，就可以根据这个类创建出实例，所以先定义类，然后创建实例。</p><p>但是如果我们想创建出类呢？那就必须根据 metaclass 创建出类，所以: 先定义 metaclass，然后创建类。</p><p>连接起来就是: 先定义 metaclass，就可以创建类，最后创建实例。</p><p>所以，metaclass 允许您创建类或者修改类。换句话说，您可以把类看成是 metaclass 创建出来的“实例”。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>metaclass 是 Python 面向对象里最难理解，也是最难使用的魔术代码。正常情况下，您不会碰到需要使用 metaclass 的情况，所以，以下内容看不懂也没关系，因为基本上您不会用到。</p></div><p>我们先看一个简单的例子，这个 metaclass 可以给我们自定义的 <code>MyList</code> 增加一个 <code>add</code> 方法:</p><p>定义 <code>ListMetaclass</code>，按照默认习惯，metaclass 的类名总是以 <code>Metaclass</code> 结尾，以便清楚地表示这是一个 metaclass:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># metaclass是类的模板，所以必须从\`type\`类型派生:</span></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> ListMetaclass</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __new__</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">cls</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bases</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> attrs</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        attrs</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">add</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> lambda</span><span style="color:#D8DEE9;"> self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">value</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">__new__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">cls</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> bases</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> attrs</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>有了 <code>ListMetaclass</code>，我们在定义类的时候还要指示使用 <code>ListMetaclass</code> 来定制类，传入关键字参数 metaclass:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> MyList</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">list</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> metaclass</span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;font-weight:bold;">ListMetaclass</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">    pass</span></span></code></pre></div><p>当我们传入关键字参数 metaclass 时，魔术就生效了，它指示 Python 解释器在创建 MyList 时，要通过 <code>ListMetaclass.__new__()</code> 来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p><p><code>__new__()</code> 方法接收到的参数依次是:</p><ol><li>当前准备创建的类的对象</li><li>类的名字</li><li>类继承的父类集合</li><li>类的方法集合</li></ol><p>测试一下 <code>MyList</code> 是否可以调用 <code>add()</code> 方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> L </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> MyList</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> L</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;</span><span style="color:#D8DEE9FF;"> L</span></span>
<span class="line"><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>而普通的 list 没有 <code>add()</code> 方法:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> L2 </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> list</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">&gt;&gt;&gt;</span><span style="color:#D8DEE9FF;"> L2</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">add</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">AttributeError</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">list</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#88C0D0;"> object</span><span style="color:#D8DEE9FF;"> has no attribute </span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">add</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre></div><p>动态修改有什么意义？直接在 <code>MyList</code> 定义中写上 <code>add()</code> 方法不是更简单吗？正常情况下，确实应该直接写，通过 metaclass 修改纯属变态。</p><p>但是，总会遇到需要通过 metaclass 修改类定义的。ORM 就是一个典型的例子。</p><p>ORM 全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作 SQL 语句。</p><p>要编写一个 ORM 框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p><p>让我们来尝试编写一个 ORM 框架。</p><p>编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个 ORM 框架，想定义一个 <code>User</code> 类来操作对应的数据库表 <code>User</code>，我们期待他写出这样的代码:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> User</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;font-weight:bold;">Model</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#616E88;">    # 定义类的属性到列的映射:</span></span>
<span class="line"><span style="color:#88C0D0;">    id</span><span style="color:#81A1C1;"> =</span><span style="color:#88C0D0;"> IntegerField</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">id</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    name </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> StringField</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">username</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    email </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> StringField</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">email</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    password </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> StringField</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">password</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 创建一个实例:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">u </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> User</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">id</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">12345</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> email</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">test@orm.org</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> password</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">my-pwd</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#616E88;"># 保存到数据库:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">u</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">save</span><span style="color:#ECEFF4;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，父类 <code>Model</code> 和属性类型 <code>StringField</code>、<code>IntegerField</code> 是由 ORM 框架提供的，剩下的魔术方法比如 <code>save()</code> 全部由 metaclass 自动完成。虽然 metaclass 的编写会比较复杂，但 ORM 的使用者用起来却异常简单。</p><p>现在，我们就按上面的接口来实现该 ORM。</p><p>首先来定义 <code>Field</code> 类，它负责保存数据库表的字段名和字段类型:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Field</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">object</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> column_type</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> name</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">column_type </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> column_type</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __str__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">&lt;</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">:</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">&gt;</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__class__</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__name__</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>在 <code>Field</code> 的基础上，进一步定义各种类型的 <code>Field</code>，比如 <code>StringField</code>，<code>IntegerField</code> 等等:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> StringField</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;font-weight:bold;">Field</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">        super</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">StringField</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">).</span><span style="color:#88C0D0;">__init__</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">varchar(100)</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> IntegerField</span><span style="color:#ECEFF4;">(</span><span style="color:#8FBCBB;font-weight:bold;">Field</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">        super</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">IntegerField</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">).</span><span style="color:#88C0D0;">__init__</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">bigint</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span></code></pre></div><p>下一步，就是编写最复杂的 <code>ModelMetaclass</code> 了:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> ModelMetaclass</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">type</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __new__</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">cls</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> bases</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> attrs</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#81A1C1;">==</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Model</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">__new__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">cls</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> bases</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> attrs</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Found model: </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        mappings </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> dict</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#D8DEE9FF;"> k</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> v </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> attrs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">items</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#81A1C1;">            if</span><span style="color:#88C0D0;"> isinstance</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">v</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Field</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">                print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Found mapping: </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;"> ==&gt; </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">k</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> v</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">                mappings</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">k</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> v</span></span>
<span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#D8DEE9FF;"> k </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> mappings</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">keys</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            attrs</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">pop</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">k</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        attrs</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">__mappings__</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> mappings </span><span style="color:#616E88;"># 保存属性和列的映射关系</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        attrs</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">__table__</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> name </span><span style="color:#616E88;"># 假设表名和类名一致</span></span>
<span class="line"><span style="color:#81A1C1;">        return</span><span style="color:#88C0D0;"> type</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">__new__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">cls</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> bases</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> attrs</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及基类 <code>Model</code>:</p><div class="language-py line-numbers-mode" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">class</span><span style="color:#8FBCBB;"> Model</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">dict</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> metaclass</span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;font-weight:bold;">ModelMetaclass</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> **</span><span style="color:#D8DEE9;">kw</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#88C0D0;">        super</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">Model</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">).</span><span style="color:#88C0D0;">__init__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">**</span><span style="color:#D8DEE9FF;">kw</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __getattr__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> key</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#81A1C1;">        except</span><span style="color:#8FBCBB;"> KeyError</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            raise</span><span style="color:#8FBCBB;"> AttributeError</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">r</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#EBCB8B;">&#39;Model&#39; object has no attribute &#39;%s&#39;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;"> %</span><span style="color:#D8DEE9FF;"> key</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> __setattr__</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> key</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> value</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">        self</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">key</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    def</span><span style="color:#88C0D0;"> save</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        fields </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        params </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        args </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#81A1C1;">        for</span><span style="color:#D8DEE9FF;"> k</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> v </span><span style="color:#81A1C1;">in</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__mappings__</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">items</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            fields</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">v</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            params</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">?</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            args</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">getattr</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> k</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        sql </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">insert into </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;"> (</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">) values (</span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">)</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">__table__</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">,</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">fields</span><span style="color:#ECEFF4;">),</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">,</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">params</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">SQL: </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#D8DEE9FF;"> sql</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#88C0D0;">        print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">ARGS: </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#88C0D0;"> str</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">args</span><span style="color:#ECEFF4;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当用户定义一个 <code>class User(Model)</code> 时，Python 解释器首先在当前类 <code>User</code> 的定义中查找 metaclass，如果没有找到，就继续在父类 <code>Model</code> 中查找 metaclass，找到了，就使用 <code>Model</code> 中定义的 metaclass 的 <code>ModelMetaclass</code> 来创建 <code>User</code> 类，也就是说，metaclass 可以隐式地继承到子类，但子类自己却感觉不到。</p><p>在 <code>ModelMetaclass</code> 中，一共做了几件事情:</p><ol><li>排除掉对 <code>Model</code> 类的修改；</li><li>在当前类 (比如 User) 中查找定义的类的所有属性，如果找到一个 <code>Field</code> 属性，就把它保存到一个 <code>__mappings__</code> 的 dict 中，同时从类属性中删除该 <code>Field</code> 属性，否则，容易造成运行时错误 (实例的属性会遮盖类的同名属性) ；</li><li>把表名保存到 <code>__table__</code> 中，这里简化为表名默认为类名。</li></ol><p>在 <code>Model</code> 类中，就可以定义各种操作数据库的方法，比如 <code>save()</code>，<code>delete()</code>，<code>find()</code>，<code>update()</code> 等等。</p><p>我们实现了 <code>save()</code> 方法，把一个实例保存到数据库中。因为有表名，属性到字段的映射和属性值的集合，就可以构造出 <code>INSERT</code> 语句。</p><p>编写代码试试:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">u </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> User</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">id</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">12345</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> name</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> email</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">test@orm.org</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> password</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">my-pwd</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">u</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">save</span><span style="color:#ECEFF4;">()</span></span></code></pre></div><p>输出如下:</p><div class="language-py" data-highlighter="shiki" data-ext="py" data-title="py" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">Found model</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> User</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Found mapping</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> email </span><span style="color:#81A1C1;">==&gt;</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">StringField</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;">email</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Found mapping</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> password </span><span style="color:#81A1C1;">==&gt;</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">StringField</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;">password</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Found mapping</span><span style="color:#ECEFF4;">:</span><span style="color:#88C0D0;"> id</span><span style="color:#81A1C1;"> ==&gt;</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">IntegerField</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;">uid</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">Found mapping</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> name </span><span style="color:#81A1C1;">==&gt;</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">StringField</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;">username</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">SQL</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> insert into </span><span style="color:#88C0D0;">User</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">password</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;">email</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;">username</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;">id</span><span style="color:#ECEFF4;">)</span><span style="color:#88C0D0;"> values</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">?</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">?</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">?</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;">?</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">ARGS</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">my-pwd</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">test@orm.org</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">Michael</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 12345</span><span style="color:#ECEFF4;">]</span></span></code></pre></div><p>可以看到，<code>save()</code> 方法已经打印出了可执行的 SQL 语句，以及参数列表，只需要真正连接到数据库，执行该 SQL 语句，就可以完成真正的功能。</p><p>不到 100 行代码，我们就通过 metaclass 实现了一个精简的 ORM 框架，是不是非常简单？</p>`,78),e=[o];function c(t,r){return a(),n("div",null,e)}const y=s(p,[["render",c],["__file","special.html.vue"]]),i=JSON.parse('{"path":"/code/language/python/oop/special.html","title":"特殊的 class","lang":"zh-CN","frontmatter":{"title":"特殊的 class","icon":"any","author":"廖雪峰","date":"2021-03-28T00:00:00.000Z","category":"Python","description":"type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。 比方说我们要定义一个 Hello 的 class，就写一个 hello.py 模块: 当 Python 解释器载入 hello 模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个 Hello 的 class 对象，测试如下: type...","head":[["meta",{"property":"og:url","content":"https://mister-hope.com/code/language/python/oop/special.html"}],["meta",{"property":"og:site_name","content":"Mr.Hope"}],["meta",{"property":"og:title","content":"特殊的 class"}],["meta",{"property":"og:description","content":"type() 动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。 比方说我们要定义一个 Hello 的 class，就写一个 hello.py 模块: 当 Python 解释器载入 hello 模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个 Hello 的 class 对象，测试如下: type..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-02-06T16:46:58.000Z"}],["meta",{"property":"article:author","content":"廖雪峰"}],["meta",{"property":"article:published_time","content":"2021-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-02-06T16:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"特殊的 class\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2022-02-06T16:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"廖雪峰\\"}]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://mister-hope.com/atom.xml","title":"Mr.Hope Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://mister-hope.com/feed.json","title":"Mr.Hope JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://mister-hope.com/rss.xml","title":"Mr.Hope RSS Feed"}]]},"headers":[{"level":2,"title":"type()","slug":"type","link":"#type","children":[]},{"level":2,"title":"Enum","slug":"enum","link":"#enum","children":[]},{"level":2,"title":"metaclass","slug":"metaclass","link":"#metaclass","children":[]}],"git":{"createdTime":1616944982000,"updatedTime":1644166018000,"contributors":[{"name":"Mr.Hope","email":"zhangbowang1998@gmail.com","commits":2},{"name":"Mister-Hope","email":"zhangbowang1998@gmail.com","commits":1}]},"readingTime":{"minutes":9,"words":2699},"filePathRelative":"code/language/python/oop/special.md","localizedDate":"2021年3月28日","excerpt":"","autoDesc":true}');export{y as comp,i as data};
