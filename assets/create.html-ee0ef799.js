import{_ as t,X as c,Y as i,$ as a,a0 as e,Z as d,a3 as n,C as r}from"./framework-a91f7991.js";const o={},h=n(`<h2 id="创建一个项目" tabindex="-1"><a class="header-anchor" href="#创建一个项目" aria-hidden="true">#</a> 创建一个项目</h2><p>在尝试了单文件的快速开发后，我们就可以开始真正创建一个项目。</p><h3 id="vue-create" tabindex="-1"><a class="header-anchor" href="#vue-create" aria-hidden="true">#</a> vue create</h3><p>运行以下命令来创建一个新项目:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>vue create hello-world
</code></pre></div><h3 id="使用图形化界面" tabindex="-1"><a class="header-anchor" href="#使用图形化界面" aria-hidden="true">#</a> 使用图形化界面</h3><p>您也可以通过 <code>vue ui</code> 命令以图形化界面创建和管理项目:</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>vue ui
</code></pre></div><p>上述命令会打开一个浏览器窗口，并以图形化界面将您引导至项目创建的流程。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于新手，推荐先使用图形化界面</p></div><h2 id="预置命令" tabindex="-1"><a class="header-anchor" href="#预置命令" aria-hidden="true">#</a> 预置命令</h2><p>使用 <code>vue create</code> 创建的项目带有一系列预置指令。</p><h2 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目" aria-hidden="true">#</a> 初始化项目</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若日后项目编译出问题后一般能够通过重新执行此命令恢复正常。</p></div><h2 id="更新项目依赖" tabindex="-1"><a class="header-anchor" href="#更新项目依赖" aria-hidden="true">#</a> 更新项目依赖</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> update
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在拉取最新代码后发现 <code>package.json</code> 文件发生变动时使用，该命令会将所有依赖升级到 <code>package.json</code> 中指定的版本。</p></div><h2 id="启动开发环境" tabindex="-1"><a class="header-anchor" href="#启动开发环境" aria-hidden="true">#</a> 启动开发环境</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run serve
</code></pre></div>`,20),l={class:"hint-container tip"},p=a("p",{class:"hint-container-title"},"提示",-1),u=a("p",null,"该指令会创建一个开发环境。开发环境其实就是开发时提供的一个代码错误提示与页面展示窗口，终端会显示编译状态与错误、浏览器会显示文件编译后的效果。",-1),v=a("p",null,"开发环境启动后，vue-cli 会对项目文件进行实时编译，并搭载一个临时服务器加载编译后的网页，并监听文件改动执行实时编译。",-1),_={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},g=a("p",null,"在对项目的任何文件进行更改并保存后，vue-cli 会自动编译需要更新的文件，使得临时服务器的网页与编译器内的文件最终效果保持一致。",-1),b=a("p",null,"也就是说，在启动开发环境下，浏览器所展示的网页状态就是编译器中正在编辑的网页状态，在编译器做任何修改后改动会立即更新在网页中。",-1),f=a("p",null,[e("使用 "),a("code",null,"ctrl + c"),e(" 组合键并输入 "),a("code",null,"y"),e(" 按回车来终止开发环境。")],-1),x=n(`<h2 id="构建生产环境" tabindex="-1"><a class="header-anchor" href="#构建生产环境" aria-hidden="true">#</a> 构建生产环境</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run build
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>执行构建，将构建成功的网页文件输出至 <code>/dist</code> 目录</p></div><h2 id="执行文件提示和文件修复" tabindex="-1"><a class="header-anchor" href="#执行文件提示和文件修复" aria-hidden="true">#</a> 执行文件提示和文件修复</h2><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run lint
</code></pre></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>执行代码错误提示与修复功能，推荐使用 ESLint + @typescript-eslint/parser 检查。</p></div>`,6);function k(m,E){const s=r("ExternalLinkIcon");return c(),i("div",null,[h,a("div",l,[p,u,v,a("p",null,[e("此时可在浏览器通过 "),a("a",_,[e("http://localhost:8080"),d(s)]),e(" 直接访问网页。")]),g,b,f]),x])}const V=t(o,[["render",k],["__file","create.html.vue"]]);export{V as default};
