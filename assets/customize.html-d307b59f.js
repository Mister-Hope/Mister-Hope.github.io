import{_ as p,X as t,Y as e,$ as n,a0 as s,Z as o,a3 as c,C as l}from"./framework-a91f7991.js";const u={},i=c(`<p>看到类似 <code>__slots__</code> 这种形如 <code>__xxx__</code> 的变量或者函数名就要注意，这些在 Python 中是有特殊用途的。</p><p><code>__slots__</code> 我们已经知道怎么用了，<code>__len__()</code> 方法我们也知道是为了能让 class 作用于 <code>len()</code> 函数。</p><p>除此之外，Python 的 class 中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p><h2 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> <code>__str__</code></h2><p>我们先定义一个 Student 类，打印一个实例:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token builtin">object</span> at <span class="token number">0x109afb190</span><span class="token operator">&gt;</span>
</code></pre></div><p>打印出一堆 <code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p><p>怎么才能打印得好看呢？只需要定义好 <code>__str__()</code> 方法，返回一个好看的字符串就可以了:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> <span class="token string">&#39;Student object (name: %s)&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Student <span class="token builtin">object</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> Michael<span class="token punctuation">)</span>
</code></pre></div><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p><p>但是细心的朋友会发现直接敲变量不用 <code>print</code>，打印出来的实例还是不好看:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student <span class="token builtin">object</span> at <span class="token number">0x109afb310</span><span class="token operator">&gt;</span>
</code></pre></div><p>这是因为直接显示变量调用的不是 <code>__str__()</code>，而是 <code>__repr__()</code>，两者的区别是 <code>__str__()</code> 返回用户看到的字符串，而 <code>__repr__()</code> 返回程序开发者看到的字符串，也就是说，<code>__repr__()</code> 是为调试服务的。</p><p>解决办法是再定义一个 <code>__repr__()</code>。但是通常 <code>__str__()</code> 和 <code>__repr__()</code> 代码都是一样的，所以，有个偷懒的写法:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;Student object (name=%s)&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name
    __repr__ <span class="token operator">=</span> __str__
__iter__
</code></pre></div><p>如果一个类想被用于 <code>for ... in</code> 循环，类似 list 或 tuple 那样，就必须实现一个 <code>__iter__()</code> 方法，该方法返回一个迭代对象，然后，Python 的 for 循环就会不断调用该迭代对象的 <code>__next__()</code> 方法拿到循环的下一个值，直到遇到 <code>StopIteration</code> 错误时退出循环。</p><p>我们以斐波那契数列为例，写一个 <code>Fib</code> 类，可以作用于 for 循环:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment"># 初始化两个计数器a，b</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self <span class="token comment"># 实例本身就是迭代对象，故返回自己</span>

    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token comment"># 计算下一个值</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&gt;</span> <span class="token number">100000</span><span class="token punctuation">:</span> <span class="token comment"># 退出循环的条件</span>
            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token comment"># 返回下一个值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，试试把 <code>Fib</code> 实例作用于 for 循环:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">1</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">5</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">46368</span>
<span class="token number">75025</span>
__getitem__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Fib</code> 实例虽然能作用于 for 循环，看起来和 <code>list</code> 有点像，但是，把它当成 <code>list</code> 来使用还是不行，比如，取第 5 个元素:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;Fib&#39;</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support indexing
</code></pre></div><p>要表现得像 list 那样按照下标取出元素，需要实现 <code>__getitem__()</code> 方法:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
        <span class="token keyword">return</span> a
</code></pre></div><p>现在，就可以按下标访问数列的任意一项了:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token number">1</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token number">2</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token number">89</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>
<span class="token number">573147844013817084101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是 <code>list</code> 有个神奇的切片方法:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre></div><p>对于 Fib 却报错。原因是 <code>__getitem__()</code> 传入的参数可能是一个 <code>int</code>，也可能是一个切片对象 <code>slice</code>，所以要做判断:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># n是索引</span>
            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
            <span class="token keyword">return</span> a
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># n是切片</span>
            start <span class="token operator">=</span> n<span class="token punctuation">.</span>start
            stop <span class="token operator">=</span> n<span class="token punctuation">.</span>stop
            <span class="token keyword">if</span> start <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                start <span class="token operator">=</span> <span class="token number">0</span>
            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>
            L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> start<span class="token punctuation">:</span>
                    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
            <span class="token keyword">return</span> L
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在试试 <code>Fib</code> 的切片:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f <span class="token operator">=</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span>
</code></pre></div><p>但是没有对 step 参数作处理:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span>
</code></pre></div><p>也没有对负数作处理，所以，要正确实现一个 <code>__getitem__()</code> 还是有很多工作要做的。</p><p>此外，如果把对象看成 dict，<code>__getitem__()</code> 的参数也可能是一个可以作 <code>key</code> 的 <code>object</code>，例如 <code>str</code>。</p><p>与之对应的是 <code>__setitem__()</code> 方法，把对象视作 <code>list</code> 或 <code>dict</code> 来对集合赋值。最后，还有一个 <code>__delitem__()</code> 方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和 Python 自带的 <code>list</code>、<code>tuple</code>、<code>dict</code> 没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h2 id="getattr" tabindex="-1"><a class="header-anchor" href="#getattr" aria-hidden="true">#</a> <code>__getattr__</code></h2><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义 <code>Student</code> 类:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span>
</code></pre></div><p>调用 <code>name</code> 属性，没问题，但是，调用不存在的 <code>score</code> 属性，就有问题了:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
Michael
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
AttributeError<span class="token punctuation">:</span> <span class="token string">&#39;Student&#39;</span> <span class="token builtin">object</span> has no attribute <span class="token string">&#39;score&#39;</span>
</code></pre></div><p>错误信息很清楚地告诉我们，没有找到 <code>score</code> 这个 <code>attribute</code>。</p><p>要避免这个错误，除了可以加上一个 <code>score</code> 属性外，Python 还有另一个机制，那就是写一个 <code>__getattr__()</code> 方法，动态返回一个属性。修改如下:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Michael&#39;</span>

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">99</span>
</code></pre></div><p>当调用不存在的属性时，比如 <code>score</code>，Python 解释器会试图调用 <code>__getattr__(self, &#39;score&#39;)</code> 来尝试获得属性，这样，我们就有机会返回 <code>score</code> 的值:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>name
<span class="token string">&#39;Michael&#39;</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>score
<span class="token number">99</span>
</code></pre></div><p>返回函数也是完全可以的:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">25</span>
</code></pre></div><p>只是调用方式要变为:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">.</span>age<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">25</span>
</code></pre></div><p>注意，只有在没有找到属性的情况下，才调用 <code>__getattr__</code>，已有的属性，比如 <code>name</code>，不会在 <code>__getattr__</code> 中查找。</p><p>此外，注意到任意调用如 <code>s.abc</code> 都会返回 <code>None</code>，这是因为我们定义的 <code>__getattr__</code> 默认返回就是 <code>None</code>。要让 class 只响应特定的几个属性，我们就要按照约定，抛出 <code>AttributeError</code> 的错误:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">25</span>
        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">&#39;\\&#39;Student\\&#39; object has no attribute \\&#39;%s\\&#39;&#39;</span> <span class="token operator">%</span> attr<span class="token punctuation">)</span>
</code></pre></div><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p><p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p><p>举个例子:</p><p>现在很多网站都搞 REST API，比如新浪微博、豆瓣啥的，调用 API 的 URL 类似:</p><ul><li><code>http://api.server/user/friends</code></li><li><code>http://api.server/user/timeline/list</code></li></ul><p>如果要写 SDK，给每个 URL 对应的 API 都写一个方法，那得累死，而且，API 一旦改动，SDK 也要改。</p><p>利用完全动态的 <code>__getattr__</code>，我们可以写出一个链式调用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_path <span class="token operator">=</span> path

    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> Chain<span class="token punctuation">(</span><span class="token string">&#39;%s/%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_path

    __repr__ <span class="token operator">=</span> __str__
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试试:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status<span class="token punctuation">.</span>user<span class="token punctuation">.</span>timeline<span class="token punctuation">.</span><span class="token builtin">list</span>
<span class="token string">&#39;/status/user/timeline/list&#39;</span>
</code></pre></div><p>这样，无论 API 怎么变，SDK 都可以根据 URL 实现完全动态的调用，而且，不随 API 的增加而改变!</p><p>还有些 REST API 会把参数放到 URL 中，比如 GitHub 的 API:</p><div class="language-python" data-ext="py"><pre class="language-python"><code>GET <span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">:</span>user<span class="token operator">/</span>repos
</code></pre></div><p>调用时，需要把 <code>:user</code> 替换为实际用户名。如果我们能写出这样的链式调用:</p><div class="language-python" data-ext="py"><pre class="language-python"><code>Chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>users<span class="token punctuation">(</span><span class="token string">&#39;michael&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repos
</code></pre></div><p>就可以非常方便地调用 API 了。有兴趣的童鞋可以试试写出来。</p><h2 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> <code>__call__</code></h2><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用 <code>instance.method()</code> 来调用。能不能直接在实例本身上调用呢？在 Python 中，答案是肯定的。</p><p>任何类，只需要定义一个 <code>__call__()</code> 方法，就可以直接对实例进行调用。请看示例:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;My name is %s.&#39;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
</code></pre></div><p>调用方式如下:</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;Michael&#39;</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># self参数不要传入</span>
My name <span class="token keyword">is</span> Michael<span class="token punctuation">.</span>
</code></pre></div><p><code>__call__()</code> 还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以您完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p><p>如果您把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p><p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个 Callable 对象，比如函数和我们上面定义的带有 <code>__call__()</code> 的类实例:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">callable</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">callable</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>callable()</code> 函数，我们就可以判断一个对象是否是“可调用”对象。</p>`,82),k={class:"hint-container info"},r=n("p",{class:"hint-container-title"},"相关信息",-1),d={href:"http://docs.python.org/3/reference/datamodel.html#special-method-names",target:"_blank",rel:"noopener noreferrer"};function b(_,g){const a=l("ExternalLinkIcon");return t(),e("div",null,[i,n("div",k,[r,n("p",null,[s("更多可定制的方法，请参考 "),n("a",d,[s("Python 的官方文档"),o(a)]),s("。")])])])}const v=p(u,[["render",b],["__file","customize.html.vue"]]);export{v as default};
